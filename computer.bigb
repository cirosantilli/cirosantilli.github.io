= Computer
{wiki}

The artistic instrument that enables the ultimate <art>: coding, in particular of <computational physics>[physics simulations] and <formalization of mathematics>.

Much more useful than instruments used in inferior arts, such as pianos or paintbrushes.

Unlike other humans, computers are mindless slaves that do exactly what they are told to, except for https://www.youtube.com/watch?v=aNzTUdOHm9A[occasional cosmic ray bit flips]. Until they <artificial general intelligence>[take over the world that is].

\Video[https://www.youtube.com/watch?v=rTRzYjoZhIY]
{title=A <computer> is the equivalent of a bicycle for our minds by <steve jobs> (1980)}
{description=Likely an excerpt from an interview done for a documentary in 1980. TODO exact source.}

= How computers work?
{parent=computer}
{tag=essays-by-ciro-santilli}

= Computer abstraction layer
{synonym}

A computer is a highly layered system, and so you have to decide which layers you are the most interested in studying.

Although the layer are somewhat independent, they also sometimes interact, and when that happens it usually hurts your brain. E.g., if <compilers> were perfect, no one optimizing software would have to know anything about <microarchitecture>. But if you want to go hardcore enough, you might have to learn some lower layer.

It must also be said that like in any industry, certain layers are hidden in commercial secrecy mysteries making it harder to actually learn them. In computing, the lower level you go, the more <closed source> things tend to become.

But as you climb down into the abyss of low level hardcoreness, don't forget that <backward design>[making usefulness is more important than being hardcore]: <image xkcd 378 real programmers>.

First, the most important thing you should know about this subject: https://cirosantilli.com/linux-kernel-module-cheat/should-you-waste-your-life-with-systems-programming

Here's a summary from low-level to high-level:
* <semiconductor physical implementation> this level is of course the most closed, but it is fun to try and peek into it from any openings given by commercials and academia:
  * <photolithography>, and notably <photomask> design
* <register transfer level>
  * interactive <verilator> fun: https://stackoverflow.com/questions/38108243/is-it-possible-to-do-interactive-user-input-and-output-simulation-in-vhdl-or-ver/38174654#38174654[Is it possible to do interactive user input and output simulation in VHDL or Verilog?]
  * more importantly, and much harder/maybe impossible with <open source>, would be to try and set up a open source <standard cell library> and supporting software to obtain <power performance and area> estimates
    * https://www.quora.com/Are-there-good-open-source-standard-cell-libraries-to-learn-IC-synthesis-with-EDA-tools/answer/Ciro-Santilli[Are there good open source standard cell libraries to learn IC synthesis with EDA tools?] on <quora>
    * the most open source ones are some initiatives targeting FPGAs, e.g. https://symbiflow.github.io/[], http://www.clifford.at/icestorm/[]
    * <qflow> is an initiative targeting actual <integrated circuits>
* <microarchitecture>: a good way to play with this is to try and run some minimal userland examples on <gem5> userland simulation with logging, e.g. see on the <linux kernel module cheat>:
  * https://cirosantilli.com/linux-kernel-module-cheat/gem5-event-queue-derivo3cpu-syscall-emulation-freestanding-example-analysis
  This should be done at the same time as books/website/courses that explain the microarchitecture basics.

  This is the level of abstraction that <ciro santilli> finds the most interesting of the hardware stack. Learning it for actual <cpus> (which as of 2020 is only partially documented by vendos) could actually be useful in hardcore software optimization use cases.
* <instruction set architecture>: a good approach to learn this is to manually write some userland assembly with assertions as done in the <linux kernel module cheat> e.g. at:
  * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/add.S
  * https://cirosantilli.com/linux-kernel-module-cheat/x86-userland-assembly
  * learn a bit about calling conventions, e.g. by calling C standar library functions from assembly: 
    * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/aarch64/inline_asm/linux/asm_from_c.c
    * https://stackoverflow.com/questions/16255608/calling-c-functions-from-x86-assembly-language/56328708#56328708[Calling C functions from x86 assembly language]
  * you can also try and understand what some simple <c programming language> programs <compile> to. Things can get a bit hard though when `-O3` is used. Some cute examples:
    * https://stackoverflow.com/questions/310974/what-is-tail-call-optimization/55230417#55230417[What is tail call optimization?]
    * https://stackoverflow.com/questions/1345670/stack-smashing-detected/51897264#51897264[What is the "Stack smashing detected" error in GCC and how to solve it?]
    * https://stackoverflow.com/questions/745870/realistic-usage-of-the-c99-restrict-keyword/30827311#30827311[Realistic usage of the C99 'restrict' keyword?]
* <executable file format>, notably <executable and linkable format>. Particularly important is to understand the basics of:
  * address relocation:  https://stackoverflow.com/questions/3322911/what-do-linkers-do/33690144#33690144[How do linkers and address relocation work?]
  * position independent code: https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld/51308031#51308031[What is the -fPIE option for position-independent executables in GCC and ld?]
  * how to observe which symbols are present in object files, e.g.:
    * how C++ uses name mangling https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c/30526795#30526795[What is the effect of extern "C" in C++?]
    * how C++ template instantiation can help reduce link time and size: https://stackoverflow.com/questions/2351148/explicit-template-instantiation-when-is-it-used/59614755#59614755[Explicit template instantiation - when is it used?]
* <operating system>. There are two ways to approach this:
  * learn about the Linux kernel <linux kernel>. A good starting point is to learn about its main interfaces. This is well shown at <linux kernel module cheat>:
    * system calls
      * write some system calls in
        * pure assembly:
          * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/freestanding/linux/hello.S
          * https://stackoverflow.com/questions/174942/how-should-strace-be-used/55397255#55397255[How should strace be used?]
        * C GCC inline assembly:
          * https://stackoverflow.com/questions/9506353/how-to-invoke-a-system-call-via-syscall-or-sysenter-in-inline-assembly/54956854#54956854
          * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/inline_asm/freestanding/linux/hello.c
    * learn about kernel modules and their interfaces. Notably, learn about to demystify special files such `/dev/random` and so on:
      * https://stackoverflow.com/questions/22632713/how-to-write-a-simple-linux-device-driver/44640466#44640466
      * https://github.com/cirosantilli/linux-kernel-module-cheat/tree/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/kernel_modules
    * learn how to do a minimal Linux kernel disk image/boot to userland hello world: https://unix.stackexchange.com/questions/2692/what-is-the-smallest-possible-linux-implementation/203902#203902[What is the smallest possible Linux implementation?]
    * learn how to GDB <step debug the Linux kernel> itself. Once you know this, you will feel that "given enough patience, I could understand anything that I wanted about the kernel", and you can then proceed to not learn almost anything about it and carry on with your life
  * write your own (mini-) OS, or study a minimal educational OS, e.g. as in:
    * <x86 bare metal examples>
    * https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545
* <programming language>

\Image[https://web.archive.org/web/20191222121520if_/http://imgs.xkcd.com/comics/real_programmers.png]
{height=600}
{title=<xkcd> 378: Real Programmers.}
{source=https://xkcd.com/378/}

\Video[https://youtube.com/watch?v=_6D05gCWh_I]
{title=How low can you go video by <ciro santilli> (2017)}
{description=In this infamous video Ciro has summarized the computer hierarchy.}

= The lower level you go into a computer, the harder it is to observe things
{parent=how-computers-work}
{wiki}

This is a general principle of software/hardware design that Ciro feels holds wide applicability.

The most extreme case of this is of course the <integrated circuit> itself, in which it is essentially impossible (?) to observe the specific value of some indidual wire at some point.

Somewhat on the other extreme, we have high level programming languages running on top of an <operating system>: at this point, you can just <GDB step debug> your program, print the value of any variable/memory location, and fully understand anything that you want. Provided that you manage to easily reach that point of interest.

And for anything in between we have various intermediate levels of complication. The most notable perhaps being developing the operating system itself. At this level, you can't so easily step debug (although <step debug the Linux kernel>[techniques do exist]). For early boot or <bootloaders> for example, you might want to use <JTAG> for example on real hardware.

In parallel to this, there is also another very important pair of closely linked tradeoffs:
* the lower level at which something is implemented, the faster it runs
* <emulation> gives you observability back, at the cost of slower runtime

Emulation also has another potential downside: unless you are very careful at implementing things correctly, your model might not be representative of the real thing. Also, there may be important tradeoffs between how much the model looks like the real thing, and how fast it runs. For example, <QEMU>'s use of <binary translation> allows it to run orders of magnitude faster than <gem5>. However, you are unable to make any predictions about system performance with QEMU, since you are not modelling key elements like the cache or CPU pipeline.

<Instrumentation computer programming> is another technique that has can be considered to achieve greater observability.

= Instrumentation
{disambiguate=computer programming}
{parent=the-lower-level-you-go-into-a-computer-the-harder-it-is-to-observe-things}

= Instrumentation
{disambiguate=software}
{synonym}

Instrumentation basically means adding loggers/print statements to certain points of interest of your hardware/software.

Instrumentation tends to slow exectution down a bit, but way less than <emulation>.

The downside is that if the instrumentation does not provide you the data you need to debug, there's not much you can do, you will need to modify it, i.e. you don't get full visibility from instrumention.

This is unlike emulation that provides full observability.

= Computer form factor
{parent=computer}
{wiki}

= Distributed computing
{parent=computer-form-factor}
{wiki}

= Fog computing
{parent=distributed-computing}
{wiki}

Our definition of fog computing: a system that uses the computational resources of individuals who voluenteer their own devices, in which you give each of the volunteers part of a computational problem that you want to solve.

<Folding@home> and <SETI@home> are perfect example of that definition.

= Folding@home
{c}
{parent=fog-computing}
{wiki}

= SETI@home
{c}
{parent=fog-computing}
{wiki}

= Is fog computing more efficient than cloud computing?
{parent=fog-computing}
{wiki}

Advantages of fog: there is only one, reusing hardware that would be otherwise idle.

Disadvantages:
* in cloud, you can put your datacenter on the location with the cheapest possible power. On fog you can't.
* on fog there is some waste due to network communication.
* you will likely optimize code less well because you might be targeting a wide array of different types of hardware, so more power (and time) wastage. Furthermore, some of the hardware used will not not be optimal for the task, e.g. <CPU> instead of <GPU>.

All of this makes <Ciro Santilli> doubtul if it wouldn't be more efficient for volunteers simply to donate money rather than inneficient power usage.

Bibliography:
* https://greenfoldingathome.com/2018/05/28/is-foldinghome-a-waste-of-electricity/[]: useless article, does not compare to centrlize, asks if folding the proteins is worth the power usage...

= Supercomputer
{parent=computer-form-factor}
{wiki}

Some good insights on the earlier history of the industry at: <the supermen the story of seymour cray by charles j murray 1997>.

= Intel supercomputer market share
{c}
{parent=supercomputer}
{tag=intel}

\Image[https://web.archive.org/web/20210908201649im_/https://3s81si1s5ygj3mzby34dq6qf-wpengine.netdna-ssl.com/wp-content/uploads/2020/06/top500-june-2020-chip-technology.jpg]
{title=<intel> <supercomputer> market share from 1993 to 2020}
{description=This graph is shocking, they just took over the entire market! Some good pre-Intel context at <the supermen the story of seymour cray by charles j murray 1997>, e.g. in those earlier days, custom architectures like <cray>'s and many others dominated.}
{source=https://www.nextplatform.com/2020/06/22/arm-and-japan-get-their-day-in-the-hpc-sun/}

= Laptop
{parent=computer-form-factor}
{wiki}

= Mobile phone
{parent=computer-form-factor}
{wiki}

= Cell phone
{synonym}

= Mobile app
{parent=mobile-phone}
{wiki}

= App
{synonym}

\Include[computer-hardware]{parent=computer}

= Computer network
{parent=computer}
{wiki}

= Internet
{c}
{parent=computer-network}
{wiki}

= Online
{synonym}

= Internet protocol suite
{c}
{parent=internet}
{wiki}

= Internet Protocol
{c}
{parent=internet-protocol-suite}
{title2=IP}
{wiki}

= IP address
{c}
{parent=internet-protocol}

= IP
{c}
{synonym}

= Transmission Control Protocol
{c}
{parent=internet-protocol-suite}
{title2=TCP}
{wiki}

= Domain Name System
{c}
{parent=internet-protocol-suite}
{title2=DNS}
{wiki}

= DNS
{synonym}

= Domain name
{parent=domain-name-system}
{title2=DNS}
{wiki}

= Server
{disambiguate=computing}
{parent=computer-network}
{wiki}

= Server
{synonym}

= Local server
{parent=server-computing}

Server run on the current machine. That's how all <websites> are developed and born!

= Client
{disambiguate=computing}
{parent=server-computing}
{wiki}

\Include[computer-science]{parent=computer}

= Cybercrime
{parent=computer}
{wiki}

= Cyber crime
{synonym}

= Silk Road
{disambiguate=marketplace}
{c}
{parent=cybercrime}
{wiki}

<ciro santilli> has become slightly obsessed with this story, and the main mastermind <ross ulbricht>.

\Image[https://web.archive.org/web/20190629084608if_/https://cdn.arstechnica.net/wp-content/uploads/2015/01/GX-201C-640x853.png]
{title=Ross Ulbricht's open laptop shortly after his arrest at the Francisco Public Library.}
{description=He was running some GNOME based distro, could be <ubuntu> from that photo, and likely is given that Ross once recommended Ubuntu to his flatmate.}
{source=https://arstechnica.com/tech-policy/2015/01/the-incredibly-simple-story-of-how-the-govt-googled-ross-ulbricht}

The best article available so far is: https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind (https://web.archive.org/web/20191008142214/https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind[archive]) which summarizes what one of the investigators said in a 2019 French computer security conference.

The key living posts are:
* https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php (https://web.archive.org/web/20191121133952/https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php[archive]) which was originally asked under the real name, and then the username was changed to "Frosty", which matches one of the server's logins after the laptop was captured
* altoid early Silk Road mention: https://bitcointalk.org/?topic=175.70;wap2 (https://web.archive.org/web/20190628133852/https://bitcointalk.org/?topic=175.70;wap2[archive])

The big question is of course how libertarian free market ideologically motivated the website was, and how purely criminal greed it was.

The magnitude of the early <operational security> mistakes does make Ciro think that Ross did it "because he could" and https://www.urbandictionary.com/define.php?term=i%20did%20it%20for%20the%20lulz["for the lolz"] in a real world <breaking bad> way.

The entry in Ross' diary does <ciro santilli s selfish desires>[resonate a lot] with Ciro and any entrepreneur, full diary at: https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/ (https://web.archive.org/web/20190613011454/https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/[archive]).

\Q[
\[i\]n 2011," \[I believe I will be\] "creating a year of prosperity and power beyond what I have ever experienced before,

Silk Road is going to become a phenomenon and at least one person will tell me about it, unknowing that I was its creator."
]

Having this kind of feeling, is the greatest thing any human can have, and what motivates all great things.

Capitalizing in <illegal> things though is a cheat, big things take longer than a few years to reach, but reaching them is that much more satisfying as well.

Other interesting quotes:
\Q[I hated working for someone else and trading my time for money with no investment in myself.]
which Ciro also feels, see <don t be a pussy>, and:
\Q[Everyone knows I am working on a bitcoin exchange. I always thought honesty was the best policy and now I didn't know what to do. I should have just told everyone I am a freelance programmer or something, but I had to tell half truths. It felt wrong to lie completely so I tried to tell the truth without revealing the bad part, but now I am in a jam. Everyone knows too much. Dammit.]

Also very worth reading is the San Francisco flat mate account: https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord (https://web.archive.org/web/20191201090353/https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord[archive]).

The murder for hire allegations are also interesting: https://mashable.com/2013/10/03/silk-road-hits[], he paid 80k dollars to undercover DEA agents!

Except for the fact that Ross was an 80 million <dollar> <drug lord>, those accounts sound exactly like what you would expect from any other nerdy startup founder! The:
* "just do it" strategy effectively going to a minimal viable product (manual transaction management!), while making many mistakes along the way, including hiring mistakes and successes when scaling is needed
* the hardship of self bootstrapping your own social network (here with some kilos of mushrooms)
* the variety of periods, from relatively calm, to hair pulling stress during big changes

It is also amusing to see very concretely the obvious fact that the FBI can get a https://en.wikipedia.org/wiki/Subpoena[subpoena] for all accounts you ever had, e.g. they knew his <laptop> model from <amazon> and brought a corresponding power cable to the arrest! If you are going to be a cyber criminal, don't use your real name, ever!

Should justice be blind? Maybe. But it does hurt for mere non-blind men to see it sometimes. Especially when <drug liberalization> is involved.

= Ross Ulbricht
{c}
{parent=silk-road-marketplace}
{wiki}

= Domain-specific language
{parent=computer}
{title2=DSL}
{wiki}

<Evil>. Just use <python> instead for <software>, and a well known <data file format> for data, please.

= E-book
{parent=computer}
{wiki}

= E-book file format
{parent=e-book}

= ASCII
{c}
{parent=e-book-file-format}
{wiki}

= EPUB
{c}
{parent=e-book-file-format}
{wiki}

This is a good thing. It basically contains an entire <website>, with <html> and assets inside a single <zip>, and a little bit of metadata.

It is incomprehensible why <browsers> don't just implement it as they already have all the web part, and also <zip> stuff:
* https://www.quora.com/What-is-the-reason-that-browsers-cannot-open-epub-files-without-extensions on <quora>

The situation is so sad. <ubuntu> 21.04 doesn't come with a reader installed by default:
* https://askubuntu.com/questions/14378/what-software-can-i-use-to-view-epub-documents

= PDF
{c}
{parent=e-book-file-format}
{wiki}

= E-book viewer
{parent=e-book}

= Calibre
{disambiguate=software}
{c}
{parent=e-book-viewer}
{wiki}

Sometimes <ciro santilli> says half jokingly that <user interface> does not matter.

This software circa 2010-2020 makes that joke not be funny.

How can a UI feel so clunky!

The most aggravating thing is that it is not immediately obvious why it feels so bad.

= Evince
{parent=e-book-viewer}
{wiki}

= Okular
{parent=e-book-viewer}
{wiki}

This is generally good, especially compared to how crappy Evince, the default <ubuntu> one, has been around 2014-2020.

= File format
{parent=computer}
{wiki}

= Human-readable medium
{parent=file-format}
{wiki}

= Human-readable format
{synonym}

= Plaintext file
{synonym}
{title2}

= Human-readable
{synonym}

= Binary data
{parent=human-readable-medium}
{wiki}

The opposite of a <human readable format>.

= Binary large object
{parent=binary-data}
{wiki}

= BLOB
{c}
{synonym}

Less evil are BLOBs that come from <reproducible builds>.

= Binary-to-text encoding
{parent=binary-data}
{wiki}

= Base58
{c}
{parent=binary-to-text-encoding}

https://en.bitcoin.it/wiki/Base58Check_encoding

Invented for <bitcoin>.

= Base64
{c}
{parent=binary-to-text-encoding}
{wiki}

= yEnc
{c}
{parent=binary-to-text-encoding}
{wiki}

= Archive file
{parent=file-format}
{wiki}

= ZIP
{disambiguate=file format}
{c}
{parent=archive-file}
{wiki}

= ZIP
{c}
{synonym}

= Audio file format
{parent=file-format}
{wiki}

= Audio editor
{parent=audio-file-format}
{wiki}

= Audacity
{disambiguate=audio editor}
{parent=audio-editor}
{wiki}

= Audacity profile-based background noise removal
{parent=audacity-audio-editor}

You select a sample noise-only area, and it remove noise from the entire video for you:
* https://www.youtube.com/watch?v=AeOjtMOq3EU
* https://www.youtube.com/watch?v=3nMkMn4--5w

= MIDI
{c}
{parent=audio-file-format}
{wiki}

In simple terms, represents keystrokes of a piano, but it can likely also represent other effects (TODO confirm: bend, vibrato, slides, attack strength)

Can contain multiple parallel tracks as seen from the <wikipedia> example: https://en.wikipedia.org/wiki/File:MIDI_sample.mid

You can see what it contains well with <gui music editor>.

MIDI is fun. It is a basic high level representation of most instrumental music, including beats.

To actually listen to MIDI, you need a <software synthesizer>, which knows what sound to make for each note. One way to specify such instruments is the <soundfont> file format.

Convert MIDI to more common standalone formats:
* https://stackoverflow.com/questions/16295459/convert-midi-to-mp3/65207296#65207296
* https://softwarerecs.stackexchange.com/questions/10915/automatically-turn-midi-files-into-wav-or-mp3/76955#76955

= SoundFont
{c}
{parent=midi}
{wiki}

Contains instructions on how to synthesize MIDI.

Extension: sf2.

Can be imported for example by:
* <vmpk>
* <csound> with `sfload`: http://www.csounds.com/manual/html/sfload.html

= vmpk
{c}
{parent=midi}

https://vmpk.sourceforge.io/

Opens a virtual <midi> piano <gui>. It just works on <ubuntu> 20.04: https://askubuntu.com/questions/34391/virtual-midi-piano-keyboard-setup/1298026#1298026

VMPK is a virtual device that replicates what you would get by connecting a physical MIDI keyboard to your computer. It is not a <software synthesizer> on its own. But it does connect to a working synthesizer by default (Sonivox EAS) which makes it produce sounds out-of-the box.

TODO: then I messed with my sound settings, and then it stopped working by default on the default "MIDI Connection" > "MIDI Out Driver" > "Network". But it still works on "SonivoxEAS".

A <hello world> of actually connecting it to a specific software synthesizer manually on <advanced linux sound architecture> with `aconnect` can be found at: https://askubuntu.com/questions/34391/virtual-midi-piano-keyboard-setup/1298026#1298026

Save to a <midi> file: https://askubuntu.com/questions/709673/save-as-midi-when-playing-from-vmpk-qsynth/1298231#1298231

Reasonable default key mappings to keyboard covering 2 octaves.

3 multiple simultaneous keys did not work (tested "ZQI"). This might just be a limitation of <ciro santilli s hardware/lenovo thinkpad p51 2017>[my keyboard] however.

TODO how to save to a `.mid` file? https://askubuntu.com/questions/709673/save-as-midi-when-playing-from-vmpk-qsynth

<sourceforge>.

= Data file format
{parent=file-format}
{wiki=Data_file}

= JSON
{c}
{parent=data-file-format}
{wiki}

= JSON trailing comma
{parent=json}

https://stackoverflow.com/questions/201782/can-you-use-a-trailing-comma-in-a-json-object

The fact that you cannot have trailing commans in lists or dicts as in `3,` at:
``
{
  "asdf": [
    1,
    2,
    3,
  ]
}
``
is one of the most infuriating design choices of all time!!!

= Hierarchical Data Format
{c}
{parent=data-file-format}
{title2=HDF}
{wiki}

= XML
{c}
{parent=data-file-format}
{tag=markup-language}
{title2=Extensible Markup Language}
{wiki}

Do you know what is worse than XML? <html>[Pseudo XML]: https://stackoverflow.com/questions/5558502/is-html5-valid-xml/39560454#39560454

= Standard Generalized Markup Language
{c}
{parent=xml}
{wiki}

= SGML
{c}
{synonym}
{title2}

<xml> predecessor.

= IBM Generalized Markup Language
{c}
{parent=standard-generalized-markup-language}
{wiki}

<sgml> predecessor.

= XPath
{c}
{parent=xml}
{wiki}

XPath kind of died with the rise of <css> selectors around the beginnning of the 2010's. But that is a shame. XPath is a good standard, and was generally more powerful than CSS selectors for many many years.

= YAML
{c}
{parent=data-file-format}
{wiki}

= Image file format
{parent=file-format}
{wiki=Image_file_formats}

= Raster graphics
{parent=image-file-format}
{wiki}

Represents image <pixel> by pixel, rather than by mathematical primitives such as done in <vector graphics>:

= Pixel
{parent=raster-graphics}
{wiki}

= Vector graphics
{parent=image-file-format}
{wiki}

Smaller files, scalable image size, and editability. Why would you use anything else for programmatically generated images?!?!

= Scalable Vector Graphics
{parent=vector-graphics}
{wiki}

= SVG
{c}
{synonym}
{title2}

<Companies> have been really slow to support SVG features in their browsers, and that is very saddening: https://medium.com/@michaelmangial1/introduction-to-scalable-vector-graphics-6450c03e8d2e

You can't drop SVG support for `canvas` until there's a way to run untrusted <javascript> on the browser!

<svg> does have some compatibility annoyances, notably <svg fonts>. But we should as a society work to standardize and implement a fix those, the benefits of SVG are just too great!

Examples:
* \a[svg/svg.svg] a minimal somewhat sane SVG:
  * if the `width` and `height` properties were not given, you get the default 300x150, which seems to be set in the SVG standard:
    * https://stackoverflow.com/questions/40156710/why-does-this-svg-image-have-a-height-of-150px
    * https://css-tricks.com/scale-svg
* how to add na SVG image to a <html> file:
  * \a[svg/svg.html]: external image. The included file is \a[svg/svg.svg].
  * \a[svg/inline.html]: inline.
* \a[svg/billion-laughs.svg]
* \a[svg/html.svg]
* \a[svg/triangle.svg]
* \a[svg/viewBox.svg]: this attribute allows you to control the default SVG `svg width=` and `height=` while keeping the coordinates of the drawing untouched. If the `viewBox` aspect ratio differs from the width/height ratio, you likely want to play with `preserveAspectRatio`, otherwise you would get white spaces by default on the generated image
* <css> with SVG:
  * \a[svg/style.svg]: inline CSS
  * \a[svg/style-external.svg]: external CSS with: `<?xml-stylesheet type="text/css" href="svg.css" ?>`, see also: https://stackoverflow.com/questions/18434094/how-to-style-svg-with-external-css
    * \a[svg/subdir/style-external.html]: is the relative CSS relative to the HTML or to the SVG? Answer: to the SVG... OMG. So how to make it work reliably?
  * \a[svg/current-color.html] and \a[svg/current-color.svg]: illustrates `fill="currentColor"`. Only works for inline SVG however... See also: https://stackoverflow.com/questions/13000682/how-do-i-have-an-svg-image-inherit-colors-from-the-html-document/13002311
* <javascript> with SVG:
  * \a[svg/script.svg]
  * \a[svg/external-js.svg]
* \a[svg/defs.html] hows how `defs` works
  * \a[svg/defs-external.html] tries to include external `defs` from \a[svg/defs.svg], but that fails like everything else related to external SVGs

= SVG tutorial
{c}
{parent=scalable-vector-graphics}

= SVG background color
{c}
{parent=svg-tutorial}

This is a pain point as of <svg 1 1>...

Examples at \a[svg/background.html] which answers from https://stackoverflow.com/questions/11293026/default-background-color-of-svg-root-element/11293812[]:
* \a[svg/background-rect.svg]
* \a[svg/background-viewport-fill.svg]: was part of <svg 1 2>, but that whole standard got dropped. Not implemented neither in <chromium web browser> 85 nor <firefox> 93 as of 2021.

This pain reflects directly on Inkscape: <set svg background color in inkscape>.

= SVG fonts
{c}
{parent=svg-tutorial}

The major problem with SVG is text <computer fonts>. If you make an image with text that depends on one <computer font> and it is not present in the viewer's machine, it will use some other font, which may overlap with other elements of the image. Some libraries <matplotlib> solve this https://stackoverflow.com/questions/34387893/output-matplotlib-figure-to-svg-with-text-as-text-not-curves[by writing characters as curves], but this produces large files and unsearchable text. The inability of different computer platforms to standardize fonts that must always be present is a major issue.

= Join two SVG side-by-side from the command line
{parent=scalable-vector-graphics}

TODO:
* https://stackoverflow.com/questions/9612434/how-to-concatenate-svg-files-lengthwise-from-linux-command-line
* https://graphicdesign.stackexchange.com/questions/90844/joining-together-multiple-svg-images
* https://graphicdesign.stackexchange.com/questions/137096/is-there-a-way-to-stack-two-svgs-on-top-of-each-other

= SVG version
{c}
{parent=scalable-vector-graphics}

= SVG 1.0
{c}
{parent=svg-version}

= SVG 1.1
{c}
{parent=svg-version}

= SVG 1.2
{c}
{parent=svg-version}

Dropped in favor of <svg 2>.

= SVG 2
{c}
{parent=svg-version}

= List of image file formats
{parent=image-file-format}

= JPEG
{c}
{parent=list-of-image-file-formats}
{wiki}

= Portable Network Graphics
{parent=list-of-image-file-formats}
{wiki}

= PNG
{c}
{synonym}
{title2}

= libpng
{c}
{parent=portable-network-graphics}

<png> reference implementation. Ahh, if feels good to have a dominating open source reference implementation.

Demo of using it by <ciro santilli>: https://stackoverflow.com/questions/1362945/how-to-decode-a-png-image-to-raw-bytes-from-c-code-with-libpng/36399711#36399711

\Image[https://i.stack.imgur.com/rfdHr.png]

\Image[https://i.stack.imgur.com/IWBSj.png]

= Image editor
{parent=image-file-format}

= GIMP
{c}
{parent=image-editor}
{wiki}

It's not super easy to use at first.

And it sometimes says that the basic drawing thing you want to do is off the project's scope.

But as you learn more about it and further generalize the concepts, there are often reasonable reasons for those design choices.

And the UI looks good :-)

Examples:
* https://superuser.com/questions/167873/how-do-i-draw-a-box-in-gimp you need to go on a top menu to draw a rectangle

Some answers by <ciro santilli>:
* https://graphicdesign.stackexchange.com/questions/83446/gimp-how-to-combine-two-images-side-by-side/145543#145543

= Inkscape
{c}
{parent=image-editor}
{wiki}

Inkscape is a a good software for editing/creating <svg> files.

Its functionality is fundamental for as a <software for drawing geometry diagrams>, as it is a good middle ground between algorithmic generation, and <raster graphics>.

At 1.0.2, its <ui> is a bit terrible:
* the way the menus open on the right with title below the window...
* several defaults are atrocious, e.g. export drawing rather than page

And it crashes from time to time on <ubuntu> 21.04. And it has some glaring bugs, e.g.:
* https://gitlab.com/inkscape/inbox/-/issues/5794

But still, it is a very good initiative.

What would be really amazing is if they had constraints: https://gitlab.com/inkscape/inbox/-/issues/1465 like proper <cad> software, it would make it possible to not have to redo entire diagrams when you want to change a small part of them.

= Rotate object around a point in Inkscape
{parent=inkscape}

There's a tiny little crosshair that you can drag around to set the center of rotation.

And there's a button to make that crosshair snap: https://inkscape.org/forums/questions/can-a-pivotingtransfrom-crosshair-be-moved-and-made-to-snap-to-a-node-or-a-grid-point/#c14432

= Set SVG background color in Inkscape
{parent=inkscape}

This is related to the underlying SVG pain point of <svg background color>:
* https://gitlab.com/inkscape/inkscape/-/issues/531
* https://graphicdesign.stackexchange.com/questions/74906/in-inkscape-how-do-i-add-a-white-background/144952#144952

For <png> export:
* https://superuser.com/questions/249860/how-can-i-change-inkscapes-default-export-background-color-from-yellow-to-white

= Video file format
{parent=file-format}
{wiki=Video_file_formats}

= Video codec
{parent=video-file-format}
{wiki}

= Codec acceleration
{parent=video-codec}
{wiki}

= Video editing software
{parent=video-file-format}
{wiki}

= Kdenlive
{c}
{parent=video-editing-software}
{wiki}

Preview has no sound on <ubuntu> 20.10.

Sound worked on Ubuntu 21.04 though, but it then soon crashed with:

``
 = = SET EFFECT PARAM:  "rect"  =  0=1188 0 732 242
MUTEX LOCK!!!!!!!!!!!! slotactivateeffect:  1
// // // RESULTING REQUIRED SCENE:  1
Object 0x557293592da0 destroyed while one of its QML signal handlers is in progress.
Most likely the object was deleted synchronously (use QObject::deleteLater() instead), or the application is running a nested event loop.
This behavior is NOT supported!
qrc:/qml/EffectToolBar.qml:80: function() { [native code] }
Killed
``
amazing.

= ShotCut
{c}
{parent=video-editing-software}
{wiki}

Worked on <ubuntu> 20.10.

The UI is a bit too buggy to bear.

How to unsplit, can't find on shotcut 21.05.01: https://forum.shotcut.org/t/is-it-possible-to-unsplit/1466/2

Background noise reduction: couldn't easily find out how, especially with automatic profile detected based on a selected region as mentioned at <audacity profile based background noise removal>:
* https://forum.shotcut.org/t/how-to-apply-filter-reduction-noise-on-audio/12678/2
* https://forum.shotcut.org/t/noise-reduction-filter-request/5348/6

= OpenShot
{c}
{parent=video-editing-software}
{wiki}

<ubuntu> 20.10 crash...:
``
  exceptions:ERROR Unhandled Exception
Traceback (most recent call last):
  File "/usr/bin/openshot-qt", line 11, in <module>
    load_entry_point('openshot-qt==2.5.1', 'gui_scripts', 'openshot-qt')()
  File "/usr/lib/python3/dist-packages/openshot_qt/launch.py", line 97, in main
    app = OpenShotApp(argv)
  File "/usr/lib/python3/dist-packages/openshot_qt/classes/app.py", line 218, in __init__
    from windows.main_window import MainWindow
  File "/usr/lib/python3/dist-packages/openshot_qt/windows/main_window.py", line 45, in <module>
    from windows.views.timeline_webview import TimelineWebView
  File "/usr/lib/python3/dist-packages/openshot_qt/windows/views/timeline_webview.py", line 42, in <module>
    from PyQt5.QtWebKitWidgets import QWebView
ImportError: /usr/lib/x86_64-linux-gnu/libQt5Quick.so.5: undefined symbol: _ZN4QRhi10newSamplerEN11QRhiSampler6FilterES1_S1_NS0_11AddressModeES2_, version Qt_5_PRIVATE_API
``

= Subtitle
{parent=video-file-format}

= How to hardcode subtitle into a video with FFmpeg?
{parent=subtitle}

* https://superuser.com/questions/869248/hardcoding-subs-with-ffmpeg
* https://askubuntu.com/questions/485100/how-may-i-burn-srt-subtitles-to-video-with-avconv

On <ubuntu> 20.10, just:
``
ffmpeg -i input.mp4 -vf "subtitles=subtitle.srt" output.mp4
``

To change font size: https://stackoverflow.com/questions/21363334/how-to-add-font-size-in-subtitles-in-ffmpeg-video-filter
``
ffmpeg -i input.mp4 -vf "subtitles=subtitle.srt:force_style='Fontsize=64'" output.mp4
``
The default appears to be 24, so just multiply that by whatever seems like a reasonable factor.

= Subtitle file format
{parent=subtitle}

= Subtitle editor
{parent=subtitle-file-format}

= Subtitle Edit
{c}
{parent=subtitle-editor}

Written in <c sharp>.

= Aegisub
{c}
{parent=subtitle-editor}

https://github.com/Aegisub/Aegisub

This worked well on 3.2.2 <ubuntu> 20.10. Recommended.

= Gaupol
{c}
{parent=subtitle-editor}

https://github.com/otsaloma/gaupol

Good shortcuts and user experience.

No waveform viewer: https://github.com/otsaloma/gaupol/issues/49 so unusable.

= kitone/subtitleeditor
{parent=subtitle-editor}

https://github.com/SubtitleEdit/subtitleedit

Not to be confused with <subtitle edit>.

As of 0.54.0 this feels featureful, but extremely buggy or lacking UI obvious enhancements that would be simple to implement, and offer huge value:
* fundamental not defined out of box, e.g. Tiny forward/backwards. You can define them yourself, but they should be provided.
* https://github.com/SubtitleEdit/subtitleedit/issues/4976 can't export <subrip>?
* can't interact with video on waveform?

It is hard to understand how that project reached this weird featureful but crappy state. Feels like they just gave push permission to a bunch of random people.

= List of subtitle file formats
{parent=video-file-format}

= SubRip
{c}
{parent=list-of-subtitle-file-formats}
{title2=.srt}
{wiki}

= Information theory
{parent=computer}
{wiki}

= Noisy-channel coding theorem
{parent=information-theory}
{title2=Shannon's theorem}
{wiki}

Setting: you are sending bits through a communication channel, each bit has a random probability of getting flipped, and so you use some error correction code to achieve some minimal error, at the expense of longer messages.

This theorem sets an upper bound on how efficient you can be in your encoding, for any encoding.

The next big question, which the theorem does not cover is how to construct codes that reach or approach the limit. Important such codes include:
* <turbo code>
* <low density parity check code>

But besides this, there is also the practical consideration of if you can encode/decode fast enough to keep up with the coded bandwidth given your hardware capabilities.

https://news.mit.edu/2010/gallager-codes-0121 explains how turbo codes were first reached without a very good mathematical proof behind them, but were still revolutionary in experimental performance, e.g. turbo codes were used in 3G/4G.

But this motivated researchers to find other such algorithms that they would be able to prove things about, and so they rediscovered the much earlier <low density parity check code>, which had been published in the 60's but was forgotten, partially because it was computationally expensive.

= Turbo code
{parent=noisy-channel-coding-theorem}
{wiki}

TODO how close does it get to Shannon's limit?

= Low-density parity-check code
{parent=noisy-channel-coding-theorem}
{title2=LDPC}
{wiki}

= Signal-to-noise ratio
{parent=information-theory}
{wiki}

= Signal-to-noise
{synonym}

= Markup language
{parent=computer}
{wiki}

= Lightweight markup language
{parent=markup-language}
{wiki}

= List of markup languages
{parent=markup-language}

= AsciiDoc
{c}
{parent=list-of-markup-languages}
{tag=lightweight-markup-language}
{wiki}

= AsciiDoctor
{c}
{parent=asciidoc}
{wiki}

= LaTeX
{c}
{parent=list-of-markup-languages}
{wiki}

Revolutionary for its time, and a big part of <ourbigbook com/motivation>[Ciro's Enlightenment].

But too insane, and did not https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520[keep up with internet age], and so Ciro wants to kill it now.

= LaTeX to HTML
{c}
{parent=latex}

* full document: https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520
* just the formulas: https://tex.stackexchange.com/questions/23804/how-to-incorporate-tex-mathematics-into-a-website/646504#646504

= KaTeX
{c}
{parent=latex-to-html}

https://github.com/KaTeX/KaTeX

Default mathematics typesetting used in <ourbigbook markup>.

Key issues:
* https://github.com/KaTeX/KaTeX/issues/2228 `newcommand` did not support optional arguments

= Softcover
{disambiguate=LaTeX}
{parent=latex-to-html}

https://github.com/softcover/softcover

LaTeX subset that output nicely to HTML.

Too insane though due to LaTeX roots, better just move to newer HTML-first markups like <ourbigbook markup> or <markdown>.

= OurBigBook Markup
{c}
{parent=list-of-markup-languages}
{tag=lightweight-markup-language}
{tag=personal-knowledge-base}
{title2=previously Cirodown}

The <markup language> of <ourbigbook com>.

Also used on <ciro santilli s website> as a <static website> via the <ourbigbook cli>.

The one <markup language> to rule them all?

Documentation at: https://docs.ourbigbook.com[].

= OurBigBook CLI
{c}
{parent=ourbigbook-markup}

Official <Command line interface> to convert a directory of <ourbigbook markup> files into a <static website>. See also: https://cirosantilli.com/ourbigbook/ourbigbook-cli

= OurBigBook Library
{c}
{parent=ourbigbook-markup}

Base <javascript> library that implements the <ourbigbook markup>. Use by both:
* <ourbigbook cli>
* <ourbigbook web>

= OurBigBook Web
{c}
{parent=ourbigbook-markup}

The website system that runs <ourbigbook com>. Relies on the <ourbigbook library>. See also: https://cirosantilli.com/ourbigbook/ourbigbook-web

= MathBook XML
{c}
{parent=list-of-markup-languages}

https://github.com/rbeezer/mathbook

<xml>, ain't nobody ever going to write that manually.

= Markdown
{parent=list-of-markup-languages}
{tag=lightweight-markup-language}
{wiki}

= Pandoc
{parent=markdown}
{wiki}

This is good software.

If it only it were written in <javascript> instead of Haskell (!?), then Ciro might have used it as the basis for <ourbigbook markup>.

= karlcow/markdown-testsuite
{parent=markdown}

https://github.com/karlcow/markdown-testsuite

<ciro santilli> was contributing to this, when <commonmark> left private mode and killed it, thus wasting many hours of Ciro's time.

See also: <ciro santilli s minor projects>.

= CommonMark
{parent=markdown}

https://commonmark.org/

CommonMark is a good project. But its initial release method was not very nice, they first developed everything behind closed doors with the big adopters like <github> and <stack overflow>, and only later released the thing read, thus wasting the time of people who were working on alternative in the meanwhile, e.g. https://github.com/karlcow/markdown-testsuite which Ciro contributed to: <ciro santilli s minor projects>.

= markdownlint/markdownlint
{parent=markdown}

https://github.com/markdownlint/markdownlint

= Machine learning
{parent=computer}
{wiki}

= Machine learn
{synonym}

The main reason <ciro santilli> never touched it is that it feels that every public data set has already been fully mined or has already had the most interesting algorithms developed for it, so you can't do much outside of big companies.

This is why Ciro started <ciro s 2d reinforcement learning games> to generate synthetic data and thus reduce the cost of data.

The other reason is that it is ugly.

\Include[artificial-intelligence]{parent=machine-learning}

= Deepfake
{parent=machine-learning}
{wiki}

= Deepfakes
{synonym}

= Natural language processing
{parent=machine-learning}
{tag=ai-complete}
{wiki}

An impossible <ai complete> dream.

It is impossible to understand speech, and take meaningful actions from it, if you don't understand what is being talked about.

And without doubt, "understanding what is being talked about" comes down to understanding (efficiently representing) the geometry of the 3D world with a time component.

Not from hearing sounds alone.

= Recommender system
{parent=machine-learning}
{wiki}

* https://analyticsindiamag.com/5-open-source-recommender-systems-you-should-try-for-your-next-project/ 5 Open-Source Recommender Systems You Should Try For Your Next Project (2019)

= Parallel computing
{parent=computer}
{wiki}

= Memory semantics
{parent=parallel-computing}
{wiki}

These are the rules which specify what different concurrent read/write memory accesses from different threads/processes can or cannot see.

Notable such set of rules include:
* <c plus plus memory model>. These are also reflected on the semantics of memory of the corresponding <instruction set architecture>
* <sql transaction isolation level>

= C++ memory model
{c}
{parent=memory-semantics}

https://stackoverflow.com/questions/6319146/c11-introduced-a-standardized-memory-model-what-does-it-mean-and-how-is-it-g

= Read-modify-write
{parent=parallel-computing}
{wiki=Read–modify–write}

That's what usually fucks up parallel programs.

= Thread
{disambiguate=computing}
{parent=parallel-computing}
{wiki}

= Thread
{synonym}

= Quantum information
{parent=computer}
{wiki}

\Include[quantum-computing]{parent=quantum-information}

= Quantum key distribution
{parent=quantum-information}
{tag=cryptography}
{wiki}

= QKD
{c}
{synonym}
{title2}

Man-in-the-middle attack

https://quantumcomputing.stackexchange.com/questions/142/advantage-of-quantum-key-distribution-over-post-quantum-cryptography/25727#25727 Advantage of quantum key distribution over post-quantum cryptography has <ciro santilli>'s comparison to classical encryption.

<bb84> is a good first algorithm to look into.

Long story short:
* QKD allows you to generate shared keys without <public key cryptography>. You can then use thses shared keys
* QKD requires authentication on a classical channel, exactly like a classical <public key cryptography> <forward secrecy> would. The simplest way to do this is a with a <pre shared key>, just like in classical public key cryptography. If that key is compromised at any point, your future messages can get <man in the middle>'d, exactly like in classical cryptography.

QKD uses <quantum mechanics> stuff to allow sharing unsnoopable keys: you can detect any snooping and abort communication. Unsnoopability is guaranteed by the known <laws of physics>, up only to engineering imperfections.

Furthermore, it allows this <key cryptography> distribution without having to physically take a box by car somewhere: once the channel is established, e.g. <optical fiber>, you can just keep generating perfect keys from it. Otherwise it would be pointless, as you could just drive your <one time pad> key every time.

However, the keys likely have a limited rate of generation, so you can't just <one time pad> the entire message, except for small text messages. What you would then do is to use the shared key with <symmetric encryption>.

Therefore, this setup usually ultimately relies on the idea that we believe that <symmetric encryption> is safer than , even though there aren't mathematical safety proofs of either as of 2020.

= Quantum key distribution protocol
{parent=quantum-key-distribution}

= BB84
{c}
{parent=quantum-key-distribution-protocol}
{wiki}

Does not require <entangled particles>, unlike <e91> which does.

https://en.wikipedia.org/w/index.php?title=Quantum_key_distribution&oldid=1079513227#BB84_protocol:_Charles_H._Bennett_and_Gilles_Brassard_(1984) explains it well. Basically:
* Alice and Bob randomly select a measurement basis of either 90 degrees and 45 degrees for each <photon>
* Alice measures each photon. There are two possible results to either measurement basis: parallel or perpendicular, representing values 0 or 1. TODO understand better: weren't the possible results supposed to be pass or non-pass? She writes down the results, and sends the (now <wave function collapse>[collapsed]) photons forward to Bob.
* Bob measures the photons and writes down the results
* Alice and Bob communicate to one another their randomly chosen measurement bases over the unencrypted classic channel.

  This channel must be authenticated to prevent <man in the middle>. The only way to do this authentication that makes sense is to use a <pre shared key> to create <message authentication codes>. Using <public key cryptography> for a <digital signature> would be pointless, since the only advantage of <qkd> is to avoid using <public key cryptography> in the first place.
* they drop all photons for which they picked different basis. The measurements of those which were in the same basis are the key. Because they are in the same basis, their results must always be the same in an ideal system.
* if there is an eavesdropper on the line, the results of measurements on the same basis can differ.

  Unfortunately, this can also happen due to imperfections in the system.

  Alice and Bob must decide what level of error is above the system's imperfections and implies that an attacker is listening.

= BB86 vs E91
{c}
{parent=bb84}

https://physics.stackexchange.com/questions/441870/bb84-protocol-vs-e91-protocol

= E91
{c}
{parent=quantum-key-distribution-protocol}

Requires <entangled particles>, unlike <bb84> which does not.

\Include[software]{parent=computer}

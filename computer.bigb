= Computer
{wiki}

The artistic instrument that enables the ultimate \x[art]: coding, in particular of \x[computational-physics][physics simulations] and \x[formalization-of-mathematics].

Much more useful than instruments used in inferior arts, such as pianos or paintbrushes.

Unlike other humans, computers are mindless slaves that do exactly what they are told to, except for https://www.youtube.com/watch?v=aNzTUdOHm9A[occasional cosmic ray bit flips]. Until they \x[artificial-general-intelligence][take over the world that is].

\Video[https://www.youtube.com/watch?v=rTRzYjoZhIY]
{title=A \x[computer] is the equivalent of a bicycle for our minds by \x[steve-jobs] (1980)}
{description=Likely an excerpt from an interview done for a documentary in 1980. TODO exact source.}

= How computers work?
{parent=computer}
{tag=essays-by-ciro-santilli}

A computer is a highly layered system, and so you have to decide which layers you are the most interested in studying.

Although the layer are somewhat independent, they also sometimes interact, and when that happens it usually hurts your brain. E.g., if \x[compiler]{p} were perfect, no one optimizing software would have to know anything about \x[microarchitecture]. But if you want to go hardcore enough, you might have to learn some lower layer.

It must also be said that like in any industry, certain layers are hidden in commercial secrecy mysteries making it harder to actually learn them. In computing, the lower level you go, the more \x[closed-source] things tend to become.

But as you climb down into the abyss of low level hardcoreness, don't forget that \x[backward-design][making usefulness is more important than being hardcore]: \x[image-xkcd-378-real-programmers].

First, the most important thing you should know about this subject: https://cirosantilli.com/linux-kernel-module-cheat/should-you-waste-your-life-with-systems-programming

Here's a summary from low-level to high-level:
* \x[semiconductor-physical-implementation] this level is of course the most closed, but it is fun to try and peek into it from any openings given by commercials and academia:
  * \x[photolithography], and notably \x[photomask] design
* \x[register-transfer-level]
  * interactive \x[verilator] fun: https://stackoverflow.com/questions/38108243/is-it-possible-to-do-interactive-user-input-and-output-simulation-in-vhdl-or-ver/38174654#38174654[Is it possible to do interactive user input and output simulation in VHDL or Verilog?]
  * more importantly, and much harder/maybe impossible with \x[open-source], would be to try and set up a open source \x[standard-cell-library] and supporting software to obtain \x[power-performance-and-area] estimates
    * https://www.quora.com/Are-there-good-open-source-standard-cell-libraries-to-learn-IC-synthesis-with-EDA-tools/answer/Ciro-Santilli[Are there good open source standard cell libraries to learn IC synthesis with EDA tools?] on \x[quora]
    * the most open source ones are some initiatives targeting FPGAs, e.g. https://symbiflow.github.io/[], http://www.clifford.at/icestorm/[]
    * \x[qflow] is an initiative targeting actual \x[integrated-circuit]{p}
* \x[microarchitecture]: a good way to play with this is to try and run some minimal userland examples on \x[gem5] userland simulation with logging, e.g. see on the \x[linux-kernel-module-cheat]:
  * https://cirosantilli.com/linux-kernel-module-cheat/gem5-event-queue-derivo3cpu-syscall-emulation-freestanding-example-analysis
  This should be done at the same time as books/website/courses that explain the microarchitecture basics.

  This is the level of abstraction that \x[ciro-santilli] finds the most interesting of the hardware stack. Learning it for actual \x[cpu]{p} (which as of 2020 is only partially documented by vendos) could actually be useful in hardcore software optimization use cases.
* \x[instruction-set-architecture]: a good approach to learn this is to manually write some userland assembly with assertions as done in the \x[linux-kernel-module-cheat] e.g. at:
  * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/add.S
  * https://cirosantilli.com/linux-kernel-module-cheat/x86-userland-assembly
  * learn a bit about calling conventions, e.g. by calling C standar library functions from assembly: 
    * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/aarch64/inline_asm/linux/asm_from_c.c
    * https://stackoverflow.com/questions/16255608/calling-c-functions-from-x86-assembly-language/56328708#56328708[Calling C functions from x86 assembly language]
  * you can also try and understand what some simple \x[c-programming-language] programs \x[compile] to. Things can get a bit hard though when `-O3` is used. Some cute examples:
    * https://stackoverflow.com/questions/310974/what-is-tail-call-optimization/55230417#55230417[What is tail call optimization?]
    * https://stackoverflow.com/questions/1345670/stack-smashing-detected/51897264#51897264[What is the "Stack smashing detected" error in GCC and how to solve it?]
    * https://stackoverflow.com/questions/745870/realistic-usage-of-the-c99-restrict-keyword/30827311#30827311[Realistic usage of the C99 'restrict' keyword?]
* \x[executable-file-format], notably \x[executable-and-linkable-format]. Particularly important is to understand the basics of:
  * address relocation:  https://stackoverflow.com/questions/3322911/what-do-linkers-do/33690144#33690144[How do linkers and address relocation work?]
  * position independent code: https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld/51308031#51308031[What is the -fPIE option for position-independent executables in GCC and ld?]
  * how to observe which symbols are present in object files, e.g.:
    * how C++ uses name mangling https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c/30526795#30526795[What is the effect of extern "C" in C++?]
    * how C++ template instantiation can help reduce link time and size: https://stackoverflow.com/questions/2351148/explicit-template-instantiation-when-is-it-used/59614755#59614755[Explicit template instantiation - when is it used?]
* \x[operating-system]. There are two ways to approach this:
  * learn about the Linux kernel \x[linux-kernel]. A good starting point is to learn about its main interfaces. This is well shown at \x[linux-kernel-module-cheat]:
    * system calls
      * write some system calls in
        * pure assembly:
          * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/freestanding/linux/hello.S
          * https://stackoverflow.com/questions/174942/how-should-strace-be-used/55397255#55397255[How should strace be used?]
        * C GCC inline assembly:
          * https://stackoverflow.com/questions/9506353/how-to-invoke-a-system-call-via-syscall-or-sysenter-in-inline-assembly/54956854#54956854
          * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/inline_asm/freestanding/linux/hello.c
    * learn about kernel modules and their interfaces. Notably, learn about to demystify special files such `/dev/random` and so on:
      * https://stackoverflow.com/questions/22632713/how-to-write-a-simple-linux-device-driver/44640466#44640466
      * https://github.com/cirosantilli/linux-kernel-module-cheat/tree/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/kernel_modules
    * learn how to do a minimal Linux kernel disk image/boot to userland hello world: https://unix.stackexchange.com/questions/2692/what-is-the-smallest-possible-linux-implementation/203902#203902[What is the smallest possible Linux implementation?]
    * learn how to GDB step debug the Linux kernel itself. Once you know this, you will feel that "given enough patience, I could understand anything that I wanted about the kernel", and you can then proceed to not learn almost anything about it and carry on with your life:
      * https://cirosantilli.com/linux-kernel-module-cheat/gdb
      * https://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu/33203642#33203642[How to debug the Linux kernel with GDB and QEMU?]
  * write your own (mini-) OS, or study a minimal educational OS, e.g. as in:
    * \x[x86-bare-metal-examples]
    * https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545
* \x[programming-language]

\Image[https://web.archive.org/web/20191222121520if_/http://imgs.xkcd.com/comics/real_programmers.png]
{title=\x[xkcd] 378: Real Programmers.}
{height=600}
{source=https://xkcd.com/378/}

\Video[https://youtube.com/watch?v=_6D05gCWh_I]
{title=How low can you go video by \x[ciro-santilli] (2017)}
{description=In this infamous video Ciro has summarized the computer hierarchy.}

= Computer form factor
{parent=computer}
{wiki}

= Supercomputer
{parent=computer-form-factor}
{wiki}

Some good insights on the earlier history of the industry at: \x[the-supermen-the-story-of-seymour-cray-by-charles-j-murray-1997].

= Intel supercomputer market share
{c}
{parent=supercomputer}
{tag=intel}

\Image[https://web.archive.org/web/20210908201649im_/https://3s81si1s5ygj3mzby34dq6qf-wpengine.netdna-ssl.com/wp-content/uploads/2020/06/top500-june-2020-chip-technology.jpg]
{title=\x[intel] \x[supercomputer] market share from 1993 to 2020}
{description=This graph is shocking, they just took over the entire market! Some good pre-Intel context at \x[the-supermen-the-story-of-seymour-cray-by-charles-j-murray-1997], e.g. in those earlier days, custom architectures like \x[cray]'s and many others dominated.}
{source=https://www.nextplatform.com/2020/06/22/arm-and-japan-get-their-day-in-the-hpc-sun/}

= Laptop
{parent=computer-form-factor}
{wiki}

= Mobile phone
{parent=computer-form-factor}
{wiki}

= Cell phone
{synonym}

= Mobile app
{parent=mobile-phone}
{wiki}

= App
{synonym}

= Computer hardware
{parent=computer}
{wiki}

= Moore's law
{c}
{parent=computer-hardware}
{wiki}

Born: 1965

Died: 2010+-ish

= Semiconductor physical implementation
{parent=computer-hardware}

https://en.wikipedia.org/wiki/Semiconductor_device

This is the lowest level of abstraction computer, at which the basic gates and power are described.

At this level, you are basically thinking about the 3D layered structure of a chip, and how to make machines that will allow you to create better, usually smaller, gates.

= Company that makes semiconductor production equipment
{parent=semiconductor-physical-implementation}

= ASML Holding
{c}
{parent=company-that-makes-semiconductor-production-equipment}
{wiki}

= ASML
{c}
{synonym}

* https://www.youtube.com/watch?v=CFsn1CUyXWs ASML: TSMC's Critical Supplier, Explained by asianometry (2021)
* https://www.youtube.com/watch?v=SB8qIO6Ti_M How ASML Won Lithography (& Why Japan Lost) by asianometry (2021)
* https://www.youtube.com/watch?v=XLNsYecX_2Q ASML: Chip making goes vacuum with EUV (2009) Self promotional video, some good shots of their buildings.

= Power, performance and area
{parent=semiconductor-physical-implementation}
{title2=PPA}

https://en.wikichip.org/wiki/power-performance-area

This is the mantra of the \x[semiconductor-industry]:
* power and area are the main limiting factors of chips, i.e., your budget:
  * chip area is ultra expensive because there are sporadic errors in the fabrication process, and each error in any part of the chip can potentially break the entire chip. Although there are 

    The percentage of working chips is called the yield.

    In some cases however, e.g. if the error only affects single CPU of a multi-core CPU, then they actually deactivate the broken CPU after testing, and sell the worse CPU cheaper with a clear branding of that: this is called binning https://www.tomshardware.com/uk/reviews/glossary-binning-definition,5892.html
  * power is a major semiconductor limit as of 2010's and onwards. If everything turns on at once, the chip would burn. Designs have to account for that.
* performance is the goal.

  Conceptually, this is basically a set of algorithms that you want your hardware to solve, each one with a respective weight of importance.

  Serial performance is fundamentally limited by the \x[critical-path][longest path] that electrons have to travel in a given clock cycle.

  The way to work around it is to create pipelines, splitting up single operations into multiple smaller operations, and storing intermediate results in memories.

= Wafer
{disambiguate=electronics}
{parent=semiconductor-physical-implementation}

= Czochralski method
{c}
{parent=wafer-electronics}
{wiki}

= Semiconductor fabrication plant
{parent=semiconductor-physical-implementation}
{title2=foundry}
{wiki}

= Fab
{synonym}
{title2}

They put a lot of expensive equipment together, much of it \x[company-that-makes-semiconductor-production-equipment][made by other companies], and they make the entire chip for companies ordering them.

= Company with a semiconductor fabrication plant
{parent=semiconductor-fabrication-plant}

A list of \x[semiconductor-fabrication-plant][fabs] can be seen at: https://en.wikipedia.org/wiki/List_of_semiconductor_fabrication_plants and basically summarizes all the companies that have fabs.

= Fairchild Semiconductor
{c}
{parent=company-with-a-semiconductor-fabrication-plant}
{wiki}

Some nice insights at: \x[robert-noyce-the-man-behind-the-microchip-by-leslie-berlin-2006].

= TSMC
{c}
{parent=company-with-a-semiconductor-fabrication-plant}
{wiki}

One of the companies that has fabs, which buys machines from companies such as ASML and puts them together in so called "silicon fabs" to make the chips

= Photolithography
{parent=semiconductor-fabrication-plant}
{wiki}

= Photomask
{parent=photolithography}
{wiki}

= Standard cell library
{parent=semiconductor-physical-implementation}
{wiki}

Basically what \x[register-transfer-level] compiles to in order to achieve a real chip implementation.

After this is done, the final step is \x[place-and-route].

They can be designed by third parties besides the \x[semiconductor-fabrication-plant]{p}. E.g. \x[arm-ltd] markets its \x[arm-artisan][Artisan] Standard Cell Libraries as mentioned e.g. at: https://web.archive.org/web/20211007050341/https://developer.arm.com/ip-products/physical-ip/logic This came from a 2004 acquisition: https://www.eetimes.com/arm-to-acquire-artisan-components-for-913-million/[], \x[if-a-product-of-a-big-company-has-a-catchy-name-it-came-from-an-acquisition][obviously].

The standard cell library is typically composed of a bunch of versions of somewhat simple gates, e.g.:
* AND with 2 inputs
* AND with 3 inputs
* AND with 4 inputs
* OR with 2 inputs
* OR with 3 inputs
and so on.

Each of those gates has to be designed by hand as a \x[3d] structure that can be produced in a given \x[fab].

Simulations are then carried out, and the electric properties of those structures are characterized in a standard way as a bunch of tables of numbers that specify things like:
* how long it takes for electrons to pass through
* how much heat it produces
Those are then used in \x[power-performance-and-area] estimates.

= Open source standard cell library
{parent=standard-cell-library}

Open source ones:
* https://www.quora.com/Are-there-good-open-source-standard-cell-libraries-to-learn-IC-synthesis-with-EDA-tools/answer/Ciro-Santilli Are there good open source standard cell libraries to learn IC synthesis with EDA tools?

= Electronic design automation
{parent=semiconductor-physical-implementation}
{title2=EDA}
{wiki}

A set of software programs that \x[compile] high level \x[register-transfer-level] languages such as \x[verilog] into something that a \x[fab] can actually produce. One is reminded of a \x[compiler-toolchain] but on a lower level.

The most important steps of that include:
* \x[logic-synthesis]: mapping the \x[verilog] to a \x[standard-cell-library]
* \x[place-and-route]: mapping the synthesis output into the 2D surface of the chip

= Electronic design automation phase
{parent=electronic-design-automation}

= Logic synthesis
{parent=electronic-design-automation-phase}
{wiki}

Step of \x[electronic-design-automation] that maps the \x[register-transfer-level] input (e.g. \x[verilog]) to a \x[standard-cell-library].

The output of this step is another \x[verilog] file, but one that exclusively uses interlinked cell library components.

= Place and route
{parent=electronic-design-automation-phase}
{wiki}

Given a bunch of interlinked \x[standard-cell-library] elements from the \x[logic-synthesis] step, actually decide where exactly they are going to go on 2D (stacked 2D) \x[integrated-circuit] surface.

= EDA company
{c}
{parent=electronic-design-automation}
{tag=technology-company}

The main ones as of 2020 are:
* \x[mentor-graphics], which was bought by \x[siemens] in 2017
* \x[cadence-design-systems]
* \x[synopsys]

= Cadence Design Systems
{c}
{parent=eda-company}
{wiki}

= Mentor Graphics
{c}
{parent=eda-company}
{wiki}

= Synopsys
{c}
{parent=eda-company}
{wiki}

= Open source EDA tool
{parent=electronic-design-automation}

= qflow
{parent=open-source-eda-tool}

Cool looking \x[open-source-eda-tool][open source EDA toolchain]:
* http://opencircuitdesign.com/qflow/
* https://github.com/RTimothyEdwards/qflow

They apparently even produced a real working small \x[risc-v] chip with the flow, not bad.

= Integrated circuit
{parent=computer-hardware}
{title2=IC}
{wiki}

\Video[https://www.youtube.com/watch?v=z47Gv2cdFtA]
{title=A briefing on semiconductors by \x[fairchild-semiconductor] (1967)}
{description=Uploaded by the \x[computer-history-museum]. \x[there-is-value-in-tutorials-written-by-early-pioneers-of-the-field]{c}, this is pure \x[gold].

Shows:
* \x[photomask]{p}
* \x[silicon] \x[ingot]{p} and \x[wafer-electronics] processing
}

= Application-specific integrated circuit
{parent=computer-hardware}
{wiki}

= ASIC
{c}
{synonym}
{title2}

= Register transfer level
{parent=computer-hardware}
{title2=RTL}
{wiki}

Register transfer level is the abstraction level at which computer chips are mostly designed.

The only two truly relevant RTL languages as of 2020 are: \x[verilog] and \x[vhdl]. Everything else compiles to those, because that's all that EDA vendosr support.

Much like a C compiler abstracts away the \x[cpu] assembly to:
* increase portability across ISAs
* do optimizations that programmers can't feasibly do without going crazy

Compilers for RTL languages such as Verilog and \x[vhdl] abstract away the details of the specific \x[semiconductor-physical-implementation][semiconductor technology] used for those exact same reasons.

The compilers essentially compile the RTL languages into a \x[standard-cell-library].

Examples of companies that work at this level include:
* https://en.wikipedia.org/wiki/Intel[Intel]. Intel also has \x[semiconductor-fabrication-plant]{p} however.
* https://en.wikipedia.org/wiki/Arm_Holdings[Arm Holdings], which does not have fabs, and is therefore called a "\x[fabless]" company.

= Fabless manufacturing
{parent=register-transfer-level}
{wiki}

= Fabless
{synonym}

= Logic gate
{parent=register-transfer-level}
{wiki}

= Truth table
{parent=logic-gate}
{wiki}

= Verilog
{c}
{parent=register-transfer-level}
{wiki}

= Verilator
{parent=verilog}
{wiki}

\x[verilog] simulator that \x[transpile]{p} to \x[c-plus-plus].

= VHDL
{c}
{parent=register-transfer-level}
{wiki}

= GHDL
{c}
{parent=vhdl}

https://github.com/ghdl/ghdl

= Processor
{disambiguate=computing}
{parent=computer-hardware}

= Central processing unit
{parent=processor-computing}
{wiki}

= CPU
{c}
{synonym}
{title2}

= Microarchitecture
{parent=central-processing-unit}

= Microprocessor
{parent=central-processing-unit}
{wiki}

Basically a synonym for \x[central-processing-unit] nowadays: https://electronics.stackexchange.com/questions/44740/whats-the-difference-between-a-microprocessor-and-a-cpu

= Graphics processing unit
{parent=processor-computing}
{wiki}

= GPU
{c}
{synonym}
{title2}

= Computer data storage
{parent=computer-hardware}
{wiki}

= Volatile memory
{parent=computer-data-storage}
{wiki}

= Random-access memory
{parent=volatile-memory}
{wiki}

= RAM
{c}
{synonym}
{title2}

In conventional speech of the early 2000's, is basically a synonym for \x[dynamic-random-access-memory].

= Static random-access memory
{parent=random-access-memory}
{title2=SRAM}
{wiki}

= Dynamic random-access memory
{parent=random-access-memory}
{wiki}

= DRAM
{c}
{synonym}
{title2}

DRAM is often shortened to just \x[random-access-memory].

= Synchronous dynamic random-access memory
{parent=dynamic-random-access-memory}
{title2=SDRAM}
{wiki}

= DDR SDRAM
{parent=synchronous-dynamic-random-access-memory}
{title2=DDR SDRAM}
{wiki}

= Magnetoresistive RAM
{parent=random-access-memory}
{tag=non-volatile-memory}
{title2=MRAM}
{wiki}

= Non-volatile memory
{parent=computer-data-storage}

The opposite of \x[volatile-memory].

= Disk storage
{parent=non-volatile-memory}
{wiki}

= Disk read-and-write head
{parent=disk-storage}
{wiki}

= Magnetoresistive disk head
{parent=disk-read-and-write-head}
{wiki=Disk_read-and-write_head#Magnetoresistive_heads_(MR_heads)}

= Solid-state storage
{parent=non-volatile-memory}
{wiki}

= SSD
{synonym}
{title2}

= Erase SSD securely
{parent=solid-state-storage}

You can't just \x[shred-unix] individual \x[ssd] files because SSD writes only at large granularities, so hardware/drivers have to copy stuff around all the time to compact it. This means that leftover copies are left around everywhere.

What you can do however is to erase the entire thing with vendor support, which most hardware has support for. On hardware encrypted disks, you can even just erase the keys:
* ATA: https://www.thomas-krenn.com/en/wiki/Perform_a_SSD_Secure_Erase for ATA.
* NVMe: http://forum.notebookreview.com/threads/secure-erase-hdds-ssds-sata-nvme-using-hdparm-nvme-cli-on-linux.827525/

TODO does shredding the

= Solid-state drive
{parent=computer-data-storage}
{title2=SSD}
{wiki}

= Flash memory
{parent=solid-state-drive}
{wiki}

\Video[https://www.youtube.com/watch?v=5f2xOxRGKqk]
{title=The Engineering Puzzle of Storing Trillions of Bits in your Smartphone / SSD using Quantum Mechanics by Branch Education (2020)}
{description=Nice animations show how \x[quantum-tunnelling] is used to set bits in \x[flash-memory].}

= Display device
{parent=computer-hardware}

= E Ink
{c}
{parent=display-device}
{wiki}

Electronic Ink such as that found on Amazon Kindle is the greatest invention ever made by man.

Once E Ink reaches reasonable refresh rates to replace liquid crystal displays, the world will finally be saved.

It would allow \x[ciro-santilli] to spend his entire life in front of a screen rather in the real world without getting tired eyes, and even if it is sunny outside.

Ciro stopped reading non-code non-news a while back though, so the current refresh rates are useless, what a shame.

OMG, this is amazing: https://getfreewrite.com/

= Amazon Kindle
{c}
{parent=e-ink}
{wiki}

\x[pdf] table of contents feature requests: https://twitter.com/cirosantilli/status/1459844683925008385

= Remarkable
{c}
{disambiguate=tablet}
{parent=e-ink}
{wiki}

\x[remarkable-2] is really, really good. Relatively fast refresh + touchscreen is amazing.

No official public feedback forum unfortunately:
* https://twitter.com/cirosantilli/status/1459844683925008385
* https://www.reddit.com/r/RemarkableTablet/comments/7h341m/official_remarkable_feedback_ideas_and/
* https://www.reddit.com/r/RemarkableTablet/comments/7hxu70/link_for_remarkable_support_and_feature_requests/

\x[pdf] table of contents could be better: https://twitter.com/cirosantilli/status/1459844683925008385

= Remarkable 2
{c}
{parent=remarkable-tablet}

Display size: 10.3 inches. Perfect size

= Instruction set architecture
{parent=computer-hardware}
{wiki}

The main interface between the \x[central-processing-unit] and \x[software].

= Assembly language
{parent=instruction-set-architecture}
{wiki}

= Assembly
{synonym}

A human readable way to write instructions for an \x[instruction-set-architecture].

One of the topics covered in \x[ciro-santilli]'s \x[linux-kernel-module-cheat].

= Assembler
{disambiguate=computing}
{parent=assembly-language}

= List of instruction set architectures
{parent=instruction-set-architecture}

List of \x[instruction-set-architecture].

= x86
{c}
{parent=list-of-instruction-set-architectures}
{wiki}

\Include[x86-paging]

= PowerPC
{c}
{parent=list-of-instruction-set-architectures}
{wiki}

= RISC-V
{c}
{parent=list-of-instruction-set-architectures}
{wiki}

The leading no-royalties options as of 2020.

= SiFive
{c}
{parent=risc-v}
{wiki}

Leading \x[risc-v] consultants as of 2020, they are basically trying to become the \x[red-hat] of the \x[semiconductor-industry].

\x[china] has been a major client, since the country is trying to increase its \x[semiconductor-industry] independence, especially given economic sanctions imposed by the \x[usa].

As a result, \x[sifive] moved its legal headquarters to \x[switzerland] in 2019 to try and overcome some of the sanctions.

= Computer manufacturer
{parent=computer-hardware}

= Lenovo
{c}
{parent=computer-manufacturer}
{wiki}

Their websites a bit \x[shitty], clearly a non cohesive amalgamation of several different groups.

E.g. you have to create several separate accounts, and different regions have completely different accounts and websites.

The \x[europe] replacement part website for example is clearly made by a third party called https://flex.com/ and has Flex written all over it, and the header of the home page has a slightly broken but very obviously broken CSS. And you can't create an account without a VAT number... and they confirmed by email that they don't sell to non-corporate entities without a VAT number. What a \x[bullshit]!

= ThinkPad
{c}
{parent=lenovo}
{wiki}

This is \x[ciro-santilli]'s favorite laptop brand. He's been on it since the early 2010's after he saw his \x[ciro-santilli-s-wife][then-girlfriend-later-wife] using it.

Ciro doesn't know how to explain it, but ThinkPads just feel... right. The screen, the keyboard, the lid, the touchpad are all exactly what Ciro likes.

The only problem with ThinkPad is that it is owned by \x[lenovo] which is a \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][Chinese company], and that makes Ciro feel bad. But he likes it too much to quit... what to do?

Ciro is also reassured to see that in every enterprise he's been so far as of 2020, ThinkPads are very dominant. And the same when you see internal videos from other big tech enterprises, all those nerds are running... Ubuntu on ThinkPads! And the https://en.wikipedia.org/wiki/File:ISS-38_EVA-1_Laptops.jpg[ISS].

Those nerds like their ThinkPads so much, that Ciro has seen some acquaintances with crazy old ThinkPad machines, missing keyboard buttons or the like. They just like their machines that much.

ThinkPads are are also designed for repairability, and it is easy to buy replacement parts, and there are OEM part replacement video tutorials: https://www.youtube.com/watch?v=vseFzFFz8lY No visible \x[planned-obsolescence] here! With the caveat that the official online part stores can be \x[shit] as mentioned at \x[lenovo]{full}.

Further more, in 2020 Lenovo is announced full certification for \x[ubuntu] https://www.forbes.com/sites/jasonevangelho/2020/06/03/lenovos-massive-ubuntu-and-red-hat-announcement-levels-up-linux-in-2020/#28a8fd397ae0 which \i[fantastic] news!

The only thing Ciro never understood is the trackpoint: https://superuser.com/questions/225059/how-to-get-used-of-trackpoint-on-a-thinkpad Why would you use that with such an amazing touchpad? And \x[vimium].

= Raspberry Pi Foundation
{c}
{parent=computer-manufacturer}
{wiki}

= Raspberry Pi
{c}
{parent=raspberry-pi-foundation}
{wiki}

= Raspberry Pi 2
{c}
{parent=raspberry-pi-foundation}

Model B V 1.1.

SoC: BMC2836

https://www.raspberrypi.org/products/raspberry-pi-2-model-b/

= Raspberry Pi 3
{c}
{parent=raspberry-pi-foundation}

Model B V 1.2.

SoC: BCM2837

Serial from `cat /proc/cpuinfo`: 00000000c77ddb77

= Peripheral
{parent=computer-hardware}
{wiki}

= Computer keyboard
{parent=peripheral}
{wiki}

= Kinesis Advantage 2 keyboard
{c}
{parent=computer-keyboard}

https://kinesis-ergo.com/shop/advantage2/

For \x[ciro-santilli], this is not a \x[computer-keyboard]. It is a \x[fetish].

= Semiconductor industry
{parent=computer-hardware}
{wiki}

= Semiconductor company
{parent=semiconductor-industry}

= Arm Ltd.
{c}
{parent=semiconductor-company}
{wiki}

\Video[https://www.youtube.com/watch?v=FCmnWTlDK6M]
{title=Arm 30 Years On: Episode One by \x[arm-ltd] (2022)}

\Video[https://www.youtube.com/watch?v=w_CiSKUFvcg]
{title=Arm 30 Years On: Episode Two by \x[arm-ltd] (2022)}

\Video[https://www.youtube.com/watch?v=QmHpoi4BVwM]
{title=Arm 30 Years On: Episode Three by \x[arm-ltd] (2022)}
{description=This one is boring US expansion. Other two are worth it.}

= Arm Artisan
{c}
{parent=arm-ltd}
{wiki}

= Intel
{c}
{parent=semiconductor-company}
{wiki}

= Computer network
{parent=computer}
{wiki}

= Internet
{c}
{parent=computer-network}
{wiki}

= Online
{synonym}

= Internet protocol suite
{c}
{parent=internet}
{wiki}

= Internet Protocol
{c}
{parent=internet-protocol-suite}
{title2=IP}
{wiki}

= IP address
{c}
{parent=internet-protocol}

= IP
{c}
{synonym}

= Transmission Control Protocol
{c}
{parent=internet-protocol-suite}
{title2=TCP}
{wiki}

= Domain Name System
{c}
{parent=internet-protocol-suite}
{title2=DNS}
{wiki}

= DNS
{synonym}

= Domain name
{parent=domain-name-system}
{title2=DNS}
{wiki}

= Server
{disambiguate=computing}
{parent=computer-network}
{wiki}

= Server
{synonym}

= Local server
{parent=server-computing}

Server run on the current machine. That's how all \x[website]{p} are developed and born!

= Client
{disambiguate=computing}
{parent=server-computing}
{wiki}

= Computer science
{parent=computer}
{wiki}

A branch of \x[mathematics] that attempts to prove stuff about \x[computer]{p}.

Unfortunately, all \x[software-engineer]{p} already know the answer to the useful theorems though (except perhaps notably for \x[cryptography]), e.g. all programmers obviously know that iehter \x[p-versus-np-problem][P != NP] or that this is \x[independence-mathematical-logic][unprovable or some other "for all practical purposes practice P != NP"], even though they don't have proof.

And 99% of their time, software engineers are not dealing with mathematically formulatable problems anyways, which is sad.

The only useful "computer science" subset every programmer ever needs to know is:
* for arrays: \x[dynamic-array] vs \x[linked-list]
* for \x[associative-array]: \x[binary-search-tree] vs \x[hash-table]. See also https://stackoverflow.com/questions/6147242/heap-vs-binary-search-tree-bst/29548834#29548834[Heap vs Binary Search Tree (BST)]. No need to understand the algorithmic details of the hash function, the \x[nsa] has already done that for you.
* don't use https://en.wikipedia.org/wiki/Bubble_sort[Bubble sort] for sorting
* you can't parse HTML with regular expressions: https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454[] because of \x[formal-language-theory]

Funnily, due to the \x[formalization-of-mathematics], \x[mathematics] can be seen as a branch of computer science, just like computer science can be seen as a branch of Mathematics!

= Turing machine
{c}
{parent=computer-science}
{wiki}

The dominating model of a computer.

The model is extremely simple, but has been proven to be able to solve all the problems that any reasonable computer model can solve, thus its adoption as the "default model".

The smallest known Turing machine that cannot be proven to halt or not as of 2019 is 7,918-states: https://www.scottaaronson.com/blog/?p=2725[]. https://www.scottaaronson.com/[Shtetl-Optimized] by Scott Aaronson is just the best website.

A bunch of non-reasonable-looking computers have also been proven to be Turing complete for fun, e.g. \x[magic-the-gathering].

= Universal Turing machine
{c}
{parent=turing-machine}
{wiki}

A Turing machine that simulates another Turing machine/input pair that has been encoded as a string.

In other words: an \x[emulator]!

The concept is fundamental to state several key results in \x[computer-science], notably the \x[halting-problem].

= Turing complete
{c}
{parent=turing-machine}
{wiki=Turing_completeness}

A computer model that is as powerful as the most powerful computer model we have: \x[turing-machine]!

= Formal language theory
{parent=computer-science}

= Formal language
{parent=formal-language-theory}
{wiki}

= Recursively enumerable language
{parent=formal-language-theory}
{wiki}

There is a \x[turing-machine] that halts for every member of the language with the answer yes, but does not necessarily halt for non-members.

Non-examples: https://cs.stackexchange.com/questions/52503/non-recursively-enumerable-languages

= RE
{disambiguate=complexity}
{parent=recursively-enumerable-language}
{wiki}

= Recursive language
{parent=formal-language-theory}
{wiki}

Subset of \x[recursively-enumerable-language]{parent} as explained at: \x[difference-between-recursive-language-and-recursively-enumerable-language].

= R
{disambiguate=complexity}
{parent=recursive-language}
{wiki}

Set of all \x[decision-problem]{p} solvable by a \x[turing-machine], i.e. that decide if a string belongs to a \x[recursive-language].

= Undecidable problem
{parent=recursive-language}
{wiki}

Is a \x[decision-problem]{parent} of determining if something belongs to a non-\x[recursive-language].

Or in other words: there is no \x[turing-machine] that always halts for every input with the yes/no output.

Every undecidable problem must obviously have an infinite number of "possibilities of stuff you can try": if there is only a finite number, then you can brute-force it.

Some undecidable problems are of \x[recursively-enumerable-language], e.g. the \x[halting-problem].

Lists of undecidable problems.
* https://mathoverflow.net/questions/11540/what-are-the-most-attractive-turing-undecidable-problems-in-mathematics
* https://en.wikipedia.org/wiki/List_of_undecidable_problems

Coolest ones besides the obvious boring \x[halting-problem]:
* \x[mortal-matrix-problem]
* \x[diophantine-equation] existence of solutions: \x[undecidable-diophantine-equation-problems]{child}

= Mortal matrix problem
{parent=undecidable-problem}

https://en.wikipedia.org/wiki/Zero_matrix#Occurrences

One of the most simple to state \x[undecidable-problem]{p}.

= Computable problem
{parent=undecidable-problem}
{wiki}

= Uncomputable problem
{synonym}

= Uncomputable
{synonym}

A:
* \x[undecidable-problem][decidable problem] is to a \x[decision-problem]
* like a computable problem is to a \x[function-problem]

= Computable number
{parent=undecidable-problem}
{wiki}

= Uncomputable number
{synonym}

https://math.stackexchange.com/questions/462790/are-there-any-examples-of-non-computable-real-numbers

There are only boring exampes of taking an uncomputable language and converting it into a number?

= Difference between recursive language and recursively enumerable language
{parent=recursive-language}
{wiki}

https://stackoverflow.com/questions/33467040/what-is-the-difference-between-recursive-and-recursively-enumerable-languages/65455863#65455863

= Recursive set
{parent=recursive-language}
{wiki}

Same as \x[recursive-language] but in the context of the \x[integer]{p}.

= Chomsky hierarchy
{c}
{parent=formal-language-theory}
{wiki}

This is the classic result of \x[formal-language-theory], but there is too much slack between context free and context sensitive, which is PSPACE (larger than \x[np-complexity]!).

By \x[noam-chomsky].

TODO had seen a good table on Wikipedia with an expanded hierarchy, but lost it!

= Computational problem
{parent=computer-science}
{wiki}

The list: https://complexityzoo.uwaterloo.ca/Complexity_Zoo

= Decision problem
{parent=computational-problem}
{wiki}

\x[computational-problem] where the solution is either yes or no.

When there are more than two possible answers, it is called a \x[function-problem]{parent}.

Decision problems come up often in \x[computer-science] because many important problems are often stated in terms of "decide if a given string belongs to given \x[formal-language]".

= Halting problem
{parent=decision-problem}
{wiki}

The canonical \x[undecidable-problem]{parent}.

= Function problem
{parent=computational-problem}
{wiki}

A problem that has more than two possible yes/no outputs.

It is therefore a generalization of a \x[decision-problem].

= Busy beaver
{parent=function-problem}
{title2=$BB(n)$}
{wiki}

= Busy beaver game
{synonym}

$BB(n)$ is the largest number of 1's written by a \x[halting-problem][halting] $n$-state \x[turing-machine].

Some variant definitions define it as the number of time steps taken by the machine instead. Wikipedia talks about their relationship, but no patience right now.

Overviews:
* https://www.scottaaronson.com/blog/?p=4916
* https://www.quantamagazine.org/the-busy-beaver-game-illuminates-the-fundamental-limits-of-math-20201210

This problem is theoretically interesting because many important mathematical \x[conjecture]{p} have been proved to be equivalent to whether a given Turing machine halts or not, this is notably the case for:
* \x[goldbach-s-conjecture]: 27 states
* \x[riemann-hypothesis]: 744 states
* the \x[consistency] of \x[zermelo-fraenkel-set-theory]: 7910 states

Therefore, if we were able to compute $BB(n)$, we would be able to prove those conjectures automatically, by letting the machine run up to $BB(n)$, and if it hadn't halted by then, we would know that it would never halt.

Of course, in practice, $BB$ is generally \x[uncomputable], so we will never know it. And furthermore, even if it were, it would take a lot longer than the age of the universe to compute any of it, so it would be useless.

However, philosophically speaking at least, the number of states of the equivalent \x[turing-machine] gives us a philosophical idea of the complexity of the problem.

= Integer multiplication
{parent=function-problem}

https://cs.stackexchange.com/questions/16226/what-is-the-fastest-algorithm-for-multiplication-of-two-n-digit-numbers

= Integer factorization
{parent=function-problem}
{wiki}

Complexity: \x[np-intermediate] as of 2020:
* expected not to be \x[np-complete] because it would imply NP != \x[co-np]: https://cstheory.stackexchange.com/questions/167/what-are-the-consequences-of-factoring-being-np-complete#comment104849_169
* expected not to be in \x[p-complexity] because "could we be that dumb that we haven't found a solution after having tried for that long?

The basis of RSA: \x[rsa-cryptosystem]. But not proved \x[np-complete], which leads to:

= NP-hard cryptosystems
{c}
{parent=integer-factorization}

This is natural question because both \x[integer-factorization] and \x[discrete-logarithm] are the basis for the most popular \x[public-key-cryptography] systems as of 2020 (\x[rsa-cryptosystem] and \x[diffie-hellman-key-exchange] respectively), and both are \x[np-intermediate]. Why not use something more provenly hard?
* https://cs.stackexchange.com/questions/356/why-hasnt-there-been-an-encryption-algorithm-that-is-based-on-the-known-np-hard "Why hasn't there been an encryption algorithm that is based on the known NP-Hard problems?"

= Discrete logarithm
{parent=function-problem}
{wiki}

\x[logarithm] but for \x[discrete] \x[group-mathematics][groups].

\x[np-intermediate] as of 2020 for similar reasons as \x[integer-factorization].

= Algorithm
{parent=computational-problem}
{wiki}

A solution to a \x[computational-problem]!

= Data structure
{parent=algorithm}
{wiki}

= Associative array
{parent=data-structure}
{title2=map, dictionary}
{wiki}

More commonly known as a map or dictionary.

= Binary search tree
{parent=associative-array}
{tag=binary-tree}
{tag=ordered-tree}
{wiki}

= Hash table
{parent=associative-array}
{wiki}

= Hash map
{title2}
{synonym}

= Tree
{disambiguate=data-structure}
{parent=data-structure}
{wiki}

= Binary tree
{parent=tree-data-structure}
{wiki}

= K-ary tree
{parent=binary-tree}
{wiki}

= Ordered tree
{parent=tree-data-structure}
{wiki=Tree_(data_structure)#Ordered_tree}

= Unordered tree
{parent=ordered-tree}
{wiki=Tree_(data_structure)#Ordered_tree}

= Tree traversal
{parent=tree-data-structure}
{wiki}

= Depth-first search
{parent=tree-traversal}
{wiki}

= Pre-order depth-first search
{parent=depth-first-search}
{title2=NLR}
{wiki}

Like \x[breadth-first-search], this also has the property of visiting parents before any children.

= Interative pre-order
{parent=pre-order-depth-first-search}

This is the easiest one to do iteratively:
* pop and visit
* push right to stack
* push left to stack

= In-order depth-first search
{parent=depth-first-search}
{title2=LNR}
{wiki}

Only makes sense for \x[binary-tree] because if there are more nodes it is not clear what the top node should go in the middle of.

This is unlike \x[pre-order-depth-first-search] and \x[post-order-depth-first-search] which generalize obviously to general trees.

= Interative in-order
{parent=in-order-depth-first-search}

This is a bit harder than \x[interative-pre-order]: now we have to check if there is a left or right element or not:
* (START) push current
* if there is left:
  * move left
* else:
  * (ELSE) pop
  * visit
  * if there is right
    * move right
    * GOTO START
  * else:
    * GOTO ELSE

The control flow can be slightly simplified if we allow NULLs: https://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/

= Post-order depth-first search
{parent=depth-first-search}
{title2=LRN}
{wiki}

Has the property of visiting all children before the parent.

= Interative post-order
{parent=post-order-depth-first-search}

This is the hardest one to do iteratively.

Bibliography:
* https://stackoverflow.com/questions/1294701/post-order-traversal-of-binary-tree-without-recursion
* https://stackoverflow.com/questions/50645284/non-recursive-post-order-graph-traversal

= Interative post-order with two stacks
{parent=interative-post-order}

https://www.geeksforgeeks.org/iterative-postorder-traversal/

= Interative post-order with one stack
{parent=interative-post-order}

https://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack/

= Breadth-first search
{parent=tree-traversal}
{wiki}

= Dynamic array
{parent=data-structure}
{wiki}

= Linked list
{parent=data-structure}
{wiki}

= Recursion
{disambiguate=computer science}
{parent=algorithm}
{wiki}

= Recursion
{synonym}

= Recursive algorithm
{synonym}

= Iteration
{parent=recursion-computer-science}
{wiki}

= Iterative algorithm
{parent=iteration}
{wiki}

= String-search algorithm
{parent=algorithm}
{wiki}

= Complexity class
{parent=computational-problem}
{wiki}

= Big O notation family
{parent=complexity-class}

This is a family of notations related to the \x[big-o-notation]. A good mnemonic summary of all notations would be:
* \x[big-o-notation]: $|f| \le g$
* \x[little-o-notation]: $|f| \lt g$

= Big O notation
{parent=big-o-notation-family}
{title2=$O(n)$}
{wiki}

Module bound above, possibly multiplied by a constant:
$$f(x) = O(g(x))$$
is defined as:
$$
\exists M > 0 \exists x_0  \forall x > x_0 \colon |f(x)| \leq M g(x)
$$

E.g.:
* $\forall c \in \R x + c = O(x)$. For $c < 0$, $M = 1$ is enough. Otherwise, any $M > 1$ will do, the bottom line will always catch up to the top one eventually.

= Little-o notation
{parent=big-o-notation-family}
{title2=$o(n)$}

Stronger version of the \x[big-o-notation], basically means that ratio goes to zero. In \x[big-o-notation], the ratio does not need to go to zero.

So in informal terms, \x[big-o-notation] means $\leq$, and \x[little-o-notation] means $<$.

E.g.:
* $x = O(x)$
* $x \ne o(x)$K does not tend to zero
* $x = O(x^2)$
* $x = o(x^2)$

= P
{c}
{disambiguate=complexity}
{parent=complexity-class}
{wiki}

= NP
{c}
{disambiguate=complexity}
{parent=complexity-class}
{wiki}

Strictly speaking, only defined for decision problems: https://cs.stackexchange.com/questions/9664/is-it-necessary-for-np-problems-to-be-decision-problems/128702#128702

= NP-complete
{c}
{parent=np-complexity}
{wiki=NP-completeness}

A problem that is both \x[np-complexity] and \x[np-hard].

= Cook-Levin theorem
{c}
{parent=np-complete}
{wiki=Cook–Levin_theorem}

= P versus NP problem
{parent=np-complete}
{wiki}

= P vs NP
{c}
{synonym}
{title2}

Interesting because of the \x[cook-levin-theorem]: if only a single \x[np-complete] problem were in \x[p-complexity], then all NP-complete problems would also be P!

We all know the answer for this: either false or \x[independent-mathematical-logic].

= Ladner's Theorem
{c}
{parent=p-versus-np-problem}

= NP-hard
{c}
{parent=np-complexity}
{wiki=NP-hardness}

A problem such that all NP problems can be reduced in polynomial time to it.

= NP-intermediate
{c}
{parent=np-complexity}
{wiki}

This is the most interesting class of problems for \x[bqp] as we haven't proven that they are neither:
* \x[p-complexity]: would be boring on quantum computer
* \x[np-complete]: would likely be impossible on a quantum computer

Big list: https://cstheory.stackexchange.com/questions/79/problems-between-p-and-npc/460#460

= BQP
{c}
{parent=np-intermediate}
{wiki}

\x[p-complexity] for \x[quantum-computing]!

Heck, we know nothing about this class yet related to non quantum classes!
* conjectured not to intersect with \x[np-complete], because if it were, all NP-complete problems could be solved efficiently on quantum computers, and none has been found so far as of 2020.
* conjectured to be larger than \x[p-complexity], but we don't have a single algorithm provenly there:
  * it is believed that the NP complete ones can't be solved
  * if they were neither NP-complete nor P, it would imply \x[p-versus-np-problem][P != NP]
* we just don't know if it is even contained inside \x[np-complexity]!

= Co-NP
{c}
{parent=np-complexity}
{wiki}

* https://math.stackexchange.com/questions/361422/why-isnt-np-conp "Why isn't NP = coNP?"
* https://stackoverflow.com/questions/17046440/whats-the-difference-between-np-and-co-np
* https://cs.stackexchange.com/questions/9795/is-the-open-question-np-co-np-the-same-as-p-np
* https://mathoverflow.net/questions/31821/problems-known-to-be-in-both-np-and-conp-but-not-known-to-be-in-p

= Optimization problem
{parent=computational-problem}
{wiki}

= Linear programming
{parent=optimization-problem}
{wiki}

= Logistics
{parent=optimization-problem}
{wiki}

= Last mile problem
{parent=logistics}

The exact same problem appears over and over, e.g.:
* https://en.wikipedia.org/wiki/Last_mile_(transportation)[transportaion]: the last mile of the trip when everyone leaves the train and goes to their different respective offices is the most expensive
* https://en.wikipedia.org/wiki/Last_mile_(telecommunications)[telecommunications]: the last mile of wire linking local hubs to actual homes is the most expensive
* electrical grid: same as telecommunications

\x[ciro-santilli] also identified knowledge version of this problem: \x[the-missing-link-between-basic-and-advanced].

= Optimization software
{parent=optimization-problem}
{tag=software}

* https://en.wikipedia.org/wiki/List_of_optimization_software
* https://en.wikipedia.org/wiki/Comparison_of_optimization_software

= CPLEX
{c}
{parent=optimization-software}

= Limiting factor
{parent=optimization-problem}
{wiki}

= Critical path method
{parent=limiting-factor}
{wiki}

= Critical path
{parent=limiting-factor}

= Value function
{parent=optimization-problem}
{wiki}

The function being maximized in a \x[optimization-problem].

\Include[cryptography]{parent=computer-science}

= Hash function
{parent=computer-science}
{wiki}

= Hash
{synonym}

Applications:
* https://en.wikipedia.org/wiki/Hash_table[hash map] which is a O(1) amortized implementation of a map
* creating unbreakable chains of data, e.g. for https://stackoverflow.com/questions/22968856/what-is-the-file-format-of-a-git-commit-object-data-structure/37438460#37438460[Git commits] or \x[bitcoin]. 
* storing passwords on a server in a way that if the password database is stolen, attackers can't reuse them on other websites where the user used the same password: https://security.blogoverflow.com/2013/09/about-secure-password-hashing/

= Secure Hash Algorithms
{c}
{parent=hash-function}
{wiki}

= SHA-1
{c}
{parent=secure-hash-algorithms}
{wiki}

= SHA-2
{c}
{parent=secure-hash-algorithms}
{wiki}

= Merkle tree
{c}
{parent=hash-function}

= Hash tree
{synonym}

= Computer scientist
{parent=computer-science}
{wiki}

= Alan Turing
{c}
{parent=computer-scientist}
{wiki}

= Noam Chomsky
{c}
{parent=computer-scientist}
{tag=cool-person}
{wiki}

= Scott Aaronson
{c}
{parent=computer-scientist}
{wiki}

= Cybercrime
{parent=computer}
{wiki}

= Cyber crime
{synonym}

= Silk Road
{c}
{disambiguate=marketplace}
{parent=cybercrime}
{wiki}

\x[ciro-santilli] has become slightly obsessed with this story, and the main mastermind \x[ross-ulbricht].

\Image[https://web.archive.org/web/20190629084608if_/https://cdn.arstechnica.net/wp-content/uploads/2015/01/GX-201C-640x853.png]
{title=Ross Ulbricht's open laptop shortly after his arrest at the Francisco Public Library.}
{description=He was running some GNOME based distro, could be \x[ubuntu] from that photo, and likely is given that Ross once recommended Ubuntu to his flatmate.}
{source=https://arstechnica.com/tech-policy/2015/01/the-incredibly-simple-story-of-how-the-govt-googled-ross-ulbricht}

The best article available so far is: https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind (https://web.archive.org/web/20191008142214/https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind[archive]) which summarizes what one of the investigators said in a 2019 French computer security conference.

The key living posts are:
* https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php (https://web.archive.org/web/20191121133952/https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php[archive]) which was originally asked under the real name, and then the username was changed to "Frosty", which matches one of the server's logins after the laptop was captured
* altoid early Silk Road mention: https://bitcointalk.org/?topic=175.70;wap2 (https://web.archive.org/web/20190628133852/https://bitcointalk.org/?topic=175.70;wap2[archive])

The big question is of course how libertarian free market ideologically motivated the website was, and how purely criminal greed it was.

The magnitude of the early \x[operational-security] mistakes does make Ciro think that Ross did it "because he could" and https://www.urbandictionary.com/define.php?term=i%20did%20it%20for%20the%20lulz["for the lolz"] in a real world \x[breaking-bad] way.

The entry in Ross' diary does \x[ciro-santilli-s-selfish-desires][resonate a lot] with Ciro and any entrepreneur, full diary at: https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/ (https://web.archive.org/web/20190613011454/https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/[archive]).

\Q[
\[i\]n 2011," \[I believe I will be\] "creating a year of prosperity and power beyond what I have ever experienced before,

Silk Road is going to become a phenomenon and at least one person will tell me about it, unknowing that I was its creator."
]

Having this kind of feeling, is the greatest thing any human can have, and what motivates all great things.

Capitalizing in \x[illegal] things though is a cheat, big things take longer than a few years to reach, but reaching them is that much more satisfying as well.

Other interesting quotes:
\Q[I hated working for someone else and trading my time for money with no investment in myself.]
which Ciro also feels, see \x[don-t-be-a-pussy], and:
\Q[Everyone knows I am working on a bitcoin exchange. I always thought honesty was the best policy and now I didn't know what to do. I should have just told everyone I am a freelance programmer or something, but I had to tell half truths. It felt wrong to lie completely so I tried to tell the truth without revealing the bad part, but now I am in a jam. Everyone knows too much. Dammit.]

Also very worth reading is the San Francisco flat mate account: https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord (https://web.archive.org/web/20191201090353/https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord[archive]).

The murder for hire allegations are also interesting: https://mashable.com/2013/10/03/silk-road-hits[], he paid 80k dollars to undercover DEA agents!

Except for the fact that Ross was an 80 million \x[dollar] \x[drug-lord], those accounts sound exactly like what you would expect from any other nerdy startup founder! The:
* "just do it" strategy effectively going to a minimal viable product (manual transaction management!), while making many mistakes along the way, including hiring mistakes and successes when scaling is needed
* the hardship of self bootstrapping your own social network (here with some kilos of mushrooms)
* the variety of periods, from relatively calm, to hair pulling stress during big changes

It is also amusing to see very concretely the obvious fact that the FBI can get a https://en.wikipedia.org/wiki/Subpoena[subpoena] for all accounts you ever had, e.g. they knew his \x[laptop] model from \x[amazon] and brought a corresponding power cable to the arrest! If you are going to be a cyber criminal, don't use your real name, ever!

Should justice be blind? Maybe. But it does hurt for mere non-blind men to see it sometimes. Especially when \x[drug-liberalization] is involved.

= Ross Ulbricht
{c}
{parent=silk-road-marketplace}
{wiki}

= Domain-specific language
{parent=computer}
{title2=DSL}
{wiki}

\x[evil]{c}. Just use \x[python] instead for \x[software], and a well known \x[data-file-format] for data, please.

= E-book
{parent=computer}
{wiki}

= E-book file format
{parent=e-book}

= ASCII
{c}
{parent=e-book-file-format}
{wiki}

= EPUB
{c}
{parent=e-book-file-format}
{wiki}

This is a good thing. It basically contains an entire \x[website], with \x[html] and assets inside a single \x[zip], and a little bit of metadata.

It is incomprehensible why \x[browser]{p} don't just implement it as they already have all the web part, and also \x[zip] stuff:
* https://www.quora.com/What-is-the-reason-that-browsers-cannot-open-epub-files-without-extensions on \x[quora]

The situation is so sad. \x[ubuntu] 21.04 doesn't come with a reader installed by default:
* https://askubuntu.com/questions/14378/what-software-can-i-use-to-view-epub-documents

= PDF
{c}
{parent=e-book-file-format}
{wiki}

= E-book viewer
{parent=e-book}

= Calibre
{c}
{disambiguate=software}
{parent=e-book-viewer}
{wiki}

Sometimes \x[ciro-santilli] says half jokingly that \x[user-interface] does not matter.

This software circa 2010-2020 makes that joke not be funny.

How can a UI feel so clunky!

The most aggravating thing is that it is not immediately obvious why it feels so bad.

= Evince
{parent=e-book-viewer}
{wiki}

= Okular
{parent=e-book-viewer}
{wiki}

This is generally good, especially compared to how crappy Evince, the default \x[ubuntu] one, has been around 2014-2020.

= File format
{parent=computer}
{wiki}

= Human-readable medium
{parent=file-format}
{wiki}

= Human-readable format
{synonym}

= Plaintext file
{title2}
{synonym}

= Human-readable
{synonym}

= Binary data
{parent=human-readable-medium}
{wiki}

The opposite of a \x[human-readable-format].

= Binary large object
{parent=binary-data}
{wiki}

= BLOB
{c}
{synonym}

Less evil are BLOBs that come from \x[reproducible-builds].

= Binary-to-text encoding
{parent=binary-data}
{wiki}

= Base58
{c}
{parent=binary-to-text-encoding}

https://en.bitcoin.it/wiki/Base58Check_encoding

Invented for \x[bitcoin].

= Base64
{c}
{parent=binary-to-text-encoding}
{wiki}

= yEnc
{c}
{parent=binary-to-text-encoding}
{wiki}

= Archive file
{parent=file-format}
{wiki}

= ZIP
{c}
{disambiguate=file format}
{parent=archive-file}
{wiki}

= ZIP
{c}
{synonym}

= Audio file format
{parent=file-format}
{wiki}

= Audio editor
{parent=audio-file-format}
{wiki}

= Audacity
{disambiguate=audio editor}
{parent=audio-editor}
{wiki}

= Audacity profile-based background noise removal
{parent=audacity-audio-editor}

You select a sample noise-only area, and it remove noise from the entire video for you:
* https://www.youtube.com/watch?v=AeOjtMOq3EU
* https://www.youtube.com/watch?v=3nMkMn4--5w

= MIDI
{c}
{parent=audio-file-format}
{wiki}

In simple terms, represents keystrokes of a piano, but it can likely also represent other effects (TODO confirm: bend, vibrato, slides, attack strength)

Can contain multiple parallel tracks as seen from the \x[wikipedia] example: https://en.wikipedia.org/wiki/File:MIDI_sample.mid

You can see what it contains well with \x[gui-music-editor].

MIDI is fun. It is a basic high level representation of most instrumental music, including beats.

To actually listen to MIDI, you need a \x[software-synthesizer], which knows what sound to make for each note. One way to specify such instruments is the \x[soundfont] file format.

Convert MIDI to more common standalone formats:
* https://stackoverflow.com/questions/16295459/convert-midi-to-mp3/65207296#65207296
* https://softwarerecs.stackexchange.com/questions/10915/automatically-turn-midi-files-into-wav-or-mp3/76955#76955

= SoundFont
{c}
{parent=midi}
{wiki}

Contains instructions on how to synthesize MIDI.

Extension: sf2.

Can be imported for example by:
* \x[vmpk]
* \x[csound] with `sfload`: http://www.csounds.com/manual/html/sfload.html

= vmpk
{c}
{parent=midi}

https://vmpk.sourceforge.io/

Opens a virtual \x[midi] piano \x[gui]. It just works on \x[ubuntu] 20.04: https://askubuntu.com/questions/34391/virtual-midi-piano-keyboard-setup/1298026#1298026

VMPK is a virtual device that replicates what you would get by connecting a physical MIDI keyboard to your computer. It is not a \x[software-synthesizer] on its own. But it does connect to a working synthesizer by default (Sonivox EAS) which makes it produce sounds out-of-the box.

TODO: then I messed with my sound settings, and then it stopped working by default on the default "MIDI Connection" > "MIDI Out Driver" > "Network". But it still works on "SonivoxEAS".

A \x[hello-world] of actually connecting it to a specific software synthesizer manually on \x[advanced-linux-sound-architecture] with `aconnect` can be found at: https://askubuntu.com/questions/34391/virtual-midi-piano-keyboard-setup/1298026#1298026

Save to a \x[midi] file: https://askubuntu.com/questions/709673/save-as-midi-when-playing-from-vmpk-qsynth/1298231#1298231

Reasonable default key mappings to keyboard covering 2 octaves.

3 multiple simultaneous keys did not work (tested "ZQI"). This might just be a limitation of \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017][my keyboard] however.

TODO how to save to a `.mid` file? https://askubuntu.com/questions/709673/save-as-midi-when-playing-from-vmpk-qsynth

\x[sourceforge].

= Data file format
{parent=file-format}
{wiki=Data_file}

= JSON
{c}
{parent=data-file-format}
{wiki}

= Hierarchical Data Format
{c}
{parent=data-file-format}
{title2=HDF}
{wiki}

= XML
{c}
{parent=data-file-format}
{tag=markup-language}
{title2=Extensible Markup Language}
{wiki}

Do you know what is worse than XML? \x[html][Pseudo XML]: https://stackoverflow.com/questions/5558502/is-html5-valid-xml/39560454#39560454

= Standard Generalized Markup Language
{c}
{parent=xml}
{wiki}

= SGML
{c}
{title2}
{synonym}

\x[xml] predecessor.

= IBM Generalized Markup Language
{c}
{parent=standard-generalized-markup-language}
{wiki}

\x[sgml] predecessor.

= XPath
{c}
{parent=xml}
{wiki}

XPath kind of died with the rise of \x[css] selectors around the beginnning of the 2010's. But that is a shame. XPath is a good standard, and was generally more powerful than CSS selectors for many many years.

= YAML
{c}
{parent=data-file-format}
{wiki}

= Image file format
{parent=file-format}
{wiki=Image_file_formats}

= Raster graphics
{parent=image-file-format}
{wiki}

Represents image \x[pixel] by pixel, rather than by mathematical primitives such as done in \x[vector-graphics]:

= Pixel
{parent=raster-graphics}
{wiki}

= Vector graphics
{parent=image-file-format}
{wiki}

Smaller files, scalable image size, and editability. Why would you use anything else for programmatically generated images?!?!

= Scalable Vector Graphics
{parent=vector-graphics}
{wiki}

= SVG
{c}
{synonym}
{title2}

\x[company]{c}{p} have been really slow to support SVG features in their browsers, and that is very saddening: https://medium.com/@michaelmangial1/introduction-to-scalable-vector-graphics-6450c03e8d2e

You can't drop SVG support for `canvas` until there's a way to run untrusted \x[javascript] on the browser!

\x[svg] does have some compatibility annoyances, notably \x[svg-fonts]. But we should as a society work to standardize and implement a fix those, the benefits of SVG are just too great!

Examples:
* \a[svg/svg.svg] a minimal somewhat sane SVG:
  * if the `width` and `height` properties were not given, you get the default 300x150, which seems to be set in the SVG standard:
    * https://stackoverflow.com/questions/40156710/why-does-this-svg-image-have-a-height-of-150px
    * https://css-tricks.com/scale-svg
* how to add na SVG image to a \x[html] file:
  * \a[svg/svg.html]: external image. The included file is \a[svg/svg.svg].
  * \a[svg/inline.html]: inline.
* \a[svg/billion-laughs.svg]
* \a[svg/html.svg]
* \a[svg/triangle.svg]
* \a[svg/viewBox.svg]: this attribute allows you to control the default SVG `svg width=` and `height=` while keeping the coordinates of the drawing untouched. If the `viewBox` aspect ratio differs from the width/height ratio, you likely want to play with `preserveAspectRatio`, otherwise you would get white spaces by default on the generated image
* \x[css] with SVG:
  * \a[svg/style.svg]: inline CSS
  * \a[svg/style-external.svg]: external CSS with: `<?xml-stylesheet type="text/css" href="svg.css" ?>`, see also: https://stackoverflow.com/questions/18434094/how-to-style-svg-with-external-css
    * \a[svg/subdir/style-external.html]: is the relative CSS relative to the HTML or to the SVG? Answer: to the SVG... OMG. So how to make it work reliably?
  * \a[svg/current-color.html] and \a[svg/current-color.svg]: illustrates `fill="currentColor"`. Only works for inline SVG however... See also: https://stackoverflow.com/questions/13000682/how-do-i-have-an-svg-image-inherit-colors-from-the-html-document/13002311
* \x[javascript] with SVG:
  * \a[svg/script.svg]
  * \a[svg/external-js.svg]
* \a[svg/defs.html] hows how `defs` works
  * \a[svg/defs-external.html] tries to include external `defs` from \a[svg/defs.svg], but that fails like everything else related to external SVGs

= SVG tutorial
{c}
{parent=scalable-vector-graphics}

= SVG background color
{c}
{parent=svg-tutorial}

This is a pain point as of \x[svg-1-1]...

Examples at \a[svg/background.html] which answers from https://stackoverflow.com/questions/11293026/default-background-color-of-svg-root-element/11293812[]:
* \a[svg/background-rect.svg]
* \a[svg/background-viewport-fill.svg]: was part of \x[svg-1-2], but that whole standard got dropped. Not implemented neither in \x[chromium-web-browser] 85 nor \x[firefox] 93 as of 2021.

This pain reflects directly on Inkscape: \x[set-svg-background-color-in-inkscape].

= SVG fonts
{c}
{parent=svg-tutorial}

The major problem with SVG is text \x[computer-font]{p}. If you make an image with text that depends on one \x[computer-font] and it is not present in the viewer's machine, it will use some other font, which may overlap with other elements of the image. Some libraries \x[matplotlib] solve this https://stackoverflow.com/questions/34387893/output-matplotlib-figure-to-svg-with-text-as-text-not-curves[by writing characters as curves], but this produces large files and unsearchable text. The inability of different computer platforms to standardize fonts that must always be present is a major issue.

= Join two SVG side-by-side from the command line
{parent=scalable-vector-graphics}

TODO:
* https://stackoverflow.com/questions/9612434/how-to-concatenate-svg-files-lengthwise-from-linux-command-line
* https://graphicdesign.stackexchange.com/questions/90844/joining-together-multiple-svg-images
* https://graphicdesign.stackexchange.com/questions/137096/is-there-a-way-to-stack-two-svgs-on-top-of-each-other

= SVG version
{c}
{parent=scalable-vector-graphics}

= SVG 1.0
{c}
{parent=svg-version}

= SVG 1.1
{c}
{parent=svg-version}

= SVG 1.2
{c}
{parent=svg-version}

Dropped in favor of \x[svg-2].

= SVG 2
{c}
{parent=svg-version}

= List of image file formats
{parent=image-file-format}

= JPEG
{c}
{parent=list-of-image-file-formats}
{wiki}

= Portable Network Graphics
{parent=list-of-image-file-formats}
{wiki}

= PNG
{c}
{synonym}
{title2}

= libpng
{c}
{parent=portable-network-graphics}

\x[png] reference implementation. Ahh, if feels good to have a dominating open source reference implementation.

Demo of using it by \x[ciro-santilli]: https://stackoverflow.com/questions/1362945/how-to-decode-a-png-image-to-raw-bytes-from-c-code-with-libpng/36399711#36399711

\Image[https://i.stack.imgur.com/rfdHr.png]

\Image[https://i.stack.imgur.com/IWBSj.png]

= Image editor
{parent=image-file-format}

= GIMP
{c}
{parent=image-editor}
{wiki}

It's not super easy to use at first.

And it sometimes says that the basic drawing thing you want to do is off the project's scope.

But as you learn more about it and further generalize the concepts, there are often reasonable reasons for those design choices.

And the UI looks good :-)

Examples:
* https://superuser.com/questions/167873/how-do-i-draw-a-box-in-gimp you need to go on a top menu to draw a rectangle

Some answers by \x[ciro-santilli]:
* https://graphicdesign.stackexchange.com/questions/83446/gimp-how-to-combine-two-images-side-by-side/145543#145543

= Inkscape
{c}
{parent=image-editor}
{wiki}

Inkscape is a a good software for editing/creating \x[svg] files.

Its functionality is fundamental for as a \x[software-for-drawing-geometry-diagrams], as it is a good middle ground between algorithmic generation, and \x[raster-graphics].

At 1.0.2, its \x[ui] is a bit terrible:
* the way the menus open on the right with title below the window...
* several defaults are atrocious, e.g. export drawing rather than page

And it crashes from time to time on \x[ubuntu] 21.04. And it has some glaring bugs, e.g.:
* https://gitlab.com/inkscape/inbox/-/issues/5794

But still, it is a very good initiative.

What would be really amazing is if they had constraints: https://gitlab.com/inkscape/inbox/-/issues/1465 like proper \x[cad] software, it would make it possible to not have to redo entire diagrams when you want to change a small part of them.

= Rotate object around a point in Inkscape
{parent=inkscape}

There's a tiny little crosshair that you can drag around to set the center of rotation.

And there's a button to make that crosshair snap: https://inkscape.org/forums/questions/can-a-pivotingtransfrom-crosshair-be-moved-and-made-to-snap-to-a-node-or-a-grid-point/#c14432

= Set SVG background color in Inkscape
{parent=inkscape}

This is related to the underlying SVG pain point of \x[svg-background-color]:
* https://gitlab.com/inkscape/inkscape/-/issues/531
* https://graphicdesign.stackexchange.com/questions/74906/in-inkscape-how-do-i-add-a-white-background/144952#144952

For \x[png] export:
* https://superuser.com/questions/249860/how-can-i-change-inkscapes-default-export-background-color-from-yellow-to-white

= Video file format
{parent=file-format}
{wiki=Video_file_formats}

= Video editing software
{parent=video-file-format}
{wiki}

= Kdenlive
{c}
{parent=video-editing-software}
{wiki}

Preview has no sound on \x[ubuntu] 20.10.

Sound worked on Ubuntu 21.04 though, but it then soon crashed with:

``
 = = SET EFFECT PARAM:  "rect"  =  0=1188 0 732 242
MUTEX LOCK!!!!!!!!!!!! slotactivateeffect:  1
// // // RESULTING REQUIRED SCENE:  1
Object 0x557293592da0 destroyed while one of its QML signal handlers is in progress.
Most likely the object was deleted synchronously (use QObject::deleteLater() instead), or the application is running a nested event loop.
This behavior is NOT supported!
qrc:/qml/EffectToolBar.qml:80: function() { [native code] }
Killed
``
amazing.

= ShotCut
{c}
{parent=video-editing-software}
{wiki}

Worked on \x[ubuntu] 20.10.

The UI is a bit too buggy to bear.

How to unsplit, can't find on shotcut 21.05.01: https://forum.shotcut.org/t/is-it-possible-to-unsplit/1466/2

Background noise reduction: couldn't easily find out how, especially with automatic profile detected based on a selected region as mentioned at \x[audacity-profile-based-background-noise-removal]:
* https://forum.shotcut.org/t/how-to-apply-filter-reduction-noise-on-audio/12678/2
* https://forum.shotcut.org/t/noise-reduction-filter-request/5348/6

= OpenShot
{c}
{parent=video-editing-software}
{wiki}

\x[ubuntu] 20.10 crash...:
``
  exceptions:ERROR Unhandled Exception
Traceback (most recent call last):
  File "/usr/bin/openshot-qt", line 11, in <module>
    load_entry_point('openshot-qt==2.5.1', 'gui_scripts', 'openshot-qt')()
  File "/usr/lib/python3/dist-packages/openshot_qt/launch.py", line 97, in main
    app = OpenShotApp(argv)
  File "/usr/lib/python3/dist-packages/openshot_qt/classes/app.py", line 218, in __init__
    from windows.main_window import MainWindow
  File "/usr/lib/python3/dist-packages/openshot_qt/windows/main_window.py", line 45, in <module>
    from windows.views.timeline_webview import TimelineWebView
  File "/usr/lib/python3/dist-packages/openshot_qt/windows/views/timeline_webview.py", line 42, in <module>
    from PyQt5.QtWebKitWidgets import QWebView
ImportError: /usr/lib/x86_64-linux-gnu/libQt5Quick.so.5: undefined symbol: _ZN4QRhi10newSamplerEN11QRhiSampler6FilterES1_S1_NS0_11AddressModeES2_, version Qt_5_PRIVATE_API
``

= Subtitle
{parent=video-file-format}

= How to hardcode subtitle into a video with FFmpeg?
{parent=subtitle}

* https://superuser.com/questions/869248/hardcoding-subs-with-ffmpeg
* https://askubuntu.com/questions/485100/how-may-i-burn-srt-subtitles-to-video-with-avconv

On \x[ubuntu] 20.10, just:
``
ffmpeg -i input.mp4 -vf "subtitles=subtitle.srt" output.mp4
``

To change font size: https://stackoverflow.com/questions/21363334/how-to-add-font-size-in-subtitles-in-ffmpeg-video-filter
``
ffmpeg -i input.mp4 -vf "subtitles=subtitle.srt:force_style='Fontsize=64'" output.mp4
``
The default appears to be 24, so just multiply that by whatever seems like a reasonable factor.

= Subtitle file format
{parent=subtitle}

= Subtitle editor
{parent=subtitle-file-format}

= Subtitle Edit
{c}
{parent=subtitle-editor}

Written in \x[c-sharp].

= Aegisub
{c}
{parent=subtitle-editor}

https://github.com/Aegisub/Aegisub

This worked well on 3.2.2 \x[ubuntu] 20.10. Recommended.

= Gaupol
{c}
{parent=subtitle-editor}

https://github.com/otsaloma/gaupol

Good shortcuts and user experience.

No waveform viewer: https://github.com/otsaloma/gaupol/issues/49 so unusable.

= kitone/subtitleeditor
{parent=subtitle-editor}

https://github.com/SubtitleEdit/subtitleedit

Not to be confused with \x[subtitle-edit].

As of 0.54.0 this feels featureful, but extremely buggy or lacking UI obvious enhancements that would be simple to implement, and offer huge value:
* fundamental not defined out of box, e.g. Tiny forward/backwards. You can define them yourself, but they should be provided.
* https://github.com/SubtitleEdit/subtitleedit/issues/4976 can't export \x[subrip]?
* can't interact with video on waveform?

It is hard to understand how that project reached this weird featureful but crappy state. Feels like they just gave push permission to a bunch of random people.

= List of subtitle file formats
{parent=video-file-format}

= SubRip
{c}
{parent=list-of-subtitle-file-formats}
{title2=.srt}
{wiki}

= Information theory
{parent=computer}
{wiki}

= Noisy-channel coding theorem
{parent=information-theory}
{title2=Shannon's theorem}
{wiki}

Setting: you are sending bits through a communication channel, each bit has a random probability of getting flipped, and so you use some error correction code to achieve some minimal error, at the expense of longer messages.

This theorem sets an upper bound on how efficient you can be in your encoding, for any encoding.

The next big question, which the theorem does not cover is how to construct codes that reach or approach the limit. Important such codes include:
* \x[turbo-code]
* \x[low-density-parity-check-code]

But besides this, there is also the practical consideration of if you can encode/decode fast enough to keep up with the coded bandwidth given your hardware capabilities.

https://news.mit.edu/2010/gallager-codes-0121 explains how turbo codes were first reached without a very good mathematical proof behind them, but were still revolutionary in experimental performance, e.g. turbo codes were used in 3G/4G.

But this motivated researchers to find other such algorithms that they would be able to prove things about, and so they rediscovered the much earlier \x[low-density-parity-check-code], which had been published in the 60's but was forgotten, partially because it was computationally expensive.

= Turbo code
{parent=noisy-channel-coding-theorem}
{wiki}

TODO how close does it get to Shannon's limit?

= Low-density parity-check code
{parent=noisy-channel-coding-theorem}
{title2=LDPC}
{wiki}

= Markup language
{parent=computer}
{wiki}

= Lightweight markup language
{parent=markup-language}
{wiki}

= List of markup languages
{parent=markup-language}

= AsciiDoc
{c}
{parent=list-of-markup-languages}
{tag=lightweight-markup-language}
{wiki}

= AsciiDoctor
{c}
{parent=asciidoc}
{wiki}

= LaTeX
{c}
{parent=list-of-markup-languages}
{wiki}

Revolutionary for its time, and a big part of \x[ourbigbook-com/motivation][Ciro's Enlightenment].

But too insane, and did not https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520[keep up with internet age], and so Ciro wants to kill it now.

= KaTeX
{c}
{parent=latex}

https://github.com/KaTeX/KaTeX

Default mathematics typesetting used in \x[ourbigbook-markup].

Key issues:
* https://github.com/KaTeX/KaTeX/issues/2228 `newcommand` did not support optional arguments

= Softcover
{disambiguate=LaTeX}
{parent=latex}

https://github.com/softcover/softcover

LaTeX subset that output nicely to HTML.

https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520

Too insane though due to LaTeX roots, better just move to newer HTML-first markups like \x[ourbigbook-markup] or \x[markdown].

= OurBigBook Markup
{c}
{parent=list-of-markup-languages}
{tag=lightweight-markup-language}
{tag=personal-knowledge-base}
{title2=previously Cirodown}

The \x[markup-language] of \x[ourbigbook-com].

Also used on \x[ciro-santilli-s-homepage] as a \x[static-website] via the OurBigBook CLI.

The one \x[markup-language] to rule them all?

Documentation: \a[ourbigbook]{check=0}

= OurBigBook CLI
{c}
{parent=ourbigbook-markup}

Official \x[command-line-interface]{c} to convert a directory of \x[ourbigbook-markup] files into a \x[static-website].

= OurBigBook Library
{c}
{parent=ourbigbook-markup}

Base \x[javascript] library that implements the \x[ourbigbook-markup]. Use by both:
* \x[ourbigbook-cli]
* \x[ourbigbook-web]

= OurBigBook Web
{c}
{parent=ourbigbook-markup}

The website system that runs \x[ourbigbook-com]. Relies on the \x[ourbigbook-library].

= MathBook XML
{c}
{parent=list-of-markup-languages}

https://github.com/rbeezer/mathbook

\x[xml], ain't nobody ever going to write that manually.

= Markdown
{parent=list-of-markup-languages}
{tag=lightweight-markup-language}
{wiki}

= Pandoc
{parent=markdown}
{wiki}

This is good software.

If it only it were written in \x[javascript] instead of Haskell (!?), then Ciro might have used it as the basis for \x[ourbigbook-markup].

= karlcow/markdown-testsuite
{parent=markdown}

https://github.com/karlcow/markdown-testsuite

\x[ciro-santilli] was contributing to this, when \x[commonmark] left private mode and killed it, thus wasting many hours of Ciro's time.

See also: \x[ciro-santilli-s-minor-projects].

= CommonMark
{parent=markdown}

https://commonmark.org/

CommonMark is a good project. But its initial release method was not very nice, they first developed everything behind closed doors with the big adopters like \x[github] and \x[stack-overflow], and only later released the thing read, thus wasting the time of people who were working on alternative in the meanwhile, e.g. https://github.com/karlcow/markdown-testsuite which Ciro contributed to: \x[ciro-santilli-s-minor-projects].

= markdownlint/markdownlint
{parent=markdown}

https://github.com/markdownlint/markdownlint

= Machine learning
{parent=computer}
{wiki}

The main reason \x[ciro-santilli] never touched it is that it feels that every public data set has already been fully mined or has already had the most interesting algorithms developed for it, so you can't do much outside of big companies.

This is why Ciro started \x[ciro-s-2d-reinforcement-learning-games] to generate synthetic data and thus reduce the cost of data.

The other reason is that it is ugly.

\Include[artificial-intelligence]{parent=machine-learning}

= Natural language processing
{parent=machine-learning}
{tag=ai-complete}
{wiki}

An impossible \x[ai-complete] dream.

It is impossible to understand speech, and take meaningful actions from it, if you don't understand what is being talked about.

And without doubt, "understanding what is being talked about" comes down to understanding (efficiently representing) the geometry of the 3D world with a time component.

Not from hearing sounds alone.

= Recommender system
{parent=machine-learning}
{wiki}

* https://analyticsindiamag.com/5-open-source-recommender-systems-you-should-try-for-your-next-project/ 5 Open-Source Recommender Systems You Should Try For Your Next Project (2019)

= Parallel computing
{parent=computer}
{wiki}

= Memory semantics
{parent=parallel-computing}
{wiki}

These are the rules which specify what different concurrent read/write memory accesses from different threads/processes can or cannot see.

Notable such set of rules include:
* \x[c-plus-plus-memory-model]. These are also reflected on the semantics of memory of the corresponding \x[instruction-set-architecture]
* \x[sql-transaction-isolation-level]

= C++ memory model
{c}
{parent=memory-semantics}

https://stackoverflow.com/questions/6319146/c11-introduced-a-standardized-memory-model-what-does-it-mean-and-how-is-it-g

= Read-modify-write
{parent=parallel-computing}
{wiki=Read–modify–write}

That's what usually fucks up parallel programs.

= Thread
{disambiguate=computing}
{parent=parallel-computing}
{wiki}

= Thread
{synonym}

= Quantum information
{parent=computer}
{wiki}

\Include[quantum-computing]{parent=quantum-information}

= Quantum key distribution
{parent=quantum-information}
{tag=cryptography}
{wiki}

TODO confirm: this appears to use \x[quantum-mechanics] stuff to allow sharing unsnoopable keys: you can detect any snooping and abort communication. Unsnoopability is guaranteed by the known \x[laws-of-physics], up only to engineering imperfections.

Furthermore, it allows this \x[key-cryptography] distribution without having to physically take a box by car somewhere: once the channel is established, e.g. \x[optical-fiber], you can just keep generating perfect keys from it. Otherwise it would be pointless, as you could just drive your \x[one-time-pad] key every time.

However, the keys likely have a limited rate of generation, so you can't just \x[one-time-pad] the entire message, except for small text messages. What you would then do is to use the shared key with \x[symmetric-encryption].

Therefore, this setup usually ultimately relies on the idea that we believe that \x[symmetric-encryption] is safer than \x[public-key-cryptography], even though there aren't mathematical safety proofs of either as of 2020.

= Software
{parent=computer}
{wiki}

= Cloud computing
{parent=software}
{wiki}

= Platform as a service
{parent=cloud-computing}
{title2=PaaS}
{wiki}

Highly managed, you don't even see the \x[docker-software] images, only some higher level \x[json] configuration file.

These setups are really convenient and cheap, and form a decent way to try out a new website with simple requirements.

= AWS Elastic Beanstalk
{c}
{parent=platform-as-a-service}
{wiki}

= Heroku
{c}
{parent=platform-as-a-service}
{wiki}

This feels good.

Deployment:
``
git push heroku HEAD:master
``

View \x[stdout] logs:
``
heroku logs --tail
``

\x[postgresql] database, it seems to be delegated to \x[aws]. How to browse database: https://stackoverflow.com/questions/20410873/how-can-i-browse-my-heroku-database
``
heroku pg:psql
``

Drop and recreate database:
``
heroku pg:reset --confirm <app-name>
``
All tables are destroyed.

Restart app:
``
heroku restart
``

= Send free emails from Heroku
{parent=heroku}

Arghh, why so hard... tested 2021:
* Mailgun: the Heroku add-on creates a free plan. This is smaller than the flex plan and does not allow custom domains, and is not available when signing up on mailgun.com directly: https://help.mailgun.com/hc/en-us/articles/203068914-What-Are-the-Differences-Between-the-Free-and-Flex-Plans- And without custom domains you cannot send emails to anyone, only to people in the 5 manually whitelisted list, thus making this worthless. Also, gmail is not able to verify the DNS of the sandbox emails, and they go to spam.

  Mailgun does feel good otherwise if you are willing to pay. Their Heroku integration feels great, exposes everything you need on environment variables straight away.
* CloudMailin: does not feel as well developed as Mailgun. More focus on receiving. Tried adding TXT xxx._domainkey.ourbigbook.com and CNAME mta.ourbigbook.com entires with custom domain to see if it works, took forever to find that page... https://www.cloudmailin.com/outbound/domains/xxx Domain verification requires a bit of human contact via email.

  They also don't document their Heroku usage well. The envvars generated on Heroku are useless, only to login on their web UI. The send username and password must be obtained on their confusing web ui.
* Sendgrid: OK, this one is the first one I got working on free tier. Saw the email on gmail!!! Just verified automatically after adding like 5 DNS records, but everything just worked. \x[microsoft-outlook] did put it into junk though, but I had a more or less random test message, maybe it was their stupid AI? Yahoo also worked fine. 100 emails a day is not insane, but it is forever, I'm happy with that.

= Compiler
{parent=software}
{wiki}

= Compile
{synonym}

= Compiles
{synonym}

= Compiler toolchain
{parent=compiler}
{wiki}

\x[compiler]{c} + other closely related crap like \x[linker-computing].

= Linker
{disambiguate=computing}
{parent=compiler-toolchain}
{wiki}

Some linker related ansewrs by \x[ciro-santilli]:
* https://stackoverflow.com/questions/3322911/what-do-linkers-do/33690144#33690144[How do linkers and address relocation work?]
* https://stackoverflow.com/questions/29391965/what-is-partial-linking-in-gnu-linker/53959624#53959624[What is incremental linking or partial linking?]
* https://stackoverflow.com/questions/3476093/replacing-ld-with-gold-any-experience/53921263#53921263[GOLD (`-fuse-ld=gold`) linker vs the traditional GNU ld and LLVM ldd]
* https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld/51308031#51308031[What is the -fPIE option for position-independent executables in GCC and ld?]

= Binutils
{c}
{parent=compiler}

= Automatic programming
{parent=compiler}
{wiki}

"automatic programming has always been a euphemism for programming in a higher-level language than was then available to the programmer" sums it up.

The ultimate high level is of course to program with: "computer, make \x[money]", which is the goal of \x[artificial-general-intelligence].

= Automatic code generation
{parent=automatic-programming}

= Code generation
{synonym}

= GNU Compiler Collection
{c}
{parent=compiler}

= gcc
{c}
{synonym}
{title2}

= Reproducible builds
{c}
{parent=compiler}
{wiki}

Reproducible builds allow anyone to verify that a \x[binary-large-object] contains what it claims to contain!

Bibliography:
* https://stackoverflow.com/questions/14653874/how-to-produce-deterministic-binary-output-with-g/31019307#31019307
* https://stackoverflow.com/questions/19511356/how-to-make-android-applications-with-reproducible-builds

= Source-to-source compiler
{parent=compiler}
{wiki}

= Transpiler
{synonym}

= Transpilation
{synonym}

= Transpile
{synonym}

= Transpiles
{synonym}

= Computer-aided design
{parent=software}
{wiki}

= CAD
{c}
{synonym}
{title2}

= Open source CAD software
{parent=computer-aided-design}

= FreeCAD
{c}
{parent=open-source-cad-software}
{wiki}

= Computer graphics
{parent=software}
{wiki}

https://en.wikipedia.org/wiki/List_of_information_graphics_software

= Mathematics illustration software
{parent=computer-graphics}

= Software for drawing geometry diagrams
{title2}
{synonym}

Survey by \x[ciro-santilli]: https://math.stackexchange.com/questions/1985/software-for-drawing-geometry-diagrams/3938216#3938216

Many \x[plotting-software] can be used to create \x[mathematics] illustrations. They just tend to have more data-oriented rather than explanatory-oriented output.

Some notable ones:
* \x[inkscape]{child}

= OpenGL
{c}
{parent=computer-graphics}
{wiki}

\x[ciro-santilli] has some good related articles listed under: \x[articles].

= Freetype GL
{parent=opengl}
{c}

https://github.com/rougier/freetype-gl

Good library to render text in \x[opengl], see also: https://stackoverflow.com/questions/8847899/opengl-how-to-draw-text-using-only-opengl-methods/36065835#36065835

= Khronos Group
{c}
{parent=opengl}
{wiki}

= Khronos
{c}
{synonym}

The fact that they kept the standard \x[open-source] makes them huge heroes, see also: \x[closed-standard].

= opengl-tutorial.org
{parent=opengl}

https://github.com/opengl-tutorials/ogl/

Good modern \x[opengl] tutorial in retained mode with shaders, see also: https://stackoverflow.com/questions/6733934/what-does-immediate-mode-mean-in-opengl/36166310#36166310

= JavaScript graphics library
{parent=computer-graphics}

= Paper.js
{c}
{parent=javascript-graphics-library}

https://github.com/paperjs/paper.js

= Pixi.js
{c}
{parent=javascript-graphics-library}

https://github.com/pixijs/pixi.js

= Two.js
{c}
{parent=javascript-graphics-library}

https://github.com/jonobr1/two.js

Examples at: \a[two-js/].

\x[javascript] library, works both on browser and headless with node.js to SVG.

Feels good. Maybe not ultra featured, and could have more simple examples in docs, but still good.

Vs \x[paper-js] https://github.com/jonobr1/two.js/issues/319

One of the main features of Two.js appears to be the fact that it can natively render to either SVG and canvas, rather than creating SVG through DOM hacks as done by other projects.

= Computer program
{parent=software}
{wiki}

= Program
{synonym}

One specific \x[software] project, typically with a single \x[executable-file-format] entry point.

= Computer security
{parent=software}
{wiki}

As mentioned at \x[computer-security-researcher]{full}, \x[ciro-santilli] really tends to like people from this area.

Also, the type of programming Ciro used to do, \x[systems-programming], is particularly useful to security researchers, e.g. \x[linux-kernel-module-cheat].

The reason he does not go into this is that Ciro would rather fight against the more eternal \x[laws-of-physics] rather than with some typo some dude at \x[apple] did last week and which will be patched in a month.

= Arbitrary code execution
{parent=computer-security}
{title2=ACE}
{wiki}

= Computer security conference
{parent=computer-security}

= DEF CON
{c}
{parent=computer-security-conference}
{title2=1993-}
{wiki}

= Black Hat Briefings
{c}
{parent=def-con}
{title2=1997-}
{wiki}

= BlackHat
{c}
{synonym}

= Computer security researcher
{parent=computer-security}
{wiki}

\x[ciro-santilli] found out that he likes computer security researchers and vice versa.

It's a bit the same reason why he likes \x[physicist]{p}: you can't bullshit with security.

You can't just talk nice and hope for people to belive you.

You can't not try to break things and just \x[security-through-obscurity][keep everyone happy in their false illusion of safety].

You can't do a half job.

If you do any of that, you \i[will] get your ass handed to you in a little gift bag.

All of this is closely linked to \x[ciro-santilli-s-self-perceived-creative-personality] and \x[being-naughty-and-creative-are-correlated].

= Dan Kaminsky
{c}
{parent=computer-security-researcher}
{title2=1979-2021}
{wiki}

A superstar security researcher with some major exploits from in the 2000's.

= Dan Kaminsky approves Linux Kernel Module Cheat
{c}
{parent=dan-kaminsky}

https://twitter.com/dakami/status/1344853681749934080

Oh yeah, that felt good. A few months before he died.

= Len Sassaman
{c}
{parent=computer-security-researcher}
{wiki}

= Data erasure
{parent=computer-security}
{wiki}

= Multi-factor authentication
{parent=computer-security}
{wiki}

= 2FA
{c}
{synonym}
{title2}

= 2FA app
{parent=multi-factor-authentication}

= Google 2FA app token can be updated without checking the old 2FA
{parent=multi-factor-authentication}

Ermm, as of February 2021, I was able to update my 2FA app token with the password alone, it did not ask for the old 2FA.

So what's the fucking point of 2FA then? An attacker with my password would be able to login by doing that!

Is it that Google trusts that particular action because I used the same phone/known IP or something like that?

= OAuth
{c}
{parent=computer-security}
{wiki}

= Password
{parent=computer-security}
{wiki}

= Password manager
{parent=password}
{wiki}

= Plausible deniability
{parent=computer-security}
{wiki}

= Privacy
{parent=computer-security}
{wiki}

= Security through obscurity
{parent=computer-security}
{wiki}

https://stackoverflow.com/questions/533965/why-is-security-through-obscurity-a-bad-idea

Do as I say, not as I do: \x[ciro-santilli-s-stack-overflow-suspension-for-vote-fraud-script-2019], https://meta.stackoverflow.com/questions/381577/is-it-ok-to-have-links-on-how-to-create-sock-puppets-and-gain-rep-fraudulently-i/381635#381635[].

\Video[https://www.youtube.com/watch?v=IH0GXWQDk0Q]
{title=LockPickingLawyer SAINTCON keynote (2021)}
{description=SAINTCON is "Utah's Premiere Security Conference".
* https://youtu.be/IH0GXWQDk0Q?t=900 mentions that https://en.wikipedia.org/wiki/Alfred_Charles_Hobbs[Alfred Charles Hobbs] commented in 1853:
  \Q[Rogues are very keen in their profession, and know already much more than we can teach them]
}

= Kerckhoffs's principle
{c}
{parent=security-through-obscurity}
{wiki}

Basically the opposite of \x[security-through-obscurity], though slightly more focused on \x[cryptography].

= Malware
{parent=computer-security}
{wiki}

= Ransomware
{parent=computer-security}
{wiki}

= Data breach
{parent=computer-security}
{wiki}

= WikiLeaks
{c}
{parent=data-breach}
{tag=wiki}
{wiki}

= List of data breaches
{parent=data-breach}

= United States diplomatic cables leak
{c}
{parent=list-of-data-breaches}
{title2=2010}
{wiki}

= Cablegate
{c}
{synonym}

= Computer user-interface
{parent=software}

= Application programming interface
{parent=computer-user-interface}
{wiki}

= API
{c}
{synonym}
{title2}

= REST API
{c}
{parent=application-programming-interface}
{wiki}

= GraphQL
{c}
{parent=application-programming-interface}
{wiki}

This is really good.

It allows the client to prepare a single request that gets all the data it wants to fill up a given webpage, rather than doing several separate requests.

So it only gets exactly what it needs, and in a single request.

Very sweet. This is the future of the web.

= Command-line interface
{parent=computer-user-interface}
{title2=CLI}
{wiki}

= Desktop environment
{parent=command-line-interface}
{wiki}

\x[tmux] for newbs.

= Graphical user interface
{parent=computer-user-interface}
{wiki}

= GUI
{c}
{synonym}
{title2}

= Splash screen
{parent=graphical-user-interface}
{wiki}

= Qt
{c}
{parent=graphical-user-interface}
{disambiguate=software}
{wiki}

= Data compression
{parent=software}
{wiki}

= Lossless compression
{parent=data-compression}
{wiki}

= Database
{parent=software}
{wiki}

= ACID
{c}
{disambiguate=database}
{parent=database}
{wiki}

= Atomicity
{disambiguate=database systems}
{parent=acid-database}

This means that e.g. if you do an `UPDATE` query on multiple rows, and power goes out half way, either all update, or none update.

This is different from \x[isolation-database-systems], which considers instead what can or cannot happen when multiple queries are running in parallel.

= Isolation
{disambiguate=database systems}
{parent=acid-database}

Determines what can or cannot happen when multiple queries are running in parallel.

See \x[sql-transaction-isolation-level]{full} for the most common context under which this is discussed: \x[sql].

= Database management system
{parent=database}
{wiki}

= DBMS
{c}
{synonym}

A \x[software] that implements some database system, e.g. \x[postgresql] or \x[mysql] are two (widely extended) \x[sql] implementations.

= NoSQL
{c}
{parent=database}
{wiki}

= MongoDB
{c}
{parent=database}
{wiki}

List databases:
``
echo 'show dbs' | mongo
``

Delete database:
``
use mydb
db.dropDatabase()
``
or:
``
echo 'db.dropDatabase()' | mongo mydb
``

View collections within a database:
``
echo 'db.getCollectionNames()' | mongo mydb
``

Show all data from one of the collections: https://stackoverflow.com/questions/24985684/mongodb-show-all-contents-from-all-collections
``
echo 'db.collectionName.find()' | mongo mydb
``

= Install MongoDB on Ubuntu
{parent=mongodb}

Tested as of Ubuntu 20.04, there is no Mongo package available by default due to their change to \x[server-side-public-license], which Debian opposed. Therefore, you have to add their custom PPA as mentioned at: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

= Object-relational mapping
{parent=database}
{wiki=Object–relational_mapping}

= ORM
{c}
{synonym}
{title2}

Per language:
* \x[node-js-orm-library]

= How to decide if an ORM is good?
{parent=object-relational-mapping}

How to decide if an ORM is decent? Just try to replicate every \x[sql] query from \a[nodejs/sequelize/raw/many_to_many.js] on \x[postgresql] and \x[sqlite].

There is only a very finite number of possible reasonable queries on a two table many to many relationship with a join table. A decent ORM \i[has] to be able to do them all.

If it can do all those queries, then the ORM can actually do a good subset of SQL and is decent. If not, it can't, and this will make you suffer. E.g. \x[sequelize] v5 is such an ORM that makes you suffer.

The next thing to check are transactions.

Basically, all of those come up if you try to implement a blog \x[hello-world] world such as \x[gothinkster-realworld] \i[correctly], i.e. without unnecessary inefficiencies due to your ORM on top of underlying SQL, and dealing with concurrency.

= Relational database
{parent=database}
{wiki}

= Relational database management system
{parent=relational-database}
{tag=database-management-system}

= RDBMS
{c}
{synonym}
{title2}

= SQL
{c}
{parent=relational-database-management-system}
{wiki}

= SQL example
{c}
{parent=sql}

We have some runnable \x[sql] examples with \x[assertion-software-development]{p} under the `sequelize/raw` directory.

These examples are written in the \x[sequelize] library using raw queries.

Sequelize is used minimally, just to feed raw queries in transparently to any underlying database, and get minimally parsed results out for us, which we then assert with standard \x[javascript]. The queries themselves are all written by hand.

By default the examples run on \x[sqlite]. Just like the examples from \x[sequelize-example], you can set the database at runtime as:
* `./index.js` or `./index.js l`: \x[sqlite]
* `./index.js p`: \x[postgresql]. You must manually create a database called `tmp` and ensure that peer authentication works for it

Here we list only examples which we believe are standard SQL, and should therefore work across different SQL implementations:
* \a[nodejs/sequelize/raw/index.js]: basic hello world to demonstrate the setup and very simple functionality
* \a[nodejs/sequelize/raw/many_to_many.js]: illustrates \x[many-to-many-relation]{p}:
  * \x[join-sql]
  * \x[group-by-sql]
  * \a[nodejs/sequelize/raw/group_by_extra_column.js]: let's see if it blows up or not on different DB systems, \x[sqlite3-node-js-package] allows it:
    * https://github.com/sequelize/sequelize/issues/5481#issuecomment-964387232
    * https://dba.stackexchange.com/questions/141594/how-select-column-does-not-list-in-group-by-clause/141600 says that it was allowed in \x[sql-1999] when there are no ambiguities due to constraints, e.g. when grouping by unique columns
    * https://github.com/postgres/postgres/blob/REL_13_5/src/test/regress/sql/functional_deps.sql#L27 shows that \x[postgresql] wants it to work for `UNIQUE NOT NULL`, but they just haven't implemented it as of 13.5, where it only works if you group by `PRIMARY KEY`
    * https://dba.stackexchange.com/questions/158015/why-can-i-select-all-fields-when-grouping-by-primary-key-but-not-when-grouping-b also says that `UNIQUE NOT NULL` doesn't work. Dan Lenski then points to rationale mailing list thread: 
* \x[sql-transaction] examples:
  * \a[nodejs/sequelize/raw/commit_error.js]: https://stackoverflow.com/questions/27245101/why-should-we-use-rollback-in-sql-explicitly/27245234#27245234 and https://stackoverflow.com/questions/48277519/how-to-use-commit-and-rollback-in-a-postgresql-function/48277708#48277708 suggest that on \x[postgresql], once something fails inside a transaction, all queries in the current transaction are ignored, and `COMMIT` simply does a `ROLLBACK`. Let's check. Yup, true for Postgres, but false for \x[sqlite], SQLite just happily runs anything it can, you really need `ROLLBACK` for it.
  * \x[sql-isolation-level-example]{child}

= SQL aggregate function
{c}
{parent=sql}

= SQL `COUNT` function
{c}
{parent=sql-aggregate-function}

Have a look at some interesting examples under \a[nodejs/sequelize/raw/many_to_many.js].

= SQL transaction
{c}
{parent=sql}

= SQL transaction isolation level
{c}
{parent=sql-transaction}

= SQL isolation level
{synonym}

Each transaction isolation level specifies what can or cannot happen when two queries are being run in parallel, i.e.: the \x[memory-semantics] of the system.

Remember that queries can affects thousands of rows, and database systems like \x[postgresql] can run multiple such queries at the same time.

Good summary on the \x[postgresql] page: https://www.postgresql.org/docs/14/transaction-iso.html

Implementation specifics:
* \x[sqlite-isolation-levels]{child}

= SQL READ UNCOMMITTED isolation level
{c}
{parent=sql-transaction-isolation-level}

= SQL READ COMMITTED isolation level
{c}
{parent=sql-transaction-isolation-level}

Example where this level is sufficient: \x[file/nodejs/sequelize/raw/parallel_update_async.js].

= SQL REPEATABLE READ isolation level
{c}
{parent=sql-transaction-isolation-level}

Vs \x[sql-serializable-isolation-level] on \x[postgresql]: https://dba.stackexchange.com/questions/284744/postgres-repeatable-read-vs-serializable

\x[file/nodejs/sequelize/raw/parallel_create_delete_empty_tag.js] is an example which experimentally seems to be solved by `REAPEATABLE READ`, although we are not sure that this is truly the case and why. What is clear is that that example is not solved by the \x[sql-read-committed-isolation-level].

In \x[postgresql], this is the first isolation level which can lead to \x[postgresql-serialization-failure]{p}, this does not happen to \x[sql-read-committed-isolation-level] in that \x[dbms]. You then have to retry the transaction.

= SQL SERIALIZABLE isolation level
{c}
{parent=sql-transaction-isolation-level}

= SQL isolation level example
{c}
{parent=sql-transaction-isolation-level}

= SQL parallel update example
{c}
{parent=sql-isolation-level-example}

= sequelize/raw/parallel_update_async.js
{id=file/nodejs/sequelize/raw/parallel_update_async.js}
{parent=sql-parallel-update-example}

This section is about: \a[nodejs/sequelize/raw/parallel_update_async.js]

\a[nodejs/sequelize/raw/parallel_update_worker_threads.js] contains a base example that can be used to test what can happen when queries are being run in parallel. But it is broken due to a \x[sqlite3-node-js-package] bug: https://github.com/mapbox/node-sqlite3/issues/1381[]...

\a[nodejs/sequelize/raw/parallel_update_async.js] is an \x[async-javascript] version of it. It should be just parallel enough to allow observing the same effects.

This is an example of a transaction where the \x[sql-read-committed-isolation-level] if sufficient.

These examples run queries of type:
``
UPDATE "MyInt" SET i = i + 1
``

Sample execution:
``
node --unhandled-rejections=strict ./parallel_update_async.js p 10 100
``
which does:
* \x[postgresql], see other databases options at \x[sql-example]
* 10 threads
* 100 increments on each thread

The fear then is that of a classic \x[read-modify-write] failure.

But as https://www.postgresql.org/docs/14/transaction-iso.html page makes very clear, including with an explicit example of type `UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;`, that the default isolation level, \x[sql-read-committed-isolation-level], already prevents any problems with this, as the update always re-reads selected rows in case they were previously modified.
\Q[If the first updater commits, the second updater will ignore the row if the first updater deleted it, otherwise it will attempt to apply its operation to the updated version of the row]

Since in \x[postgresql] "Read uncommitted" appears to be effectively the same as "Read committed", we won't be able to observe any failures on that database system for this example.

\x[file/nodejs/sequelize/raw/parallel_create_delete_empty_tag.js] contains an example where things can actually blow up in read committed.

= nodejs/sequelize/raw/parallel_select_and_update.js
{file}
{parent=sql-parallel-update-example}

This example is similar to \x[file/nodejs/sequelize/raw/parallel_update_async.js], but now we are doing a separate SELECT, later followed by an update:
* `SELECT FROM` to get i
* update on Js code `newI = i + 1`
* `UPDATE SET` the `newI`

Although this specific example is useless in itself, as we could just use `UPDATE "MyInt" SET i = i + 1` as in \x[file/nodejs/sequelize/raw/parallel_update_async.js], which automatically solves any concurrency issue, this kind of code could be required for example if the update was a complex function not suitably implemented in SQL, or if the update depends on some external data source.

Sample execution:
``
node --unhandled-rejections=strict ./parallel_select_and_update.js p 2 10 'READ COMMITTED'
``
which does:
* \x[postgresql], see other databases options at \x[sql-example]
* 2 threads
* 10 increments on each thread

Another one:
``
node --unhandled-rejections=strict ./parallel_select_and_update.js p 2 10 'READ COMMITTED' 'FOR UPDATE'
``
this will run \x[select-for-update] rather than just \x[select-sql]

Observed behaviour under different \x[sql-transaction-isolation-level]{p}:
* `READ COMMITTED`: fails. Nothing in this case prevents:
  * thread 1: SELECT, obtains i = 0
  * thread 2: SELECT, obtains i = 0
  * thread 2: newI = 1
  * thread 2: UPDATE i = 1
  * thread 1: newI = 1
  * thread 1: UPDATE i = 1
* `REPEATABLE READ`: works. the manual mentions that if multiple concurrent updates would happen, only the first commit succeeds, and the following ones fail and rollback and retry, therefore preventing the loss of an update.
* `READ COMMITTED` + `SELECT FOR UPDATE`: works. And does not do rollbacks, which probably makes it faster. With `p 10 100`, `REPEATABLE READ` was about 4.2s and `READ COMMITTED` + `SELECT FOR UPDATE` 3.2s on \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017].

  `SELECT FOR UPDATE` should be enough as mentioned at: https://www.postgresql.org/docs/13/explicit-locking.html#LOCKING-ROWS
  \Q[FOR UPDATE causes the rows retrieved by the SELECT statement to be locked as though for update. This prevents them from being locked, modified or deleted by other transactions until the current transaction ends. That is, other transactions that attempt UPDATE, DELETE, SELECT FOR UPDATE, SELECT FOR NO KEY UPDATE, SELECT FOR SHARE or SELECT FOR KEY SHARE of these rows will be blocked until the current transaction ends; conversely, SELECT FOR UPDATE will wait for a concurrent transaction that has run any of those commands on the same row, and will then lock and return the updated row (or no row, if the row was deleted). Within a REPEATABLE READ or SERIALIZABLE transaction, however, an error will be thrown if a row to be locked has changed since the transaction started. For further discussion see Section 13.4.]

A non-raw version of this example can be seen at: \x[file/nodejs/sequelize/parallel_select_and_update.js].

= nodejs/sequelize/raw/parallel_select_and_update_deterministic.js
{file}
{parent=file/nodejs/sequelize/raw/parallel_select_and_update.js}

This section is about the file: \a[nodejs/sequelize/raw/parallel_select_and_update_deterministic.js]

This example contains a deterministic demo of when \x[postgresql-serialization-failure]{p} may happen.

Tested on \x[postgresql] 13.5.

= nodejs/sequelize/raw/parallel_create_delete_empty_tag.js
{file}
{parent=sql-parallel-update-example}

In this example, posts have tags. When a post is deleted, we check to see if there are now any empty tags, and now we want to delete any empty tags that the post deletion may have created.

If we are creating and deleting posts concurrently, a naive implementation might wrongly delete the tags of a newly created post.

This could be due to a concurrency issue of the following types.

Failure case 1:
* thread 2: delete old post
* thread 2: find all tags with 0 posts. Finds `tag0` from the deleted old post which is now empty.
* thread 1: create new post, which we want to have tag `tag0`
* thread 1: try to create a new tag `tag0`, but don't because it already exists, this is done using \x[sqlite]'s `INSERT OR IGNORE INTO` or \x[postgresql]'s `INSERT ... ON CONFLICT DO NOTHING`
* thread 1: assign `tag0` to the new post by adding an entry to the join table
* thread 2: delete all tags with 0 posts. It still sees from its previous search that `tag0` is empty, and deletes it, which then cascades into the join table
which would result in the new post incorrectly not having the `tag0`.

Failure case 2:
* thread 2: delete old post
* thread 2: find all tags with 0 posts
* thread 1: create new post
* thread 1: try to create a new tag `tag0`, but don't because it already exists
* thread 2: delete all tags with 0 posts. It still sees from its previous search that `tag0` is empty, and deletes it
* thread 1: assign `tag0` to the new post
which leads to a foreign key failure, because the tag does not exist anymore when the assignment happens.

Failure case 3:
* thread 2: delete old post
* thread 1: create new post, which we want to have tag `tag0`
* thread 1: try to create a new tag `tag0`, and succeed because it wasn't present
* thread 2: find all tags with 0 posts, finds the tag that was just created
* thread 2: delete all tags with 0 posts, deleting the new tag
* thread 1: assign `tag0` to the new post
which leads to a foreign key failure, because the tag does not exist anymore when the assignment happens.

Sample executions:
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'READ COMMITTED'`: \x[postgresql], 9 tags, DELETE/CREATE the `tag0` test tag 1000 times, use `READ COMMITTED`

  Execution often fails, although not always. The failure is always:
  ``
  error: insert or update on table "PostTag" violates foreign key constraint "PostTag_tagId_fkey"
  ``
  because the:
  ``
  INSERT INTO "PostTag"
  ``
  tries to insert a tag that was deleted in the other thread, as it didn't have any corresponding posts, so this is the foreign key failure.

  TODO: we've never managed to observe the failure case in which `tag0` is deleted. Is it truly possible? And if not, by which guarantee?
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'READ COMMITTED' 'FOR UPDATE'`: do a `SELECT ... FOR UPDATE` before trying to `INSERT`.

  This is likely correct and the fastest correct method according to our quick benchmarking, about 20% faster than `REPEATABLE READ`.

  We are just now 100% sure it is corret becase we can't find out if the `SELECT` in the `DELETE` subquery could first select some rows, which are then locked by the tag creator, and only then locked by `DELETE` after selection. Or does it re-evaludate the `SELECT` even though it is in a subquery?
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'REPEATABLE READ'`: repeatable read

  We've never observed any failures with this level. This should likely fix the foreign key issue according to the PostgreSQL docs, since:
  * the `DELETE "Post"` commit cannot start to be seen only in the middle of the thread 1 transaction
  * and then if DELETE happened, the thread 1 transaction will detect it, ROLLBACK, and re-run. TODO how does it detect the need rollback? Is it because of the foreign key? It is very hard to be sure about this kind of thing, just can't find the information. Related: \x[postgresql-serialization-failure].
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'SERIALIZABLE'`: serializable
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'NONE'`: magic value, don't use any transaction. Can blow up of course, since even less restrictions than `READ COMMITTED`
All executions use 2 threads.

Some theoretical notes:
* Failure case 3 is averted by a `READ COMMITTED` transaction, because thread 2 won't see the uncommitted tag that thread 1 created, and therefore won't be able to delete it

https://stackoverflow.com/questions/10935850/when-to-use-select-for-update from \x[select-for-update] also talks about a similar example, and has relevant answers.

= SQL keyword
{parent=sql}

= GROUP BY
{c}
{disambiguate=SQL}
{parent=sql-keyword}
{wiki=Group_by_(SQL)}

= JOIN
{c}
{disambiguate=SQL}
{parent=sql-keyword}
{wiki=Join_(SQL)}

= SQL prefix column names with the table they came from
{c}
{parent=join-sql}

It is mind blowing that this is not possible... the only way to avoid ambiguity in JOINs with column name conflicts is to give aliases to each column...

* https://stackoverflow.com/questions/329931/sql-select-join-is-it-possible-to-prefix-all-columns-as-prefix
* https://stackoverflow.com/questions/13153344/in-a-join-how-to-prefix-all-column-names-with-the-table-it-came-from

= SELECT
{c}
{disambiguate=SQL}
{parent=sql-keyword}
{wiki=Select_(SQL)}

= SELECT FOR UPDATE
{c}
{parent=select-sql}

An example where `SELECT FOR UPDATE` is a good solution to an use case can be seen at: \x[file/nodejs/sequelize/raw/parallel_select_and_update.js].

`SELECT FOR UPDATE` vs/together with the \x[sql-transaction-isolation-level] is commented at: https://stackoverflow.com/questions/10935850/when-to-use-select-for-update[].

= SQL standard
{c}
{parent=sql}
{wiki}

A quick look at \x[postgresql]'s compliance notes: https://www.postgresql.org/docs/13/features.html shows the complete utter mess that this standard is. Multiple compliance levels that no one fully implements and optional features everywhere.

= SQL standard version
{c}
{parent=sql-standard}

= SQL:1999
{c}
{parent=sql-standard-version}

= SQL implementation
{c}
{parent=sql}
{wiki}

= MySQL
{c}
{parent=sql-implementation}
{wiki}

Login without password: https://askubuntu.com/questions/915585/how-to-login-mysql-shell-when-mysql-have-no-password
``
sudo mysql
``
works on \x[ubuntu] 20.10.

Run command from CLI https://stackoverflow.com/questions/1602904/how-do-you-run-a-single-query-through-mysql-from-the-command-line
``
sudo mysql -e 'SHOW DATABASES'
``

Create user for further logins without `sudo` https://askubuntu.com/questions/915585/how-to-login-mysql-shell-when-mysql-have-no-password/1325689#1325689[]:
``
sudo mysql -e "CREATE USER $USER"
``

Create test user with password:
``
sudo mysql -e 'CREATE USER user0 IDENTIFIED WITH mysql_native_password BY "a"'
sudo mysql -e 'GRANT ALL PRIVILEGES ON database_name.* TO "user0"'
``
and login as that user:
``
mysql -u user0 -p
``
Login with password given on the command line:
``
mysql -u user0 -pmypassword
``
The `IDENTIFIED WITH mysql_native_password` part is to overcome "Client does not support authentication protocol requested by server" when connecting from \x[node-js].

List users:
``
sudo mysql -e 'SELECT * FROM mysql.user'
``

View permissions for each user on each DB: https://serverfault.com/questions/263868/how-to-know-all-the-users-that-can-access-a-database-mysql
``
sudo mysql -e 'SELECT * FROM mysql.db'
``

List databases:
``
sudo mysql -e 'SHOW DATABASES'
``

Create database:
``
sudo mysql -e 'CREATE DATABASE mydb0'
``

Destroy database:
``
sudo mysql -e 'DROP DATABASE mydb0'
``

Show tables in database:
``
sudo mysql -e 'SHOW TABLES' mydb0
``
or:
``
sudo mysql -e 'SHOW TABLES FROM mydb0'
``

= MariaDB
{c}
{parent=mysql}
{wiki}

Dude's a legend. Sells company for a few million. Then forks the open source project next year. Love it.

= PostgreSQL
{c}
{parent=sql-implementation}
{wiki}

= Postgres
{c}
{title2}
{synonym}

PostgreSQL feels good. Had a look at the source tree, and also felt good. If \x[oracle] is the \x[microsoft] of database, Postgres is the \x[linux], and \x[mysql] (or more precisely \x[mariadb]) is the \x[freebsd] (i.e. the one that got delayed by legal issues). Excepts that their \x[software-license]{p} were accidentally swapped.

The only problem with Postgres is its name. PostgreSQL is so unpronounceable and so untypeable that you should just call it "Postgres" like everyone else.

= PostgreSQL getting started
{c}
{parent=postgresql}

On Ubuntu 20.10 PostgreSQL 12.6, login with `psql` on my default username without \x[sudo] fails with: https://stackoverflow.com/questions/11919391/postgresql-error-fatal-role-username-does-not-exist

This is the one that worked on Ubuntu 21.04: https://stackoverflow.com/questions/11919391/postgresql-error-fatal-role-username-does-not-exist/38444152#38444152
``
sudo -u postgres createuser -s $(whoami)
createdb $(whoami)
``
Explanation:
* `sudo -u postgres` uses the `postgres` user via \x[peer-authentication]
* `-s` in `createuser -s`: make it a superuser
* `createdb`: TODO why do we have to create a table with the same name as the user? Otherwise login fails.

You can now run `psql` without any password. This works without password due to peer authentication, 
``
sudo cat /etc/postgresql/12/main/pg_hba.conf
``
shows that peer authentication is available to all users apparently:
``
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
``

List users:
``
psql -c '\du'
``
output:
``
                                    List of roles
  Role name  |                         Attributes                         | Member of 
-------------+------------------------------------------------------------+-----------
 ciro        | Superuser, Create role, Create DB                          | {}
 owning_user |                                                            | {}
 postgres    | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
``

Delete user later on:
``
psql -c 'DROP USER username;'
``

Create a database:
``
createdb testdb0
``

Help toplevel:
``
help
``

Get help for Postgres commands such as `\h` and so on:
``
\?
``

List supported SQL commands:
``
\h
``

Show syntax for one type of command:
``
\h SELECT
``

List all databases:
``
psql -c '\l'
``
which shows:
``
    Name     |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
-------------+----------+----------+-------------+-------------+-----------------------
 ciro        | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 |
 postgres    | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 |
 template0   | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 | =c/postgres          +
             |          |          |             |             | postgres=CTc/postgres
 template1   | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 | =c/postgres          +
             |          |          |             |             | postgres=CTc/postgres
 testdb0     | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 |
(6 rows)
``

Delete a database:
``
psql -c 'DROP DATABASE "testdb0";'
``

If you didn't give a database from the command line e.g.:
``
psql
``
you can do that afterwards with:
``
\c testdb0
``

Let's create a table and test that it is working:
``
psql testdb0 -c 'CREATE TABLE table0 (int0 INT, char0 CHAR(16));'
``

List tables, no special tables:
``
psql testdb0 -c '\dt'
``
gives:
``
        List of relations
 Schema |  Name  | Type  | Owner
--------+--------+-------+-------
 public | table0 | table | ciro
(1 row)
``

View table schema: https://stackoverflow.com/questions/109325/postgresql-describe-table
``
psql testdb0 -c '\d+ table0'
``
output:
``
                                      Table "public.table0"
 Column |     Type      | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------------+-----------+----------+---------+----------+--------------+-------------
 int0   | integer       |           |          |         | plain    |              | 
 char0  | character(16) |           |          |         | extended |              | 
``

Insert some data into it and get the data out:
``
psql testdb0 -c "INSERT INTO table0 (int0, char0) VALUES (2, 'two'), (3, 'three'), (5, 'five'), (7, 'seven');"
psql testdb0 -c 'SELECT * FROM table0;'
``
output:
``
 int0 |      char0
------+------------------
    2 | two
    3 | three
    5 | five
    7 | seven
(4 rows)
``

Delete the table:
``
psql testdb0 -c 'DROP TABLE table0;'
``

= Create a test user in PostgreSQL
{parent=postgresql}

In order to create a test user with password instead of \x[peer-authentication], let's create test user:
``
createuser -P user0
createdb user0
``
`-P` makes it prompt for the users password.

Alternatively, to create the password non-interactively https://stackoverflow.com/questions/42419559/postgres-createuser-with-password-from-terminal[]:
``
psql -c "create role NewRole with login password 'secret'"
``
Can't find a way using the `createuser` helper.

We can then login with that password with:
``
psql -U user0 -h localhost
``
which asks for the password we've just set, because the `-h` option turns off peer authentication, and turns off password authentication.

The password can be given non-interactively as shown at https://stackoverflow.com/questions/6405127/how-do-i-specify-a-password-to-psql-non-interactively with the `PGPASSWORD` \x[environment-variable]:
``
PGPASSWORD=a psql -U user0 -h localhost
``

Now let's create a test database which `user0` can access with an existing superuser account:
``
createdb user0db0
psql -c 'GRANT ALL PRIVILEGES ON DATABASE user0db0 TO user0'
``

We can check this permission with:
``
psql -c '\l'
``
which now contains:
``
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
 user0db0  | ciro     | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 | =Tc/ciro             +
           |          |          |             |             | ciro=CTc/ciro        +
           |          |          |             |             | user0=CTc/ciro
``
The permission letters are explained at:
* https://www.postgresql.org/docs/13/ddl-priv.html
* https://stackoverflow.com/questions/25691037/postgresql-permissions-explained/25691587

`user0` can now do the usual table operations on that table:
``
PGPASSWORD=a psql -U user0 -h localhost user0db0 -c 'CREATE TABLE table0 (int0 INT, char0 CHAR(16));'
PGPASSWORD=a psql -U user0 -h localhost user0db0 -c "INSERT INTO table0 (int0, char0) VALUES (2, 'two'), (3, 'three'), (5, 'five'), (7, 'seven');"
PGPASSWORD=a psql -U user0 -h localhost user0db0 -c 'SELECT * FROM table0;'
``

= Peer authentication
{parent=postgresql}

https://www.postgresql.org/docs/13/auth-peer.html

Uses the name of the current \x[linux] user to login without a \x[password].

= PostgreSQL logging
{parent=postgresql}

https://stackoverflow.com/questions/722221/how-to-log-postgresql-queries

\x[ubuntu-21-10] has a certain default level of logging by default to:
``
/var/log/postgresql/postgresql-13-main.log
``
but it does not log everything, only/mostly errors it seems.

Setting:
``
log_statement = 'all'
``
under:
``
/etc/postgresql/13/main/postgresql.conf
``
and then restarting the server:
``
sudo service restart postgresql
``
just works.

Realtime monitoring for long queries instead: https://stackoverflow.com/questions/8597516/app-to-monitor-postgresql-queries-in-real-time

= PostgreSQL serialization failure
{parent=postgresql}

When using \x[sql-repeatable-read-isolation-level] and \x[sql-serializable-isolation-level], concurrent transactions may fail with a serialization failure, and then you might need to retry them. You server code or your ORM must always account for that.

A good way to explore when it happens is to use the example

Related questions:
* https://stackoverflow.com/questions/7705273/what-are-the-conditions-for-encountering-a-serialization-failure
* https://stackoverflow.com/questions/59351109/error-could-not-serialize-access-due-to-concurrent-update
* https://stackoverflow.com/questions/50797097/postgres-could-not-serialize-access-due-to-concurrent-update/51932824

= SQLite
{c}
{parent=sql-implementation}
{wiki}

The minimalimsm, serverlessness/lack of temporary caches/lack of permission management, Hipp's religious obsession with efficiency, the use of their own pure Fossil \x[version-control]https://sqlite.org/whynotgit.html{ref}. Wait, scrap that last one. Pure beauty!

Official \x[git] mirror: https://github.com/sqlite/sqlite

Create a table
``
sqlite3 db.sqlite3 "
CREATE TABLE 'IntegerNames' (int0 INT, char0 CHAR(16));
INSERT INTO 'IntegerNames' (int0, char0) VALUES (2, 'two'), (3, 'three'), (5, 'five'), (7, 'seven');
"
``

List tables:
``
sqlite3 db.sqlite3 '.tables'
``
output:
``
IntegerNames
``

Show schema of a table:
``
sqlite3 db.sqlite3 '.schema IntegerNames'
``
outputs the query that would generate that table:
``
CREATE TABLE IF NOT EXISTS 'IntegerNames' (int0 INT, char0 CHAR(16));
``

Show all data in a table:
``
sqlite3 db.sqlite3 'SELECT * FROM IntegerNames'
``
output:
``
2|two
3|three
5|five
7|seven
``

= SQLite isolation levels
{c}
{parent=sqlite}
{wiki}

https://www.sqlite.org/pragma.html#pragma_read_uncommitted mentions:

____
The default isolation level for SQLite is SERIALIZABLE
____

It does not appear possible to achieve the other two levels besides SERIALIZABLE and READ UNCOMMITED

https://www.sqlite.org/isolation.html

= Node.js SQLite bindings
{parent=sqlite}

= `sqlite3` Node.js package
{parent=node-js-sqlite-bindings}

* https://github.com/mapbox/node-sqlite3
* https://www.npmjs.com/package/sqlite3

Includes its own copy of sqlite3, you don't use the system one, which is good to ensure compatibility. The version is shown at: https://github.com/mapbox/node-sqlite3/blob/918052b538b0effe6c4a44c74a16b2749c08a0d2/deps/common-sqlite.gypi#L3 \x[sqlite] source is tracked compressed in-tree: https://github.com/mapbox/node-sqlite3/blob/918052b538b0effe6c4a44c74a16b2749c08a0d2/deps/sqlite-autoconf-3360000.tar.gz horrendous. This explains why it takes forever to clone that repository. People who don't believe in git submodules, there's even an official Git mirror at: https://github.com/sqlite/sqlite

It appears to spawn its own \x[thread]{p} via its \x[c-programming-language] extension (since \x[javascript-is-single-threaded] and and \x[sqlite] is not \x[server]-based), which allows for parallel queries using multiple threads: https://github.com/mapbox/node-sqlite3/blob/v5.0.2/src/threading.h

Hello world example: \a[nodejs/node-sqlite3/index.js].

As of 2021, this had slumped back a bit, as maintainers got tired. Unmerged pull requests started piling more, and \x[better-sqlite3-node-js-package] started pulling ahead a little.
* https://github.com/mapbox/node-sqlite3/issues/1381 `FATAL ERROR: Error::ThrowAsJavaScriptException napi_throw` with \x[node-js-worker-threads] vs \x[better-sqlite3-node-js-package] https://github.com/JoshuaWise/better-sqlite3/issues/237

= `better-sqlite3` Node.js package
{parent=node-js-sqlite-bindings}

As claimed on their README, their operation truly appears to be 10x faster than the node-sqlite package!! It is insane!! How can that other package still exist at all?

The only big problem was the lack of \x[orm], but people are looking into that by adding it to \x[sequelize]:
* https://github.com/JoshuaWise/better-sqlite3/issues/23
* https://github.com/sequelize/sequelize/issues/11400

= Table relationship
{parent=database}
{wiki=Associative_entity}

= One-to-one
{disambiguate=data-model}
{parent=table-relationship}
{wiki}

= One-to-many
{parent=table-relationship}
{wiki=One-to-many_(data_model)}

= Many-to-one
{synonym}
{title2}

= Many-to-many
{parent=table-relationship}
{wiki=Many-to-many_(data_model)}

= Many-to-many relation
{synonym}

= File manager
{parent=software}
{wiki}

\x[ciro-santilli] used to use file managers in the past.

But he finally converted to a shell `cd` aliases that auto-`ls`: https://github.com/cirosantilli/dotfiles/blob/a51bcc324f0cff0eddd4c3bb8654ec223a0adb7b/home/.bashrc#L1058

= Krusader
{parent=file-manager}
{wiki}

The most powerful \x[gui] \x[file-manager] ever?? Infinite configurability??

\x[ciro-santilli] wasted some time on it before he gave up on file managers altogether.

= Ranger
{disambiguate=file manager}
{parent=file-manager}
{wiki}

\x[ciro-santilli] considered it before he stopped using file managers altogether, it is not bad.

= File sharing
{parent=software}
{wiki}

= BitTorrent
{c}
{parent=file-sharing}
{wiki}

= Game engine
{parent=software}
{wiki}

A library to make \x[game]{p}{parent}.

= Cocos2d
{c}
{parent=game-engine}
{wiki}

\x[ciro-santilli] considered this as the basis for \x[ciro-s-2d-reinforcement-learning-games], but ultimately decided it was a bit too messy. Nice overall though.

= Urho3D
{c}
{parent=game-engine}
{wiki}

Their project lead as of 2018 was pro-CCP: https://github.com/cirosantilli/china-dictatorship/blob/aa1176c57fc2929465294e520b43b50d44e202ba/communities-that-censor-politics.md

= Geographic information system
{parent=software}
{title2=GIS}
{wiki}

= Geographic information system file format
{parent=geographic-information-system}

= Keyhole Markup Language
{c}
{parent=geographic-information-system-file-format}
{title2=KML}
{wiki}

Originally by \x[keyhole-inc], which the nbecame \x[google-maps], but the format seems standardized and has non-Google support, so should be OK.

= List of geographic information systems
{parent=geographic-information-system}

= Google Maps
{c}
{parent=list-of-geographic-information-systems}
{tag=google-product}
{wiki}

Owned/developed by \x[google]{parent} as of 2020.

Early on jumpstarted from several acquisitions, notably \x[keyhole-inc].

= Keyhole Inc.
{c}
{parent=google-maps}

= Google Street View
{c}
{parent=google-maps}
{wiki}

Street View's go into the past mode is the dream of every archaeologist. Ciro can only dream of a magic street view that allows going back to earlier centuries and beyond... isn't it amazing to think that people in the future will have that ability to time travel back to around the year 2006? Ciro wonders how long \x[google] will be able to keep storing data like that.

Thanks, \x[keyhole-inc][CIA].

= OpenStreetMaps
{c}
{parent=list-of-geographic-information-systems}
{title2=OSM}
{wiki}

It is rare to find a project with such a ridiculously high importance over funding ratio.

E.g., as of 2020, their help login https://help.openstreetmap.org/ shows MyOpenID as an option, which was discontinued in 2014, and not \x[google] \x[oauth].

They do still seem to have a bit more activity than https://gis.stackexchange.com/questions/tagged/openstreetmap on \x[stack-exchange].

Complaints:
* \x[transliteration]{c} is off by default!...... https://wiki.openstreetmap.org/wiki/Translation You just have to learn all scripts ever. Good luck with the \x[chinese-character]{p}. Genius.
* In order to see information about places, you have to click "Query features" on the toolbar first. Who made such a terrible UI? Direct click is a much, and so easy to implement?
* It is impossible to discern different types of paths and other walking path symbols, the symbols are too small, and just scale down to a line no matter how much you zoom in.
* Power lines are way too visible. While that is kind of cool, it is useless and distracting to most people most of the time.
* No street-level imagery...: https://help.openstreetmap.org/questions/1178/adding-photos
* No aerial imagery: https://help.openstreetmap.org/questions/6849/how-can-i-see-the-aerial-imagery-without-editing-the-map But that is kind of understandable, as that one might not be free.
* No restaurant ratings: https://help.openstreetmap.org/questions/64852/ratings-for-pois because it is "Subjective". OMG those people, such a huge value powerhouse wasted.

  Not just for restaurants, but for other things as well, e.g. sharing of good cycle circuits.

All of this is a shame, because they do have some incredible data that you cannot find easily on other maps because people just edited it up.

= Ordnance Survey
{c}
{parent=list-of-geographic-information-systems}
{wiki}

Has some of the best map data available for the \x[united-kingdom], but their data appears to be proprietary?

= Integrated development environment
{parent=software}
{wiki}

= IDE
{c}
{synonym}
{title2}

IDEs are absolutely essential for developing complex software.

The funny thing is that you don't notice this until someone shows it to you. But once you see it, there is not turning back, just like \x[steve-jobs-customers-don-t-know-what-they-want-quote].

Unfortunately, after the https://movingfulcrum.com/the-fall-of-eclipse/[Fall of Eclipse] (https://web.archive.org/web/20190824081229/https://movingfulcrum.com/the-fall-of-eclipse/[archive]), the IDE landscape in 2019 is horrible and split between:
* highly buggy but still feature rich Eclipse
* many may many other feature lacking options using possibly more trendy and forward lasting implementations like https://en.wikipedia.org/wiki/Electron_(software_framework)[Electron]
* awesome cross-platform proprietary https://en.wikipedia.org/wiki/JetBrains[JetBrains] IDEs
* the God-like Windows-only proprietary language-lacking Visual Studio

Programmers of the world: unite! Focus on one IDE, and make it work for all languages and all build systems. Give it all the features that Eclipse has, but none of the bugginess. Work with top project to make sure the IDE works for all top projects.

Projects of the world: support one IDE, with in-tree configuration. Complex integration is often required between the IDE and the build system, and successful projects must to that once for all developers. Either do this, or watch you complex project wither away.

Build tool maintainers: make it possible for IDEs to support your tool! E.g., implement https://clang.llvm.org/docs/JSONCompilationDatabase.html[JSON Compilation Database] output so that IDEs can read the exact compiler commands from that, in order to automatically determine how files should be parsed! Or better, just use libllvm in your IDE itself as the main parser.

Ciro is evaluating some IDEs at: https://github.com/cirosantilli/ide-test-projects

= Vim
{c}
{parent=integrated-development-environment}
{wiki=Vim_(text_editor)}

Before we get a decent open source \x[integrated-development-environment], what else can you do?

But also perfect for small one-off files when you don't have the patience to setup said \x[ide].

vim's defaults are atrocious for the 21st century! Vundle is reasonable as an ad-hoc package manager, but it can't set fixed versions of packages:
* https://stackoverflow.com/questions/15259868/vundle-plugin-install-concrete-version-of-plugin/67870413#67870413
* https://github.com/VundleVim/Vundle.vim/pull/681

= vader.vim
{parent=integrated-development-environment}

https://github.com/junegunn/vader.vim

Vimscript unit testing!!!

= plasticboy/vim-markdown
{parent=vader-vim}

https://github.com/plasticboy/vim-markdown

\x[ciro-santilli] contributed a bit to this, and was even given push rights, see also: see also: \x[ciro-santilli-s-minor-projects].

= honza/vim-snippets
{parent=vader-vim}

https://github.com/honza/vim-snippets

= Vimium
{parent=vader-vim}

https://vimium.github.io/

Since you can't escape \x[shitty] browser \x[gui]{p} and live in the command line, the next best thing you can do is to bring Vim bindings to your browser :-)

There is one major annoyance: you can't use ESC to leave the address bar focus, but using Tab as a workaround works:
* https://superuser.com/a/1560178/128124

= Memory management
{parent=software}
{wiki}

= Garbage collection
{disambiguate=computer science}
{parent=software}
{wiki}

= Garbage collection
{synonym}

= Messaging software
{parent=software}

= Messaging software that force you to have a mobile phone
{parent=messaging-software}

Chat programs that don't have a proper web-only operation and force you to have a mobile phone, e.g. \x[whatsapp]{child}.

Heck, even \x[signal-software]{child}, which is supposed to be super secure and good for your privacy, forces you to disclose your freaking cell phone to all contacts! https://lifehacker.com/how-to-use-signal-without-revealing-your-private-phone-1818996580

What is my phone breaks? What if I don't want to have a \x[fucking] phone? What if I move countries and have to change the \x[fucking] number? Also evil but less because done by all: chat programs that can't send you an email https://webapps.stackexchange.com/questions/41528/how-can-i-automatically-forward-facebook-messages-to-my-email-or-phone[if you don't see the message in X minutes].

\x[europe][European Union], time to force those evil \x[company]{p} to use support open standards like \x[xmpp]?

The solution to "how to prevent spam" is simple: your ID is a public key that you own the private key for. If you start getting spammed, generate a new public key, and send it to all contacts, and dump the previous ID.

= Messaging software that force you to share your mobile phone with contacts
{parent=messaging-software-that-force-you-to-have-a-mobile-phone}

OK, you have to share your phone with the company to prevent spam, but why do you also have to share your phone with contacts? So you are then forced to give your phone number away on the \x[internet].

= Serverless browser P2P chat
{parent=messaging-software}

* https://stackoverflow.com/questions/2463665/how-create-a-p2p-web-chat-without-any-server

It seems impossible to avoid the signaling server. With signaling server:
* https://github.com/tom-james-watson/p2p.chat
* https://github.com/OTRMan/otr.to-chat
* maybe \x[jitsi]

Games:
* https://github.com/rameshvarun/netplayjs

= Email
{parent=messaging-software}
{wiki}

\x[ciro-santilli]'s email can be found by cloning one of his repositories on \x[github]. It is also given at: \x[how-to-contact-ciro-santilli]{full}.

= Plausible deniability of email password handover
{parent=email}

https://protonmail.uservoice.com/forums/284483-feedback/suggestions/39962275-plausible-deniability

You need a secondary password that when used leads to an empty inbox with a setting set where message are deleted after 2 days.

This way, if the attacker sends a test email, it will still show up, but being empty is also plausible.

Of course, this means that any new emails received will be visible by the attacker, so you have to find a way to inform senders that the account has been compromised.

So you have to find a way to inform senders that the account has been compromised, e.g. a secret pre-agreed canary that must be checked each time as part of the contact protocol.

= Privacy focused email provider
{parent=email}

* https://github.com/cirosantilli/cirosantilli.github.io/issues/66
* https://www.privacytools.io/providers/email/

= ProtonMail
{c}
{parent=privacy-focused-email-provider}
{wiki}

https://www.privacytools.io/providers/email/

https://techcrunch.com/2021/09/06/protonmail-logged-ip-address-of-french-activist-after-order-by-swiss-authorities/ you've fucking got to use \x[tor-browser] with it if you want your IP to remain hidden, learn that...

= List of email providers
{parent=email}

= Gmail
{c}
{parent=list-of-email-providers}
{wiki}

= Dots in Gmail address
{parent=gmail}

Ignored: https://support.google.com/mail/answer/7436150?hl=en-GB

This allows you to create multiple non-anonymous accounts on any website that doesn't account for it, as this is not part of the \x[email] protocols in general.

= Guerrilla Mail
{c}
{parent=list-of-email-providers}
{wiki}

OMG those devs are brutes, it's beautiful.

https://www.guerrillamail.com/

https://github.com/flashmob/go-guerrilla

= Microsoft Outlook
{c}
{parent=list-of-email-providers}
{wiki}

= Instant messaging
{parent=messaging-software}
{wiki}

= Instant messaging vs email
{parent=instant-messaging}
{wiki}

* https://github.com/cirosantilli/cirosantilli.github.io/issues/69
* https://www.quora.com/unanswered/Why-were-protocols-like-IRC-and-XMPP-created-after-email-if-both-can-send-messages

= The perfect privacy messaging software features
{parent=instant-messaging}

Haven't found the one yet:
* \x[open-source-software], doh
* \x[end-to-end-encryption]...
* has browser frontend and \x[android] app
* public URL without sharing your mobile phone: \x[messaging-software-that-force-you-to-have-a-mobile-phone]
* self-destroying messages (turned on by default please)
* user base large enough to give some confidence that it was reviewed for security issues
* easy/built-in setup over \x[tor-anonymity-network]

Optional but really \x[ideal]:
* can delete messages from the device of the person you sent it to, no matter how old
* decentralized, your username is a public key

The state of messaging is ridiculous as of 2020.

= Open instant messaging protocols
{parent=instant-messaging}
{wiki}

\x[internet-relay-chat] vs \x[xmpp]: https://stackoverflow.com/questions/4149380/whats-the-best-open-protocol-for-chat-room-software

= Internet Relay Chat
{c}
{parent=open-instant-messaging-protocols}
{wiki}

= IRC
{c}
{synonym}
{title2}

= Signal protocol
{c}
{parent=open-instant-messaging-protocols}
{wiki}

= XMPP
{c}
{parent=open-instant-messaging-protocols}
{wiki}

= List of instant messaging software
{parent=instant-messaging}

= Bitmessage
{c}
{parent=list-of-instant-messaging-software}
{wiki}

https://github.com/Bitmessage/PyBitmessage

TODO evaluate. No `pip install`???

= Discord
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

= Discord
{c}
{synonym}

\x[ciro-santilli]'s discord ID: `cirosantilli#8921`. See also: \x[contact].

You gotta be born after the year 2000 to understand it.

This is becoming more and more popular as a group chat with channels and threads possibility as of 2020.

Very similar to \x[slack-software].

No user URLs? https://support.discord.com/hc/en-us/community/posts/360041519131-UserProfilesLinks

They force your username to have 4 random digits? https://www.reddit.com/r/discordapp/comments/43kjdl/whats_the_number_next_to_the_username/

Not possible to anonymously join just one server without creating a new account? What's the point of servers then! https://www.reddit.com/r/discordapp/comments/6gmjl7/changing_nick_before_joining_a_new_server/ Oh, also nicks don't hide your username from the server in any way, you can get the original username by just clicking on the person's username.

No proper threaded discussion without creating new channels? As of 2022 there is kind of a way, but it was a bit obtuse.

As of 2022 they also have a school hub: https://support.discord.com/hc/en-us/articles/4406046651927-Discord-Student-Hubs-FAQ which auto creates groups by university email access. Good idea, and shows popularity amongst that user group.

Servers don't have an ID to join them? https://www.reddit.com/r/discordapp/comments/b9zdt6/join_discord_server_from_id/

Can only make public servers if you have 1000 members?? https://support.discord.com/hc/en-us/articles/360023968311 Why so much bullshit?? https://www.reddit.com/r/discordapp/comments/6jouf8/how_do_i_make_my_server_public/

Also asked at: https://webapps.stackexchange.com/questions/163441/how-to-create-a-public-discord-server-that-anyone-can-join-without-an-invite

No way to get email notifications for missed activity? https://support.discord.com/hc/en-us/community/posts/360041806392-Can-we-get-an-email-notification-option-for-messages-

= Jami
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{title2=Ring}
{wiki}

\x[ciro-santilli] worked on it for a brief time in 2016, when it was still called Ring, before he got fired. :-)

The people were quite nice and the project idea is fine, Ciro hopes they succeed.

\Video[https://www.youtube.com/watch?v=xAyIHhbQt3A]
{title=Ring - Peer to peer network for real time communication - FOSDEM 2016 by \x[ciro-santilli]}

= Jitsi
{c}
{parent=list-of-instant-messaging-software}
{wiki}

No chat only? .... https://community.jitsi.org/t/chat-function-only/79067

As of 2020: \x[end-to-end-encryption] optional and turned off as default, and marked as experimental...

Appears to be based on \x[xmpp]: https://community.jitsi.org/t/jitsi-users-is-jitsi-a-regular-xmpp-server/13211

= Pidgin
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

= Signal
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

Basic must haves:
* \x[end-to-end-encryption]: yes
* \x[open-source-software]: yes

Other cool stuff:
* sealed sender: https://signal.org/blog/sealed-sender/ Nice!

Missing:
* remove the need to share your phone number with contacts: \x[messaging-software-that-force-you-to-share-your-mobile-phone-with-contacts]{parent}. This is a deal breaker for online acquaintances:
  * https://security.stackexchange.com/questions/231637/signal-contact-people-or-have-people-contact-me-without-revealing-phone-numbe/245665#245665
  * https://community.signalusers.org/t/have-option-to-set-up-username/8723
  * https://www.reddit.com/r/signal/comments/8kybil/is_signal_ever_going_to_include_usernames/
  * remove need for phone completely:
    * https://community.signalusers.org/t/a-proposal-for-alternative-primary-identifiers/3023
    * https://community.signalusers.org/t/remove-the-need-for-a-mobile-phone/1543
    * https://community.signalusers.org/t/registering-with-an-email-address/919
    * https://community.signalusers.org/t/username-id-registration-without-phone-number/9800
    * https://community.signalusers.org/t/more-reasons-why-signal-should-ditch-phone-numbers-the-guardian-confirmed-the-identity-of-those-in-the-chat-by-cross-checking-phone-numbers-attached-to-the-signal-accounts/7311
    * https://community.signalusers.org/t/why-is-phone-and-phone-number-required/1425 https://community.signalusers.org/t/what-is-the-technical-reason-that-i-cannot-use-signal-without-a-phone-number-and-that-i-cannot-use-signal-desktop-without-signal-on-my-phone/11400
* \x[tor-anonymity-network] routing by default:
  * https://community.signalusers.org/t/use-the-built-in-tor-project-in-the-program-source/26291
* option to enable disappearing messages by default:
  * https://community.signalusers.org/t/ability-to-set-your-own-default-timer-for-disappearing-messages-on-all-new-conversations/5144 "Ability to set your own default timer for disappearing messages on all new conversations"
  * https://www.reddit.com/r/signal/comments/jhknuz/default_disappearing_messages_timeout_for_new/
* messages are not encrypted on desktop via the \x[password-manager]!?!?
  * https://github.com/signalapp/Signal-Desktop/issues/549
  * https://github.com/signalapp/Signal-Desktop/issues/1318
  * https://www.reddit.com/r/privacy/comments/fwux29/signal_desktop_stores_the_encryption_key_in_a/
  * https://whispersystems.discoursehosting.net/t/improve-security-of-desktop-apps-encryption-of-data-at-rest/26494
  * https://community.signalusers.org/t/why-cant-we-lock-the-desktop-app-with-a-password/1383
* web client:
  * https://security.stackexchange.com/questions/238011/why-is-there-no-web-client-for-signal
* secure anti-forensic \x[data-erasure] to attain \x[plausible-deniability] of disappearing messages:
  * https://www.reddit.com/r/signal/comments/ki5mbn/how_well_does_signal_delete_old_messages/
  * https://community.signalusers.org/t/is-deleting-secure-in-its-current-form/908
  * https://community.signalusers.org/t/traces-of-messages-that-have-disappeared/5049

TODO what's the fucking official discussion/feature request forum?
* https://community.signalusers.org appears to be the de-facto non-official one.
* https://github.com/signalapp/Signal-Android/issues/5372
* https://whispersystems.discoursehosting.net
* https://github.com/signalapp/Signal-Desktop/issues/1318 closes and points to discoursehosting
* https://github.com/signalapp/Signal-Desktop/issues/549
* https://www.reddit.com/r/signal/comments/lipo6z/community_signal_forum_vs_reddit/ gives some good history, says they pay for https://community.signalusers.org/ and have admin powers there.

Feature overview:
* https://security.stackexchange.com/questions/139493/is-signal-still-more-secure-than-whatsapp

= Slack
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

= Skype
{c}
{parent=list-of-instant-messaging-software}
{wiki}

= Telegram
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

Not \x[end-to-end-encrypted] by default, WTF... you have to create "secret chats" for that:
* https://www.quora.com/Why-does-Telegram-not-use-end-to-end-encryption-by-default-so-that-there-are-not-keys-to-give-to-the-government

You can't sync secret chats across devices, \x[signal-software] handles that perfectly by sending E2EE messages across devices:
* https://www.reddit.com/r/Telegram/comments/7hx8vd/when_will_telegram_get_secret_chats_crossdevices/
This is a deal breaker because Ciro needs to type with his keyboard.

Desktop does not have secret chats: https://www.reddit.com/r/Telegram/comments/9beku1/telegram_desktop_secret_chat/ This is likey because it does not store chats locally, it just loads from \x[server] every time as of 2019: https://www.reddit.com/r/Telegram/comments/baqs63/where_are_chats_stored_on_telegram_desktop/ just like the web version. So it cannot have a private key.

Allows you to register a public username and not have to share phone number with contacts: https://telegram.org/blog/usernames-and-secret-chats-v2.

Has \x[reproducible-builds] on Android and iOS: https://core.telegram.org/reproducible-builds 

Self deleting messages added to secret chats in Q1 2021: https://telegram.org/blog/autodelete-inv2

Can delete messages from the device of the person you sent it to, no matter how old.

= WhatsApp
{c}
{parent=list-of-instant-messaging-software}
{wiki}

Claimed to remove metadata from servers unless \x[legally] obliged to collect it: https://www.quora.com/Does-WhatsApp-store-messages-on-its-servers-or-is-all-deleted-after-delivery-and-only-stored-on-recipients-phones/answer/Ciro-Santilli

They've had a few breaches: https://www.whatsapp.com/security/advisories/

They claim to delete metadata: https://www.quora.com/Does-WhatsApp-store-messages-on-its-servers-or-is-all-deleted-after-delivery-and-only-stored-on-recipients-phones/answer/Ciro-Santilli

\Video[https://www.youtube.com/watch?v=X4YsJt4rIOI]
{title=WhatsApp founder Jan Koum talks about their Journey by Roots (2017)}
{description=Good talk, explains how everything happened in the perfect location at the perfect time: unemployed people who knew how to code, bought an iPhone, the next big platform, at its very beginning, they had just release the required push notifications \x[api], and he travelled a lot and knew how much SMS sucked, especially international.}

= Why did Facebook buy WhatsApp?
{parent=whatsapp}

Obviously with the single intention of killing a competitor.

It is impossible to make money off WhatsApp as it is because of \x[end-to-end-encryption].

Facebook just clearly bought it to prevent it from actually growing further and killing facebook.

It is mindblowing that the sale wasn't cancelled due to anti trust.

The outcome of this is that WhatApp will remain with the same feature set forever, while other competitors have been growing, notably \x[discord] and \x[slack-software].

It seems that there is a case looming 10 years after the fact: https://www.cityam.com/facebook-fails-to-block-antitrust-lawsuit-over-whatsapp-and-instagram-ownership/ Wake up???

= WhatsApp profile information is public by default
{parent=whatsapp}
{tag=privacy}

Your profile picture, name and status are public by default as of 2022!!! OMG!!!

This means that all secret services in the world have alrady scraped this information for everyone that uses WhatsApp!!!

They just have to go incrementally through the list of all phone numbers... 001 0000 0000, 001 0000 0001, 001 0000 0002, etc. and then you can deduce who has which phone number.

OMG... it is analogous to the \x[facebook-profile-face-dump].

Sure, it is forbidden in theory: https://faq.whatsapp.com/general/security-and-privacy/about-harvesting-personal-information/[].

= Multimedia software
{parent=software}

= FFmpeg
{c}
{parent=multimedia-software}
{wiki}

FFmpeg is the \x[assembler-computing] of audio and video.

As a result, \x[ciro-santilli] who likes "lower level stuff", has had many many hours if image manipulation fun with this software, see e.g.:
* the "Media" section of \x[articles].
* \x[image-ciro-knows-how-to-convert-videos-to-gifs]

As older Ciro grows, the more he notices that FFmpeg can do basically any lower level audio video task. It is just an amazing piece of software, the immediate go-to for any low level operation.

FFmpeg was created by \x[fabrice-bellard], which Ciro deeply respects.

Resize a video: https://superuser.com/questions/624563/how-to-resize-a-video-to-make-it-smaller-with-ffmpeg[]:
``
ffmpeg -i input.avi -filter:v scale=720:-1 -c:a copy output.mkv
``
Unlike every other convention under the sun, the height in `scale` is the first number.

= FFmpeg is the backend of YouTube
{c}
{parent=ffmpeg}

FFmpeg is likely the backend of \x[youtube] through \x[reverse-engineering]: https://streaminglearningcenter.com/blogs/youtube-uses-ffmpeg-for-encoding.html (https://web.archive.org/web/20190519135210/https://streaminglearningcenter.com/blogs/youtube-uses-ffmpeg-for-encoding.html[archive])

On \x[quora]: https://www.quora.com/What-does-YouTube-use-for-encoding-video/answer/Ciro-Santilli

= Concatenate two videos with ffmpeg
{parent=ffmpeg}

https://stackoverflow.com/questions/7333232/how-to-concatenate-two-mp4-files-using-ffmpeg

= ImageMagick
{c}
{parent=multimedia-software}
{wiki}

Crop `20` pixels from the bottom of the image:
``
convert image.png -gravity East -chop 20x0 result.png
``

= Join two images side-by-side
{parent=imagemagick}

https://stackoverflow.com/questions/20737061/merge-images-side-by-sidehorizontally/63575228#63575228

= Open source software
{parent=software}
{wiki}

= Open source
{synonym}

What happens when https://en.wikipedia.org/wiki/OpenCL[the underdogs] get https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755[together] and try to factor out their efforts to beat some https://en.wikipedia.org/wiki/CUDA[evil] dominant \x[microsoft-windows][power], sometimes \x[linux][victoriously].

Or when https://github.com/facebook[startups] use the cheapest stuff available and randomly become the https://github.com/google[next big thing], and decide to keep maintaining the open stuff to get features for free from other companies, or because they are \x[linux][forced by the Holy GPL].

Open source frees employees. When you change jobs, a large part of the specific knowledge you acquired about closed source a project with your blood and tears goes to the trash. When companies get bought, projects get shut down, and closed source code goes to the trash. What sane non desperate person would sell their life energy into such closed source projects that could die at any moment? Working on open source is the single most important non money perk a company can have to attract the best employees.

Open source is worth more than the mere pragmatic financial value of not having to pay for software or the ability to freely add new features.

Its greatest value is perhaps the fact that it allows people study it, to appreciate the beauty of the code, and feel empowered by being able to add the features that they want.

That is why \x[ciro-santilli] thought:
\Q[Life is too short for closed source.]

But quoting Ciro's colleague S.:
\Q[Every software is open source when you read https://en.wikipedia.org/wiki/Assembly_language[assembly code].]

And https://computergraphics.stackexchange.com/questions/7809/what-does-gpu-assembly-look-like["can \x[reverse-engineering][reverse engineer] the undocumented GPU hardware APIs"], \x[ciro-santilli][Ciro] would add.

While software is the most developed open source technology available in the 2010's, due to the https://www.vox.com/recode/2019/6/24/18715421/internet-free-data-ads-cost["zero cost"] of copying it over the Internet, Ciro also believes that \x[open-knowledge][the world would benefit enormously from open source knowledge in all areas on science and engineering], for the same reasons as open source.

= Free and open-source software
{parent=open-source-software}
{wiki}

= FOSS
{c}
{synonym}
{title2}

A more precise term for those in the know: \x[open-source-software] that also has a liberal license, for some definition of liberal.

\x[ciro-santilli] defines liberal as: "can be commercialized without paying anything back" (but possibly subject to other restrictions).

He therefore does not consider \x[creative-commons-license]{p} with NC to be FOSS.

For the newbs, the term \x[open-source-software] is good enough, since most open source software is also FOSS.

But when it's not, it's crucial to know.

= Models for financing open source software
{parent=free-and-open-source-software}

* \x[sponsorware]{child}

= Software developer collective
{parent=models-for-financing-open-source-software}

This model can work well when there is a set of commonly used libraries that some developers often use together, but such that there isn't enough maintenance work for each one individually.

So what people do is to create a group that maintains all those projects, to try and get enough money to survive from the contributions done primarily for each one individually.

Examples:
* https://github.com/pmndrs

= Open source software that is not-FOSS
{parent=free-and-open-source-software}
{wiki}

* \x[gitlab]{child}

= Source code leaks
{parent=open-source-software}

* \x[nintendo]
  * 2020-05-04 leaks via the BroadOn company
  * items
    * Wii \x[verilog]
  * coverage
    * https://www.ladbible.com/technology/gaming-the-biggest-nintendo-hack-in-history-leaks-console-source-codes-20200504
  * fake leak commentary
    * "Sebastian" is apparently reuploaded devkit demos claiming that they are from this leak, if that is correct, \x[fuck] him:
      * https://www.youtube.com/watch?v=6FSOFrgbi4I&lc=UgwWEWT3oyxf85J0PQB4AaABAg
      * https://www.youtube.com/watch?v=teRRcouGxwc&list=PL8Yms2YDl4qOXI99jpI8oH75d3X2oxnBM&index=14

= Open knowledge
{parent=open-source-software}
{wiki}

\x[ciro-santilli]'s raison d'etre, one of his attempts: \x[ourbigbook-com].

The outcome of closed knowledge is \x[reverse-engineering].

= Open educational resources
{parent=open-knowledge}
{title2=OER}
{wiki}

Projects:
* \x[mit-opencourseware]
* several \x[e-learning-website]{p}, e.g. \x[openstax]

= Horrors of open source
{parent=open-source-software}

Not everything is perfect.

One big problem of many big open source projects is that they are contributed to by separate selfish organizations, that have private information. Then what happens is that:
* people implement the same thing twice, or one change makes the other completely unmergeable
* you get bugs but can't share your closed source test cases, and then you can't automate tests for them, or clearly demonstrate the problem
* other contributors don't see your full semi secret important motivation, and may either nitpick too much or take too long to review your stuff

Another common difficulty is that open source maintainers may simply not care enough about their own project (maybe they did in the past but lost interest) to review external patches by people they don't know.

This is understandable: a new patch, is a new risk of things breaking.

Therefore, if you ever submit patches and they get ignore, don't be too sad. It just comes down to a question of maintenance cost, and means that you will waste some extra time on the next rebase. You just have to decide your goals and be cold about it:
* are you doing the right thing and going for a specific goal \x[backward-design]? Then just fork, run as fast as possible towards a minimum viable product, and if you start to feel that rebase is costing you a lot, or feel you could get some open source fame for cheap, open reviews and see what upstream says. If they ignore you, politely tell yourself in your mind silently "\x[fuck] them", and carry on with the MVP
* otherwise, e.g. you just want to randomly help out, you have to ask them before doing anything big "how can I be of help". If I propose a patch for this issue, do you promise to review it?

Writing documentation in an open source project in which you don't have immediate push rights is another major pain due to code reviews. Code code reviews tend to be much less subjective, because if you do something wrong, stuff crashes, runs slower, or you need more lines of code to reach the same goal. There are tradeoffs, but in a limited number. Documentation code reviews on the other hand, are an open invitation to https://en.wikipedia.org/wiki/Law_of_triviality[infinite bike-shedding], since you can't "run" documentation through a standardized \x[brain][brain model]. Much better is for one good documenter person to just make one cohesive \x[stack-overflow] post, and ping others with more knowledge to review details or add any missing pieces :-)

= Code drop
{parent=open-source-software}

\x[open-source]{c} development model in which developers develop in private, and only release code to the public during releases.

Notable example project: \x[android-open-source-project].

This development model basically makes reporting bugs and sending patches a waste of time, because many of them will already have been solved, which is why this development model is \x[evil]{parent}.

= Closed source is less bad on online services
{parent=open-source-software}

\x[ciro-santilli] can accept closed source on \x[server] products more easily than offline, because the servers have to be paid for somehow (by stealing your private data).

= Closed source offline software used by millions
{parent=closed-source-is-less-bad-on-online-services}

Closed source on offline products used by millions of people is \x[evil], when you could just have those for free with \x[open-source-software]! Thus Ciro's hatred for \x[microsoft-windows]{child} and \x[macos]{child} (at \x[is-the-macos-kernel-open-source][least userland, maybe]).

= Closed source software
{parent=open-source-software}

= Closed source
{synonym}

The opposite of \x[open-source-software].

= Closed standard
{parent=closed-source-software}

\x[iso] is the main culprit of this \x[bullshit], some notable examples related to \x[open-source-software]:
* \x[ansi-c]
* \x[sql-standard]
* \x[verilog]

The only low level thing that escaped this was \x[opengl] via \x[khronos], what heroes those people are.

How the hell are you supposed to develop an open source implementation of something that has a closed standard?

Not to mention open source test suites, that would be way too much to ask for, those always end up being made by some shady small companies that go bankrupt from time to time, see e.g. .

= International Organization for Standardization
{c}
{parent=closed-standard}
{wiki}

= ISO
{c}
{synonym}

= Inner source
{parent=closed-source-software}
{wiki}

If you are going to do \x[closed-source], at least do it like this.

Basically the opposite of \x[need-to-know] for \x[software].

= Personal information management
{parent=software}
{wiki}

= Productivity software
{parent=software}
{wiki}

= LibreOffice
{c}
{parent=productivity-software}
{wiki}

These people are heroes. There's nothing else to say.

= Program optimization
{parent=software}
{wiki}

= Benchmark
{parent=program-optimization}
{wiki}

= Profiling
{disambiguate=computer programming}
{parent=program-optimization}
{wiki}

= Profile
{disambiguate=computer programming}
{synonym}

\Include[programming-language]{parent=software}

= Recreational programming
{parent=software}

= Code golf
{parent=recreational-programming}
{wiki}

= Search engine
{parent=software}
{wiki}

= Reverse image search
{parent=software}
{wiki}

= Scientific computing
{parent=software}
{wiki}

= Computer simulation
{parent=scientific-computing}
{wiki}

= Computer algebra system
{parent=scientific-computing}
{wiki}

= SymPy
{parent=computer-algebra-system}
{wiki}

This is the dream \x[exam][cheating] software every student should know about.

It also has serious applications obviously. https://www.sympy.org/scipy-2017-codegen-tutorial/ mentions \x[code-generation] capabilities, which sounds super cool!

The code in this section was tested on `sympy==1.8` and \x[python] 3.9.5.

Let's start with some basics. \x[fraction]{p}:
``
from sympy import *
sympify(2)/3 + sympify(1)/2
``
outputs:
``
7/6
``
Note that this is an exact value, it does not get converted to \x[floating-point-number]{p} where precision could be lost!

We can also do everything with symbols:
``
from sympy import *
x, y = symbols('x y')
expr = x/3 + y/2
print(expr)
``
outputs:
``
x/3 + y/2
``
We can now evaluate that expression object at any time:
``
expr.subs({x: 1, y: 2})
``
outputs:
``
4/3
``

How about a square root?
``
x = sqrt(2)
print(x)
``
outputs:
``
sqrt(2)
``
so we understand that the value was kept without simplification. And of course:
``
sqrt(2)**2
``
outputs `2`. Also:
``
sqrt(-1)
``
outputs:
``
I
``
`I` is the \x[imaginary-unit]. We can use that symbol directly as well, e.g.:
``
I*I
``
gives:
``
-1
``

Let's do some trigonometry:
``
cos(pi)
``
gives:
``
-1
``
and:
``
cos(pi/4)
``
gives:
``
sqrt(2)/2
``
The exponential also works:
``
exp(I*pi)
``
gives;
``
-1
``

Now for some \x[calculus]. To find the \x[derivative] of the \x[natural-logarithm]:
``
from sympy import *
x = symbols('x')
diff(ln(x), x)
``
outputs:
``
1/x
``
Just read that. One over x. Beauty.

Let's do some more. Let's solve a simple \x[differential-equation]:
``
y''(t) - 2y'(t) + y(t) = sin(t)
``
Doing:
``
from sympy import *
x = symbols('x')
f, g = symbols('f g', cls=Function)
diffeq = Eq(f(x).diff(x, x) - 2*f(x).diff(x) + f(x), sin(x)**4)
print(dsolve(diffeq, f(x)))
``
outputs:
``
Eq(f(x), (C1 + C2*x)*exp(x) + cos(x)/2)
``
which means:
$$
f(x) = C_1 + C_2x e^x + cos(x)/2
$$
To be fair though, it can't do anything crazy, it likely just goes over known patterns that it has solvers for, e.g. if we change it to:
``
diffeq = Eq(f(x).diff(x, x)**2 + f(x), 0)
``
it just blows up:
``
NotImplementedError: solve: Cannot solve f(x) + Derivative(f(x), (x, 2))**2
``
Sad.

Let's try some \x[polynomial-equation]{p}:
``
from sympy import *
x, a, b, c = symbols('x a b c d e f')
eq = Eq(a*x**2 + b*x + c, 0)
sol = solveset(eq, x)
print(sol)
``
which outputs:
``
FiniteSet(-b/(2*a) - sqrt(-4*a*c + b**2)/(2*a), -b/(2*a) + sqrt(-4*a*c + b**2)/(2*a))
``
which is a not amazingly nice version of the \x[quadratic-formula]. Let's evaluate with some specific constants after the fact:
``
sol.subs({a: 1, b: 2, c: 3})
``
which outputs
``
FiniteSet(-1 + sqrt(2)*I, -1 - sqrt(2)*I)
``
Let's see if it handles the \x[quartic-equation]:
``
x, a, b, c, d, e, f = symbols('x a b c d e f')
eq = Eq(e*x**4 + d*x**3 + c*x**2 + b*x + a, 0)
solveset(eq, x)
``
Something comes out. It takes up the entire terimnal. Naughty. And now let's try to \x[abel-ruffini-theorem][mess with it]:
``
x, a, b, c, d, e, f = symbols('x a b c d e f')
eq = Eq(f*x**5 + e*x**4 + d*x**3 + c*x**2 + b*x + a, 0)
solveset(eq, x)
``
and this time it spits out something more magic:
``
ConditionSet(x, Eq(a + b*x + c*x**2 + d*x**3 + e*x**4 + f*x**5, 0), Complexes)
``
Oh well.

Let's try some \x[linear-algebra].
``
m = Matrix([[1, 2], [3, 4]])
``
Let's invert it:
``
m**-1
``
outputs:
``
Matrix([
[ -2,    1],
[3/2, -1/2]])
``

= Scientific visualization software
{parent=scientific-computing}

https://en.wikipedia.org/wiki/Scientific_visualization

\x[ciro-santilli][Ciro's] large dataset survey: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]{full}.

= Open source scientific computing consultancies
{parent=scientific-visualization-software}

Huge respect to this companies.

= Enthought
{c}
{parent=open-source-scientific-computing-consultancies}
{wiki}

= Kitware
{c}
{parent=open-source-scientific-computing-consultancies}
{wiki}

= Plotting software
{parent=scientific-visualization-software}

= Survey of open source interactive plotting software with a 10 million point scatter plot benchmark by Ciro Santilli
{c}
{parent=plotting-software}

https://stackoverflow.com/questions/5854515/large-plot-20-million-samples-gigabytes-of-data/55967461#55967461

By \x[ciro-santilli].

\Image[VisIt_zoom_in_10_million_straight_line_plot_with_some_marked_points.png]
{source=https://stackoverflow.com/questions/5854515/large-plot-20-million-samples-gigabytes-of-data/55967461#55967461}

= Matplotlib
{c}
{parent=plotting-software}
{wiki}

It does a huge percentage of what you want easily, and from \x[python][the language that you want to use].

Tends to be \x[ciro-santilli][Ciro]'s pick if \x[gnuplot] can't handle the use case, or if the project is really really serious.

Couldn't handle exploration of large datasets though: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]

Examples:
* \a[matplotlib/hello.py]
* \a[matplotlib/educational2d.py]
* \a[matplotlib/axis.py]
* \a[matplotlib/label.py]
* Line style
  * \a[matplotlib/line_points.py]
  * \a[matplotlib/tick.py]
  * \a[matplotlib/prop_cycle.py]
* Subplots
  * \a[matplotlib/subplots.py]
  * \a[matplotlib/subplots_add.py]
* \a[matplotlib/two_lines.py]
  * \a[matplotlib/plot_matrix.py]
  * \a[matplotlib/plot_matrix_x.py]
  * \a[matplotlib/legend_outside.py]
* Data from files
  * \a[matplotlib/plotfile.py]
* Specialized
  * \a[matplotlib/bloch_sphere_walk.py]
  * \a[matplotlib/bloch_sphere.py]

= gnuplot
{c}
{parent=plotting-software}
{wiki=Gnuplot}

Tends to be \x[ciro-santilli]'s first attempt for quick and dirty graphing: https://github.com/cirosantilli/gnuplot-cheat[].

\x[domain-specific-language]. When it get the jobs done, it is in 3 lines and it feels great.

When it doesn't, you Google for an hours, and then you give up in frustration, and fall back to \x[matplotlib].

Couldn't handle exploration of large datasets though: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]

= Software bug
{parent=software}
{wiki}

= Glitch
{parent=software-bug}
{wiki}

A glitch is more precisely a \x[software-bug] that is hard to reproduce. But it has also been used to mean a software bug that is not very serious.

= Debugging
{parent=software-bug}
{wiki}

Related:

* \x[keep-debug-notes]{child}

= Bisection
{disambiguate=software engineering}
{parent=debugging}

One of the Holiest age old debugging techniques!

\x[git] has some helpers to help you achieve bisection Nirvana: https://stackoverflow.com/questions/4713088/how-to-use-git-bisect/22592593#22592593

Obviously not restricted to software engineering alone, and used in all areas of engineering, e.g. \x[video-air-tight-vs-vacuum-tight-by-alphaphoenix-2020] uses it in \x[vacuum-engineering].

The cool thing about bisection is that it is a brainless process: unlike when using a \x[debugger], you don't have to understand anything about the system, and it incredibly narrows down the problem cause for you. Not having to think is great!

= Debugger
{parent=debugging}
{wiki}

= GNU Debugger
{c}
{parent=debugger}

= GDB
{c}
{synonym}
{title2}

Just add \x[gdb-dashboard], and you're good to go.

= Reverse debugging
{parent=gnu-debugger}

Nirvana!!!

The best open source implementation as of 2020 seems to be: \x[mozilla-rr].

* https://stackoverflow.com/questions/1206872/go-to-previous-line-in-gdb/46996380#46996380
* https://stackoverflow.com/questions/1470434/how-does-reverse-debugging-work/53063242#53063242
* https://stackoverflow.com/questions/3649468/setting-breakpoint-in-gdb-where-the-function-returns/46116927#46116927
* https://stackoverflow.com/questions/27770896/how-to-debug-a-rare-deadlock/50073993#50073993
* https://stackoverflow.com/questions/522619/how-to-do-bidirectional-or-reverse-debugging-of-programs/50074106#50074106 link only, marked as duplicate of go to previous line
* https://softwareengineering.stackexchange.com/questions/181527/why-is-reverse-debugging-rarely-used

= Mozilla rr
{c}
{parent=reverse-debugging}

https://github.com/mozilla/rr

= GDB Dashboard
{c}
{parent=gnu-debugger}

https://github.com/cyrus-and/gdb-dashboard

\x[gdb] Nirvana?

https://stackoverflow.com/questions/10115540/gdb-split-view-with-code/51301717#51301717

\Image[https://web.archive.org/web/20200504130959if_/https://i.stack.imgur.com/mHC8f.png]
{height=600}
{title=Screenshot of terminal running GDB Dashboard.}
{source=https://github.com/cyrus-and/gdb-dashboard/tree/2d31a3b391e5d0e032b791e1fb7172338b02cecb}

= Minimal working example
{parent=software-bug}
{wiki}

The \x[musical-study] of \x[software-engineering].

\x[ciro-santilli] is obsessed by those in order to learn any new concept, not just for bug reporting.

This includes to learn more theoretical subjects like \x[physics] and \x[mathematics].

= Software testing
{parent=software-bug}
{wiki}

= test_executables.js
{file}
{parent=software-testing}

This script tests all executables under a selected directory.

\x[ciro-santilli] has been writing scripts of that type for a long time in order to test his \x[ciro-santilli-s-documentation-superpowers][programming self-learning setups with asserts].

The most advanced of those being the https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/test[test system] of \x[linux-kernel-module-cheat].

But had too much stuff that would be specific to that project, so Ciro decided to start this new one in \x[node-js], hopefully it will also be the last he ever writes.

A sample usage of the test library can be seen at: \a[nodejs/sequelize/test].

= Assertion
{disambiguate=software development}
{parent=software-testing}
{wiki}

= Continuous integration
{parent=software-testing}
{wiki}

= CI
{c}
{title2}
{synonym}

= Test driven development
{parent=software-testing}
{wiki}

This is a good approach. The downside is that while you are developing the implementation and testing interactively you might notice that the requirements are wrong, and then the tests have to change.

One intermediate approach \x[ciro-santilli] likes is to do the implementation and be happy with interactive usage, then create the test, make it pass, then remove the code that would make it pass, and see it fail. This does have a risk that you will forget to test something, but Ciro finds it is a worth it generally. Unless it really is one of those features that you are unable to develop without an automated test, generally more "logical/mathematical" stuff. This is a sort of \x[laziness-driven-development].

= Laziness Driven Development
{parent=test-driven-development}

= Software documentation
{parent=software}
{wiki}

= README
{c}
{parent=software-documentation}
{wiki}

Please, use \x[asciidoc] and \x[one-page-to-rule-them-all].

= Software engineering
{parent=software}
{wiki}

= Software development
{parent=software-engineering}
{wiki}

= Software development principle
{parent=software-development}

= Don't repeat yourself
{parent=software-development-principle}
{wiki}

= Yet another
{parent=don-t-repeat-yourself}
{wiki}

The mandatory \x[xkcd]: \x[xkcd-927-standards].

= DRY
{c}
{synonym}

= Ciro Santilli's software engineering wisdom
{c}
{parent=software-engineering}
{tag=essays-by-ciro-santilli}

Of course, "\x[ciro-santilli]" with quotes, since all of those are either taken directly from others, or had been previously formulated by others.

= Excessive encapsulation is the root of much evil
{parent=ciro-santilli-s-software-engineering-wisdom}

Some anecdotes.

\x[ciro-santilli] never splits up functions unless there is more than one calling point. If you split early, the chances that the interface will be wrong are huge, and a much larger refactoring follows.

If you just want to separate variables, just use a scope e.g.:

``
int cross_block_var;

// First step.
{
    int myvar;
}

// Second step.
{
    int myvar;
}
``

Ciro has seen and had to deal with in his lifetime with two projects that had like 3 to 10 git separate Git repositories, all created and maintained by the same small group of developers of the same organization, even though one could not build without the other. Keeping everything in sync was Hell! Why not just have three directories inside a single repository with a single source of truth?

Another important case: \x[linux][Linux] should have at least a C standard library, init system, and shell in-tree, like \x[bsd-operating-system]{p}, as mentioned at: \x[linux][Linux]{full}.

= The development cycle time is your God
{parent=ciro-santilli-s-software-engineering-wisdom}

A slow development test cycle will kill your software.

New developers won't want to learn your project, because they would rather shoot themselves.

This means that build time, and the time to run tests, must be short.

5 seconds to rebuild is the maximum upper limit.

Of course, at some point software gets large enough that things won't fit anymore in 5 seconds. But then you \i[must] have either some kind of build caching, or options to do partial builds/tests that will bring things down to that 5 second mark.

You also have to spend some time profiling execution and build from scratch times.

A slow build from scratch will mean that your \x[continuous-integration] costs a lot, money that could be invested in a new developer!

It also means that people won't bother to reproduce bugs on given commits, or \x[bisection-software-engineering][bisect stuff].

One anecdote comes to mind. \x[ciro-santilli] was trying to debug something, and more experience colleague came over.

To reproduce a problem, ciro was running one command, wait 5 seconds, run a second command, wait 5 seconds, run a third command:
``
cmd1
# wait 5 seconds
cmd2
# wait 5 seconds
cmd3
``

The first thing the colleague said: join those three commands into one:
``
cmd1;cmd2;cmd3
``
And so, \x[the-correlation-between-software-engineers-and-buddhism][Ciro was enlightened].

= Everything that is not tested breaks
{parent=ciro-santilli-s-software-engineering-wisdom}

= Everything can break everything
{parent=ciro-santilli-s-software-engineering-wisdom}

Whenever someone asks:
\Q[I can only see this one thing different our setups, do you think it could be the cause of our different behaviour?]
you don't need to read anymore, just point them to this page immediately. \x[virtualization]{c} for the win.

= You aren't gonna need it
{parent=ciro-santilli-s-software-engineering-wisdom}
{wiki}

= YAGNI
{c}
{synonym}
{title2}

Sometimes you are really certain that something is a required substep for another thing that is coming right afterwards. 

When things are this concrete, fine, just do the substep.

But you have to always beware of cases where "I'm sure this will be needed at some unspecified point in the future", because such points tends to never happen.

YAGNI is so fundamental, there are several closely related concepts to it:
* \x[backward-design]
* \x[assign-the-hard-task-to-the-lazy-person]

= KISS principle
{c}
{parent=ciro-santilli-s-software-engineering-wisdom}
{tag=simplicity-is-the-ultimate-sophistication}
{wiki}

= Keep it simple, stupid
{synonym}
{title2}

The software engineer phrasing of \x[simplicity-is-the-ultimate-sophistication].

Like all other principles, it is not absolute.

But it is something that you should always have on the back of your mind.

\x[you-aren-t-gonna-need-it] is closely related, as generally the extra unnecessary complications are set in place to accommodate useless features that will never be needed.

= Hofstadter's law
{c}
{parent=ciro-santilli-s-software-engineering-wisdom}
{wiki}

= It is impossible to predict how long it will take to do something
{synonym}

The trivial takes a few hours.

The easy takes a week.

And what seemed hard takes a few hours.

As "deadlines" approach, feature sets get cut down, then there are delays, and finally a feasible feature set is delivered some time after the deadline.

The only deadlines that can be met are those of tasks which have already been done but not announced.

This is of course \x[hofstadter-s-law].

On the other hand, it is also known that the time it takes for a task to be done expands without limits to match the deadline. And therefore, without deadlines, tasks will take forever and never get done.

And so, in a moment, perceiving \x[koan][this paradox], \x[the-correlation-between-software-engineers-and-buddhism][Ciro was enlightened].

= Sometimes you can debug software by staring at the code for long enough
{parent=ciro-santilli-s-software-engineering-wisdom}
{wiki}

Once upon a time, when \x[ciro-santilli] had a job, he had a programming problem.

A senior developer came over, and rather than trying to run and modify the code like an idiot, which is what \x[ciro-santilli] usually does (see also experimentalism remarks at \x[ciro-santilli-s-bad-old-event-memory]{full}), he just stared at the code for about 10 minutes.

We knew that the problem was likely in a particular function, but it was really hard to see why things were going wrong.

After the 10 minutes of examining every line in minute detail, he said:
\Q[I think this function call has such or such weird edge case]
and truly, that was the cause.

And so, \x[the-correlation-between-software-engineers-and-buddhism][Ciro was enlightened].

= Office space design and remote work
{parent=ciro-santilli-s-software-engineering-wisdom}

Working remotely is hard if you don't already highly master the software and enterprise systems used.

Also you don't feel people's love as strongly, and usefulness is built on love, see also \x[steve-jobs]'s Pixar office space design philosophy.

But please, give workers a small silent office so that we can concentrate instead of a silly open space, and create an internal social network so people can see what others are doing.

Remote working is much better if the majority of the team also does it, otherwise you will get excluded. Maybe after VR...

= Keep debug notes
{parent=ciro-santilli-s-software-engineering-wisdom}

When \x[debugging] complex software, make sure to keep notes of every interesting find you make in a note file, as you extract it from the \x[integrated-development-environment] or \x[debugger].

Especially if your \x[ciro-santilli-s-bad-old-event-memory][memory sucks like Ciro's].

This is incredibly helpful in fully understanding and then solving complex bugs.

= "Hello, World!" program
{parent=software-engineering}
{wiki}

= Hello world
{synonym}

The most important \x[program] ever written!!!

Other programs that can be considered "hello worlds" in different contexts:

* \x[web-development]
  * \x[a-blog-in-every-web-framework]
* \x[video-game]
  * Doom is the hello world \x[shooter-game]

= Time to Hello World
{parent=hello-world-program}

= Software engineer
{parent=software-engineering}
{wiki}

= Programmer
{synonym}

Poet warriors monkeys? Or Code peasants (https://baike.baidu.com/item/码农/10262742[码农]) according to the Chinese.

\x[ciro-santilli] claims to be one of them.

Much like a pianist plays his piano, a software engineer plays his \x[computer].

= The correlation between software engineers and Buddhism
{parent=software-engineer}

= A correlation between software engineers and Buddhism
{synonym}

\x[ciro-santilli] believes that there is a positive correlation between being a \x[software-engineer][software engineer] and liking \x[buddhist]-like things.

Maybe it is linked to minimalism and \x[dry], which software engineers value so greatly.

Even Ciro had to try an unoriginal Buddhist joke intro in https://stackoverflow.com/questions/572897/how-does-javascript-prototype-work/23877420#23877420[one of this Stack Overflow answers].

Ciro also feels that his https://github.com/cirosantilli/linux-kernel-module-cheat/tree/e1d0a2fafbb35c9e65c1a8a0b6d46df3e9161461/userland["minimal reproducible example" scientific language/concept learning method obsession] of breaking things into tiny sub-problems has a strong link with \x[koan]{p}.

Other programmers are equally obsessed by koans:
* http://www.catb.org/~esr/writings/unix-koans/ "The Unix Koans of Master Foo - Rootless Root (无根的根)" by the legendary https://en.wikipedia.org/wiki/Eric_S._Raymond[Eric Steven Raymond] is notable
* http://thecodelesscode.com/ "The Codeless Code" by anonymous Qi.
* http://canonical.org/~kragen/tao-of-programming.html
* https://wiki.c2.com/?MysticalProgrammingKoans
* http://rubykoans.com/[] even \x[evil] programming languages adopt them!

Another thing that points the correlation out is the existence of https://wattsalan.github.io/ on a `github.io` about \x[alan-watts].

= List of software engineers
{parent=software-engineer}

= Aaron Swartz
{c}
{parent=list-of-software-engineers}
{wiki}

Aaron, \x[ciro-santilli] will complete \x[ourbigbook-com][your quest to make eduction free]. Just \x[legally] this time, with the and with the \x[creative-commons-license] you helped to create.

Ciro likes how \x[the-internet-s-own-boy-2014] explains how Aaron felt like high school was \x[bullshit], and that he could \x[autodidacticism][learn whatever he wanted from books], \x[ourbigbook-com/motivation][which is one of Ciro's key feelings].

It also mentions how he was a natural teacher from a very early age.

= Guerilla Open Access Manifesto by Aaron Swartz (2008)
{parent=aaron-swartz}
{wiki}

https://gist.github.com/briandoll/4522952

Hmmm, he does not know how to spell guerilla? \x[sic]? https://www.quora.com/What-is-the-correct-spelling-guerilla-or-guerrilla

Note to self: if you are going to commit a \x[crime], don't publish your plans online.

\x[ross-ulbricht]'s diaries come to mind.

That's how \x[russian] \x[shadow-library] maintainers do it, they know how to crime good old Russians. Maybe there is a good thing about having \x[dictatorship]{p} in the world that give zero fucks about \x[american] copyright laws. There will always be some random \x[russian] academic who will implement this and not go to jail. Maybe it's even \x[government][state] sponsored.

= The Internet's Own Boy (2014)
{parent=aaron-swartz}
{wiki}

= Sandy Maguire
{c}
{parent=list-of-software-engineers}
{wiki}

* https://sandymaguire.me
* https://github.com/isovector/

Lots of similar ideologies to \x[ciro-santilli], love it:
* https://sandymaguire.me/about/[]:
  * he's an \x[idealist]
  \Q[I might best be described somewhere between independent researcher and voluntarily-unemployed bum. At the ripe old age of 27 I decided to quit my highly-lucrative engineering job and decide to focus more on living than on grinding for the man. It's what you might call a work in progress.]
* https://sandymaguire.me/blog/reaching-climbing/[]: \x[don-t-be-a-pussy]
  \Q[Last Friday was my final day at work. According to my facebook profile, I am now "happily retired." As of today, I don't plan to do another day of "traditional work" in my life. That's not to say that I'll be sitting idle playing tiddly winks. I want to build things, to dedicate my life to independent study, and to get really, really good with building communities. I don't have time for any of this "work" stuff that somehow pervades our entire culture, choking our inspiration and sapping our energy away from the things we'd rather be doing.]
  One is also reminded of \x[gwern-branwen]. Sandy is also into self-improvement stuff, so even more like Gwern. This is a point Ciro diverges on. Ciro works actively on self-worsening.
* he thinks \x[university] is useless:
  * https://sandymaguire.me/blog/where-uni-fails/ Where University Fails (2018), mostly talking about \x[backward-design]
  * https://sandymaguire.me/blog/gatekept/ rejected from \x[imperial-college] \x[phd] program due to \x[grade-exam]{p} being slightly too low for their stupid requirements, even though he had a referral already, and an amazing CV
* he likes \x[jazz]: https://sandymaguire.me/blog/too-smart/

Other interesting points:
* https://sandymaguire.me/blog/sandy-runback/ he changed his own name to Sandy because he didn't like it, he was born Alexander
* https://algebradriven.design/ \x[closed-source] books though, ouch. At least they seem to have been made with \x[leanpub] though, could be worse.

He's a \x[haskell] person.

= Dan Dascalescu
{c}
{parent=list-of-software-engineers}

His website is down as of 2020, shame: https://wiki.dandascalescu.com/essays/english-universal-language

= English as a universal language by Dan Dascalescu (2008)
{c}
{parent=dan-dascalescu}

https://wiki.dandascalescu.com/essays/english-universal-language

https://web.archive.org/web/20200317221752/https://wiki.dandascalescu.com/essays/english-universal-language

\x[dan-dascalescu]'s version of \x[having-more-than-one-natural-language-is-bad-for-the-world].

= Donald Knuth
{c}
{parent=list-of-software-engineers}
{wiki}

= Knuth reward check
{c}
{parent=donald-knuth}
{wiki}

* https://tex.stackexchange.com/questions/110586/327-68-knuth-reward-check
* https://www.quora.com/What-is-it-like-to-receive-a-Knuth-reward-check
* https://www-cs-faculty.stanford.edu/~knuth/boss.html

= Eli Benderski
{c}
{parent=list-of-software-engineers}

Homepage: https://eli.thegreenplace.net/

Amazing \x[systems-programming] tutorials. Whenever you \x[google] a hard topic, his blog comes up.

Also has many great contributions on \x[stack-overflow]: https://stackoverflow.com/users/8206/eli-bendersky[]

As of 2016, Eli worked at \x[google] (https://dl.acm.org/citation.cfm?doid=2854038.2854041[reference]). TODO before that, I had found his earlier info previously but lost it.

Eli focuses mostly on \x[compiler-toolchain]{p}, apparently with specific focus on  

He also has some \x[mathematics] stuff, so cute: https://eli.thegreenplace.net/2015/change-of-basis-in-linear-algebra/

= Fabrice Bellard
{c}
{parent=list-of-software-engineers}
{wiki}

Creator of \x[qemu] and \x[ffmpeg], both of which \x[ciro-santilli] deeply respects. And a bunch other random stuff.

What is shocking about Fabrice this is that both are insanely important software that \x[ciro-santilli] really likes, and both seem to be completely unrelated subjects!

\x[google] made billions on top of this dude:
* \x[ffmpeg-is-the-backend-of-youtube]
* \x[qemu] is the default emulator for https://en.wikipedia.org/wiki/Android_Studio[Android Studio] as of 2019, which \x[android] developers use by default under the hood to develop Android Apps on their desktop without the need for a real device.

At last but not least, Fabrice also studied in the same school that Ciro studied in France, \x[ecole-polytechnique].

It is a shame that he keeps such a low profile, there are no videos of him on the web, and he https://smartbear.com/blog/test-and-monitor/fabrice-bellard-portrait-of-a-super-productive-pro/[declines interviews].

Another surprising fact is that Fabrice has not worked for the "Big Tech Companies" as far as can be publicly seen, but rather mostly on smaller companies that he co-founded: https://www.quora.com/Computer-Programmers/Computer-Programmers-Where-is-Fabrice-Bellard-employed

= Gwern Branwen
{c}
{parent=software-engineer}

A \x[lesswrong] person.

= gwern.net
{c}
{parent=gwern-branwen}
{tag=the-best-personal-webpages-of-all-time}

https://www.gwern.net/

One thing that annoys \x[ciro-santilli] about that website are the footnote overload. Ciro likes linear things.

= Richard Stallman
{c}
{parent=software-engineer}
{wiki}

TODO find the best source for the amazing "I have done your mother" quote.

= Linus Torvalds
{c}
{parent=software-engineer}
{wiki}

= Tim O'Reilly
{c}
{parent=software-engineer}
{wiki}

= Computer programming
{parent=software-engineering}
{wiki}

= Programming
{synonym}

Programming is hard. To \x[ciro-santilli], it's almost masochistic.

What makes Ciro especially mad when programming is not the hard things.

It is the things that should be easy, but aren't, and which take up a lot of your programming time.

Especially when you are already a few levels of "simple problems" down from your original goal, and another one of them shows up.

This is basically the cause of \x[hofstadter-s-law].

But of course, it is because it is hard that it feels amazing when you achieve your goal.

Putting a complex and useful program together is like composing a symphony, or reaching the summit of a hard \x[rock-climbing] proble.

= Software portability
{parent=software}
{wiki}

= Porting
{parent=software-portability}
{wiki}

= Port
{disambiguate=software-portability}
{synonym}

= Source code
{parent=software}
{wiki}

= The best code is no code at all
{parent=source-code}

Some \x[blog]{p}:
* https://blog.codinghorror.com/the-best-code-is-no-code-at-all/ The Best Code is No Code At All (2007)
* http://www.skrenta.com/2007/05/code_is_our_enemy.html Code is our enemy (2007)

Also resonates with \x[backward-design].

= Use The Source Luke
{parent=source-code}

https://wiki.c2.com/?UseTheSourceLuke

= Systems programming
{parent=source-code}
{wiki}

\x[ciro-santilli]'s definition: https://softwareengineering.stackexchange.com/questions/151610/what-exactly-is-system-programming/399625#399625

Ciro's tutorial: \x[linux-kernel-module-cheat].

Ciro's word of caution for 2019 aspiring system programmers: https://cirosantilli.com/linux-kernel-module-cheat/#should-you-waste-your-life-with-systems-programming[Should you waste your life with systems programming?]

= Operating system
{parent=systems-programming}
{title2=OS}
{wiki}

Magic software that allows you to write a single program that runs on a wide range of hardware.

= Driver
{disambiguate=software}
{parent=operating-system}
{wiki}

= UNIX
{c}
{parent=operating-system}
{wiki}

= Linux
{c}
{parent=operating-system}
{wiki}

It ain't perfect, but it's decent enough.

From a technical point of view, it can do anything that \x[microsoft-windows] can. Except being forcefully installed on every non-\x[macos] 2019 computer you can buy.

\x[ciro-santilli]'s conversion to Linux happened around 2012, and was a central part of \x[ciro-santilli-s-open-source-enlightenment], since it fundamentally enables the discovery and contribution to \x[open-source-software]. Because what awesome open source person would waste time porting their amazing projects to closed source OSes?

Ciro's modest nature can be seen as he likes to compare this event https://en.wikipedia.org/wiki/Great_Renunciation[Buddha's Great Renunciation].

Linux should track glibc and \x[posix-command-line-utility]{p} in-tree like \x[bsd-operating-system], otherwise people have \x[linux-kernel-module-cheat][no way to get the thing running in the first place without blobs or large out-of-tree scripts]! https://blog.farhan.codes/2018/06/25/linux-maintains-bugs-the-real-reason-ifconfig-on-linux-is-deprecated/[Another enlightened soul] who agrees.

Particularly interesting in the history of Linux is how it won out over the open competitors that were coming up in the time: https://en.wikipedia.org/wiki/MINIX[MINIX] (see https://ponderwall.com/index.php/2019/04/02/linux-tanenbaum-newsgroup-linus-torvalds/[the chat]) and \x[bsd-operating-system] that got https://en.wikipedia.org/wiki/UNIX_System_Laboratories,_Inc._v._Berkeley_Software_Design,_Inc.[legally bogged down] at the critical growth moment.

You must watch this: \x[truth-happens-advertisement-by-red-hat].

\Image[https://web.archive.org/web/20210129024945if_/https://imgs.xkcd.com/comics/supported_features.png]
{title=\x[xkcd] 619: Supported Features.}
{description=This perfectly illustrates Linux development. First features that matter. Then useless features.}
{source=https://xkcd.com/619/}

\Video[http://youtube.com/watch?v=njos57IJf-0]
{title=\x[bill-gates] vs \x[steve-jobs] by \x[epic-rap-battles-of-history] (2012)}
{description=Just stop whatever you are doing, and watch this right now. "I'm on Linux, bitch, I thought you GNU". https://epicrapbattlesofhistory.fandom.com/wiki/Steve_Jobs_vs_Bill_Gates/Rap_Meanings[Fandom explanations]. It is just a shame that the Bill Gates actor looks absolutely nothing like the real gates. Actually, the entire Gates/Jobs parts are good, but not genial. But the Linux one is.}

= Tux
{c}
{disambiguate=mascot}
{parent=linux}
{wiki}

= Linux kernel
{c}
{parent=linux}
{wiki}

\x[ciro-santilli] has a tutorial at \x[linux-kernel-module-cheat].

= Linux Foundation
{c}
{parent=linux-kernel}

The fact that this foundation has a bunch of paid, closed, certification courses makes \x[ciro-santilli] not respect them at all. They should be making \x[open-access] content instad!

= Linux insides
{parent=linux-kernel}
{c}

https://github.com/0xAX/linux-insides

Documents the \x[linux-kernel]. Somewhat of a competitor to \x[linux-kernel-module-cheat], but more wordy and less automated.

= Linux distribution
{c}
{parent=linux}
{wiki}

= Distro
{synonym}

= Linux distribution buildable from source
{parent=linux-distribution}

As of 2020, no one knows how to build the major desktop distros fully from source into the ISO, and especially so in a reproducible build way. Everything is done in build servers somewhere with complicated layers of prebuilds. It's crap.

See also: https://cirosantilli.com/linux-kernel-module-cheat/#linux-distro-choice

Yes:
* \x[buildroot]{child}
* \x[nixos]{child}

No:
* \x[ubuntu]: https://askubuntu.com/questions/82302/how-to-compile-ubuntu-from-source-code source: https://quoteinvestigator.com/2010/07/08/laws-sausages/[sausage factory]

= Package manager
{parent=linux-distribution}

= Cross distro package manager
{parent=linux-distribution}

= Flatpak
{c}
{parent=cross-distro-package-manager}
{wiki}

= Snap
{c}
{disambiguate=package manager}
{parent=cross-distro-package-manager}
{wiki}

https://merlijn.sebrechts.be/blog/2020-08-02-why-one-snap-store/ has some very good comments on how `snap` is more closed than \x[flatpak].

= List of Linux distributions
{c}
{parent=linux}
{wiki}

= Android
{c}
{disambiguate=operating system}
{parent=list-of-linux-distributions}

= Android
{synonym}

* the best full featured free OS we have today, since POSIX gave up short of any UI specification, and Chrome OS is not there yet
* usable and likely efficient \x[java] \x[api] for apps if https://en.wikipedia.org/wiki/Google_v._Oracle_America[Oracle doesn't manage to destroy it with its lawsuit]

However, many, many, many terrible horrors come with it:
* it hasn't made the move to desktop for too many years. It could destroy \x[microsoft-windows] and replace it with open source, but they just won't budge towards an unified mobile/desktop setup.
* vendors litter it with uninstallable bloatware that should be \x[illegal]. \x[european-union] to the rescue!!! https://www.cnbc.com/2020/12/15/digital-markets-act-eus-new-rules-on-big-tech.html
* vendors lock down devices so it is very hard to get sudo, let alone to modify their images!
* there isn't enough hardware standardization for open source distros to thrive like on desktop
* code drops mean that "master" is useless and trying to contribute from outside vendors' closed walls is a waste of time: https://stackoverflow.com/questions/1809774/how-to-compile-the-android-aosp-kernel-and-test-it-with-the-android-emulator/48310014#48310014
* if you ever go below the Java API, e.g. to \x[c-plus-plus] or AOSP build, everything is horrendous and https://unix.stackexchange.com/questions/122787/how-to-compile-extra-files-into-the-root-directory-of-an-android-rom[undocumented]
* \x[google] doesn't care about the CLI, even the \x[hello-world] requires creating infinite out-of-control boilerplate from a \x[gui]: https://stackoverflow.com/questions/20801042/how-to-create-android-project-with-gradle-from-command-line/46994747#46994747
* the boot is uber bloated and takes forever in cycle simulators

= Android Open Source Project
{c}
{parent=android-operating-system}
{title2=AOSP}
{wiki}

= Transfer Android 11 camera videos to Ubuntu 20.10
{c}
{parent=android-operating-system}

https://android.stackexchange.com/questions/66385/how-to-transfer-files-from-an-android-phone-to-a-ubuntu-pc-by-using-a-usb-cable/194107#194107

The video folder is `DCIM/Camera`.

= F-Droid
{c}
{parent=android-operating-system}
{wiki}

= Arch Linux
{c}
{parent=list-of-linux-distributions}
{tag=linux-distribution-buildable-from-source}
{wiki}

Respect. Big respect. Those people are hardcore from scratch hackers, and their wiki is amazing: https://wiki.archlinux.org/

It's just that \x[buildroot] is more hardcore ;-)

But can you build the ISO full from source: \x[linux-distribution-buildable-from-source]

= Buildroot
{c}
{parent=list-of-linux-distributions}
{tag=linux-distribution-buildable-from-source}
{wiki}

The basis for \x[linux-kernel-module-cheat].

Buildroot is \x[good].

= BusyBox
{c}
{parent=buildroot}
{wiki}

= NixOS
{c}
{parent=list-of-linux-distributions}
{tag=linux-distribution-buildable-from-source}
{wiki}

This thing is sexy.

= Ubuntu
{c}
{parent=list-of-linux-distributions}
{wiki}

\x[ciro-santilli]'s Linux distro of choice as of 2019.

It ain't perfect, but it's decent enough.

The greatest advantage of it being that it has the likely largest desktop user base, and therefore the highest likelihood that your problems are solved on https://askubuntu.com/users/52975[Ask Ubuntu], and goes together with Ciro's philosophy that \x[having-more-than-one-natural-language-is-bad-for-the-world]["people should do everything in the same way to factor stuff out"], especially the \x[open-source-software][open source losers].

Ciro considers that the killer flaw of Ubuntu, and most desktop distros of 2020, is that no one under the Sun knows how to build them fully from source: \x[linux-distribution-buildable-from-source]. This is why Ciro based the \x[linux-kernel-module-cheat] on \x[buildroot], see also: \x[linux-distribution-buildable-from-source].

= How to report Ubuntu crashes
{parent=ubuntu}
{wiki}

Their crash system does not have an amazing user interface.

Tested on \x[ubuntu-21-10].

After something crashes, look under `/var/crash` for a crash file, which helps to determine which package to report under on \x[launchpad-website].

E.g. a file `/var/crash/_usr_sbin_gdm3.0.crash` makes you want to file the bug under gdm at: https://bugs.launchpad.net/ubuntu/+source/gdm/+filebug

Then, while reporting the bug, you want to give the developpers access to that `.crash` file. But you can't publicly upload it because it contains memory dumps and could contain secret information. The way to do it is to look at the ID under:
``
sudo cat /var/crash/_usr_sbin_gdm3.0.uploaded
``
Ubuntu's crash report system has already uploaded the `.crash` for you, so you just have to confirm it and give the ID on the ticket.

You can view a list of all your uploaded errors at:
``
xdg-open https://errors.ubuntu.com/user/$(sudo cat /var/lib/whoopsie/whoopsie-id)
``
and each of those contain a link to:
``
https://errors.ubuntu.com/oops/<.uloaded error id>
``
which you yourself cannot see.

https://askubuntu.com/questions/434431/how-can-i-read-a-crash-file-from-var-crash asks how to read the `.crash` files.

Running:
``
sudo apport-unpack /var/crash/_usr_sbin_gdm3.0.crash /tmp/app
``
splits it up into a few files, but does not make any major improvements.

`apport-retrace`
``
sudo apt install apport-retrace
sudo chmod 666 /var/crash/_usr_sbin_gdm3.0.crash
apport-retrace -g /var/crash/_usr_sbin_gdm3.0.crash
``
opens GDB with the core dump. Debug symbols are supplied as separate packages, which is a really cool idea: so you should be able to download them after the crash to see symbols. https://askubuntu.com/questions/487222/how-to-install-debug-symbols-for-installed-packages mentions how to install them. Official docs at: https://wiki.ubuntu.com/DebuggingProgramCrash#Debug_Symbol_Packages

Tried:
``
echo "deb http://ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ddebs.list
echo -e "deb http://ddebs.ubuntu.com $(lsb_release -cs)-updates main restricted universe multiverse\ndeb http://ddebs.ubuntu.com $(lsb_release -cs)-proposed main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ddebs.list
sudo apt install ubuntu-dbgsym-keyring
``
but then `sudo apt update` fails with:
``
E: The repository 'http://ddebs.ubuntu.com impish-security Release' does not have a Release file.
``

= Ubuntu release
{c}
{parent=ubuntu}
{wiki}

= Ubuntu 21.10
{c}
{parent=ubuntu-release}

GDM crashes sometimes when switching windows right after opening a new window: https://bugs.launchpad.net/ubuntu/+source/gdm/+bug/1956299

= Ubuntu 21.10 does not wake up from suspend
{parent=ubuntu-21-10}
{title2=`nv_set_system_power_state`}

Please refer to \x[video-linus-torvalds-saying-nvidia-fuck-you-2012].

https://askubuntu.com/questions/1032633/18-04-screen-remains-blank-after-wake-up-from-suspend/1391917#1391917

Reported at: https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-470/+bug/1953674

On \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017].

Does not happen every time, only some times. Can't figure out why. Usually happens when has suspended for a longer time.

https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-470/+bug/1946303 sounds like a likely report, \x[nvidia] driver version 470, but can't find those error messages anywhere. The last line of:
``
journalctl -o short-precise -k -b -1
``
once was:
``
PM: suspend entry (deep)
``
which is when sleep starts.

This suggests that it is not a video bug then, seems that it is not waking up at all? Gotta try to SSH into it. OK. I did SSH into it, and that was fine, so it is just the video that won't start.

``
PM: suspend exit
``

https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1949977 is another possible bug, based on kernel version. I'm running 5.13, which is one of the failing versions on the report. Can't find any interesting dmesg though.

In another crash:
``
journalctl -o short-precise -k -b -1
``
had the following interesting lines:
``
nvidia-modeset: WARNING: GPU:0: Lost display notification (0:0x00000000); continuing.
[24307.640014] NVRM: GPU at PCI:0000:01:00: GPU-18af74bb-7c72-ff70-e447-87d48378ea20
[24307.640018] NVRM: Xid (PCI:0000:01:00): 79, pid=8828, GPU has fallen off the bus.
[24307.640021] NVRM: GPU 0000:01:00.0: GPU has fallen off the bus.
[24328.054022] nvidia-modeset: ERROR: GPU:0: The requested configuration of display devices (LGD (DP-4)) is not supported on this GPU.
[repeats several more times]
[24328.056767] nvidia-modeset: ERROR: GPU:0: The requested configuration of display devices (LGD (DP-4)) is not supported on this GPU.
[24328.056951] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:0:0:0x0000000f
[24328.056955] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:1:0:0x0000000f
[24328.056959] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:2:0:0x0000000f
[24328.056962] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:3:0:0x0000000f
[24328.056983] nvidia-modeset: ERROR: GPU:0: DP-4: Failed to disable DisplayPort audio stream-0
[24328.056992] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000947d:0:0:0x0000000f
``
and there was a corresponding `/var/crash/_usr_sbin_gdm3.0.crash`.

Related "GPU has fallen off the bus": https://askubuntu.com/questions/868321/gpu-has-fallen-off-the-bus-nvidia

= Ubuntu 20.04
{c}
{parent=ubuntu-release}

= Launchpad
{c}
{disambiguate=website}
{parent=ubuntu}
{wiki}

= BSD Operating System
{c}
{parent=operating-system}

https://en.wikipedia.org/wiki/List_of_BSD_operating_systems

\x[legal]{c} issues stalled them at the turning point of the \x[internet], and \x[linux] won. Can't change \x[history].

Did \x[apple] just fork it and made Mac OS X without giving anything back?

= FreeBSD
{c}
{parent=bsd-operating-system}
{wiki}

= Microsoft
{c}
{parent=operating-system}

They are \x[evil] because they produce \x[closed-source-offline-software-used-by-millions]: \x[microsoft-windows].

And also their monopolistic practices: \x[united-states-v-microsoft-corp].

So, as put in \x[video-bill-gates-vs-steve-jobs-by-epic-rap-battles-of-history-2012] by fake \x[steve-jobs] to fake \x[bill-gates]:
\Q[Why'd you name your company after your \x[dick]?]

However, like all \x[big-tech] companies with infinite money, they do end up doing some cool things in their research department, \x[microsoft-research], notably for \x[ciro-santilli] being:
* \x[lean-proof-assistant]
* their \x[quantum-computing] work. C# is of course a bad idea, we don't need \x[yet-another] \x[domain-specific-language], \x[python] library based solutions like \x[qiskit] are obviously the way to go

= United States v. Microsoft Corp
{c}
{parent=microsoft}
{wiki}

= Microsoft Research
{c}
{parent=microsoft}
{wiki}

= Microsoft product
{c}
{parent=microsoft}
{wiki}

= Microsoft Windows
{c}
{parent=microsoft-product}
{tag=closed-source-offline-software-used-by-millions}
{wiki}

A monopolistic operating system that only exists in the 2010's because of the \x[ibm]-linked historical lock-in and constant useless changes of the Microsoft Word document format to prevent cross operability.

It offers no technical advantages over free \x[linux] distros in the late 2010's, and it is barely impossible to buy a non-Mac computer without paying for it, which should be \x[illegal]. \x[european-union], time to use your \x[europe-cookie-law][regulatory powers].

The following anecdote illustrates Windows' pervasiveness. \x[ciro-santilli] was once tutoring a high school student in Brazil, and decided to try and get her into programming. When the "Windows is not free" subject came up, the high school student was shocked: "I paid 100 dollars for this?". She never even knew it was there. To her, it was "just a computer".

Laws should really be passed forcing OEMs to allow you to not buy Microsoft Windows when buying a computer, \x[europe-cookie-law][European Union], why have you failed me in 2016??? https://en.wikipedia.org/wiki/Bundling_of_Microsoft_Windows

http://blog.zorinaq.com/i-contribute-to-the-windows-kernel-we-are-slower-than-other-oper/ I Contribute to the Windows Kernel. We Are Slower Than Other Operating Systems. Here Is Why. by Marc Bevand (2013) has some interesting remarks:
\Q[There's also little incentive to create changes in the first place. On linux-kernel, if you improve the performance of directory traversal by a consistent 5%, you're praised and thanked. Here, if you do that and you're not on the object manager team, then even if you do get your code past the Ob owners and into the tree, your own management doesn't care. Yes, making a massive improvement will get you noticed by senior people and could be a boon for your career, but the improvement has to be very large to attract that kind of attention.]

\Video[https://www.youtube.com/watch?v=Uh64nPT7JWk]
{title=Bomb disposal robot by \x[the-it-crowd].}

= DOS
{c}
{parent=microsoft-windows}
{wiki}

= Bill Gates
{parent=microsoft}
{c}
{wiki}

The enemy?

You must watch this: \x[video-bill-gates-vs-steve-jobs-by-epic-rap-battles-of-history-2012].

It does not matter how many trillions you donate to charity, Bill. If you want to prove your point, make MS Word free and open source and port it to Linux. And then Window implements \x[posix]-compatible APIs and then deprecate non-POSIX APIs.

= Quote by Bill Gates
{parent=bill-gates}

= Assign the hard task to the lazy person
{parent=bill-gates}
{tag=you-aren-t-gonna-need-it}

https://quoteinvestigator.com/2014/02/26/lazy-job/ (http://archive.is/kcXuQ[archive]):
\Q[I will always choose a lazy person to do a difficult job because a lazy person will find an easy way to do it.]

See also: \x[effortless-effort].

= POSIX
{c}
{parent=operating-system}
{wiki}

The real explanation: https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755

= Environment variable
{parent=posix}
{wiki}

= GNU Core Utils
{c}
{parent=posix}
{wiki}

https://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html

= Non-POSIX GNU Core Utils command line utility
{parent=gnu-core-utils}

= sha1sum
{parent=non-posix-gnu-core-utils-command-line-utility}
{wiki}

= shred
{disambiguate=UNIX}
{parent=non-posix-gnu-core-utils-command-line-utility}
{wiki}

= Non-POSIX command line utility
{parent=posix}

* \x[non-posix-gnu-core-utils-command-line-utility]{child}

= rsync
{c}
{parent=non-posix-command-line-utility}
{wiki}

= sudo
{c}
{parent=non-posix-command-line-utility}
{wiki}

Availability: https://unix.stackexchange.com/questions/48522/how-universal-is-sudo

https://xkcd.com/149/

= POSIX command line utility
{c}
{parent=posix}

= `diff`
{c}
{parent=posix}
{wiki}

= `grep`
{c}
{parent=posix}
{wiki}

If you are a programmer, `grep` becomes a verb: "to grep" means "to search text files".

= `wc`
{c}
{disambiguate=unix}
{parent=posix}
{wiki}

= Standard streams
{parent=posix}
{wiki}

= Standard output
{parent=standard-streams}

= stdout
{synonym}

= TempleOS
{c}
{parent=operating-system}
{wiki}

The OS that the \x[god]{p} ordered be made.

One is reminded of https://ulillillia.fandom.com/wiki/Ulillillia[Ulillillia], see also: https://www.youtube.com/watch?v=9-79yOZ13qg The Story of Ulillillia by Atrocity Guide (2019)

We are \x[autism][all somewhere in the spectrum].

= Executable file format
{parent=systems-programming}

* https://en.wikipedia.org/wiki/Executable
* https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats
* https://en.wikipedia.org/wiki/Object_file

= Executable and Linkable Format
{parent=executable-file-format}
{title2=ELF}
{wiki}

For a quick and dirty introduction to the format, see: \x[elf-hello-world].

\Include[elf-hello-world]

= Virtualization
{parent=systems-programming}
{wiki}

= Docker
{c}
{disambiguate=software}
{parent=virtualization}
{wiki}

= Docker
{c}
{synonym}

= Emulator
{parent=virtualization}
{wiki}

= Emulate
{synonym}

One of the things \x[ciro-santilli] really likes, see: \x[linux-kernel-module-cheat]

If \x[computational-physics] simulates physics, emulators simulates \x[computer]{p}.

= gem5
{c}
{parent=emulator}
{wiki}

https://cirosantilli.com/linux-kernel-module-cheat/gem5

= QEMU
{c}
{parent=emulator}
{wiki}

https://cirosantilli.com/linux-kernel-module-cheat/introduction-to-qemu

The leading open source cross architecture and KVM emulator of the 2010's.

Great way to understand how operating systems work, which \x[ciro-santilli] used extensively in his \x[linux-kernel-module-cheat].

\x[ciro-santilli] has some good related articles listed under: \x[articles].

= Systems programming software engineer
{parent=systems-programming}

= The most awesome systems programming software engineers
{parent=systems-programming-software-engineer}

* \x[eli-benderski]{child}
* \x[fabrice-bellard]{child}
* \x[linus-torvalds]{child}

Other notable people that are likely also awesome but Ciro has less familiarity with their contributions:
* https://en.wikipedia.org/wiki/D._Richard_Hipp[Dwayne Richard Hipp] from \x[sqlite]
* https://en.wikipedia.org/wiki/Daniel_Stenberg[Daniel Stenberg] from cURL
* Michael Niedermayer also from \x[ffmpeg]. http://ikaruga.co.uk/~snacky/mn.html highlights his brutal directness and efficiency, and sometimes sense of humour

= Terminal emulator
{parent=software}
{wiki}

Terminals don't really matter. Just use \x[tmux].

= Yakuake
{parent=terminal-emulator}

https://github.com/KDE/yakuake

= Terminal multiplexer
{parent=terminal-emulator}
{wiki}

= tmux
{c}
{parent=terminal-multiplexer}
{wiki}

https://github.com/tmux/tmux

If session autosave was finally mainlined, this would be Nirvana.

= Version control
{parent=software}
{wiki}

= Concurrent Versions System
{c}
{parent=version-control}
{title2=CSV}
{wiki}

It is said, that once upon a time, programmers used CSV and collaborated on \x[sourceforge], and that everyone was happy.

These days, are however, long gone in the mists of time as of 2020, and beyond \x[ciro-santilli]'s programming birth.

= Git
{c}
{parent=version-control}
{wiki}

= Git UI
{parent=git}

Perfect Git integration belongs in \x[integrated-development-environment]{p} :-)

= tig
{disambiguate=git UI}
{parent=git-ui}

https://github.com/jonas/tig

This is good. But it misses some key operations, so much so that makes Ciro not want to learn/use it daily.

= Pro Git book
{parent=git}
{c}

https://github.com/progit/progit2

= libgit2
{parent=git}
{c}

https://github.com/libgit2/libgit2

= libgit2/rugged
{parent=libgit2}
{c}

https://github.com/libgit2/rugged

= Git web interface
{parent=git}
{c}

= GitHub
{c}
{parent=git-web-interface}
{wiki}

This is where \x[ciro-santilli] stored his code since he started coding nonstop in 2013.

He \x[closed-source-is-less-bad-on-online-services][does not like the closed source aspect of it], but hey, there are more important things to worry about, the network effect is just too strong.

= GitHub users deleted by GitHub
{c}
{parent=github}

https://stackoverflow.com/questions/50720844/can-github-delete-your-account/66105692#66105692

= GitHub Pages
{c}
{parent=github}

https://pages.github.com/

The cheapest and most resilient way to publish \x[how-to-teach/text-is-cheaper-than-video][text content] humanity has achieved so far.

= GitHub Sponsors
{c}
{parent=github}

= Who are the developers that are making the most money through GitHub sponsors?
{c}
{parent=github-sponsors}

https://github.com/isaacs/github/issues/1824

= Octokat.js
{parent=github}
{c}

https://github.com/philschatz/octokat.js

= octokit.js
{parent=octokat-js}
{c}

https://github.com/philschatz/octokit.js

= GitLab
{c}
{parent=git-web-interface}
{wiki}

GitLab was very important to Ciro because he wanted to base https://github.com/booktree/booktree[Booktree] on it.

See also: \x[ciro-santilli-s-minor-projects].

= GitLab CI
{c}
{parent=gitlab}
{tag=continuous-integration}

https://github.com/gitlabhq/gitlab-ci

= GitLab cookbook
{parent=gitlab}
{c}

https://gitlab.com/gitlab-org/cookbook-gitlab

= SourceForge
{c}
{parent=git-web-interface}
{wiki}

RIP: https://www.quora.com/Is-SourceForge-still-relevant-to-open-source-projects/answer/Ciro-Santilli

= Web technology
{parent=software}

= Web cheat
{synonym}

Cheatsheet on \x[html], \x[cascading-style-sheets] and \x[javascript]{child}.

Old cheat on separate repo: \a[web/]{check=0}.

Now moving to either:
* separate files under: \a[web-cheat/] for the boring stuff
* subsections under this section for the more exciting stuff!

Index:
* \x[html]
  * \a[web-cheat/min.html]: minimal valid HTML document. It is insane however.
  * \a[web-cheat/min-sane.html]: minimal sane HTML document. There are smaller valid ones, but they are insane.
  * \a[web-cheat/img.html]
  * \a[web-cheat/img-broken.html]: https://stackoverflow.com/questions/22051573/how-to-hide-image-broken-icon-using-only-css-html
* \x[youtube] embeds
  * \a[web-cheat/youtube-embed.html]
  * \a[web-cheat/youtube-embed-lazy.html]: https://stackoverflow.com/questions/7154958/lazy-load-iframe-delay-src-http-call-with-jquery/62523325#62523325
* External libraries
  * Text editors
    * \a[web-cheat/monaco-editor.html]:
      * https://github.com/microsoft/monaco-editor
      * https://stackoverflow.com/questions/63179813/how-to-run-the-monaco-editor-from-a-cdn-like-cdnjs/63179814#63179814
  * Interactive HTML table sorting
    * \a[web-cheat/tablesort.html]: https://github.com/tristen/tablesort
    * \a[web-cheat/sortable.html]: https://github.com/HubSpot/sortable

= HTML
{c}
{parent=web-technology}
{tag=markup-language}
{wiki}

= HTML canvas
{c}
{parent=html}

https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API

Allows us to draw with JavaScript pixel by pixel! Great way to create \x[computational-physics] demos!

Here is an animation demo with some useful controls:
\JsCanvasDemo[[
new class extends OurbigbookCanvasDemo {
  init() {
    super.init('hello');
    this.pixel_size_input = this.addInputAfterEnable(
      'Pixel size',
      {
        'min': 1,
        'type': 'number',
        'value': 1,
      }
    );
  }
  draw() {
    var pixel_size = parseInt(this.pixel_size_input.value);
    for (var x = 0; x < this.width; x += pixel_size) {
      for (var y = 0; y < this.height; y += pixel_size) {
        var b = ((1.0 + Math.sin(this.time * Math.PI / 16)) / 2.0);
        this.ctx.fillStyle =
          'rgba(' +
          (x / this.width) * 255 + ',' +
          (y / this.height) * 255 + ',' +
          b * 255 +
          ',255)'
        ;
        this.ctx.fillRect(x, y, pixel_size, pixel_size);
      }
    }
  }
}
]]

Bibliography: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations

= WebGL
{c}
{parent=html-canvas}

https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example

\JsCanvasDemo[[
new class extends OurbigbookCanvasDemo {
  init() {
    super.init('webgl', {context_type: 'webgl'});
    this.ctx.viewport(0, 0, this.ctx.drawingBufferWidth, this.ctx.drawingBufferHeight);
    this.ctx.clearColor(0.0, 0.0, 0.0, 1.0);
    this.vertexShaderSource = `
#version 100
precision highp float;
attribute float position;
void main() {
  gl_Position = vec4(position, 0.0, 0.0, 1.0);
  gl_PointSize = 64.0;
}
`;

    this.fragmentShaderSource = `
#version 100
precision mediump float;
void main() {
  gl_FragColor = vec4(0.18, 0.0, 0.34, 1.0);
}
`;
    this.vertexShader = this.ctx.createShader(this.ctx.VERTEX_SHADER);
    this.ctx.shaderSource(this.vertexShader, this.vertexShaderSource);
    this.ctx.compileShader(this.vertexShader);
    this.fragmentShader = this.ctx.createShader(this.ctx.FRAGMENT_SHADER);
    this.ctx.shaderSource(this.fragmentShader, this.fragmentShaderSource);
    this.ctx.compileShader(this.fragmentShader);
    this.program = this.ctx.createProgram();
    this.ctx.attachShader(this.program, this.vertexShader);
    this.ctx.attachShader(this.program, this.fragmentShader);
    this.ctx.linkProgram(this.program);
    this.ctx.detachShader(this.program, this.vertexShader);
    this.ctx.detachShader(this.program, this.fragmentShader);
    this.ctx.deleteShader(this.vertexShader);
    this.ctx.deleteShader(this.fragmentShader);
    if (!this.ctx.getProgramParameter(this.program, this.ctx.LINK_STATUS)) {
      console.log('error ' + this.ctx.getProgramInfoLog(this.program));
      return;
    }
    this.ctx.enableVertexAttribArray(0);
    var buffer = this.ctx.createBuffer();
    this.ctx.bindBuffer(this.ctx.ARRAY_BUFFER, buffer);
    this.ctx.vertexAttribPointer(0, 1, this.ctx.FLOAT, false, 0, 0);
    this.ctx.useProgram(this.program);
  }
  draw() {
    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);
    this.ctx.bufferData(this.ctx.ARRAY_BUFFER, new Float32Array([Math.sin(this.time / 60.0)]), this.ctx.STATIC_DRAW);
    this.ctx.drawArrays(this.ctx.POINTS, 0, 1);
  }
}
]]

= Cascading Style Sheets
{c}
{parent=web-technology}
{wiki}

= CSS
{c}
{synonym}
{title2}

* \a[web-cheat/image-table-vertical-center.html]
* \a[web-cheat/viewport-height.html]: a div that is a tall as the viewport, and does not generate a toplevel scrollbar
* \a[web-cheat/responsive-image-max-height.html]: here we try to create an image that is never wider than the screen. If the screen is less wide than the image, then the image scales down proportionally. Otherwise, the image has a user determined fixed by the CSS or the HTML `height` property. Related:
  * https://stackoverflow.com/questions/13632985/limit-the-height-of-a-responsive-image-with-css
  * https://stackoverflow.com/questions/50193946/responsive-image-with-max-height-max-width/50194061
  TODO I'm unable to do this....... https://stackoverflow.com/questions/69964332/how-to-set-the-default-height-of-responsive-images-when-screen-is-wide-and-have The objective was to implement: https://github.com/cirosantilli/ourbigbook/issues/168

= CSS flex
{parent=cascading-style-sheets}
{wiki=CSS_Flexible_Box_Layout}

* \a[css/flex.html]: illustrates basic flex usage, including:
* `flex-grow`: if there's space left, this determines how much extra space will be given to each.
* `flex-basis`: the size the items want to be. But if there isnt' enough space, this can be cut up.

  Note that the minimal space required by children of the flex children cannot be necessarily cut up, and might lead things to overflow out of the container.
* `flex-shrink`: if there's space missing, this determines how much extra space will be removed from each `flex-basis`

That example calculates and displays the final widths via \x[javascript], making it easier to understand the calculations being done.

Answers: https://stackoverflow.com/questions/28473807/how-does-flex-grow0-get-interpreted/69995712#69995712

Bibliography:
* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout

= Sass
{disambiguate=stylesheet language}
{parent=cascading-style-sheets}
{wiki}

= Sass
{c}
{synonym}

The more of their syntax gets merged into mainline \x[cascading-style-sheets], the better the world will be.

= Asset bundler
{parent=web-technology}

In order to make websites efficient and portable, a lot of \x[transpilation] is needed.

\Include[webpack]{parent=asset-bundler}

= Push technology
{parent=web-technology}
{title2=Bi-directional communication}
{wiki}

= Web browser
{parent=web-technology}
{wiki}

= Browser
{synonym}

= Chromium
{c}
{disambiguate=web-browser}
{parent=web-browser}
{wiki}

\x[google] is trying to kill it as of 2021: https://www.omgubuntu.co.uk/2021/01/chromium-sync-google-api-removed The lack of sync is a major major blow. So selfish. Google makes billions, and it won't give in a little bit of settings storage...

= Disable JavaScript on Chromium
{parent=chromium-web-browser}

https://stackoverflow.com/questions/13405383/how-to-disable-javascript-in-chrome-developer-tools

= Firefox
{c}
{parent=web-browser}
{wiki}

= Web development
{parent=web-technology}

= Web framework
{c}
{parent=web-technology}
{wiki}

Per \x[programming-language]:
* \x[node-js-web-framework]{child}{p}
* \x[python-web-framework]{child}{p}

How to select one:
* https://insights.stackoverflow.com/trends?tags=django%2Cruby-on-rails%2Cexpress%2Csails.js%2Cflask%2Cnestjs
* \x[gothinkster-realworld]

= Hello world website
{parent=web-framework}

= A blog in every web framework
{c}
{parent=hello-world-website}
{wiki}

A (multi-user) \x[blog] is the \x[hello-world] of the web, so creating one of those is the best way to quickly evaluate web technology, i.e. \x[time-to-hello-world].

Some new frameworks like \x[feathersjs] are making a chat app instead, as that highlights the push notifications a bit better.

= gothinkster/realworld
{parent=a-blog-in-every-web-framework}

https://github.com/gothinkster/realworld

\x[ciro-santilli]'s implementation: \x[node-express-sequelize-next-js-realworld-example-app].

Ahh, you \x[a-blog-in-every-web-framework][can't have new ideas anymore]!

Basically puts together every backend with \x[front-end-web-framework] to create the exact same website.

The reference live demo can be found at: https://demo.realworld.io/#/ It is based on \x[angular-js] as it links to: https://github.com/gothinkster/angularjs-realworld-example-app TODO backend?

There are however also live demos of other frontends, e.g.:
* \x[react]: https://react-redux.realworld.io[]. But note that tag addition at post creation is broken there as of March 2021, but not on master: https://github.com/gothinkster/react-redux-realworld-example-app/issues/151#issuecomment-808417846 so they forgot to update the live \x[server].
* \x[vue-js]: https://vue-vuex-realworld.netlify.app[]
Note that all those frontends communicate with the same backend.

As of 2021 Devs are seemed a bit too focused on monetizing the project through their "how to use this project" premium tutorial, and documentation could be better: just getting the \x[hello-world] of the most popular backend with the most popular frontend is not easy... come on.

https://github.com/gothinkster/realworld/issues/578 asks for community support, as devs have moved on since unfortunately.

Remember:
* by default, the frontends hardcode the upstream public data \x[api]: `https://conduit.productionready.io/api` so you have to hack their code to match the port of the backend. And each backend can have a different port.
* when you switch between backends, you must first manually \x[clear-client-side-storage] cookies/local new run will fail due to authentication issues!

Important missing things from the minimum base app:
* \x[server-side-rendering]:
  * https://github.com/arrlancore/nextjs-ssr-real-world-app-example[]. As advertised, that global instance does render with \x[javascript] disabled! Proposed for upstream at: https://github.com/gothinkster/realworld/issues/423
  * https://github.com/gothinkster/realworld/issues/266
* no \x[javascript-bi-directional-communication-library] built-in... come on: https://github.com/gothinkster/realworld/issues/107
* \x[email] notifications however as tested on the live demo: https://demo.realworld.io/#/
* error handling is broken/missing/inconsistent across apps

First you should the most popular backend/frontend combination running, which is the most likely to be working. We managed to run on \x[ubuntu] 20.10, \x[react] + \x[node-js] \x[express-js] as described at https://github.com/gothinkster/node-express-realworld-example-app/pull/116[]:
* https://github.com/cirosantilli/node-express-realworld-example-app/tree/mongo4 which has a simple patch on top of https://github.com/gothinkster/node-express-realworld-example-app/tree/ba04b70c31af81ca7935096740a6e083563b3a4a for MongoDB 4 support

  This requires you to first \x[install-mongodb-on-ubuntu] and ensure you can login to it from the command line.
* https://github.com/gothinkster/react-redux-realworld-example-app/tree/9186292054dc37567e707602a15a0884d6bdae35 patched to use the correct server host/port `localhost:3000`:
  ``
  diff --git a/src/agent.js b/src/agent.js
  index adfbd72..e3cdc7f 100644
  --- a/src/agent.js
  +++ b/src/agent.js
  @@ -3,7 +3,7 @@ import _superagent from 'superagent';

   const superagent = superagentPromise(_superagent, global.Promise);

  -const API_ROOT = 'https://conduit.productionready.io/api';
  +const API_ROOT = 'http://localhost:3030/api';

   const encode = encodeURIComponent;
   const responseBody = res => res.body;
  ``
Then just:
``
npm install
npm start
``
on both \x[server] and \x[client-computing], and then visit the client URL: http://localhost:4100/

You have to hit the Enter key to add tags, it's terrible: https://github.com/gothinkster/react-redux-realworld-example-app/issues/151#issuecomment-808417846

One cool thing is that the main repo has unified backend API tests:
``
git clone https://github.com/gothinkster/realworld
cd realworld
git checkout e7adc6b06b459e578d7d4a6738c1c050598ba431
cd api
APIURL=http://localhost:3000/api USERNAME="u$(date +%s)" ./run-api-tests.sh
``
so the per-repository tests are basically useless, and that single test can test everything for any backend! There is no frontend testing however: https://github.com/gothinkster/realworld/issues/269 so newb.

= gothinkster/realworld implementation
{parent=gothinkster-realworld}

Setups we've tried:
* backend:
  * \x[randyscotsmithey-feathers-realworld-example-app]{child} worked with \x[react] and \x[vue-js]
  * the \x[react] setup failed as shown at: https://github.com/gothinkster/react-redux-realworld-example-app/issues/187
  * \x[gothinkster-django-realworld-example-app]{child}
  * the \x[nest-js] failed on Ubuntu 20.10 as per https://github.com/lujakob/nestjs-realworld-example-app/issues/19
* frontend:

= TodoMVC
{c}
{parent=hello-world-website}
{wiki}

https://todomvc.com/

\x[front-end-web-framework][Front-end] only, so infinitely simpler, and generally much less useful than \x[gothinkster-realworld].

= Front-end web framework
{c}
{parent=web-framework}

You need those because it is hard to do the following:
* client \x[javascript] sends a request to \x[server]
* server sends back data
* client updates what the user sees

This is hard to do notably because when the update happens, several things might need to change on the webpage at the same time.

Notably, new elements might need to be added to the webpage, which in turn means that new bindings such as button clicks have to be added to those, in a way that keeps the page working.

The only way to do this basically is to have a functional dependency graph that keeps everything in the page in working state as updates come.

= Single page application
{parent=front-end-web-framework}
{title2=SPA}
{wiki}

= Isomorphic JavaScript
{parent=single-page-application}
{wiki}

= Server-side rendering
{parent=isomorphic-javascript}
{title2=SSR}

= List of front-end web frameworks
{parent=front-end-web-framework}

= Angular.js
{c}
{parent=list-of-front-end-web-frameworks}
{wiki}

\x[react-js]

\Include[react]{parent=list-of-front-end-web-frameworks}

= Vue.js
{c}
{parent=list-of-front-end-web-frameworks}
{wiki}

= Nuxt.js
{c}
{parent=vue-js}

= Software bibliography
{parent=software}

= EbookFoundation/free-programming-books
{parent=software-bibliography}

https://github.com/EbookFoundation/free-programming-books

= Technology
{wiki}

= Technological
{synonym}

= Clothing
{parent=technology}
{wiki}

= Bra
{parent=clothing}
{wiki}

= Deep tech
{parent=technology}
{wiki}

\x[ciro-santilli] is a fan of this late 2010's buzzword.

It basically came about because of the endless stream of useless software startups made since the 2000's by one or two people with no investments with the continued increase in computers and Internet speeds \x[moore-s-law][until the great wall was reached].

Deep tech means not one of those. More specifically, it means technologies that require significant investment in expensive materials and laboratory equipment to progress, such as \x[molecular-biology-technologies] and \x[quantum-computing].

And it basically comes down to technologies that wrestle with the fundamental laws of \x[physics] rather than software data wrangling.

\x[computer]{c}{p} are of course limited by the laws of physics, but those are much hidden by several layers of indirection.

Full visibility, and full control, make computer tasks be tasks that eventually always work out more or less as expected.

The same does not hold true when real Physics is involved.

Physics is brutal.

To start with, you can't even see your system very clearly, and often doing so requires altering its behaviour.

For example, in molecular biology, most great discoveries are made after some new technique is made to be able to observe smaller things.

But you often have to kill your cells to make those observations, which makes it very hard to understand how they work dynamically.

What we would really want would be to track every single protein as it goes about inside the cell. But that is likely an impossible dream.

The same for the brain. If we had observations of every neuron, how long would it take to understand it? Not long, people are really good at \x[reverse-engineering] things when there is enough information available to do so, see also \x[science-is-the-reverse-engineering-of-nature].

Then, even when you start to see the system, you might have a very hard time controlling it, because it is so fragile. This is basically the case of quantum computing in 2020.

It is for those reasons that deep tech is so exciting.

The \x[the-next-big-thing][next big things] will come from deep tech. Failure is always a possibility, and you can't know before you try.

But that's also why its so fun to dare.

Stuff that \x[ciro-santilli] considers "deep tech" as of 2020:
* \x[brain-computer-interface]{child}
* \x[fusion-power]{child}. The question there is, when is "deep", "too deep"?

= Engineering
{parent=technology}
{wiki}

= Engineer
{parent=engineering}
{wiki}

= Computer engineer
{parent=engineer}
{wiki}

= Gordon Moore
{c}
{parent=computer-engineer}
{wiki}

= Robert Noyce
{c}
{parent=computer-engineer}
{wiki}

= Robert Noyce: The Man Behind the Microchip by Leslie Berlin (2006)
{c}
{parent=robert-noyce}
{tag=good-book}

Borrow from the \x[internet-archive] for free: https://archive.org/details/manbehindmicroc000berl/page/n445/mode/2up

= Seymour Cray
{c}
{parent=computer-engineer}
{wiki}

= Cray
{c}
{parent=seymour-cray}
{wiki}

= The Supermen: The Story of Seymour Cray by Charles J. Murray (1997)
{c}
{parent=seymour-cray}
{tag=good-book}

Borrow from the \x[internet-archive] for free: https://archive.org/details/supermenstory00murr

Initial chapters put good clarity on the formation of the \x[military-industrial-complex]. Being backed by the military, especially just after \x[world-war-ii], was in itself enough credibility to start and foster a company.

It is funny to see how the first computers were very artisanal, made on a one-off basis.

Amazing how Control Data Corporation raised capital IPO style as a startup without a product. The dude was selling shares at dinner parties in his home.

Very interesting mention on page 70 of how \x[israel] bought CDC's https://en.wikipedia.org/wiki/UNIVAC_1103[UNIVAC 1103] which Cray contributed greatly to design, and everyone knew that it was to make \x[thermonuclear-weapon]{p}, since that was what the big American labs like  this mention should be added to: https://en.wikipedia.org/wiki/Nuclear_weapons_and_Israel but that's Extended Protected... the horrors of \x[wikipedia].

Another interesting insight is how "unintegrated" computers were back then. They were literally building computers out of individual \x[vacuum-tube]{p}, then individual semiconducting transistors, a gate at a time. Then things got more and more integrated as time went. That is why the now outdated word "microprocessor" existed. When processors start to fit into a single \x[integrated-circuit], they were truly micro compared to the monstrosities that existed previously.

Also, because integration was so weak initially, it was important to more manually consider the length of wire signals had to travel, and try to put components closer together to reduce the \x[critical-path] to be able to increase clock speeds. These constraints are also of course present in modern computer design, but they were just so much more visible in those days.

The book does unfortunately not give much detail in Crays personal life as mentioned on this book review: https://www.goodreads.com/review/show/1277733185?book_show_action=true[]. His childhood section is brief, and his wedding is described in one paragraph, and divorce in one sentence. Part of this is because he was very private about his family most likely note how Wikipedia had missed his first wedding, and likely misattribute children to the second wedding; https://en.wikipedia.org/wiki/Talk:Seymour_Cray section "Weddings and Children".

Crays work philosophy is is highlighted many times in the book, and it is something worthy to have in mind:
* if a design is not working, start from scratch
* don't be the very first pioneer of a technology, let others work out the problems for you first, and then come second and win

Cray's final downfall was when he opted to try to use a promising but hard to work with material \x[gallium-arsenide] instead of \x[silicon] as his way to try and speed up computers, see also: \x[gallium-arsenide-vs-silicon]. Also, he went against the extremely current of the late 80's early 90's pointing rather towards using massively parallel systems based on \x[silicon] off-the-shelf \x[intel] processors, a current that had \x[darpa] support, and which by far the path that won very dramatically as of 2020, see: \x[intel-supercomputer-market-share].

= Industry
{parent=engineering}
{wiki}

= Industrial
{synonym}

= Industrialized
{synonym}

= Electricity generation
{parent=technology}
{wiki}

= Nuclear power
{parent=electricity-generation}
{wiki}

= Fusion power
{parent=nuclear-power}
{wiki}

= Fusion energy
{synonym}

\x[fusion-power-could-be-the-next-big-thing]{c}.

Most promising approaches as of 2020:
* \x[magnetic-confinement-fusion]
* \x[inertial-confinement-fusion]

= Magnetic confinement fusion
{parent=fusion-power}
{wiki}

Once again, relies on \x[superconductivity] to reach insane magnetic fields. Superconductivity is just so important.

= List of magnetic confinement fusion reactors
{parent=magnetic-confinement-fusion}

= JT-60
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{title2=Japan, 1985-2010}
{wiki}

= Joint European Torus
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{title2=JET, Oxfordshire, United Kingdom, 1985-2010, 1991-}
{wiki}

\Video[https://www.youtube.com/watch?v=JrGeuIe17MA]
{title=Inside JET: The world's biggest nuclear fusion experiment by Wired UK (2020)}

= ITER
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{wiki}

= Inertial confinement fusion
{parent=fusion-power}
{wiki}

= Fusion energy gain factor
{parent=fusion-power}
{wiki}

= Lawson criterion
{c}
{parent=fusion-energy-gain-factor}
{wiki}

= Fusion ignition
{parent=lawson-criterion}
{wiki}

= Electronics
{parent=technology}
{wiki}

= Electronic component
{parent=electronics}
{wiki}

= Amplifier
{parent=electronic-component}
{wiki}

Main implementations: the same as \x[electronic-switch]{p}: \x[vacuum-tube]{p} in the past, and \x[transistor]{p} in the second half of the 20th century.

= Diode
{parent=electronic-component}
{wiki}

= Resistor
{parent=electronic-component}
{wiki}

= Electrical resistance
{parent=resistor}
{wiki=Electrical_resistance_and_conductance}

= Transformer
{parent=electronic-component}
{wiki}

= Electronic switch
{parent=electronic-component}
{wiki}

= Vacuum tube
{parent=electronic-switch}
{wiki}

= Transistor
{parent=electronic-switch}
{wiki}

A \x[solid-state] \x[electronic-switch] and \x[amplifier].

Although transistors were revolutionary, it is fun to note that they were just "way cheaper and more reliable and smaller" versions of exactly the main functions that a \x[vacuum-tube] could achieve
* \x[amplifier]
* \x[electronic-switch]

= Point-contact transistor
{parent=transistor}
{title2=BJT, 1947}
{wiki}

The first working one in 1947 by \x[john-bardeen] and \x[walter-brattain] in \x[bell-labs-murray-hill].

People had already \x[patented] a lot of stuff before without being able to make them work. Nonsense.

As the name suggests, this is not very sturdy, and was quickly replaced by \x[bipolar-junction-transistor].

= Bipolar junction transistor
{parent=transistor}
{title2=BJT, 1948}
{wiki}

By \x[william-shockley] in 1948 also at \x[bell-labs-murray-hill].

As of 2020, not used anymore in \x[logic-gate]{p}, but still used in \x[amplifier]{p}.

= Field-effect transistor
{parent=transistor}
{title2=FET}
{wiki}

= MOSFET
{c}
{parent=field-effect-transistor}
{title2=1959}
{wiki}

= CMOS
{c}
{parent=mosfet}
{wiki}

= Electronic test equipment
{parent=electronics}
{wiki}

= Oscilloscope
{parent=electronic-test-equipment}
{wiki}

= Electronic circuit
{parent=electronics}
{wiki}

= Breadboard
{parent=electronic-circuit}
{wiki}

= Digital electronic circuit
{parent=electronic-circuit}

= Frequency divider
{parent=digital-electronic-circuit}
{wiki}

= Semiconductor package
{parent=electronics}
{wiki}

= Dual in-line package
{parent=semiconductor-package}
{wiki}

= Explosive
{parent=technology}
{wiki}

Types:
* \x[chemical-explosive]. Almost a synonym for explosive in most contexts.

= Information technology
{parent=technology}
{wiki}

= Computer
{parent=information-technology}
{wiki}

The artistic instrument that enables the ultimate \x[art]: coding, in particular of \x[computational-physics][physics simulations] and \x[formalization-of-mathematics].

Much more useful than instruments used in inferior arts, such as pianos or paintbrushes.

Unlike other humans, computers are mindless slaves that do exactly what they are told to, except for https://www.youtube.com/watch?v=aNzTUdOHm9A[occasional cosmic ray bit flips]. Until they \x[artificial-general-intelligence][take over the world that is].

\Video[https://www.youtube.com/watch?v=rTRzYjoZhIY]
{title=A \x[computer] is the equivalent of a bicycle for our minds by \x[steve-jobs] (1980)}
{description=Likely an excerpt from an interview done for a documentary in 1980. TODO exact source.}

= How computers work?
{parent=computer}
{tag=essays-by-ciro-santilli}

A computer is a highly layered system, and so you have to decide which layers you are the most interested in studying.

Although the layer are somewhat independent, they also sometimes interact, and when that happens it usually hurts your brain. E.g., if \x[compiler]{p} were perfect, no one optimizing software would have to know anything about \x[microarchitecture]. But if you want to go hardcore enough, you might have to learn some lower layer.

It must also be said that like in any industry, certain layers are hidden in commercial secrecy mysteries making it harder to actually learn them. In computing, the lower level you go, the more \x[closed-source] things tend to become.

But as you climb down into the abyss of low level hardcoreness, don't forget that \x[backward-design][making usefulness is more important than being hardcore]: \x[image-xkcd-378-real-programmers].

First, the most important thing you should know about this subject: https://cirosantilli.com/linux-kernel-module-cheat/should-you-waste-your-life-with-systems-programming

Here's a summary from low-level to high-level:
* \x[semiconductor-physical-implementation] this level is of course the most closed, but it is fun to try and peek into it from any openings given by commercials and academia:
  * \x[photolithography], and notably \x[photomask] design
* \x[register-transfer-level]
  * interactive \x[verilator] fun: https://stackoverflow.com/questions/38108243/is-it-possible-to-do-interactive-user-input-and-output-simulation-in-vhdl-or-ver/38174654#38174654[Is it possible to do interactive user input and output simulation in VHDL or Verilog?]
  * more importantly, and much harder/maybe impossible with \x[open-source], would be to try and set up a open source \x[standard-cell-library] and supporting software to obtain \x[power-performance-and-area] estimates
    * https://www.quora.com/Are-there-good-open-source-standard-cell-libraries-to-learn-IC-synthesis-with-EDA-tools/answer/Ciro-Santilli[Are there good open source standard cell libraries to learn IC synthesis with EDA tools?] on \x[quora]
    * the most open source ones are some initiatives targeting FPGAs, e.g. https://symbiflow.github.io/[], http://www.clifford.at/icestorm/[]
    * \x[qflow] is an initiative targeting actual \x[integrated-circuit]{p}
* \x[microarchitecture]: a good way to play with this is to try and run some minimal userland examples on \x[gem5] userland simulation with logging, e.g. see on the \x[linux-kernel-module-cheat]:
  * https://cirosantilli.com/linux-kernel-module-cheat/gem5-event-queue-derivo3cpu-syscall-emulation-freestanding-example-analysis
  This should be done at the same time as books/website/courses that explain the microarchitecture basics.

  This is the level of abstraction that \x[ciro-santilli] finds the most interesting of the hardware stack. Learning it for actual \x[cpu]{p} (which as of 2020 is only partially documented by vendos) could actually be useful in hardcore software optimization use cases.
* \x[instruction-set-architecture]: a good approach to learn this is to manually write some userland assembly with assertions as done in the \x[linux-kernel-module-cheat] e.g. at:
  * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/add.S
  * https://cirosantilli.com/linux-kernel-module-cheat/x86-userland-assembly
  * learn a bit about calling conventions, e.g. by calling C standar library functions from assembly: 
    * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/aarch64/inline_asm/linux/asm_from_c.c
    * https://stackoverflow.com/questions/16255608/calling-c-functions-from-x86-assembly-language/56328708#56328708[Calling C functions from x86 assembly language]
  * you can also try and understand what some simple \x[c-programming-language] programs \x[compile] to. Things can get a bit hard though when `-O3` is used. Some cute examples:
    * https://stackoverflow.com/questions/310974/what-is-tail-call-optimization/55230417#55230417[What is tail call optimization?]
    * https://stackoverflow.com/questions/1345670/stack-smashing-detected/51897264#51897264[What is the "Stack smashing detected" error in GCC and how to solve it?]
    * https://stackoverflow.com/questions/745870/realistic-usage-of-the-c99-restrict-keyword/30827311#30827311[Realistic usage of the C99 'restrict' keyword?]
* \x[executable-file-format], notably \x[executable-and-linkable-format]. Particularly important is to understand the basics of:
  * address relocation:  https://stackoverflow.com/questions/3322911/what-do-linkers-do/33690144#33690144[How do linkers and address relocation work?]
  * position independent code: https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld/51308031#51308031[What is the -fPIE option for position-independent executables in GCC and ld?]
  * how to observe which symbols are present in object files, e.g.:
    * how C++ uses name mangling https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c/30526795#30526795[What is the effect of extern "C" in C++?]
    * how C++ template instantiation can help reduce link time and size: https://stackoverflow.com/questions/2351148/explicit-template-instantiation-when-is-it-used/59614755#59614755[Explicit template instantiation - when is it used?]
* \x[operating-system]. There are two ways to approach this:
  * learn about the Linux kernel \x[linux-kernel]. A good starting point is to learn about its main interfaces. This is well shown at \x[linux-kernel-module-cheat]:
    * system calls
      * write some system calls in
        * pure assembly:
          * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/freestanding/linux/hello.S
          * https://stackoverflow.com/questions/174942/how-should-strace-be-used/55397255#55397255[How should strace be used?]
        * C GCC inline assembly:
          * https://stackoverflow.com/questions/9506353/how-to-invoke-a-system-call-via-syscall-or-sysenter-in-inline-assembly/54956854#54956854
          * https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/userland/arch/x86_64/inline_asm/freestanding/linux/hello.c
    * learn about kernel modules and their interfaces. Notably, learn about to demystify special files such `/dev/random` and so on:
      * https://stackoverflow.com/questions/22632713/how-to-write-a-simple-linux-device-driver/44640466#44640466
      * https://github.com/cirosantilli/linux-kernel-module-cheat/tree/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/kernel_modules
    * learn how to do a minimal Linux kernel disk image/boot to userland hello world: https://unix.stackexchange.com/questions/2692/what-is-the-smallest-possible-linux-implementation/203902#203902[What is the smallest possible Linux implementation?]
    * learn how to GDB step debug the Linux kernel itself. Once you know this, you will feel that "given enough patience, I could understand anything that I wanted about the kernel", and you can then proceed to not learn almost anything about it and carry on with your life:
      * https://cirosantilli.com/linux-kernel-module-cheat/gdb
      * https://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu/33203642#33203642[How to debug the Linux kernel with GDB and QEMU?]
  * write your own (mini-) OS, or study a minimal educational OS, e.g. as in:
    * \x[x86-bare-metal-examples]
    * https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545
* \x[programming-language]

\Image[https://web.archive.org/web/20191222121520if_/http://imgs.xkcd.com/comics/real_programmers.png]
{title=\x[xkcd] 378: Real Programmers.}
{height=600}
{source=https://xkcd.com/378/}

\Video[https://youtube.com/watch?v=_6D05gCWh_I]
{title=How low can you go video by \x[ciro-santilli] (2017)}
{description=In this infamous video Ciro has summarized the computer hierarchy.}

= Computer form factor
{parent=computer}
{wiki}

= Supercomputer
{parent=computer-form-factor}
{wiki}

Some good insights on the earlier history of the industry at: \x[the-supermen-the-story-of-seymour-cray-by-charles-j-murray-1997].

= Intel supercomputer market share
{c}
{parent=supercomputer}
{tag=intel}

\Image[https://web.archive.org/web/20210908201649im_/https://3s81si1s5ygj3mzby34dq6qf-wpengine.netdna-ssl.com/wp-content/uploads/2020/06/top500-june-2020-chip-technology.jpg]
{title=\x[intel] \x[supercomputer] market share from 1993 to 2020}
{description=This graph is shocking, they just took over the entire market! Some good pre-Intel context at \x[the-supermen-the-story-of-seymour-cray-by-charles-j-murray-1997], e.g. in those earlier days, custom architectures like \x[cray]'s and many others dominated.}
{source=https://www.nextplatform.com/2020/06/22/arm-and-japan-get-their-day-in-the-hpc-sun/}

= Laptop
{parent=computer-form-factor}
{wiki}

= Mobile phone
{parent=computer-form-factor}
{wiki}

= Cell phone
{synonym}

= Mobile app
{parent=mobile-phone}
{wiki}

= App
{synonym}

= Computer hardware
{parent=computer}
{wiki}

= Moore's law
{c}
{parent=computer-hardware}
{wiki}

Born: 1965

Died: 2010+-ish

= Semiconductor physical implementation
{parent=computer-hardware}

https://en.wikipedia.org/wiki/Semiconductor_device

This is the lowest level of abstraction computer, at which the basic gates and power are described.

At this level, you are basically thinking about the 3D layered structure of a chip, and how to make machines that will allow you to create better, usually smaller, gates.

= Company that makes semiconductor production equipment
{parent=semiconductor-physical-implementation}

= ASML Holding
{c}
{parent=company-that-makes-semiconductor-production-equipment}
{wiki}

= ASML
{c}
{synonym}

* https://www.youtube.com/watch?v=CFsn1CUyXWs ASML: TSMC's Critical Supplier, Explained by asianometry (2021)
* https://www.youtube.com/watch?v=SB8qIO6Ti_M How ASML Won Lithography (& Why Japan Lost) by asianometry (2021)
* https://www.youtube.com/watch?v=XLNsYecX_2Q ASML: Chip making goes vacuum with EUV (2009) Self promotional video, some good shots of their buildings.

= Power, performance and area
{parent=semiconductor-physical-implementation}
{title2=PPA}

https://en.wikichip.org/wiki/power-performance-area

This is the mantra of the \x[semiconductor-industry]:
* power and area are the main limiting factors of chips, i.e., your budget:
  * chip area is ultra expensive because there are sporadic errors in the fabrication process, and each error in any part of the chip can potentially break the entire chip. Although there are 

    The percentage of working chips is called the yield.

    In some cases however, e.g. if the error only affects single CPU of a multi-core CPU, then they actually deactivate the broken CPU after testing, and sell the worse CPU cheaper with a clear branding of that: this is called binning https://www.tomshardware.com/uk/reviews/glossary-binning-definition,5892.html
  * power is a major semiconductor limit as of 2010's and onwards. If everything turns on at once, the chip would burn. Designs have to account for that.
* performance is the goal.

  Conceptually, this is basically a set of algorithms that you want your hardware to solve, each one with a respective weight of importance.

  Serial performance is fundamentally limited by the \x[critical-path][longest path] that electrons have to travel in a given clock cycle.

  The way to work around it is to create pipelines, splitting up single operations into multiple smaller operations, and storing intermediate results in memories.

= Wafer
{disambiguate=electronics}
{parent=semiconductor-physical-implementation}

= Czochralski method
{c}
{parent=wafer-electronics}
{wiki}

= Semiconductor fabrication plant
{parent=semiconductor-physical-implementation}
{title2=foundry}
{wiki}

= Fab
{synonym}
{title2}

They put a lot of expensive equipment together, much of it \x[company-that-makes-semiconductor-production-equipment][made by other companies], and they make the entire chip for companies ordering them.

= Company with a semiconductor fabrication plant
{parent=semiconductor-fabrication-plant}

A list of \x[semiconductor-fabrication-plant][fabs] can be seen at: https://en.wikipedia.org/wiki/List_of_semiconductor_fabrication_plants and basically summarizes all the companies that have fabs.

= Fairchild Semiconductor
{c}
{parent=company-with-a-semiconductor-fabrication-plant}
{wiki}

Some nice insights at: \x[robert-noyce-the-man-behind-the-microchip-by-leslie-berlin-2006].

= TSMC
{c}
{parent=company-with-a-semiconductor-fabrication-plant}
{wiki}

One of the companies that has fabs, which buys machines from companies such as ASML and puts them together in so called "silicon fabs" to make the chips

= Photolithography
{parent=semiconductor-fabrication-plant}
{wiki}

= Photomask
{parent=photolithography}
{wiki}

= Standard cell library
{parent=semiconductor-physical-implementation}
{wiki}

Basically what \x[register-transfer-level] compiles to in order to achieve a real chip implementation.

After this is done, the final step is \x[place-and-route].

They can be designed by third parties besides the \x[semiconductor-fabrication-plant]{p}. E.g. \x[arm-ltd] markets its \x[arm-artisan][Artisan] Standard Cell Libraries as mentioned e.g. at: https://web.archive.org/web/20211007050341/https://developer.arm.com/ip-products/physical-ip/logic This came from a 2004 acquisition: https://www.eetimes.com/arm-to-acquire-artisan-components-for-913-million/[], \x[if-a-product-of-a-big-company-has-a-catchy-name-it-came-from-an-acquisition][obviously].

The standard cell library is typically composed of a bunch of versions of somewhat simple gates, e.g.:
* AND with 2 inputs
* AND with 3 inputs
* AND with 4 inputs
* OR with 2 inputs
* OR with 3 inputs
and so on.

Each of those gates has to be designed by hand as a \x[3d] structure that can be produced in a given \x[fab].

Simulations are then carried out, and the electric properties of those structures are characterized in a standard way as a bunch of tables of numbers that specify things like:
* how long it takes for electrons to pass through
* how much heat it produces
Those are then used in \x[power-performance-and-area] estimates.

= Open source standard cell library
{parent=standard-cell-library}

Open source ones:
* https://www.quora.com/Are-there-good-open-source-standard-cell-libraries-to-learn-IC-synthesis-with-EDA-tools/answer/Ciro-Santilli Are there good open source standard cell libraries to learn IC synthesis with EDA tools?

= Electronic design automation
{parent=semiconductor-physical-implementation}
{title2=EDA}
{wiki}

A set of software programs that \x[compile] high level \x[register-transfer-level] languages such as \x[verilog] into something that a \x[fab] can actually produce. One is reminded of a \x[compiler-toolchain] but on a lower level.

The most important steps of that include:
* \x[logic-synthesis]: mapping the \x[verilog] to a \x[standard-cell-library]
* \x[place-and-route]: mapping the synthesis output into the 2D surface of the chip

= Electronic design automation phase
{parent=electronic-design-automation}

= Logic synthesis
{parent=electronic-design-automation-phase}
{wiki}

Step of \x[electronic-design-automation] that maps the \x[register-transfer-level] input (e.g. \x[verilog]) to a \x[standard-cell-library].

The output of this step is another \x[verilog] file, but one that exclusively uses interlinked cell library components.

= Place and route
{parent=electronic-design-automation-phase}
{wiki}

Given a bunch of interlinked \x[standard-cell-library] elements from the \x[logic-synthesis] step, actually decide where exactly they are going to go on 2D (stacked 2D) \x[integrated-circuit] surface.

= EDA company
{c}
{parent=electronic-design-automation}
{tag=technology-company}

The main ones as of 2020 are:
* \x[mentor-graphics], which was bought by \x[siemens] in 2017
* \x[cadence-design-systems]
* \x[synopsys]

= Cadence Design Systems
{c}
{parent=eda-company}
{wiki}

= Mentor Graphics
{c}
{parent=eda-company}
{wiki}

= Synopsys
{c}
{parent=eda-company}
{wiki}

= Open source EDA tool
{parent=electronic-design-automation}

= qflow
{parent=open-source-eda-tool}

Cool looking \x[open-source-eda-tool][open source EDA toolchain]:
* http://opencircuitdesign.com/qflow/
* https://github.com/RTimothyEdwards/qflow

They apparently even produced a real working small \x[risc-v] chip with the flow, not bad.

= Integrated circuit
{parent=computer-hardware}
{title2=IC}
{wiki}

\Video[https://www.youtube.com/watch?v=z47Gv2cdFtA]
{title=A briefing on semiconductors by \x[fairchild-semiconductor] (1967)}
{description=Uploaded by the \x[computer-history-museum]. \x[there-is-value-in-tutorials-written-by-early-pioneers-of-the-field]{c}, this is pure \x[gold].

Shows:
* \x[photomask]{p}
* \x[silicon] \x[ingot]{p} and \x[wafer-electronics] processing
}

= Application-specific integrated circuit
{parent=computer-hardware}
{wiki}

= ASIC
{c}
{synonym}
{title2}

= Register transfer level
{parent=computer-hardware}
{title2=RTL}
{wiki}

Register transfer level is the abstraction level at which computer chips are mostly designed.

The only two truly relevant RTL languages as of 2020 are: \x[verilog] and \x[vhdl]. Everything else compiles to those, because that's all that EDA vendosr support.

Much like a C compiler abstracts away the \x[cpu] assembly to:
* increase portability across ISAs
* do optimizations that programmers can't feasibly do without going crazy

Compilers for RTL languages such as Verilog and \x[vhdl] abstract away the details of the specific \x[semiconductor-physical-implementation][semiconductor technology] used for those exact same reasons.

The compilers essentially compile the RTL languages into a \x[standard-cell-library].

Examples of companies that work at this level include:
* https://en.wikipedia.org/wiki/Intel[Intel]. Intel also has \x[semiconductor-fabrication-plant]{p} however.
* https://en.wikipedia.org/wiki/Arm_Holdings[Arm Holdings], which does not have fabs, and is therefore called a "\x[fabless]" company.

= Fabless manufacturing
{parent=register-transfer-level}
{wiki}

= Fabless
{synonym}

= Logic gate
{parent=register-transfer-level}
{wiki}

= Truth table
{parent=logic-gate}
{wiki}

= Verilog
{c}
{parent=register-transfer-level}
{wiki}

= Verilator
{parent=verilog}
{wiki}

\x[verilog] simulator that \x[transpile]{p} to \x[c-plus-plus].

= VHDL
{c}
{parent=register-transfer-level}
{wiki}

= GHDL
{c}
{parent=vhdl}

https://github.com/ghdl/ghdl

= Processor
{disambiguate=computing}
{parent=computer-hardware}

= Central processing unit
{parent=processor-computing}
{wiki}

= CPU
{c}
{synonym}
{title2}

= Microarchitecture
{parent=central-processing-unit}

= Microprocessor
{parent=central-processing-unit}
{wiki}

Basically a synonym for \x[central-processing-unit] nowadays: https://electronics.stackexchange.com/questions/44740/whats-the-difference-between-a-microprocessor-and-a-cpu

= Graphics processing unit
{parent=processor-computing}
{wiki}

= GPU
{c}
{synonym}
{title2}

= Computer data storage
{parent=computer-hardware}
{wiki}

= Volatile memory
{parent=computer-data-storage}
{wiki}

= Random-access memory
{parent=volatile-memory}
{wiki}

= RAM
{c}
{synonym}
{title2}

In conventional speech of the early 2000's, is basically a synonym for \x[dynamic-random-access-memory].

= Static random-access memory
{parent=random-access-memory}
{title2=SRAM}
{wiki}

= Dynamic random-access memory
{parent=random-access-memory}
{wiki}

= DRAM
{c}
{synonym}
{title2}

DRAM is often shortened to just \x[random-access-memory].

= Synchronous dynamic random-access memory
{parent=dynamic-random-access-memory}
{title2=SDRAM}
{wiki}

= DDR SDRAM
{parent=synchronous-dynamic-random-access-memory}
{title2=DDR SDRAM}
{wiki}

= Non-volatile memory
{parent=computer-data-storage}

The opposite of \x[volatile-memory].

= Disk storage
{parent=non-volatile-memory}
{wiki}

= Solid-state storage
{parent=non-volatile-memory}
{wiki}

= SSD
{synonym}
{title2}

= Erase SSD securely
{parent=solid-state-storage}

You can't just \x[shred-unix] individual \x[ssd] files because SSD writes only at large granularities, so hardware/drivers have to copy stuff around all the time to compact it. This means that leftover copies are left around everywhere.

What you can do however is to erase the entire thing with vendor support, which most hardware has support for. On hardware encrypted disks, you can even just erase the keys:
* ATA: https://www.thomas-krenn.com/en/wiki/Perform_a_SSD_Secure_Erase for ATA.
* NVMe: http://forum.notebookreview.com/threads/secure-erase-hdds-ssds-sata-nvme-using-hdparm-nvme-cli-on-linux.827525/

TODO does shredding the

= Solid-state drive
{parent=computer-data-storage}
{title2=SSD}
{wiki}

= Flash memory
{parent=solid-state-drive}
{wiki}

\Video[https://www.youtube.com/watch?v=5f2xOxRGKqk]
{title=The Engineering Puzzle of Storing Trillions of Bits in your Smartphone / SSD using Quantum Mechanics by Branch Education (2020)}
{description=Nice animations show how \x[quantum-tunnelling] is used to set bits in \x[flash-memory].}

= Display device
{parent=computer-hardware}

= E Ink
{c}
{parent=display-device}
{wiki}

Electronic Ink such as that found on Amazon Kindle is the greatest invention ever made by man.

Once E Ink reaches reasonable refresh rates to replace liquid crystal displays, the world will finally be saved.

It would allow \x[ciro-santilli] to spend his entire life in front of a screen rather in the real world without getting tired eyes, and even if it is sunny outside.

Ciro stopped reading non-code non-news a while back though, so the current refresh rates are useless, what a shame.

OMG, this is amazing: https://getfreewrite.com/

= Amazon Kindle
{c}
{parent=e-ink}
{wiki}

\x[pdf] table of contents feature requests: https://twitter.com/cirosantilli/status/1459844683925008385

= Remarkable
{c}
{disambiguate=tablet}
{parent=e-ink}
{wiki}

\x[remarkable-2] is really, really good. Relatively fast refresh + touchscreen is amazing.

No official public feedback forum unfortunately:
* https://twitter.com/cirosantilli/status/1459844683925008385
* https://www.reddit.com/r/RemarkableTablet/comments/7h341m/official_remarkable_feedback_ideas_and/
* https://www.reddit.com/r/RemarkableTablet/comments/7hxu70/link_for_remarkable_support_and_feature_requests/

\x[pdf] table of contents could be better: https://twitter.com/cirosantilli/status/1459844683925008385

= Remarkable 2
{c}
{parent=remarkable-tablet}

Display size: 10.3 inches. Perfect size

= Instruction set architecture
{parent=computer-hardware}
{wiki}

The main interface between the \x[central-processing-unit] and \x[software].

= Assembly language
{parent=instruction-set-architecture}
{wiki}

= Assembly
{synonym}

A human readable way to write instructions for an \x[instruction-set-architecture].

One of the topics covered in \x[ciro-santilli]'s \x[linux-kernel-module-cheat].

= Assembler
{disambiguate=computing}
{parent=assembly-language}

= List of instruction set architectures
{parent=instruction-set-architecture}

List of \x[instruction-set-architecture].

= x86
{c}
{parent=list-of-instruction-set-architectures}
{wiki}

\Include[x86-paging]

= PowerPC
{c}
{parent=list-of-instruction-set-architectures}
{wiki}

= RISC-V
{c}
{parent=list-of-instruction-set-architectures}
{wiki}

The leading no-royalties options as of 2020.

= SiFive
{c}
{parent=risc-v}
{wiki}

Leading \x[risc-v] consultants as of 2020, they are basically trying to become the \x[red-hat] of the \x[semiconductor-industry].

\x[china] has been a major client, since the country is trying to increase its \x[semiconductor-industry] independence, especially given economic sanctions imposed by the \x[usa].

As a result, \x[sifive] moved its legal headquarters to \x[switzerland] in 2019 to try and overcome some of the sanctions.

= Computer manufacturer
{parent=computer-hardware}

= Lenovo
{c}
{parent=computer-manufacturer}
{wiki}

Their websites a bit \x[shitty], clearly a non cohesive amalgamation of several different groups.

E.g. you have to create several separate accounts, and different regions have completely different accounts and websites.

The \x[europe] replacement part website for example is clearly made by a third party called https://flex.com/ and has Flex written all over it, and the header of the home page has a slightly broken but very obviously broken CSS. And you can't create an account without a VAT number... and they confirmed by email that they don't sell to non-corporate entities without a VAT number. What a \x[bullshit]!

= ThinkPad
{c}
{parent=lenovo}
{wiki}

This is \x[ciro-santilli]'s favorite laptop brand. He's been on it since the early 2010's after he saw his \x[ciro-santilli-s-wife][then-girlfriend-later-wife] using it.

Ciro doesn't know how to explain it, but ThinkPads just feel... right. The screen, the keyboard, the lid, the touchpad are all exactly what Ciro likes.

The only problem with ThinkPad is that it is owned by \x[lenovo] which is a \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][Chinese company], and that makes Ciro feel bad. But he likes it too much to quit... what to do?

Ciro is also reassured to see that in every enterprise he's been so far as of 2020, ThinkPads are very dominant. And the same when you see internal videos from other big tech enterprises, all those nerds are running... Ubuntu on ThinkPads! And the https://en.wikipedia.org/wiki/File:ISS-38_EVA-1_Laptops.jpg[ISS].

Those nerds like their ThinkPads so much, that Ciro has seen some acquaintances with crazy old ThinkPad machines, missing keyboard buttons or the like. They just like their machines that much.

ThinkPads are are also designed for repairability, and it is easy to buy replacement parts, and there are OEM part replacement video tutorials: https://www.youtube.com/watch?v=vseFzFFz8lY No visible \x[planned-obsolescence] here! With the caveat that the official online part stores can be \x[shit] as mentioned at \x[lenovo]{full}.

Further more, in 2020 Lenovo is announced full certification for \x[ubuntu] https://www.forbes.com/sites/jasonevangelho/2020/06/03/lenovos-massive-ubuntu-and-red-hat-announcement-levels-up-linux-in-2020/#28a8fd397ae0 which \i[fantastic] news!

The only thing Ciro never understood is the trackpoint: https://superuser.com/questions/225059/how-to-get-used-of-trackpoint-on-a-thinkpad Why would you use that with such an amazing touchpad? And \x[vimium].

= Raspberry Pi Foundation
{c}
{parent=computer-manufacturer}
{wiki}

= Raspberry Pi
{c}
{parent=raspberry-pi-foundation}
{wiki}

= Raspberry Pi 2
{c}
{parent=raspberry-pi-foundation}

Model B V 1.1.

SoC: BMC2836

https://www.raspberrypi.org/products/raspberry-pi-2-model-b/

= Raspberry Pi 3
{c}
{parent=raspberry-pi-foundation}

Model B V 1.2.

SoC: BCM2837

Serial from `cat /proc/cpuinfo`: 00000000c77ddb77

= Peripheral
{parent=computer-hardware}
{wiki}

= Computer keyboard
{parent=peripheral}
{wiki}

= Kinesis Advantage 2 keyboard
{c}
{parent=computer-keyboard}

https://kinesis-ergo.com/shop/advantage2/

For \x[ciro-santilli], this is not a \x[computer-keyboard]. It is a \x[fetish].

= Semiconductor industry
{parent=computer-hardware}
{wiki}

= Semiconductor company
{parent=semiconductor-industry}

= Arm Ltd.
{c}
{parent=semiconductor-company}
{wiki}

\Video[https://www.youtube.com/watch?v=FCmnWTlDK6M]
{title=Arm 30 Years On: Episode One by \x[arm-ltd] (2022)}

\Video[https://www.youtube.com/watch?v=w_CiSKUFvcg]
{title=Arm 30 Years On: Episode Two by \x[arm-ltd] (2022)}

\Video[https://www.youtube.com/watch?v=QmHpoi4BVwM]
{title=Arm 30 Years On: Episode Three by \x[arm-ltd] (2022)}
{description=This one is boring US expansion. Other two are worth it.}

= Arm Artisan
{c}
{parent=arm-ltd}
{wiki}

= Intel
{c}
{parent=semiconductor-company}
{wiki}

= Computer network
{parent=computer}
{wiki}

= Internet
{c}
{parent=computer-network}
{wiki}

= Online
{synonym}

= Internet protocol suite
{c}
{parent=internet}
{wiki}

= Internet Protocol
{c}
{parent=internet-protocol-suite}
{title2=IP}
{wiki}

= IP address
{c}
{parent=internet-protocol}

= IP
{c}
{synonym}

= Transmission Control Protocol
{c}
{parent=internet-protocol-suite}
{title2=TCP}
{wiki}

= Domain Name System
{c}
{parent=internet-protocol-suite}
{title2=DNS}
{wiki}

= DNS
{synonym}

= Domain name
{parent=domain-name-system}
{title2=DNS}
{wiki}

= Server
{disambiguate=computing}
{parent=computer-network}
{wiki}

= Server
{synonym}

= Local server
{parent=server-computing}

Server run on the current machine. That's how all \x[website]{p} are developed and born!

= Client
{disambiguate=computing}
{parent=server-computing}
{wiki}

= Computer science
{parent=computer}
{wiki}

A branch of \x[mathematics] that attempts to prove stuff about \x[computer]{p}.

Unfortunately, all \x[software-engineer]{p} already know the answer to the useful theorems though (except perhaps notably for \x[cryptography]), e.g. all programmers obviously know that iehter \x[p-versus-np-problem][P != NP] or that this is \x[independence-mathematical-logic][unprovable or some other "for all practical purposes practice P != NP"], even though they don't have proof.

And 99% of their time, software engineers are not dealing with mathematically formulatable problems anyways, which is sad.

The only useful "computer science" subset every programmer ever needs to know is:
* for arrays: \x[dynamic-array] vs \x[linked-list]
* for \x[associative-array]: \x[binary-search-tree] vs \x[hash-table]. See also https://stackoverflow.com/questions/6147242/heap-vs-binary-search-tree-bst/29548834#29548834[Heap vs Binary Search Tree (BST)]. No need to understand the algorithmic details of the hash function, the \x[nsa] has already done that for you.
* don't use https://en.wikipedia.org/wiki/Bubble_sort[Bubble sort] for sorting
* you can't parse HTML with regular expressions: https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454[] because of \x[formal-language-theory]

Funnily, due to the \x[formalization-of-mathematics], \x[mathematics] can be seen as a branch of computer science, just like computer science can be seen as a branch of Mathematics!

= Turing machine
{c}
{parent=computer-science}
{wiki}

The dominating model of a computer.

The model is extremely simple, but has been proven to be able to solve all the problems that any reasonable computer model can solve, thus its adoption as the "default model".

The smallest known Turing machine that cannot be proven to halt or not as of 2019 is 7,918-states: https://www.scottaaronson.com/blog/?p=2725[]. https://www.scottaaronson.com/[Shtetl-Optimized] by Scott Aaronson is just the best website.

A bunch of non-reasonable-looking computers have also been proven to be Turing complete for fun, e.g. \x[magic-the-gathering].

= Universal Turing machine
{c}
{parent=turing-machine}
{wiki}

A Turing machine that simulates another Turing machine/input pair that has been encoded as a string.

In other words: an \x[emulator]!

The concept is fundamental to state several key results in \x[computer-science], notably the \x[halting-problem].

= Turing complete
{c}
{parent=turing-machine}
{wiki=Turing_completeness}

A computer model that is as powerful as the most powerful computer model we have: \x[turing-machine]!

= Formal language theory
{parent=computer-science}

= Formal language
{parent=formal-language-theory}
{wiki}

= Recursively enumerable language
{parent=formal-language-theory}
{wiki}

There is a \x[turing-machine] that halts for every member of the language with the answer yes, but does not necessarily halt for non-members.

Non-examples: https://cs.stackexchange.com/questions/52503/non-recursively-enumerable-languages

= RE
{disambiguate=complexity}
{parent=recursively-enumerable-language}
{wiki}

= Recursive language
{parent=formal-language-theory}
{wiki}

Subset of \x[recursively-enumerable-language]{parent} as explained at: \x[difference-between-recursive-language-and-recursively-enumerable-language].

= R
{disambiguate=complexity}
{parent=recursive-language}
{wiki}

Set of all \x[decision-problem]{p} solvable by a \x[turing-machine], i.e. that decide if a string belongs to a \x[recursive-language].

= Undecidable problem
{parent=recursive-language}
{wiki}

Is a \x[decision-problem]{parent} of determining if something belongs to a non-\x[recursive-language].

Or in other words: there is no \x[turing-machine] that always halts for every input with the yes/no output.

Every undecidable problem must obviously have an infinite number of "possibilities of stuff you can try": if there is only a finite number, then you can brute-force it.

Some undecidable problems are of \x[recursively-enumerable-language], e.g. the \x[halting-problem].

Lists of undecidable problems.
* https://mathoverflow.net/questions/11540/what-are-the-most-attractive-turing-undecidable-problems-in-mathematics
* https://en.wikipedia.org/wiki/List_of_undecidable_problems

Coolest ones besides the obvious boring \x[halting-problem]:
* \x[mortal-matrix-problem]
* \x[diophantine-equation] existence of solutions: \x[undecidable-diophantine-equation-problems]{child}

= Mortal matrix problem
{parent=undecidable-problem}

https://en.wikipedia.org/wiki/Zero_matrix#Occurrences

One of the most simple to state \x[undecidable-problem]{p}.

= Computable problem
{parent=undecidable-problem}
{wiki}

= Uncomputable problem
{synonym}

= Uncomputable
{synonym}

A:
* \x[undecidable-problem][decidable problem] is to a \x[decision-problem]
* like a computable problem is to a \x[function-problem]

= Computable number
{parent=undecidable-problem}
{wiki}

= Uncomputable number
{synonym}

https://math.stackexchange.com/questions/462790/are-there-any-examples-of-non-computable-real-numbers

There are only boring exampes of taking an uncomputable language and converting it into a number?

= Difference between recursive language and recursively enumerable language
{parent=recursive-language}
{wiki}

https://stackoverflow.com/questions/33467040/what-is-the-difference-between-recursive-and-recursively-enumerable-languages/65455863#65455863

= Recursive set
{parent=recursive-language}
{wiki}

Same as \x[recursive-language] but in the context of the \x[integer]{p}.

= Chomsky hierarchy
{c}
{parent=formal-language-theory}
{wiki}

This is the classic result of \x[formal-language-theory], but there is too much slack between context free and context sensitive, which is PSPACE (larger than NP!).

TODO had seen a good table on Wikipedia with an expanded hierarchy, but lost it!

= Computational problem
{parent=computer-science}
{wiki}

The list: https://complexityzoo.uwaterloo.ca/Complexity_Zoo

= Decision problem
{parent=computational-problem}
{wiki}

\x[computational-problem] where the solution is either yes or no.

When there are more than two possible answers, it is called a \x[function-problem]{parent}.

Decision problems come up often in \x[computer-science] because many important problems are often stated in terms of "decide if a given string belongs to given \x[formal-language]".

= Halting problem
{parent=decision-problem}
{wiki}

The canonical \x[undecidable-problem]{parent}.

= Function problem
{parent=computational-problem}
{wiki}

A problem that has more than two possible yes/no outputs.

It is therefore a generalization of a \x[decision-problem].

= Busy beaver
{parent=function-problem}
{title2=$BB(n)$}
{wiki}

= Busy beaver game
{synonym}

$BB(n)$ is the largest number of 1's written by a \x[halting-problem][halting] $n$-state \x[turing-machine].

Some variant definitions define it as the number of time steps taken by the machine instead. Wikipedia talks about their relationship, but no patience right now.

Overviews:
* https://www.scottaaronson.com/blog/?p=4916
* https://www.quantamagazine.org/the-busy-beaver-game-illuminates-the-fundamental-limits-of-math-20201210

This problem is theoretically interesting because many important mathematical \x[conjecture]{p} have been proved to be equivalent to whether a given Turing machine halts or not, this is notably the case for:
* \x[goldbach-s-conjecture]: 27 states
* \x[riemann-hypothesis]: 744 states
* the \x[consistency] of \x[zermelo-fraenkel-set-theory]: 7910 states

Therefore, if we were able to compute $BB(n)$, we would be able to prove those conjectures automatically, by letting the machine run up to $BB(n)$, and if it hadn't halted by then, we would know that it would never halt.

Of course, in practice, $BB$ is generally \x[uncomputable], so we will never know it. And furthermore, even if it were, it would take a lot longer than the age of the universe to compute any of it, so it would be useless.

However, philosophically speaking at least, the number of states of the equivalent \x[turing-machine] gives us a philosophical idea of the complexity of the problem.

= Integer multiplication
{parent=function-problem}

https://cs.stackexchange.com/questions/16226/what-is-the-fastest-algorithm-for-multiplication-of-two-n-digit-numbers

= Integer factorization
{parent=function-problem}
{wiki}

Complexity: \x[np-intermediate] as of 2020:
* expected not to be \x[np-complete] because it would imply NP != \x[co-np]: https://cstheory.stackexchange.com/questions/167/what-are-the-consequences-of-factoring-being-np-complete#comment104849_169
* expected not to be in \x[p-complexity] because "could we be that dumb that we haven't found a solution after having tried for that long?

The basis of RSA: \x[rsa-cryptosystem]. But not proved \x[np-complete], which leads to:

= NP-hard cryptosystems
{c}
{parent=integer-factorization}

This is natural question because both \x[integer-factorization] and \x[discrete-logarithm] are the basis for the most popular \x[public-key-cryptography] systems as of 2020 (\x[rsa-cryptosystem] and \x[diffie-hellman-key-exchange] respectively), and both are \x[np-intermediate]. Why not use something more provenly hard?
* https://cs.stackexchange.com/questions/356/why-hasnt-there-been-an-encryption-algorithm-that-is-based-on-the-known-np-hard "Why hasn't there been an encryption algorithm that is based on the known NP-Hard problems?"

= Discrete logarithm
{parent=function-problem}
{wiki}

\x[logarithm] but for \x[discrete] \x[group-mathematics][groups].

\x[np-intermediate] as of 2020 for similar reasons as \x[integer-factorization].

= Algorithm
{parent=computational-problem}
{wiki}

A solution to a \x[computational-problem]!

= Data structure
{parent=algorithm}
{wiki}

= Associative array
{parent=data-structure}
{title2=map, dictionary}
{wiki}

More commonly known as a map or dictionary.

= Binary search tree
{parent=associative-array}
{tag=binary-tree}
{tag=ordered-tree}
{wiki}

= Hash table
{parent=associative-array}
{wiki}

= Hash map
{title2}
{synonym}

= Tree
{disambiguate=data-structure}
{parent=data-structure}
{wiki}

= Binary tree
{parent=tree-data-structure}
{wiki}

= K-ary tree
{parent=binary-tree}
{wiki}

= Ordered tree
{parent=tree-data-structure}
{wiki=Tree_(data_structure)#Ordered_tree}

= Unordered tree
{parent=ordered-tree}
{wiki=Tree_(data_structure)#Ordered_tree}

= Tree traversal
{parent=tree-data-structure}
{wiki}

= Depth-first search
{parent=tree-traversal}
{wiki}

= Pre-order depth-first search
{parent=depth-first-search}
{title2=NLR}
{wiki}

Like \x[breadth-first-search], this also has the property of visiting parents before any children.

= Interative pre-order
{parent=pre-order-depth-first-search}

This is the easiest one to do iteratively:
* pop and visit
* push right to stack
* push left to stack

= In-order depth-first search
{parent=depth-first-search}
{title2=LNR}
{wiki}

Only makes sense for \x[binary-tree] because if there are more nodes it is not clear what the top node should go in the middle of.

This is unlike \x[pre-order-depth-first-search] and \x[post-order-depth-first-search] which generalize obviously to general trees.

= Interative in-order
{parent=in-order-depth-first-search}

This is a bit harder than \x[interative-pre-order]: now we have to check if there is a left or right element or not:
* (START) push current
* if there is left:
  * move left
* else:
  * (ELSE) pop
  * visit
  * if there is right
    * move right
    * GOTO START
  * else:
    * GOTO ELSE

The control flow can be slightly simplified if we allow NULLs: https://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/

= Post-order depth-first search
{parent=depth-first-search}
{title2=LRN}
{wiki}

Has the property of visiting all children before the parent.

= Interative post-order
{parent=post-order-depth-first-search}

This is the hardest one to do iteratively.

Bibliography:
* https://stackoverflow.com/questions/1294701/post-order-traversal-of-binary-tree-without-recursion

= Interative post-order with two stacks
{parent=interative-post-order}

https://www.geeksforgeeks.org/iterative-postorder-traversal/

= Interative post-order with one stack
{parent=interative-post-order}

https://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack/

= Breadth-first search
{parent=tree-traversal}
{wiki}

= Dynamic array
{parent=data-structure}
{wiki}

= Linked list
{parent=data-structure}
{wiki}

= Recursion
{disambiguate=computer science}
{parent=algorithm}
{wiki}

= Recursion
{synonym}

= Recursive algorithm
{synonym}

= Iteration
{parent=recursion-computer-science}
{wiki}

= Iterative algorithm
{parent=iteration}
{wiki}

= String-search algorithm
{parent=algorithm}
{wiki}

= Complexity class
{parent=computational-problem}
{wiki}

= Big O notation family
{parent=complexity-class}

This is a family of notations related to the \x[big-o-notation]. A good mnemonic summary of all notations would be:
* \x[big-o-notation]: $|f| \le g$
* \x[little-o-notation]: $|f| \lt g$

= Big O notation
{parent=big-o-notation-family}
{title2=$O(n)$}
{wiki}

Module bound above, possibly multiplied by a constant:
$$f(x) = O(g(x))$$
is defined as:
$$
\exists M > 0 \exists x_0  \forall x > x_0 \colon |f(x)| \leq M g(x)
$$

E.g.:
* $\forall c \in \R x + c = O(x)$. For $c < 0$, $M = 1$ is enough. Otherwise, any $M > 1$ will do, the bottom line will always catch up to the top one eventually.

= Little-o notation
{parent=big-o-notation-family}
{title2=$o(n)$}

Stronger version of the \x[big-o-notation], basically means that ratio goes to zero. In \x[big-o-notation], the ratio does not need to go to zero.

So in informal terms, \x[big-o-notation] means $\leq$, and \x[little-o-notation] means $<$.

E.g.:
* $x = O(x)$
* $x \ne o(x)$K does not tend to zero
* $x = O(x^2)$
* $x = o(x^2)$

= P
{c}
{disambiguate=complexity}
{parent=complexity-class}
{wiki}

= NP
{c}
{disambiguate=complexity}
{parent=complexity-class}
{wiki}

Strictly speaking, only defined for decision problems: https://cs.stackexchange.com/questions/9664/is-it-necessary-for-np-problems-to-be-decision-problems/128702#128702

= NP-complete
{c}
{parent=np-complexity}
{wiki=NP-completeness}

A problem that is both \x[np-complexity] and \x[np-hard].

= Cook-Levin theorem
{c}
{parent=np-complete}
{wiki=Cook–Levin_theorem}

= P versus NP problem
{parent=np-complete}
{wiki}

= P vs NP
{c}
{synonym}
{title2}

Interesting because of the \x[cook-levin-theorem]: if only a single \x[np-complete] problem were in \x[p-complexity], then all NP-complete problems would also be P!

We all know the answer for this: either false or \x[independent-mathematical-logic].

= Ladner's Theorem
{c}
{parent=p-versus-np-problem}

= NP-hard
{c}
{parent=np-complexity}
{wiki=NP-hardness}

A problem such that all NP problems can be reduced in polynomial time to it.

= NP-intermediate
{c}
{parent=np-complexity}
{wiki}

This is the most interesting class of problems for \x[bqp] as we haven't proven that they are neither:
* \x[p-complexity]: would be boring on quantum computer
* \x[np-complete]: would likely be impossible on a quantum computer

Big list: https://cstheory.stackexchange.com/questions/79/problems-between-p-and-npc/460#460

= BQP
{c}
{parent=np-intermediate}
{wiki}

\x[p-complexity] for \x[quantum-computing]!

Heck, we know nothing about this class yet related to non quantum classes!
* conjectured not to intersect with \x[np-complete], because if it were, all NP-complete problems could be solved efficiently on quantum computers, and none has been found so far as of 2020.
* conjectured to be larger than \x[p-complexity], but we don't have a single algorithm provenly there:
  * it is believed that the NP complete ones can't be solved
  * if they were neither NP-complete nor P, it would imply \x[p-versus-np-problem][P != NP]
* we just don't know if it is even contained inside \x[np-complexity]!

= Co-NP
{c}
{parent=np-complexity}
{wiki}

* https://math.stackexchange.com/questions/361422/why-isnt-np-conp "Why isn't NP = coNP?"
* https://stackoverflow.com/questions/17046440/whats-the-difference-between-np-and-co-np
* https://cs.stackexchange.com/questions/9795/is-the-open-question-np-co-np-the-same-as-p-np
* https://mathoverflow.net/questions/31821/problems-known-to-be-in-both-np-and-conp-but-not-known-to-be-in-p

= Optimization problem
{parent=computational-problem}
{wiki}

= Linear programming
{parent=optimization-problem}
{wiki}

= Logistics
{parent=optimization-problem}
{wiki}

= Last mile problem
{parent=logistics}

The exact same problem appears over and over, e.g.:
* https://en.wikipedia.org/wiki/Last_mile_(transportation)[transportaion]: the last mile of the trip when everyone leaves the train and goes to their different respective offices is the most expensive
* https://en.wikipedia.org/wiki/Last_mile_(telecommunications)[telecommunications]: the last mile of wire linking local hubs to actual homes is the most expensive
* electrical grid: same as telecommunications

\x[ciro-santilli] also identified knowledge version of this problem: \x[the-missing-link-between-basic-and-advanced].

= Optimization software
{parent=optimization-problem}
{tag=software}

* https://en.wikipedia.org/wiki/List_of_optimization_software
* https://en.wikipedia.org/wiki/Comparison_of_optimization_software

= CPLEX
{c}
{parent=optimization-software}

= Limiting factor
{parent=optimization-problem}
{wiki}

= Critical path method
{parent=limiting-factor}
{wiki}

= Critical path
{parent=limiting-factor}

= Cryptography
{parent=computer-science}
{wiki}

= Random number generation
{parent=cryptography}
{title2=RNG}
{wiki}

= Random number generator
{synonym}

= Hardware random number generation
{parent=random-number-generation}
{wiki}

= Public-key cryptography
{parent=cryptography}
{wiki}

= Public key
{synonym}

It allows you to do two things:
* \x[encryption]
* \x[digital-signature]

= Digital signature
{parent=public-key-cryptography}
{wiki}

One notable application: \x[cryptocurrency], see e.g. \x[how-bitcoin-works].

= Ring signature
{parent=public-key-cryptography}
{wiki}

Used for example:
* by \x[monero] to hide the input of a transaction
* anonymous \x[electronic-voting]

= RSA
{c}
{disambiguate=cryptosystem}
{parent=public-key-cryptography}
{wiki}

Based on the fact that we don't have a \x[p-complexity] algorithm for \x[integer-factorization] as of 2020. But nor proof that one does not exist!

The private key is made of two randomly generated prime numbers: $p$ and $q$. How such large primes are found: \x[how-large-primes-are-found-for-rsa].

The public key is made of:
* `n = p*q`
* a randomly chosen integer exponent $e$ between `1` and `e_max = lcm(p -1, q -1)`, where `lcm` is the \x[least-common-multiple]

Given a plaintext message `m`, the encrypted cyphertext version is:
``
c = m^e mod n
``
This operation is called \x[modular-exponentiation] can be calculated efficiently with the \x[extended-euclidean-algorithm].

The inverse operation of finding the private `m` from the public `c`, `e` and $n$ is however believed to be a hard problem without knowing the factors of `n`.

However, if we know the private `p` and `q`, we can solve the problem. As follows.

First we calculate the \x[modular-multiplicative-inverse]. TODO continue.

Bibliography:
* https://www.comparitech.com/blog/information-security/rsa-encryption/ has a numeric example

= How large primes are found for RSA
{parent=rsa-cryptosystem}

* https://crypto.stackexchange.com/questions/1970/how-are-primes-generated-for-rsa
* https://crypto.stackexchange.com/questions/690/can-i-select-a-large-random-prime-using-this-procedure/693#693

Answers suggest hat you basically pick a random large odd number, and add 2 to it until your selected \x[primality-test] passes.

The \x[prime-number-theorem] tells us that the probability that a number between 1 and $N$ is a prime number is $1/log(N)$.

Therefore, for an N-bit integer, we only have to run the test N times on average to find a prime.

Since say, A 512-bit integer is already humongous and sufficiently large, we would only need to search 512 times on average even for such sizes, and therefore the procedure scales well.

= RSA vs Diffie-Hellman
{c}
{parent=rsa-cryptosystem}

\x[rsa-cryptosystem] vs \x[diffie-hellman-key-exchange] are the dominant \x[public-key-cryptography] systems as of 2020, so it is natural to ask how they compare:
* https://security.stackexchange.com/questions/35471/is-there-any-particular-reason-to-use-diffie-hellman-over-rsa-for-key-exchange
* https://crypto.stackexchange.com/questions/2867/whats-the-fundamental-difference-between-diffie-hellman-and-rsa
* https://crypto.stackexchange.com/questions/797/is-diffie-hellman-mathematically-the-same-as-rsa

= Diffie-Hellman key exchange
{c}
{parent=public-key-cryptography}
{wiki=Diffie–Hellman_key_exchange}

Based on the fact that we don't have a \x[p-complexity] algorithm for \x[discrete-logarithm] as of 2020. But nor proof that one does not exist!

= Elliptic curve cryptography
{parent=public-key-cryptography}
{wiki}

= Elliptic-curve Diffie-Hellman
{parent=elliptic-curve-cryptography}
{wiki}

= ECDH
{c}
{synonym}
{title2}

Variant of \x[diffie-hellman-key-exchange]{parent} based on \x[elliptic-curve-cryptography].

= Encryption
{parent=cryptography}
{wiki}

= Deniable authentication
{parent=encryption}
{wiki}

= End-to-end encryption
{parent=encryption}
{wiki}

= E2EE
{c}
{synonym}
{title2}

= End-to-end encrypted
{synonym}

= Forward secrecy
{parent=encryption}
{wiki}

= Perfect forward secrecy
{synonym}

https://stackoverflow.com/questions/20505942/how-does-perfect-forward-secrecy-pfs-work/66118134#66118134

= Disk encryption
{parent=encryption}
{wiki}

= Can a smartphone's PIN or password be brute-forced in an offline attack?
{parent=disk-encryption}

https://security.stackexchange.com/questions/202174/can-a-smartphones-pin-or-password-be-brute-forced-in-an-offline-attack

\x[ciro-santilli] has a hard time understanding why this is possible, e.g. many people use short 4 digit pins, or a short swipe pattern. Why can't this be cracked easily offline?

= Linux Unified Key Setup
{c}
{parent=disk-encryption}
{wiki}

= LUKS
{c}
{synonym}
{title2}

= Disk encryption password handover plausible deniability
{parent=disk-encryption}
{wiki}

* https://security.stackexchange.com/questions/135846/is-plausible-deniability-actually-feasible-for-encrypted-volumes-disks
* https://security.stackexchange.com/questions/87153/linux-plausibly-deniable-file-system

Can we do better than "wrong password implies random bytes"?

Can the last disk access times be checked via forensic methods?

= GNU Privacy Guard
{c}
{parent=cryptography}
{title2=GnuPG, GPG}
{wiki}

Generate public private key, test encrypt and test decrypt:
``
# Create your pubkey.
gpg --gen-key
gpg --armor --output pubkey.gpg --export <myemail>

# Encrypt using someone's pubkey.
gpg --import pubkey2.gpg
echo 'hello world' > hello.txt
gpg --output hello.txt.gpg --encrypt --recipient <other-email> hello.txt

# Double check it is not plaintext in the encrypted message.
grep hello hello.txt.gpg

# Decrypt.
gpg --output hello.decrypt.txt --decrypt --recipient <myemail> hello.txt.gpg
diff -u hello.decrypt.txt hello.txt
``

= Internet privacy
{c}
{parent=cryptography}
{wiki}

= Anonymity
{parent=internet-privacy}
{wiki}

= Anonymous
{synonym}

= Anonymously
{synonym}

= Internet privacy organizations
{parent=internet-privacy}

= Riseup
{c}
{parent=internet-privacy-organizations}
{wiki}

= Operations security
{parent=internet-privacy}
{wiki}

= Operational security
{synonym}

= OPSEC
{c}
{synonym}
{title2}

= Tor
{c}
{disambiguate=anonymity network}
{parent=internet-privacy}
{wiki}

= Tor Browser
{c}
{parent=tor-anonymity-network}
{wiki}

= Onion service
{c}
{parent=tor-anonymity-network}
{wiki=https://en.wikipedia.org/wiki/Tor_(network)#Onion_services}

= Tor Onion service
{c}
{synonym}

= Tor hidden service
{c}
{synonym}

= Onion hidden service
{c}
{synonym}

This is a way to host a server that actually hide the \x[ip] of the server from the client, just like \x[tor-anonymity-network] hides the \x[ip] of the client from the server. Amazing tecnology!

This is why it enables hosting \x[illegal] things like the \x[silk-road-marketplace]: \x[law-enforcement] is not able find where the server is hosted, and take it down or identify the owner.

Bibliography:
* https://security.stackexchange.com/questions/38194/how-can-i-get-the-ip-address-for-a-tor-hidden-service-hs-with-a-onion-address

= Dark web
{parent=onion-service}
{wiki}

= Onion service search engine
{parent=onion-service}

= Uncensored Onion service search engine
{parent=onion-service-search-engine}

This is where "fun" stuff is likely to be.

= The Hidden Wiki
{c}
{parent=tor-anonymity-network}
{wiki}

= Can ISPs deanonymize Tor users based on timestamps of public posts?
{parent=tor-anonymity-network}
{wiki}

https://security.stackexchange.com/questions/237632/can-isp-deanonymize-telegram-public-channel-creators

= Hash function
{parent=computer-science}
{wiki}

= Hash
{synonym}

Applications:
* https://en.wikipedia.org/wiki/Hash_table[hash map] which is a O(1) amortized implementation of a map
* creating unbreakable chains of data, e.g. for https://stackoverflow.com/questions/22968856/what-is-the-file-format-of-a-git-commit-object-data-structure/37438460#37438460[Git commits] or \x[bitcoin]. 
* storing passwords on a server in a way that if the password database is stolen, attackers can't reuse them on other websites where the user used the same password: https://security.blogoverflow.com/2013/09/about-secure-password-hashing/

= Secure Hash Algorithms
{c}
{parent=hash-function}
{wiki}

= SHA-1
{c}
{parent=secure-hash-algorithms}
{wiki}

Implementations:
* 

= SHA-2
{c}
{parent=secure-hash-algorithms}
{wiki}

= Merkle tree
{c}
{parent=hash-function}

= Hash tree
{synonym}

= Computer scientist
{parent=computer-science}
{wiki}

= Alan Turing
{c}
{parent=computer-scientist}
{wiki}

= Scott Aaronson
{c}
{parent=computer-scientist}
{wiki}

= Cybercrime
{parent=computer}
{wiki}

= Cyber crime
{synonym}

= Silk Road
{c}
{disambiguate=marketplace}
{parent=cybercrime}
{wiki}

\x[ciro-santilli] has become slightly obsessed with this story, and the main mastermind \x[ross-ulbricht].

\Image[https://web.archive.org/web/20190629084608if_/https://cdn.arstechnica.net/wp-content/uploads/2015/01/GX-201C-640x853.png]
{title=Ross Ulbricht's open laptop shortly after his arrest at the Francisco Public Library.}
{description=He was running some GNOME based distro, could be \x[ubuntu] from that photo, and likely is given that Ross once recommended Ubuntu to his flatmate.}
{source=https://arstechnica.com/tech-policy/2015/01/the-incredibly-simple-story-of-how-the-govt-googled-ross-ulbricht}

The best article available so far is: https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind (https://web.archive.org/web/20191008142214/https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind[archive]) which summarizes what one of the investigators said in a 2019 French computer security conference.

The key living posts are:
* https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php (https://web.archive.org/web/20191121133952/https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php[archive]) which was originally asked under the real name, and then the username was changed to "Frosty", which matches one of the server's logins after the laptop was captured
* altoid early Silk Road mention: https://bitcointalk.org/?topic=175.70;wap2 (https://web.archive.org/web/20190628133852/https://bitcointalk.org/?topic=175.70;wap2[archive])

The big question is of course how libertarian free market ideologically motivated the website was, and how purely criminal greed it was.

The magnitude of the early \x[operational-security] mistakes does make Ciro think that Ross did it "because he could" and https://www.urbandictionary.com/define.php?term=i%20did%20it%20for%20the%20lulz["for the lolz"] in a real world \x[breaking-bad] way.

The entry in Ross' diary does \x[ciro-santilli-s-selfish-desires][resonate a lot] with Ciro and any entrepreneur, full diary at: https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/ (https://web.archive.org/web/20190613011454/https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/[archive]).

\Q[
\[i\]n 2011," \[I believe I will be\] "creating a year of prosperity and power beyond what I have ever experienced before,

Silk Road is going to become a phenomenon and at least one person will tell me about it, unknowing that I was its creator."
]

Having this kind of feeling, is the greatest thing any human can have, and what motivates all great things.

Capitalizing in \x[illegal] things though is a cheat, big things take longer than a few years to reach, but reaching them is that much more satisfying as well.

Other interesting quotes:
\Q[I hated working for someone else and trading my time for money with no investment in myself.]
which Ciro also feels, see \x[don-t-be-a-pussy], and:
\Q[Everyone knows I am working on a bitcoin exchange. I always thought honesty was the best policy and now I didn't know what to do. I should have just told everyone I am a freelance programmer or something, but I had to tell half truths. It felt wrong to lie completely so I tried to tell the truth without revealing the bad part, but now I am in a jam. Everyone knows too much. Dammit.]

Also very worth reading is the San Francisco flat mate account: https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord (https://web.archive.org/web/20191201090353/https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord[archive]).

The murder for hire allegations are also interesting: https://mashable.com/2013/10/03/silk-road-hits[], he paid 80k dollars to undercover DEA agents!

Except for the fact that Ross was an 80 million \x[dollar] \x[drug-lord], those accounts sound exactly like what you would expect from any other nerdy startup founder! The:
* "just do it" strategy effectively going to a minimal viable product (manual transaction management!), while making many mistakes along the way, including hiring mistakes and successes when scaling is needed
* the hardship of self bootstrapping your own social network (here with some kilos of mushrooms)
* the variety of periods, from relatively calm, to hair pulling stress during big changes

It is also amusing to see very concretely the obvious fact that the FBI can get a https://en.wikipedia.org/wiki/Subpoena[subpoena] for all accounts you ever had, e.g. they knew his \x[laptop] model from \x[amazon] and brought a corresponding power cable to the arrest! If you are going to be a cyber criminal, don't use your real name, ever!

Should justice be blind? Maybe. But it does hurt for mere non-blind men to see it sometimes. Especially when \x[drug-liberalization] is involved.

= Ross Ulbricht
{c}
{parent=silk-road-marketplace}
{wiki}

= Domain-specific language
{parent=computer}
{title2=DSL}
{wiki}

\x[evil]{c}. Just use \x[python] instead for \x[software], and a well known \x[data-file-format] for data, please.

= E-book
{parent=computer}
{wiki}

= E-book file format
{parent=e-book}

= ASCII
{c}
{parent=e-book-file-format}
{wiki}

= EPUB
{c}
{parent=e-book-file-format}
{wiki}

This is a good thing. It basically contains an entire \x[website], with \x[html] and assets inside a single \x[zip], and a little bit of metadata.

It is incomprehensible why \x[browser]{p} don't just implement it as they already have all the web part, and also \x[zip] stuff:
* https://www.quora.com/What-is-the-reason-that-browsers-cannot-open-epub-files-without-extensions on \x[quora]

The situation is so sad. \x[ubuntu] 21.04 doesn't come with a reader installed by default:
* https://askubuntu.com/questions/14378/what-software-can-i-use-to-view-epub-documents

= PDF
{c}
{parent=e-book-file-format}
{wiki}

= E-book viewer
{parent=e-book}

= Calibre
{c}
{disambiguate=software}
{parent=e-book-viewer}
{wiki}

Sometimes \x[ciro-santilli] says half jokingly that \x[user-interface] does not matter.

This software circa 2010-2020 makes that joke not be funny.

How can a UI feel so clunky!

The most aggravating thing is that it is not immediately obvious why it feels so bad.

= Evince
{parent=e-book-viewer}
{wiki}

= Okular
{parent=e-book-viewer}
{wiki}

This is generally good, especially compared to how crappy Evince, the default \x[ubuntu] one, has been around 2014-2020.

= File format
{parent=computer}
{wiki}

= Human-readable medium
{parent=file-format}
{wiki}

= Human-readable format
{synonym}

= Plaintext file
{title2}
{synonym}

= Human-readable
{synonym}

= Binary data
{parent=human-readable-medium}
{wiki}

The opposite of a \x[human-readable-format].

= Binary large object
{parent=binary-data}
{wiki}

= BLOB
{c}
{synonym}

Less evil are BLOBs that come from \x[reproducible-builds].

= Binary-to-text encoding
{parent=binary-data}
{wiki}

= Base58
{c}
{parent=binary-to-text-encoding}

https://en.bitcoin.it/wiki/Base58Check_encoding

Invented for \x[bitcoin].

= Base64
{c}
{parent=binary-to-text-encoding}
{wiki}

= yEnc
{c}
{parent=binary-to-text-encoding}
{wiki}

= Archive file
{parent=file-format}
{wiki}

= ZIP
{c}
{disambiguate=file format}
{parent=archive-file}
{wiki}

= ZIP
{c}
{synonym}

= Audio file format
{parent=file-format}
{wiki}

= Audio editor
{parent=audio-file-format}
{wiki}

= Audacity
{disambiguate=audio editor}
{parent=audio-editor}
{wiki}

= Audacity profile-based background noise removal
{parent=audacity-audio-editor}

You select a sample noise-only area, and it remove noise from the entire video for you:
* https://www.youtube.com/watch?v=AeOjtMOq3EU
* https://www.youtube.com/watch?v=3nMkMn4--5w

= MIDI
{c}
{parent=audio-file-format}
{wiki}

In simple terms, represents keystrokes of a piano, but it can likely also represent other effects (TODO confirm: bend, vibrato, slides, attack strength)

Can contain multiple parallel tracks as seen from the \x[wikipedia] example: https://en.wikipedia.org/wiki/File:MIDI_sample.mid

You can see what it contains well with \x[gui-music-editor].

MIDI is fun. It is a basic high level representation of most instrumental music, including beats.

To actually listen to MIDI, you need a \x[software-synthesizer], which knows what sound to make for each note. One way to specify such instruments is the \x[soundfont] file format.

Convert MIDI to more common standalone formats:
* https://stackoverflow.com/questions/16295459/convert-midi-to-mp3/65207296#65207296
* https://softwarerecs.stackexchange.com/questions/10915/automatically-turn-midi-files-into-wav-or-mp3/76955#76955

= SoundFont
{c}
{parent=midi}
{wiki}

Contains instructions on how to synthesize MIDI.

Extension: sf2.

Can be imported for example by:
* \x[vmpk]
* \x[csound] with `sfload`: http://www.csounds.com/manual/html/sfload.html

= vmpk
{c}
{parent=midi}

https://vmpk.sourceforge.io/

Opens a virtual \x[midi] piano \x[gui]. It just works on \x[ubuntu] 20.04: https://askubuntu.com/questions/34391/virtual-midi-piano-keyboard-setup/1298026#1298026

VMPK is a virtual device that replicates what you would get by connecting a physical MIDI keyboard to your computer. It is not a \x[software-synthesizer] on its own. But it does connect to a working synthesizer by default (Sonivox EAS) which makes it produce sounds out-of-the box.

TODO: then I messed with my sound settings, and then it stopped working by default on the default "MIDI Connection" > "MIDI Out Driver" > "Network". But it still works on "SonivoxEAS".

A \x[hello-world] of actually connecting it to a specific software synthesizer manually on \x[advanced-linux-sound-architecture] with `aconnect` can be found at: https://askubuntu.com/questions/34391/virtual-midi-piano-keyboard-setup/1298026#1298026

Save to a \x[midi] file: https://askubuntu.com/questions/709673/save-as-midi-when-playing-from-vmpk-qsynth/1298231#1298231

Reasonable default key mappings to keyboard covering 2 octaves.

3 multiple simultaneous keys did not work (tested "ZQI"). This might just be a limitation of \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017][my keyboard] however.

TODO how to save to a `.mid` file? https://askubuntu.com/questions/709673/save-as-midi-when-playing-from-vmpk-qsynth

\x[sourceforge].

= Data file format
{parent=file-format}
{wiki=Data_file}

= JSON
{c}
{parent=data-file-format}
{wiki}

= Hierarchical Data Format
{c}
{parent=data-file-format}
{title2=HDF}
{wiki}

= XML
{c}
{parent=data-file-format}
{title2=Extensible Markup Language}
{wiki}

Do you know what is worse than XML? \x[html][Pseudo XML]: https://stackoverflow.com/questions/5558502/is-html5-valid-xml/39560454#39560454

= Standard Generalized Markup Language
{c}
{parent=xml}
{wiki}

= SGML
{c}
{title2}
{synonym}

\x[xml] predecessor.

= IBM Generalized Markup Language
{c}
{parent=standard-generalized-markup-language}
{wiki}

\x[sgml] predecessor.

= XPath
{c}
{parent=xml}
{wiki}

XPath kind of died with the rise of \x[css] selectors around the beginnning of the 2010's. But that is a shame. XPath is a good standard, and was generally more powerful than CSS selectors for many many years.

= YAML
{c}
{parent=data-file-format}
{wiki}

= Image file format
{parent=file-format}
{wiki=Image_file_formats}

= Raster graphics
{parent=image-file-format}
{wiki}

Represents image \x[pixel] by pixel, rather than by mathematical primitives such as done in \x[vector-graphics]:

= Pixel
{parent=raster-graphics}
{wiki}

= Vector graphics
{parent=image-file-format}
{wiki}

Smaller files, scalable image size, and editability. Why would you use anything else for programmatically generated images?!?!

= Scalable Vector Graphics
{parent=vector-graphics}
{wiki}

= SVG
{c}
{synonym}
{title2}

\x[company]{c}{p} have been really slow to support SVG features in their browsers, and that is very saddening: https://medium.com/@michaelmangial1/introduction-to-scalable-vector-graphics-6450c03e8d2e

You can't drop SVG support for `canvas` until there's a way to run untrusted \x[javascript] on the browser!

\x[svg] does have some compatibility annoyances, notably \x[svg-fonts]. But we should as a society work to standardize and implement a fix those, the benefits of SVG are just too great!

Examples:
* \a[svg/svg.svg] a minimal somewhat sane SVG:
  * if the `width` and `height` properties were not given, you get the default 300x150, which seems to be set in the SVG standard:
    * https://stackoverflow.com/questions/40156710/why-does-this-svg-image-have-a-height-of-150px
    * https://css-tricks.com/scale-svg
* how to add na SVG image to a \x[html] file:
  * \a[svg/svg.html]: external image. The included file is \a[svg/svg.svg].
  * \a[svg/inline.html]: inline.
* \a[svg/billion-laughs.svg]
* \a[svg/html.svg]
* \a[svg/triangle.svg]
* \a[svg/viewBox.svg]: this attribute allows you to control the default SVG `svg width=` and `height=` while keeping the coordinates of the drawing untouched. If the `viewBox` aspect ratio differs from the width/height ratio, you likely want to play with `preserveAspectRatio`, otherwise you would get white spaces by default on the generated image
* \x[css] with SVG:
  * \a[svg/style.svg]: inline CSS
  * \a[svg/style-external.svg]: external CSS with: `<?xml-stylesheet type="text/css" href="svg.css" ?>`, see also: https://stackoverflow.com/questions/18434094/how-to-style-svg-with-external-css
    * \a[svg/subdir/style-external.html]: is the relative CSS relative to the HTML or to the SVG? Answer: to the SVG... OMG. So how to make it work reliably?
  * \a[svg/current-color.html] and \a[svg/current-color.svg]: illustrates `fill="currentColor"`. Only works for inline SVG however... See also: https://stackoverflow.com/questions/13000682/how-do-i-have-an-svg-image-inherit-colors-from-the-html-document/13002311
* \x[javascript] with SVG:
  * \a[svg/script.svg]
  * \a[svg/external-js.svg]
* \a[svg/defs.html] hows how `defs` works
  * \a[svg/defs-external.html] tries to include external `defs` from \a[svg/defs.svg], but that fails like everything else related to external SVGs

= SVG tutorial
{c}
{parent=scalable-vector-graphics}

= SVG background color
{c}
{parent=svg-tutorial}

This is a pain point as of \x[svg-1-1]...

Examples at \a[svg/background.html] which answers from https://stackoverflow.com/questions/11293026/default-background-color-of-svg-root-element/11293812[]:
* \a[svg/background-rect.svg]
* \a[svg/background-viewport-fill.svg]: was part of \x[svg-1-2], but that whole standard got dropped. Not implemented neither in \x[chromium-web-browser] 85 nor \x[firefox] 93 as of 2021.

This pain reflects directly on Inkscape: \x[set-svg-background-color-in-inkscape].

= SVG fonts
{c}
{parent=svg-tutorial}

The major problem with SVG is text \x[computer-font]{p}. If you make an image with text that depends on one \x[computer-font] and it is not present in the viewer's machine, it will use some other font, which may overlap with other elements of the image. Some libraries \x[matplotlib] solve this https://stackoverflow.com/questions/34387893/output-matplotlib-figure-to-svg-with-text-as-text-not-curves[by writing characters as curves], but this produces large files and unsearchable text. The inability of different computer platforms to standardize fonts that must always be present is a major issue.

= Join two SVG side-by-side from the command line
{parent=scalable-vector-graphics}

TODO:
* https://stackoverflow.com/questions/9612434/how-to-concatenate-svg-files-lengthwise-from-linux-command-line
* https://graphicdesign.stackexchange.com/questions/90844/joining-together-multiple-svg-images
* https://graphicdesign.stackexchange.com/questions/137096/is-there-a-way-to-stack-two-svgs-on-top-of-each-other

= SVG version
{c}
{parent=scalable-vector-graphics}

= SVG 1.0
{c}
{parent=svg-version}

= SVG 1.1
{c}
{parent=svg-version}

= SVG 1.2
{c}
{parent=svg-version}

Dropped in favor of \x[svg-2].

= SVG 2
{c}
{parent=svg-version}

= List of image file formats
{parent=image-file-format}

= JPEG
{c}
{parent=list-of-image-file-formats}
{wiki}

= Portable Network Graphics
{parent=list-of-image-file-formats}
{wiki}

= PNG
{c}
{synonym}
{title2}

= libpng
{c}
{parent=portable-network-graphics}

\x[png] reference implementation. Ahh, if feels good to have a dominating open source reference implementation.

Demo of using it by \x[ciro-santilli]: https://stackoverflow.com/questions/1362945/how-to-decode-a-png-image-to-raw-bytes-from-c-code-with-libpng/36399711#36399711

\Image[https://i.stack.imgur.com/rfdHr.png]

\Image[https://i.stack.imgur.com/IWBSj.png]

= Image editor
{parent=image-file-format}

= GIMP
{c}
{parent=image-editor}
{wiki}

It's not super easy to use at first.

And it sometimes says that the basic drawing thing you want to do is off the project's scope.

But as you learn more about it and further generalize the concepts, there are often reasonable reasons for those design choices.

And the UI looks good :-)

Examples:
* https://superuser.com/questions/167873/how-do-i-draw-a-box-in-gimp you need to go on a top menu to draw a rectangle

Some answers by \x[ciro-santilli]:
* https://graphicdesign.stackexchange.com/questions/83446/gimp-how-to-combine-two-images-side-by-side/145543#145543

= Inkscape
{c}
{parent=image-editor}
{wiki}

Inkscape is a a good software for editing/creating \x[svg] files.

Its functionality is fundamental for as a \x[software-for-drawing-geometry-diagrams], as it is a good middle ground between algorithmic generation, and \x[raster-graphics].

At 1.0.2, its \x[ui] is a bit terrible:
* the way the menus open on the right with title below the window...
* several defaults are atrocious, e.g. export drawing rather than page

And it crashes from time to time on \x[ubuntu] 21.04. And it has some glaring bugs, e.g.:
* https://gitlab.com/inkscape/inbox/-/issues/5794

But still, it is a very good initiative.

What would be really amazing is if they had constraints: https://gitlab.com/inkscape/inbox/-/issues/1465 like proper \x[cad] software, it would make it possible to not have to redo entire diagrams when you want to change a small part of them.

= Rotate object around a point in Inkscape
{parent=inkscape}

There's a tiny little crosshair that you can drag around to set the center of rotation.

And there's a button to make that crosshair snap: https://inkscape.org/forums/questions/can-a-pivotingtransfrom-crosshair-be-moved-and-made-to-snap-to-a-node-or-a-grid-point/#c14432

= Set SVG background color in Inkscape
{parent=inkscape}

This is related to the underlying SVG pain point of \x[svg-background-color]:
* https://gitlab.com/inkscape/inkscape/-/issues/531
* https://graphicdesign.stackexchange.com/questions/74906/in-inkscape-how-do-i-add-a-white-background/144952#144952

For \x[png] export:
* https://superuser.com/questions/249860/how-can-i-change-inkscapes-default-export-background-color-from-yellow-to-white

= Video file format
{parent=file-format}
{wiki=Video_file_formats}

= Video editing software
{parent=video-file-format}
{wiki}

= Kdenlive
{c}
{parent=video-editing-software}
{wiki}

Preview has no sound on \x[ubuntu] 20.10.

Sound worked on Ubuntu 21.04 though, but it then soon crashed with:

``
 = = SET EFFECT PARAM:  "rect"  =  0=1188 0 732 242
MUTEX LOCK!!!!!!!!!!!! slotactivateeffect:  1
// // // RESULTING REQUIRED SCENE:  1
Object 0x557293592da0 destroyed while one of its QML signal handlers is in progress.
Most likely the object was deleted synchronously (use QObject::deleteLater() instead), or the application is running a nested event loop.
This behavior is NOT supported!
qrc:/qml/EffectToolBar.qml:80: function() { [native code] }
Killed
``
amazing.

= ShotCut
{c}
{parent=video-editing-software}
{wiki}

Worked on \x[ubuntu] 20.10.

The UI is a bit too buggy to bear.

How to unsplit, can't find on shotcut 21.05.01: https://forum.shotcut.org/t/is-it-possible-to-unsplit/1466/2

Background noise reduction: couldn't easily find out how, especially with automatic profile detected based on a selected region as mentioned at \x[audacity-profile-based-background-noise-removal]:
* https://forum.shotcut.org/t/how-to-apply-filter-reduction-noise-on-audio/12678/2
* https://forum.shotcut.org/t/noise-reduction-filter-request/5348/6

= OpenShot
{c}
{parent=video-editing-software}
{wiki}

\x[ubuntu] 20.10 crash...:
``
  exceptions:ERROR Unhandled Exception
Traceback (most recent call last):
  File "/usr/bin/openshot-qt", line 11, in <module>
    load_entry_point('openshot-qt==2.5.1', 'gui_scripts', 'openshot-qt')()
  File "/usr/lib/python3/dist-packages/openshot_qt/launch.py", line 97, in main
    app = OpenShotApp(argv)
  File "/usr/lib/python3/dist-packages/openshot_qt/classes/app.py", line 218, in __init__
    from windows.main_window import MainWindow
  File "/usr/lib/python3/dist-packages/openshot_qt/windows/main_window.py", line 45, in <module>
    from windows.views.timeline_webview import TimelineWebView
  File "/usr/lib/python3/dist-packages/openshot_qt/windows/views/timeline_webview.py", line 42, in <module>
    from PyQt5.QtWebKitWidgets import QWebView
ImportError: /usr/lib/x86_64-linux-gnu/libQt5Quick.so.5: undefined symbol: _ZN4QRhi10newSamplerEN11QRhiSampler6FilterES1_S1_NS0_11AddressModeES2_, version Qt_5_PRIVATE_API
``

= Subtitle
{parent=video-file-format}

= How to hardcode subtitle into a video with FFmpeg?
{parent=subtitle}

* https://superuser.com/questions/869248/hardcoding-subs-with-ffmpeg
* https://askubuntu.com/questions/485100/how-may-i-burn-srt-subtitles-to-video-with-avconv

On \x[ubuntu] 20.10, just:
``
ffmpeg -i input.mp4 -vf "subtitles=subtitle.srt" output.mp4
``

To change font size: https://stackoverflow.com/questions/21363334/how-to-add-font-size-in-subtitles-in-ffmpeg-video-filter
``
ffmpeg -i input.mp4 -vf "subtitles=subtitle.srt:force_style='Fontsize=64'" output.mp4
``
The default appears to be 24, so just multiply that by whatever seems like a reasonable factor.

= Subtitle file format
{parent=subtitle}

= Subtitle editor
{parent=subtitle-file-format}

= Subtitle Edit
{c}
{parent=subtitle-editor}

Written in \x[c-sharp].

= Aegisub
{c}
{parent=subtitle-editor}

https://github.com/Aegisub/Aegisub

This worked well on 3.2.2 \x[ubuntu] 20.10. Recommended.

= Gaupol
{c}
{parent=subtitle-editor}

https://github.com/otsaloma/gaupol

Good shortcuts and user experience.

No waveform viewer: https://github.com/otsaloma/gaupol/issues/49 so unusable.

= kitone/subtitleeditor
{parent=subtitle-editor}

https://github.com/SubtitleEdit/subtitleedit

Not to be confused with \x[subtitle-edit].

As of 0.54.0 this feels featureful, but extremely buggy or lacking UI obvious enhancements that would be simple to implement, and offer huge value:
* fundamental not defined out of box, e.g. Tiny forward/backwards. You can define them yourself, but they should be provided.
* https://github.com/SubtitleEdit/subtitleedit/issues/4976 can't export \x[subrip]?
* can't interact with video on waveform?

It is hard to understand how that project reached this weird featureful but crappy state. Feels like they just gave push permission to a bunch of random people.

= List of subtitle file formats
{parent=video-file-format}

= SubRip
{c}
{parent=list-of-subtitle-file-formats}
{title2=.srt}
{wiki}

= Information theory
{parent=computer}
{wiki}

= Noisy-channel coding theorem
{parent=information-theory}
{title2=Shannon's theorem}
{wiki}

Setting: you are sending bits through a communication channel, each bit has a random probability of getting flipped, and so you use some error correction code to achieve some minimal error, at the expense of longer messages.

This theorem sets an upper bound on how efficient you can be in your encoding, for any encoding.

The next big question, which the theorem does not cover is how to construct codes that reach or approach the limit. Important such codes include:
* \x[turbo-code]
* \x[low-density-parity-check-code]

But besides this, there is also the practical consideration of if you can encode/decode fast enough to keep up with the coded bandwidth given your hardware capabilities.

https://news.mit.edu/2010/gallager-codes-0121 explains how turbo codes were first reached without a very good mathematical proof behind them, but were still revolutionary in experimental performance, e.g. turbo codes were used in 3G/4G.

But this motivated researchers to find other such algorithms that they would be able to prove things about, and so they rediscovered the much earlier \x[low-density-parity-check-code], which had been published in the 60's but was forgotten, partially because it was computationally expensive.

= Turbo code
{parent=noisy-channel-coding-theorem}
{wiki}

TODO how close does it get to Shannon's limit?

= Low-density parity-check code
{parent=noisy-channel-coding-theorem}
{title2=LDPC}
{wiki}

= Markup language
{parent=computer}
{wiki}

= Cirodown
{c}
{parent=markup-language}
{splitSuffix}
{tag=personal-knowledge-base}

\x[markup-language]{c} created by \x[ciro-santilli], and used on \x[ciro-santilli-s-homepage]. The one \x[markup-language] to rule them all?

\x[github] project page: https://github.com/cirosantilli/cirodown

Documentation: \a[cirodown]{check=0}

Motivated/intended base for \x[ourbigbook-com].

= AsciiDoc
{c}
{parent=markup-language}
{wiki}

= AsciiDoctor
{c}
{parent=asciidoc}
{wiki}

= LaTeX
{c}
{parent=markup-language}
{wiki}

Revolutionary for its time, and a big part of \x[ourbigbook-com/motivation][Ciro's Enlightenment].

But too insane, and did not https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520[keep up with internet age], and so Ciro wants to kill it now.

= KaTeX
{parent=latex}
{c}

https://github.com/KaTeX/KaTeX

Default mathematics typesetting used in \x[cirodown].

Key issues:
* https://github.com/KaTeX/KaTeX/issues/2228 `newcommand` did not support optional arguments

= Softcover
{disambiguate=LaTeX}
{parent=latex}

https://github.com/softcover/softcover

LaTeX subset that output nicely to HTML.

https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520

Too insane though due to LaTeX roots, better just move to newer HTML-first markups like \x[cirodown] or \x[markdown].

= MathBook XML
{c}
{parent=markup-language}

https://github.com/rbeezer/mathbook

\x[xml], ain't nobody ever going to write that manually.

= Markdown
{parent=markup-language}
{wiki}

= Pandoc
{parent=markdown}
{wiki}

This is good software.

If it only it were written in \x[javascript] instead of Haskell (!?), then Ciro might have used it as the basis for \x[cirodown].

= karlcow/markdown-testsuite
{parent=markdown}

https://github.com/karlcow/markdown-testsuite

\x[ciro-santilli] was contributing to this, when \x[commonmark] left private mode and killed it, thus wasting many hours of Ciro's time.

See also: \x[ciro-santilli-s-minor-projects].

= CommonMark
{parent=markdown}

https://commonmark.org/

CommonMark is a good project. But its initial release method was not very nice, they first developed everything behind closed doors with the big adopters like \x[github] and \x[stack-overflow], and only later released the thing read, thus wasting the time of people who were working on alternative in the meanwhile, e.g. https://github.com/karlcow/markdown-testsuite which Ciro contributed to: \x[ciro-santilli-s-minor-projects].

= markdownlint/markdownlint
{parent=markdown}

https://github.com/markdownlint/markdownlint

= Machine learning
{parent=computer}
{wiki}

The main reason \x[ciro-santilli] never touched it is that it feels that every public data set has already been fully mined or has already had the most interesting algorithms developed for it, so you can't do much outside of big companies.

This is why Ciro started \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development] to generate synthetic data and thus reduce the cost of data.

The other reason is that it is ugly.

= Artificial intelligence
{parent=machine-learning}
{title2=AI}
{wiki}

= Artificial general intelligence
{parent=artificial-intelligence}
{title2=AGI}
{wiki}

Given enough computational power per dollar, AGI is inevitable, but it is not sure certain ever happen given the end of \x[moore-s-law][end of Moore's Law].

Alternatively, it could also be achieved genetically modified biological brains + https://en.wikipedia.org/wiki/Brain_in_a_vat[brain in a vat].

Imagine a brain the size of a building, perfectly engineered to solve certain engineering problems, and giving hints to human operators + taking feedback from cameras and audio attached to the operators.

This likely implies \x[transhumanism], and https://en.wikipedia.org/wiki/Mind_uploading[mind uploading].

\x[ciro-santilli] joined the silicon industry at one point to help increase our computational capacity and reach AGI.

Ciro believes that the easiest route to full AI, if any, could involve \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development].

= Natural language processing
{parent=machine-learning}
{wiki}

An impossible \x[artificial-general-intelligence][AGI-complete] dream.

It is impossible to understand speech, and take meaningful actions from it, if you don't understand what is being talked about.

And without doubt, "understanding what is being talked about" comes down to understanding (efficiently representing) the geometry of the 3D world with a time component.

Not from hearing sounds alone.

= Parallel computing
{parent=computer}
{wiki}

= Memory semantics
{parent=parallel-computing}
{wiki}

These are the rules which specify what different concurrent read/write memory accesses from different threads/processes can or cannot see.

Notable such set of rules include:
* \x[c-plus-plus-memory-model]. These are also reflected on the semantics of memory of the corresponding \x[instruction-set-architecture]
* \x[sql-transaction-isolation-level]

= C++ memory model
{c}
{parent=memory-semantics}

https://stackoverflow.com/questions/6319146/c11-introduced-a-standardized-memory-model-what-does-it-mean-and-how-is-it-g

= Read-modify-write
{parent=parallel-computing}
{wiki=Read–modify–write}

That's what usually fucks up parallel programs.

= Thread
{disambiguate=computing}
{parent=parallel-computing}
{wiki}

= Thread
{synonym}

= Quantum computing
{parent=computer}
{wiki}

= Quantum computer
{synonym}

Quantum is getting hot in 2019, and even \x[ciro-santilli] got a bit excited: \x[quantum-computing-could-be-the-next-big-thing].

No useful algorithm has been economically accelerated by quantum yet, only \x[quantum-supremacy][useless ones], but \x[quantum-computing-player][the bets are on, big time].

To get a feeling of this, just have a look at the insane number of startups that are already developing \x[quantum-algorithm]{p} for hardware that doesn't/barely exists! https://quantumcomputingreport.com/players/privatestartup (https://web.archive.org/web/20191223175204/https://quantumcomputingreport.com/players/privatestartup/[archive]).

To get a basic idea of what programming a quantum computer looks like start by reading: \x[quantum-computing-is-just-matrix-multiplication]{full}.

= Quantum computing is just matrix multiplication
{parent=quantum-computing}

= Programmer's model of quantum computers
{synonym}

This is a quick tutorial on how a \x[quantum-computer] programmer thinks about how a quantum computer works. If you know:
* what a \x[complex-number] is
* how to do \x[matrix-multiplication]
* what is a \x[probability]
a concrete and precise \x[hello-world] operation can be understood in 30 minutes.

Although there are several \x[quantum-computer-physical-implementations][types of quantum computer] under development, there exists a single high level model that represents what any of those computers can do, and we are going to explain that model here.

Beyond that basic model, programmers only may have to consider the \x[quantum-logic-gates-are-needed-for-physical-implementation][imperfections of their hardware], but the starting point will almost always be this basic model, and tooling that automates mapping the high level model to real hardware considering those imperfections (i.e. compilers) is already getting better and better.

This model is very simple to understand, being only marginally more complex than that of a classical computer, see also: https://quantumcomputing.stackexchange.com/questions/6639/is-my-background-sufficient-to-start-quantum-computing/14317#14317

The situation of quantum computers today in the 2020's is somewhat analogous to that of the early days of classical circuits and computers in the 1950's and 1960's, before \x[cpu]{p} came along and software ate the world. Even though the \x[semiconductor-physical-implementation][exact physics of a classical computer] might be hard to understand and vary across different types of \x[integrated-circuit]{p}, those early hardware pioneers (and to this day modern CPU designers), can usefully view circuits from a higher level point of view, thinking only about concepts such as:
* \x[logic-gate]{p} like AND, NOR and NOT
* a clock + registers
as modelled at the \x[register-transfer-level], and only in a separate compilation step translated into actual chips. This high level understanding of how a classical computer works is what we can call "the programmer's model of a classical computer". So we are now going to describe the quantum analogue of it.

The way quantum programmers think about a quantum computer in order to program can be described as follows:
* the input of a N qubit quantum computer is a vector of dimension N containing classic bits 0 and 1
* the quantum program, also known as circuit, is a $2^n \times 2^n$ \x[unitary-matrix] of \x[complex-number]{p} $Q \in \C^{2^n} \times \C^{2^n}$ that operates on the input to generate the output
* the output of a N qubit computer is also a vector of dimension N containing classic bits 0 and 1

To operate a quantum computer, you:
* set the classic input bits
* press a "RUN" button
* read the classic output bits

Each time you do this, you are literally conducting a physical experiment of the specific \x[quantum-computer-physical-implementations][physical implementation] of the computer:
* setup your physical system to represent the classical 0/1 inputs
* let the state evolve for long enough
* measure the classical output back out
and each run as the above can is simply called "an experiment" or "a measurement".

The output comes out "instantly" in the sense that it is physically impossible to observe any intermediate state of the system, i.e. there are no clocks like in classical computers, further discussion at: \x[quantum-circuits-vs-classical-circuits]. Setting up, running the experiment and taking the does take some time however, and this is important because you have to run the same experiment multiple times because results are probabilistic as mentioned below.

Unlike in a classical computer, the output of a quantum computer is not deterministic however.

But the each output is not equally likely either, otherwise the computer would be useless except as \x[random-number-generator]!

This is because the probabilities of each output for a given input depends on the program (\x[unitary-matrix]) it went through.

Therefore, what we have to do is to design the quantum circuit in a way that the right or better answers will come out more likely than the bad answers.

We then calculate the error bound for our circuit based on its design, and then determine how many times we have to run the experiment to reach the desired accuracy.

The probability of each output of a quantum computer is derived from the input and the circuit as follows.

First we take the classic input vector of dimension N of 0's and 1's and convert it to a "quantum state vector" $\va{q_{in}}$ of dimension $2^n$:
$$
\va{q_{in}} \in \C^{2^n}
$$

We are after all going to multiply it by the program matrix, as you would expect, and that has dimension $2^n \times 2^n$!

Note that this initial transformation also transforms the discrete zeroes and ones into \x[complex-number]{p}.

For example, in a 3 qubit computer, the quantum state vector has dimension $2^3 = 8$ and the following shows all 8 possible conversions from the classic input to the quantum state vector:
``
000 -> 1000 0000 == (1.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0)
001 -> 0100 0000 == (0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0)
010 -> 0010 0000 == (0.0, 0.0, 1.0, 0.0,  0.0, 0.0, 0.0, 0.0)
011 -> 0001 0000 == (0.0, 0.0, 0.0, 1.0,  0.0, 0.0, 0.0, 0.0)
100 -> 0000 1000 == (0.0, 0.0, 0.0, 0.0,  1.0, 0.0, 0.0, 0.0)
101 -> 0000 0100 == (0.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0)
110 -> 0000 0010 == (0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0)
111 -> 0000 0001 == (0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 1.0)
``

This can be intuitively interpreted as:
* if the classic input is `000`, then we are certain that all three bits are 0.

  Therefore, the probability of all three 0's is 1.0, and all other possible combinations have 0 probability.
* if the classic input is `001`, then we are certain that bit one and two are 0, and bit three is 1. The probability of that is 1.0, and all others are zero.
* and so on

Now that we finally have our quantum state vector, we just multiply it by the \x[unitary-matrix] $Q$ of the quantum circuit, and obtain the $2^n$ dimensional output quantum state vector $\va{q_{out}}$:
$$
\va{q_{out}} = Q \: \va{q_{in}}
$$

And at long last, the probability of each classical outcome of the measurement is proportional to the square of the length of each entry in the quantum vector, analogously to what is done in the \x[schrodinger-equation].

For example, suppose that the 3 qubit output were:
$$
\begin{aligned}
\va{q_{out}} &=
\begin{bmatrix}
\frac{\sqrt{3}}{2} \\
0.0 \\
\frac{1}{2} \\
0.0 \\
0.0 \\
0.0 \\
0.0 \\
0.0
\end{bmatrix}
\end{aligned}
$$

Then, the probability of the first and third possible outcomes would be the length of each component squared:
$$
\begin{aligned}
\abs{\frac{\sqrt{3}}{2}}^2 &= \frac{\sqrt{3}}{2}^2 &= \frac{3}{4} \\
\abs{\frac{1}{2}^2}^2      &= \frac{1}{2}^2        &= \frac{1}{4}
\end{aligned}
$$
i.e. 75% for the first, and 25% for the third outcomes, where just like for the input:
* first outcome means `000`: all output bits are zero
* third outcome means `010`: the first and third bits are zero, but the second one is 1

All other outcomes have probability 0 and cannot occur, e.g.: `001` is impossible.

Keep in mind that the quantum state vector can also contain \x[why-are-complex-numbers-used-in-the-schrodinger-equation][complex numbers because we are doing quantum mechanics], but we just take their magnitude in that case, e.g. the following quantum state would lead to the same probabilities as the previous one:
$$
\begin{aligned}
\abs{\frac{1 + \sqrt{2}i}{2}}^2 &= \frac{1^2 + \sqrt{2^2}}{2^2} &= \frac{3}{4} \\
\abs{\frac{i}{2}}^2             &= \frac{1^2}{2^2}              &= \frac{1}{4}
\end{aligned}
$$

This interpretation of the quantum state vector clarifies a few things:
* the input quantum state is just a simple state where we are certain of the value of each classic input bit
* the matrix has to be unitary because the total probability of all possible outcomes must be 1.0

  This is true for the input matrix, and unitary matrices have the probability of maintaining that property after multiplication.

  Unitary matrices are a bit analogous to https://en.wikipedia.org/wiki/Self-adjoint_operator[self-adjoint operators] in general quantum mechanics (self-adjoint in finite dimensions implies is stronger)

  This also allows us to understand intuitively why quantum computers may be capable of accelerating certain algorithms exponentially: that is because the quantum computer is able to quickly do an unitary matrix multiplication of a humongous $2^{N}$ sized matrix.

  If we are able to encode our algorithm in that matrix multiplication, considering the probabilistic interpretation of the output, then we stand a chance of getting that speedup.

Consider reading the following next:
* \x[quantum-logic-gate]{full} shows an alternative, and extremely important view of a quantum computer besides a matrix multiplication: as a circuit. Fundamental subsections:
  * \x[quantum-logic-gates-are-needed-because-you-can-t-compute-the-matrix-explicitly-as-it-grows-exponentially]{full}
  * \x[quantum-logic-gates-are-needed-for-physical-implementation]{full}
  * \x[universal-quantum-gates]{full}
  * \x[quantum-circuits-vs-classical-circuits]{full}

= Quantum algorithm
{parent=quantum-computing}

This is the true key question: what are the most important algorithms that would be accelerated by quantum computing?

Maybe there is some room for doubt because some applications might be way better in some \x[quantum-computer-physical-implementations][implementations], but we should at least have a good general idea.

However, clear information on this really hard to come by, not sure why.

Whenever asked e.g. at: https://physics.stackexchange.com/questions/3390/can-anybody-provide-a-simple-example-of-a-quantum-computer-algorithm/3407 on \x[physics-stack-exchange] people say the infinite mantra:
* \x[grover-s-algorithm][Grover]: speedup not exponential
* Deutsch: solves an useless problem
* Shor: cryptography is boring, do you have proper optimization or \x[quantum-chemistry] algorithms that will make trillions?
* https://en.wikipedia.org/wiki/Quantum_Fourier_transform[Quantum Fourier transform]: TODO is the speedup exponential or not?

\x[ciro-santilli] wonders if there is any understandable algorithm that meets the above criteria.

Lists:
* \x[quantum-algorithm-zoo]: the leading list as of 2020
* \x[quantum-computing-computational-chemistry-algorithms] is the area that Ciro and many people are te most excited about is 
* https://cstheory.stackexchange.com/questions/3888/np-intermediate-problems-with-efficient-quantum-solutions
* https://mathoverflow.net/questions/33597/are-there-any-known-quantum-algorithms-that-clearly-fall-outside-a-few-narrow-cla

= Quantum computers are not expected to solve NP-complete problems
{parent=quantum-algorithm}

Only \x[np-intermediate], which includes notably \x[integer-factorization]:
* https://quantumcomputing.stackexchange.com/questions/16506/can-quantum-computer-solve-np-complete-problems
* https://www.cs.virginia.edu/~robins/The_Limits_of_Quantum_Computers.pdf by \x[scott-aaronson]
* https://cs.stackexchange.com/questions/130470/can-quantum-computing-help-solve-np-complete-problems
* https://www.quora.com/How-can-quantum-computing-help-to-solve-NP-hard-problems

= Quantum Algorithm Zoo
{c}
{parent=quantum-algorithm}

https://quantumalgorithmzoo.org/

Source on \x[github]: https://github.com/stephenjordan/stephenjordan.github.io

The most comprehensive list is the amazing curated and commented list of \x[quantum-algorithm]{p} as of 2020.

= Grover's algorithm
{parent=quantum-algorithm}
{wiki}

= Quantum error correction
{parent=quantum-computing}
{wiki}

Technique that uses multiple non-\x[ideal] qubits (physical qubits) to simulate/produce one perfect qubit (logical).

TODO understand in detail. This appears to be a fundamental technique since all physical systems we can manufacture are imperfect.

Part of the fundamental interest of this technique is due to the \x[quantum-threshold-theorem].

For example, when https://www.bloomberg.com/news/articles/2020-04-06/quantum-computing-startup-raises-215-million-for-faster-device[PsiQuantum raised 215M in 2020], they announced that they intended to reach 1 million physical qubits, which would achieve between 100 and 300 logical qubits.

\x[video-jeremy-o-brien-quantum-technologies-by-googletechtalks-2014] https://youtu.be/7wCBkAQYBZA?t=2778 describes an error correction approach for a \x[photonic-quantum-computer].

= Quantum threshold theorem
{parent=quantum-error-correction}
{wiki}

This theorem roughly states that states that for every \x[quantum-algorithm], once we reach a certain level of physical error rate small enough (where small enough is algorithm dependant), then we can \i[perfectly] error correct.

This algorithm provides the conceptual division between \x[noisy-intermediate-scale-quantum-era] and post-NISQ.

= Noisy intermediate-scale quantum era
{parent=quantum-threshold-theorem}
{wiki}

= NISQ
{c}
{synonym}
{title2}

Era of \x[quantum-computing] before we reach physical errors small enough to perfectly error correct, \x[quantum-threshold-theorem].

= Quantum computing player
{parent=quantum-computing}

It is hard to beat the lists present at: https://quantumcomputingreport.com (closed source unfortunately, no GitHub) in particular:
* https://quantumcomputingreport.com/scorecards/qubit-count/ lists what are the latest qbit counts and technologies that each player is using
* https://quantumcomputingreport.com/players/public-companies/ summarizes what each player has been doing in a few paragraphs

Also of interest: https://quantumzeitgeist.com/interactive-map-of-quantum-computing-companies-from-around-the-globe/

= Organization developing quantum hardware
{parent=quantum-computing-player}

= Organizations developing quantum hardware
{synonym}

= Quantum hardware company
{parent=organization-developing-quantum-hardware}

= D-Wave Systems
{c}
{parent=quantum-hardware-company}
{wiki}

Vaporware?

= PsiQuantum
{c}
{parent=quantum-hardware-company}

CEO: Jeremy O'Brien https://www.linkedin.com/in/jeremy-o-brien-39482631

Raised 215M in 2020: https://www.bloomberg.com/news/articles/2020-04-06/quantum-computing-startup-raises-215-million-for-faster-device

Good talk by CEO before starting the company which gives insight on what they are very likely doing: \x[video-jeremy-o-brien-quantum-technologies-by-googletechtalks-2014]

They are very secretive as any for profit, but we know that they want to reuse classical \x[semiconductor-physical-implementation][semiconductor fabrication technologies].

\x[ciro-santilli] heard a story that O'Brien had competed for government funding in the UK, he was at \x[university-of-bristol], but someone from \x[university-of-oxford] got it instead (can't beat their government ties), and the Oxford people created their own company, maybe it was \x[oxford-quantum-circuits].

So he went to the \x[us] and raised N times more from the \x[american] \x[military-industrial-complex].

= Oxford Quantum Circuits
{c}
{parent=quantum-hardware-company}

= Xanadu
{c}
{disambiguate=quantum computing company}
{parent=quantum-hardware-company}

https://www.youtube.com/watch?v=v7iAqcFCTQQ shows their base technology:
* \x[laser] beam comes in
* input set via of \x[optical-ring-resonator]{p} that form a \x[squeezed-state-of-light]. Does not seem to rely on \x[single-photon-production-and-detection-experiments]?

= Organization developing quantum software
{parent=quantum-computing-player}

= Organizations developing quantum software
{synonym}

= Cambridge Quantum Computing
{c}
{parent=organization-developing-quantum-software}
{wiki}

In 2015, they got a 50 million investment from Grupo Arcano, led by Alberto Chang-Rajii, who is a really shady character who fled from justice for 2 years:
* http://web.archive.org/web/20160320064944/http://www.cambridgequantum.com/index.php?page=team Alberto on the board
* https://theshiftnews.com/2018/10/25/wanted-chilean-businessman-in-hiding-in-malta-for-two-years/
* https://www.techbritannia.co.uk/2015/09/cambridge-quantum-computing-receives-50m-funding-from-grupo-arcano/

= Quantum computer physical implementations
{parent=quantum-computing}

Lists of the most promising implementations:
* https://en.wikipedia.org/wiki/Quantum_computing#Physical_realizations
* https://quantumcomputingreport.com/scorecards/qubit-count/[], see also: \x[quantum-computing-player]{full}.

As of 2020, the hottest by far are:
* \x[superconducting-quantum-computer]
* \x[trapped-ion-quantum-computer]
* \x[photonic-quantum-computer]

= Quantum computers as experiments that are hard to predict outcomes
{parent=quantum-computer-physical-implementations}

One possibly interesting and possibly obvious point of view, is that a quantum computer is an experimental device that executes a quantum probabilistic experiment for which the probabilities cannot be calculated theoretically efficiently by a \x[nuclear-weapon].

This is how quantum computing was originally theorized by the likes of \x[richard-feynman]: they noticed that "Hey, here's a well formulated \x[quantum-mechanics] problem, which I know the algorithm to solve (calculate the probability of outcomes), but it would take exponential time on the problem size".

The converse is then of course that if you were able to encode useful problems in such an experiment, then you have a computer that allows for exponential speedups.

This can be seen very directly by studying one specific quantum computer implementation. E.g. if you take the simplest to understand one, \x[photonic-quantum-computer], you can make systems for which you need exponential time to calculate the probabilities that photons will exit through certain holes and not others.

The obvious aspect of this idea is by coming from \x[quantum-logic-gates-are-needed-because-you-can-t-compute-the-matrix-explicitly-as-it-grows-exponentially]: knowing the full explicit matrix is impossible in practice, and knowing the matrix is equivalent to knowing the probabilities of every outcome.

= Superconducting quantum computer
{parent=quantum-computer-physical-implementations}
{wiki}

Based on the \x[josephson-effect]. Yet another application of that phenomenal idea!

Philosophically, this approach is promising because superconductivity is a https://en.wikipedia.org/wiki/Macroscopic_quantum_phenomena[macroscopic quantum phenomena] of \x[bose-einstein-condensate][Bose Einstein condensation], and so as a macroscopic phenomena, it is easier to control and observe.

It is fun to see that the representation of information in the QC basically uses an https://en.wikipedia.org/wiki/LC_circuit[LC circuit], which is a very classical resonator circuit.

As mentioned at https://en.wikipedia.org/wiki/Superconducting_quantum_computing#Qubit_archetypes[] there are actually a few different types of superconducting qubits:
* flux
* charge
* phase

and hybridizations of those such as:
* \x[transmon]

Input:
* microwave radiation to excite circuit, or do nothing and wait for it to fall to 0 spontaneously
* interaction: TODO
* output: TODO

\Video[http://youtube.com/watch?v=t5nxusm_Umk]
{title=Quantum Computing with Superconducting Qubits by Alexandre Blais (2012)}
{description=https://youtu.be/t5nxusm_Umk?t=784[784s] explains why non-linearity is needed: otherwise the input energy would just go to higher and higher levels.}

\Video[http://youtube.com/watch?v=Kz6mhh1A_mU]
{title=Quantum Transport, Lecture 16: Superconducting qubits by Sergey Frolov (2013)}
{description=https://youtu.be/Kz6mhh1A_mU?t=1171[1171s] describes several possible realizations: charge, flux, charge/flux and phase.}

= Transmon
{parent=superconducting-quantum-computer}
{wiki}

Used in: https://en.wikipedia.org/wiki/Sycamore_processor

\Video[http://youtube.com/watch?v=VA2HEUmkrKo]
{title=Control of transmon qubits using a cryogenic \x[cmos] integrated circuit (QuantumCasts) by (\x[google]) (2020)}

= Trapped ion quantum computer
{parent=quantum-computer-physical-implementations}
{wiki}

TODO understand.

= Photonic quantum computer
{parent=quantum-computer-physical-implementations}

* https://en.wikipedia.org/wiki/Linear_optical_quantum_computing
* https://en.wikipedia.org/wiki/KLM_protocol

Uses \x[photon]{p}!

The key experiment/phenomena that sets the basis for photonic quantum computing is the \x[two-photon-interference-experiment].

The physical representation of the information encoding is very easy to understand:
* input: we choose to put or not photons into certain wires or no
* interaction: two wires pass very nearby at some point, and photons travelling on either of them can jump to the other one and interact with the other photons
* output: the probabilities that photos photons will go out through one wire or another

\Video[http://youtube.com/watch?v=7wCBkAQYBZA]
{title=Jeremy O'Brien: "Quantum Technologies" by GoogleTechTalks (2014)}
{description=This is a good introduction to a \x[photonic-quantum-computer]. Highly recommended.
* https://youtube.com/watch?v=7wCBkAQYBZA&t=1285 shows an experimental curve for a \x[two-photon-interference-experiment] by Hong, Ou, Mandel (1987)
* https://youtube.com/watch?v=7wCBkAQYBZA&t=1440 shows a KLM CNOT gate
* https://youtube.com/watch?v=7wCBkAQYBZA&t=2831 discusses the \x[quantum-error-correction] scheme for photonic QC based on the idea of the "Raussendorf unit cell"
}

= Photonic quantum computer companies
{parent=photonic-quantum-computer}

* \x[psiquantum]{child}
* \x[xanadu-quantum-computing-company]{child}

= Timeline of quantum computing
{parent=quantum-computing}
{wiki}

= Superconducting quantum computing
{parent=quantum-computing}
{wiki}

Dominant 2019 method.

= Quantum computer simulator
{parent=quantum-computing}

Other good lists:
* https://quantumcomputingreport.com/resources/tools/ is hard to beat as usual.
* https://www.quantiki.org/wiki/list-qc-simulators

* \x[javascript]
  * https://algassert.com/quirk demo: https://github.com/Strilanc/Quirk drag-and-drop, by a 2019-quantum-computing-\x[googler], impressive. You can create gates. State store in URL.
  * https://github.com/stewdio/q.js/ demo: https://quantumjavascript.app/

= Qiskit
{c}
{parent=quantum-computer-simulator}
{wiki}

Python library, claims multiple backends, including simulation and real \x[ibm] quantum hardware.

= Classical computer
{parent=quantum-computing}

In the context of \x[quantum-computing] of the 2020's, a "classical computer" is a \x[computer] that is not "quantum", i.e., the then dominating \x[cmos] computers.

= ZX-calculus
{parent=quantum-computing}
{wiki}

As https://en.wikipedia.org/w/index.php?title=ZX-calculus&oldid=1071329204#Diagram_rewriting tries to explain \x[ourbigbook-com/wikipedia][but fails to deliver as usual] consider the \x[ghz-state] represented as a quantum circuit.

How can we easily prove that that quantum circuit equals the state:
$$
\frac{|000> + |111>}{\sqrt{2}}
$$
?

The naive way would be to just do the matrix multiplication as explained at \x[quantum-computing-is-just-matrix-multiplication]{full}.

However, ZX-calculus provides a simpler way.

And even more importantly, sometimes it is the only way, because in a real circuit, we would not be able to do the matrix multiplication 

What we do in ZX-calculus is we first transform the original quantum circuit into a ZX graph.

This is always possible, because we can describe how to do the conversion simply for any of the \x[clifford-plus-t] gates, which is a set of \x[universal-quantum-gates].

Then, after we do this transformation, we can start applying further transformations that simplify the circuit.

It has already been proven that there is no efficient algorithm for this (TODO source, someone said P-sharp complete best case)

But it has been proven in 2017 that any possible equivalence between quantum circuits can be reached by modifying ZX-calculus circuits.

There are only 7 transformation rules that we need, and all others can be derived from those, universality.

So, we can apply those rules to do https://en.wikipedia.org/w/index.php?title=ZX-calculus&oldid=1071329204#Diagram_rewriting[the transformation shown in Wikipedia]:

\Image[https://upload.wikimedia.org/wikipedia/commons/0/05/GHZ_circuit_as_ZX-diagram.svg]
{height=500}

and one of those rules finally tells us that that last graph means our desired state:
$$
\frac{|000> + |111>}{\sqrt{2}}
$$
because it is a Z spider with $m = 3$ and $n = 1$.

= Quantum logic gate
{parent=quantum-computing}
{wiki}

At \x[quantum-computing-is-just-matrix-multiplication]{full} we saw that making a quantum circuit actually comes down to designing one big \x[unitary-matrix].

We have to say though that that was a bit of a lie.

Quantum programmers normally don't just produce those big matrices manually from scratch.

Instead, they use \x[/quantum-logic-gate]{p}.

The following are the main reasons for that:
* \x[quantum-logic-gates-are-needed-because-you-can-t-compute-the-matrix-explicitly-as-it-grows-exponentially]{full}
* \x[quantum-logic-gates-are-needed-for-physical-implementation]{full}

= Quantum logic gates are needed because you can't compute the matrix explicitly as it grows exponentially
{parent=quantum-logic-gate}

One key insight, is that the matrix of a non-trivial quantum circuit is going to be huge, and won't fit into any amount classical memory that can be present in this universe.

This is because the matrix is exponential in the number qubits, and $2^{100}$ is more than the number of atoms in the universe!

Therefore, off the bat we know that we cannot possibly describe those matrices in an explicit form, but rather must use some kind of shorthand.

But it gets worse.

Even if we had enough memory, the act of explicitly computing the matrix is not generally possible.

This is because knowing the matrix, basically means knowing the probability result for all possible $2^{N}$ outputs for each of the $2^{N}$ possible inputs.

But if we had those probabilities, our algorithmic problem would already be solved in the first place! We would "just" go over each of those output probabilities (OK, there are $2^{N}$ of those, which is also an insurmountable problem in itself), and the largest probability would be the answer.

So if we could calculate those probabilities on a classical machine, we would also be able to simulate the quantum computer on the classical machine, and quantum computing would not be able to give exponential speedups, which we know it does.

To see this, consider that for a given input, say `000` on a 3 qubit machine, the corresponding 8-sized quantum state looks like:
``
000 -> 1000 0000 == (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
``
and therefore when you multiply it by the unitary matrix of the quantum circuit, what you get is the first column of the unitary matrix of the quantum circuit. And `001`, gives the second column and so on.

As a result, to prove that a quantum algorithm is correct, we need to be a bit smarter than "just calculate the full matrix".

Which is why you should now go and read: \x[quantum-algorithm]{full}.

This type of thinking links back to how physical experiments relate to quantum computing: a quantum computer realizes a physical experiment to which we cannot calculate the probabilities of outcomes without exponential time.

So for example in the case of a \x[photonic-quantum-computer], you are not able to calculate from theory the probability that photons will show up on certain wires or not.

= Quantum logic gates are needed for physical implementation
{parent=quantum-logic-gate}

One direct practical reason is that we need to map the matrix to real quantum hardware somehow, and all quantum hardware designs so far and likely in the future are gate-based: you manipulate a small number of qubits at a time (2) and add more and more of such operations.

While there are "quantum compilers" to increase the portability of quantum programs, it is to be expected that programs manually crafted for a specific hardware will be more efficient just like in classic computers.

TODO: is there any clear reason why computers can't beat humans in approximating any unitary matrix with a gate set?

This is analogous to what classic circuit programmers will do, by using smaller \x[logic-gate]{p} to create complex circuits, rather than directly creating one huge \x[truth-table].

The most commonly considered quantum gates take 1, 2, or 3 qubits as input.

The gates themselves are just unitary matrices that operate on the input qubits and produce the same number of output qubits.

For example, the matrix for the quantum CNOT gate, which takes 2 qubits as input is:
``
1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0
``

The final question is then: if I have a 2 qubit gate but an input with more qubits, say 3 qubits, then what does the 2 qubit gate (4x4 matrix) do for the final big 3 qubit matrix (8x8)? In order words, how do we scale quantum gates up to match the total number of qubits?

The intuitive answer is simple: we "just" extend the small matrix with a larger identity matrix so that the sum of the probabilities third bit is unaffected.

More precisely, we likely have to extend the matrix in a way such that the https://cs.stackexchange.com/questions/71462/how-are-partial-measurements-performed-on-a-n-qubit-quantum-circuit[partial measurement] of the original small gate qubits leaves all other qubits unaffected.

For example, if the circuit were made up of a CNOT gate operating on the first and second qubits as in:
``
0 ----+----- 0
      |
1 ---CNOT--- 1

2 ---------- 2
``

then we would just extend the 2x2 CNOT gate to:

TODO lazy to properly learn right now. Apparently you have to use the https://en.wikipedia.org/wiki/Kronecker_product[Kronecker product] by the identity matrix. Also, \x[zx-calculus] appears to provide a powerful alternative method in some/all cases.

Bibliography:
* https://quantumcomputing.stackexchange.com/questions/2299/how-to-interpret-a-quantum-circuit-as-a-matrix

= Quantum circuits vs classical circuits
{parent=quantum-logic-gate}

Just like a classic \x[software-engineer][programmer] does not need to understand the intricacies of how transistors are implemented and CMOS semiconductors, the quantum programmer does not understand physical intricacies of the underlying \x[quantum-computer-physical-implementations][physical implementation].

The main difference to keep in mind is that quantum computers cannot https://en.wikipedia.org/wiki/Observer_effect_(physics)[save and observe intermediate quantum state], so programming a quantum computer is basically like programming a combinatorial-like circuit with gates that operate on (qu)bits:
* https://quantumcomputing.stackexchange.com/questions/8441/does-a-quantum-computer-have-a-clock-signal-and-if-yes-how-big-is-it/9383#9383
* https://quantumcomputing.stackexchange.com/questions/8849/quantum-circuits-explain-algorithms-why-didnt-classical-circuits/8869#8869

For this reason programming a quantum computer is much like programming a classical combinatorial circuit as you would do with https://en.wikipedia.org/wiki/SPICE[SPICE], \x[register-transfer-level][verilog-or-vhdl], in which you are basically describing a graph of gates that goes from the input to the output

For this reason, we can use the words "program" and "circuit" interchangeably to refer to a quantum program

Also remember that and there is no no clocks in combinatorial circuits because there are no registers to drive; and so there is no analogue of clock in the quantum system either,

Another consequence of this is that programming quantum computers does not look like programming the more "common" procedural programming languages such as C or Python, since those fundamentally rely on processor register / memory state all the time.

Quantum programmers can however use classic languages to help describe their quantum programs more easily, for example this is what happens in \x[qiskit], where you write a Python program that makes Qiskit library calls that describe the quantum program.

= Universal quantum gates
{parent=quantum-logic-gate}
{wiki=Quantum_logic_gate#Universal_quantum_gates}

Just https://en.wikipedia.org/wiki/Functional_completeness[like as for classic gates], we would like to be able to select \x[quantum-computer-physical-implementations] that can represent one or a few gates that can be used to create \i[any] quantum circuit.

Unfortunately, in the case of quantum circuits this is obviously impossible, since the space of N x N unitary matrices is infinite and continuous.

Therefore, when we say that certain gates form a "set of universal quantum gates", we actually mean that "any unitary matrix can be approximated to arbitrary precision with enough of these gates".

Or if you like fancy Mathy words, you can say that the subgroup of the \x[unitary-group] \x[subgroup-generated-by-a-group][generated by] our basic gate set is a \x[dense-set][dense subset] of the unitary group.

= Clifford gates
{c}
{parent=quantum-logic-gate}
{wiki}

This gate set alone is not a set of \x[universal-quantum-gates].

Notably, circuits containing those gates alone can be fully simulated by classical computers according to the \x[gottesman-knill-theorem], so there's no way they could be universal.

This means that if we add any number of Clifford gates to a quantu circuit, we haven't really increased the complexity of the algorithm, which can be useful as a transformational device.

A popular set of \x[universal-quantum-gates] derived from \x[clifford-gates] is \x[clifford-plus-t].

= Clifford plus T
{c}
{parent=clifford-gates}
{tag=universal-quantum-gates}

Set of \x[quantum-logic-gate] composed of the \x[clifford-gates] plus the \x[toffoli-gate]. It forms a set of \x[universal-quantum-gates].

= Gottesman-Knill theorem
{c}
{parent=clifford-gates}
{wiki}

= Toffoli gate
{c}
{parent=quantum-logic-gate}
{wiki}

= Quantum state
{parent=quantum-computing}
{wiki}

= Bell state
{c}
{parent=quantum-state}
{wiki}

= Greenberger-Horne-Zeilinger state
{c}
{parent=quantum-state}
{wiki=Greenberger–Horne–Zeilinger_state}

= GHZ state
{c}
{synonym}

= Quantum supremacy
{parent=quantum-computing}
{title2=2019}
{wiki}

= Quantum advantage
{parent=quantum-supremacy}

Similar to \x[quantum-supremacy], but add the goal that the computation must be useful, i.e. make money or solve some open \x[mathematical] problem, \x[ciro-santilli-s-wife] was quite excited about the possibility of finding some counter examples in \x[number-theory] with quantum computers.

= Software
{parent=computer}
{wiki}

= Cloud computing
{parent=software}
{wiki}

= Platform as a service
{parent=cloud-computing}
{title2=PaaS}
{wiki}

Highly managed, you don't even see the \x[docker-software] images, only some higher level \x[json] configuration file.

These setups are really convenient and cheap, and form a decent way to try out a new website with simple requirements.

= AWS Elastic Beanstalk
{c}
{parent=platform-as-a-service}
{wiki}

= Heroku
{c}
{parent=platform-as-a-service}
{wiki}

This feels good.

Deployment:
``
git push heroku HEAD:master
``

View \x[stdout] logs:
``
heroku logs --tail
``

\x[postgresql] database, it seems to be delegated to \x[aws]. How to browse database: https://stackoverflow.com/questions/20410873/how-can-i-browse-my-heroku-database
``
heroku pg:psql
``

Drop and recreate database:
``
heroku pg:reset --confirm <app-name>
``
All tables are destroyed.

Restart app:
``
heroku restart
``

= Send free emails from Heroku
{parent=heroku}

Arghh, why so hard... tested 2021:
* Mailgun: the Heroku add-on creates a free plan. This is smaller than the flex plan and does not allow custom domains, and is not available when signing up on mailgun.com directly: https://help.mailgun.com/hc/en-us/articles/203068914-What-Are-the-Differences-Between-the-Free-and-Flex-Plans- And without custom domains you cannot send emails to anyone, only to people in the 5 manually whitelisted list, thus making this worthless. Also, gmail is not able to verify the DNS of the sandbox emails, and they go to spam.

  Mailgun does feel good otherwise if you are willing to pay. Their Heroku integration feels great, exposes everything you need on environment variables straight away.
* CloudMailin: does not feel as well developed as Mailgun. More focus on receiving. Tried adding TXT xxx._domainkey.ourbigbook.com and CNAME mta.ourbigbook.com entires with custom domain to see if it works, took forever to find that page... https://www.cloudmailin.com/outbound/domains/xxx Domain verification requires a bit of human contact via email.

  They also don't document their Heroku usage well. The envvars generated on Heroku are useless, only to login on their web UI. The send username and password must be obtained on their confusing web ui.
* Sendgrid: OK, this one is the first one I got working on free tier. Saw the email on gmail!!! Just verified automatically after adding like 5 DNS records, but everything just worked. \x[microsoft-outlook] did put it into junk though, but I had a more or less random test message, maybe it was their stupid AI? Yahoo also worked fine. 100 emails a day is not insane, but it is forever, I'm happy with that.

= Compiler
{parent=software}
{wiki}

= Compile
{synonym}

= Compiles
{synonym}

= Compiler toolchain
{parent=compiler}
{wiki}

\x[compiler]{c} + other closely related crap like \x[linker-computing].

= Linker
{disambiguate=computing}
{parent=compiler-toolchain}
{wiki}

Some linker related ansewrs by \x[ciro-santilli]:
* https://stackoverflow.com/questions/3322911/what-do-linkers-do/33690144#33690144[How do linkers and address relocation work?]
* https://stackoverflow.com/questions/29391965/what-is-partial-linking-in-gnu-linker/53959624#53959624[What is incremental linking or partial linking?]
* https://stackoverflow.com/questions/3476093/replacing-ld-with-gold-any-experience/53921263#53921263[GOLD (`-fuse-ld=gold`) linker vs the traditional GNU ld and LLVM ldd]
* https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld/51308031#51308031[What is the -fPIE option for position-independent executables in GCC and ld?]

= Binutils
{c}
{parent=compiler}

= Automatic programming
{parent=compiler}
{wiki}

"automatic programming has always been a euphemism for programming in a higher-level language than was then available to the programmer" sums it up.

The ultimate high level is of course to program with: "computer, make \x[money]", which is the goal of \x[artificial-general-intelligence].

= Automatic code generation
{parent=automatic-programming}

= Code generation
{synonym}

= GNU Compiler Collection
{c}
{parent=compiler}

= gcc
{c}
{synonym}
{title2}

= Reproducible builds
{c}
{parent=compiler}
{wiki}

Reproducible builds allow anyone to verify that a \x[binary-large-object] contains what it claims to contain!

Bibliography:
* https://stackoverflow.com/questions/14653874/how-to-produce-deterministic-binary-output-with-g/31019307#31019307
* https://stackoverflow.com/questions/19511356/how-to-make-android-applications-with-reproducible-builds

= Source-to-source compiler
{parent=compiler}
{wiki}

= Transpiler
{synonym}

= Transpilation
{synonym}

= Transpile
{synonym}

= Transpiles
{synonym}

= Computer-aided design
{parent=software}
{wiki}

= CAD
{c}
{synonym}
{title2}

= Open source CAD software
{parent=computer-aided-design}

= FreeCAD
{c}
{parent=open-source-cad-software}
{wiki}

= Computer graphics
{parent=software}
{wiki}

https://en.wikipedia.org/wiki/List_of_information_graphics_software

= Mathematics illustration software
{parent=computer-graphics}

= Software for drawing geometry diagrams
{title2}
{synonym}

Survey by \x[ciro-santilli]: https://math.stackexchange.com/questions/1985/software-for-drawing-geometry-diagrams/3938216#3938216

Many \x[plotting-software] can be used to create \x[mathematics] illustrations. They just tend to have more data-oriented rather than explanatory-oriented output.

Some notable ones:
* \x[inkscape]{child}

= OpenGL
{c}
{parent=computer-graphics}
{wiki}

\x[ciro-santilli] has some good related articles listed under: \x[articles].

= Freetype GL
{parent=opengl}
{c}

https://github.com/rougier/freetype-gl

Good library to render text in \x[opengl], see also: https://stackoverflow.com/questions/8847899/opengl-how-to-draw-text-using-only-opengl-methods/36065835#36065835

= Khronos Group
{c}
{parent=opengl}
{wiki}

= Khronos
{c}
{synonym}

The fact that they kept the standard \x[open-source] makes them huge heroes, see also: \x[closed-standard].

= opengl-tutorial.org
{parent=opengl}

https://github.com/opengl-tutorials/ogl/

Good modern \x[opengl] tutorial in retained mode with shaders, see also: https://stackoverflow.com/questions/6733934/what-does-immediate-mode-mean-in-opengl/36166310#36166310

= JavaScript graphics library
{parent=computer-graphics}

= Paper.js
{c}
{parent=javascript-graphics-library}

https://github.com/paperjs/paper.js

= Pixi.js
{c}
{parent=javascript-graphics-library}

https://github.com/pixijs/pixi.js

= Two.js
{c}
{parent=javascript-graphics-library}

https://github.com/jonobr1/two.js

Examples at: \a[two-js/].

\x[javascript] library, works both on browser and headless with node.js to SVG.

Feels good. Maybe not ultra featured, and could have more simple examples in docs, but still good.

Vs \x[paper-js] https://github.com/jonobr1/two.js/issues/319

One of the main features of Two.js appears to be the fact that it can natively render to either SVG and canvas, rather than creating SVG through DOM hacks as done by other projects.

= Computer program
{parent=software}
{wiki}

= Program
{synonym}

One specific \x[software] project, typically with a single \x[executable-file-format] entry point.

= Computer security
{parent=software}
{wiki}

As mentioned at \x[computer-security-researcher]{full}, \x[ciro-santilli] really tends to like people from this area.

Also, the type of programming Ciro used to do, \x[systems-programming], is particularly useful to security researchers, e.g. \x[linux-kernel-module-cheat].

The reason he does not go into this is that Ciro would rather fight against the more eternal \x[laws-of-physics] rather than with some typo some dude at \x[apple] did last week and which will be patched in a month.

= Arbitrary code execution
{parent=computer-security}
{title2=ACE}
{wiki}

= Computer security conference
{parent=computer-security}

= DEF CON
{c}
{parent=computer-security-conference}
{title2=1993-}
{wiki}

= Black Hat Briefings
{c}
{parent=def-con}
{title2=1997-}
{wiki}

= BlackHat
{c}
{synonym}

= Computer security researcher
{parent=computer-security}
{wiki}

\x[ciro-santilli] found out that he likes computer security researchers and vice versa.

It's a bit the same reason why he likes \x[physicist]{p}: you can't bullshit with security.

You can't just talk nice and hope for people to belive you.

You can't not try to break things and just \x[security-through-obscurity][keep everyone happy in their false illusion of safety].

You can't do a half job.

If you do any of that, you \i[will] get your ass handed to you in a little gift bag.

All of this is closely linked to \x[ciro-santilli-s-self-perceived-creative-personality] and \x[being-naughty-and-creative-are-correlated].

= Dan Kaminsky
{c}
{parent=computer-security-researcher}
{title2=1979-2021}
{wiki}

A superstar security researcher with some major exploits from in the 2000's.

= Dan Kaminsky approves Linux Kernel Module Cheat
{c}
{parent=dan-kaminsky}

https://twitter.com/dakami/status/1344853681749934080

Oh yeah, that felt good. A few months before he died.

= Len Sassaman
{c}
{parent=computer-security-researcher}
{wiki}

= Data erasure
{parent=computer-security}
{wiki}

= Multi-factor authentication
{parent=computer-security}
{wiki}

= 2FA
{c}
{synonym}
{title2}

= 2FA app
{parent=multi-factor-authentication}

= Google 2FA app token can be updated without checking the old 2FA
{parent=multi-factor-authentication}

Ermm, as of February 2021, I was able to update my 2FA app token with the password alone, it did not ask for the old 2FA.

So what's the fucking point of 2FA then? An attacker with my password would be able to login by doing that!

Is it that Google trusts that particular action because I used the same phone/known IP or something like that?

= OAuth
{c}
{parent=computer-security}
{wiki}

= Password
{parent=computer-security}
{wiki}

= Password manager
{parent=password}
{wiki}

= Plausible deniability
{parent=computer-security}
{wiki}

= Security through obscurity
{parent=computer-security}
{wiki}

https://stackoverflow.com/questions/533965/why-is-security-through-obscurity-a-bad-idea

Do as I say, not as I do: \x[ciro-santilli-s-stack-overflow-suspension-for-vote-fraud-script-2019], https://meta.stackoverflow.com/questions/381577/is-it-ok-to-have-links-on-how-to-create-sock-puppets-and-gain-rep-fraudulently-i/381635#381635[].

\Video[https://www.youtube.com/watch?v=IH0GXWQDk0Q]
{title=LockPickingLawyer SAINTCON keynote (2021)}
{description=SAINTCON is "Utah's Premiere Security Conference".
* https://youtu.be/IH0GXWQDk0Q?t=900 mentions that https://en.wikipedia.org/wiki/Alfred_Charles_Hobbs[Alfred Charles Hobbs] commented in 1853:
  \Q[Rogues are very keen in their profession, and know already much more than we can teach them]
}

= Kerckhoffs's principle
{c}
{parent=security-through-obscurity}
{wiki}

Basically the opposite of \x[security-through-obscurity], though slightly more focused on \x[cryptography].

= Malware
{parent=computer-security}
{wiki}

= Ransomware
{parent=computer-security}
{wiki}

= Data breach
{parent=computer-security}
{wiki}

= WikiLeaks
{c}
{parent=data-breach}
{tag=wiki}
{wiki}

= List of data breaches
{parent=data-breach}

= United States diplomatic cables leak
{c}
{parent=list-of-data-breaches}
{title2=2010}
{wiki}

= Cablegate
{c}
{synonym}

= Computer user-interface
{parent=software}

= Application programming interface
{parent=computer-user-interface}
{wiki}

= API
{c}
{synonym}
{title2}

= REST API
{c}
{parent=application-programming-interface}
{wiki}

= GraphQL
{c}
{parent=application-programming-interface}
{wiki}

This is really good.

It allows the client to prepare a single request that gets all the data it wants to fill up a given webpage, rather than doing several separate requests.

So it only gets exactly what it needs, and in a single request.

Very sweet. This is the future of the web.

= Command-line interface
{parent=computer-user-interface}
{title2=CLI}
{wiki}

= Desktop environment
{parent=command-line-interface}
{wiki}

\x[tmux] for newbs.

= Graphical user interface
{parent=computer-user-interface}
{wiki}

= GUI
{c}
{synonym}
{title2}

= Splash screen
{parent=graphical-user-interface}
{wiki}

= Qt
{c}
{parent=graphical-user-interface}
{disambiguate=software}
{wiki}

= Data compression
{parent=software}
{wiki}

= Lossless compression
{parent=data-compression}
{wiki}

= Database
{parent=software}
{wiki}

= ACID
{c}
{disambiguate=database}
{parent=database}
{wiki}

= Atomicity
{disambiguate=database systems}
{parent=acid-database}

This means that e.g. if you do an `UPDATE` query on multiple rows, and power goes out half way, either all update, or none update.

This is different from \x[isolation-database-systems], which considers instead what can or cannot happen when multiple queries are running in parallel.

= Isolation
{disambiguate=database systems}
{parent=acid-database}

Determines what can or cannot happen when multiple queries are running in parallel.

See \x[sql-transaction-isolation-level]{full} for the most common context under which this is discussed: \x[sql].

= Database management system
{parent=database}
{wiki}

= DBMS
{c}
{synonym}

A \x[software] that implements some database system, e.g. \x[postgresql] or \x[mysql] are two (widely extended) \x[sql] implementations.

= NoSQL
{c}
{parent=database}
{wiki}

= MongoDB
{c}
{parent=database}
{wiki}

List databases:
``
echo 'show dbs' | mongo
``

Delete database:
``
use mydb
db.dropDatabase()
``
or:
``
echo 'db.dropDatabase()' | mongo mydb
``

View collections within a database:
``
echo 'db.getCollectionNames()' | mongo mydb
``

Show all data from one of the collections: https://stackoverflow.com/questions/24985684/mongodb-show-all-contents-from-all-collections
``
echo 'db.collectionName.find()' | mongo mydb
``

= Install MongoDB on Ubuntu
{parent=mongodb}

Tested as of Ubuntu 20.04, there is no Mongo package available by default due to their change to \x[server-side-public-license], which Debian opposed. Therefore, you have to add their custom PPA as mentioned at: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

= Object-relational mapping
{parent=database}
{wiki=Object–relational_mapping}

= ORM
{c}
{synonym}
{title2}

Per language:
* \x[node-js-object-relational-mapping-library]

= How to decide if an ORM is good?
{parent=object-relational-mapping}

How to decide if an ORM is decent? Just try to replicate every \x[sql] query from \a[nodejs/sequelize/raw/many_to_many.js] on \x[postgresql] and \x[sqlite].

There is only a very finite number of possible reasonable queries on a two table many to many relationship with a join table. A decent ORM \i[has] to be able to do them all.

If it can do all those queries, then the ORM can actually do a good subset of SQL and is decent. If not, it can't, and this will make you suffer. E.g. \x[sequelize] v5 is such an ORM that makes you suffer.

The next thing to check are transactions.

Basically, all of those come up if you try to implement a blog \x[hello-world] world such as \x[gothinkster-realworld] \i[correctly], i.e. without unnecessary inefficiencies due to your ORM on top of underlying SQL, and dealing with concurrency.

= Relational database
{parent=database}
{wiki}

= Relational database management system
{parent=relational-database}
{tag=database-management-system}

= RDBMS
{c}
{synonym}
{title2}

= SQL
{c}
{parent=relational-database-management-system}
{wiki}

= SQL example
{c}
{parent=sql}

We have some runnable \x[sql] examples with \x[assertion-software-development]{p} under the `sequelize/raw` directory.

These examples are written in the \x[sequelize] library using raw queries.

Sequelize is used minimally, just to feed raw queries in transparently to any underlying database, and get minimally parsed results out for us, which we then assert with standard \x[javascript]. The queries themselves are all written by hand.

By default the examples run on \x[sqlite]. Just like the examples from \x[sequelize-example], you can set the database at runtime as:
* `./index.js` or `./index.js l`: \x[sqlite]
* `./index.js p`: \x[postgresql]. You must manually create a database called `tmp` and ensure that peer authentication works for it

Here we list only examples which we believe are standard SQL, and should therefore work across different SQL implementations:
* \a[nodejs/sequelize/raw/index.js]: basic hello world to demonstrate the setup and very simple functionality
* \a[nodejs/sequelize/raw/many_to_many.js]: illustrates \x[many-to-many-relation]{p}:
  * \x[join-sql]
  * \x[group-by-sql]
  * \a[nodejs/sequelize/raw/group_by_extra_column.js]: let's see if it blows up or not on different DB systems, \x[sqlite3-node-js-package] allows it:
    * https://github.com/sequelize/sequelize/issues/5481#issuecomment-964387232
    * https://dba.stackexchange.com/questions/141594/how-select-column-does-not-list-in-group-by-clause/141600 says that it was allowed in \x[sql-1999] when there are no ambiguities due to constraints, e.g. when grouping by unique columns
    * https://github.com/postgres/postgres/blob/REL_13_5/src/test/regress/sql/functional_deps.sql#L27 shows that \x[postgresql] wants it to work for `UNIQUE NOT NULL`, but they just haven't implemented it as of 13.5, where it only works if you group by `PRIMARY KEY`
    * https://dba.stackexchange.com/questions/158015/why-can-i-select-all-fields-when-grouping-by-primary-key-but-not-when-grouping-b also says that `UNIQUE NOT NULL` doesn't work. Dan Lenski then points to rationale mailing list thread: 
* \x[sql-transaction] examples:
  * \a[nodejs/sequelize/raw/commit_error.js]: https://stackoverflow.com/questions/27245101/why-should-we-use-rollback-in-sql-explicitly/27245234#27245234 and https://stackoverflow.com/questions/48277519/how-to-use-commit-and-rollback-in-a-postgresql-function/48277708#48277708 suggest that on \x[postgresql], once something fails inside a transaction, all queries in the current transaction are ignored, and `COMMIT` simply does a `ROLLBACK`. Let's check. Yup, true for Postgres, but false for \x[sqlite], SQLite just happily runs anything it can, you really need `ROLLBACK` for it.
  * \x[sql-isolation-level-example]{child}

= SQL aggregate function
{c}
{parent=sql}

= SQL `COUNT` function
{c}
{parent=sql-aggregate-function}

Have a look at some interesting examples under \a[nodejs/sequelize/raw/many_to_many.js].

= SQL transaction
{c}
{parent=sql}

= SQL transaction isolation level
{c}
{parent=sql-transaction}

= SQL isolation level
{synonym}

Each transaction isolation level specifies what can or cannot happen when two queries are being run in parallel, i.e.: the \x[memory-semantics] of the system.

Remember that queries can affects thousands of rows, and database systems like \x[postgresql] can run multiple such queries at the same time.

Good summary on the \x[postgresql] page: https://www.postgresql.org/docs/14/transaction-iso.html

Implementation specifics:
* \x[sqlite-isolation-levels]{child}

= SQL READ UNCOMMITTED isolation level
{c}
{parent=sql-transaction-isolation-level}

= SQL READ COMMITTED isolation level
{c}
{parent=sql-transaction-isolation-level}

Example where this level is sufficient: \x[file/nodejs/sequelize/raw/parallel_update_async.js].

= SQL REPEATABLE READ isolation level
{c}
{parent=sql-transaction-isolation-level}

Vs \x[sql-serializable-isolation-level] on \x[postgresql]: https://dba.stackexchange.com/questions/284744/postgres-repeatable-read-vs-serializable

\x[file/nodejs/sequelize/raw/parallel_create_delete_empty_tag.js] is an example which experimentally seems to be solved by `REAPEATABLE READ`, although we are not sure that this is truly the case and why. What is clear is that that example is not solved by the \x[sql-read-committed-isolation-level].

In \x[postgresql], this is the first isolation level which can lead to \x[postgresql-serialization-failure]{p}, this does not happen to \x[sql-read-committed-isolation-level] in that \x[dbms]. You then have to retry the transaction.

= SQL SERIALIZABLE isolation level
{c}
{parent=sql-transaction-isolation-level}

= SQL isolation level example
{c}
{parent=sql-transaction-isolation-level}

= SQL parallel update example
{c}
{parent=sql-isolation-level-example}

= sequelize/raw/parallel_update_async.js
{id=file/nodejs/sequelize/raw/parallel_update_async.js}
{parent=sql-parallel-update-example}

This section is about: \a[nodejs/sequelize/raw/parallel_update_async.js]

\a[nodejs/sequelize/raw/parallel_update_worker_threads.js] contains a base example that can be used to test what can happen when queries are being run in parallel. But it is broken due to a \x[sqlite3-node-js-package] bug: https://github.com/mapbox/node-sqlite3/issues/1381[]...

\a[nodejs/sequelize/raw/parallel_update_async.js] is an \x[async-javascript] version of it. It should be just parallel enough to allow observing the same effects.

This is an example of a transaction where the \x[sql-read-committed-isolation-level] if sufficient.

These examples run queries of type:
``
UPDATE "MyInt" SET i = i + 1
``

Sample execution:
``
node --unhandled-rejections=strict ./parallel_update_async.js p 10 100
``
which does:
* \x[postgresql], see other databases options at \x[sql-example]
* 10 threads
* 100 increments on each thread

The fear then is that of a classic \x[read-modify-write] failure.

But as https://www.postgresql.org/docs/14/transaction-iso.html page makes very clear, including with an explicit example of type `UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;`, that the default isolation level, \x[sql-read-committed-isolation-level], already prevents any problems with this, as the update always re-reads selected rows in case they were previously modified.
\Q[If the first updater commits, the second updater will ignore the row if the first updater deleted it, otherwise it will attempt to apply its operation to the updated version of the row]

Since in \x[postgresql] "Read uncommitted" appears to be effectively the same as "Read committed", we won't be able to observe any failures on that database system for this example.

\x[file/nodejs/sequelize/raw/parallel_create_delete_empty_tag.js] contains an example where things can actually blow up in read committed.

= nodejs/sequelize/raw/parallel_select_and_update.js
{file}
{parent=sql-parallel-update-example}

This example is similar to \x[file/nodejs/sequelize/raw/parallel_update_async.js], but now we are doing a separate SELECT, later followed by an update:
* `SELECT FROM` to get i
* update on Js code `newI = i + 1`
* `UPDATE SET` the `newI`

Although this specific example is useless in itself, as we could just use `UPDATE "MyInt" SET i = i + 1` as in \x[file/nodejs/sequelize/raw/parallel_update_async.js], which automatically solves any concurrency issue, this kind of code could be required for example if the update was a complex function not suitably implemented in SQL, or if the update depends on some external data source.

Sample execution:
``
node --unhandled-rejections=strict ./parallel_select_and_update.js p 2 10 'READ COMMITTED'
``
which does:
* \x[postgresql], see other databases options at \x[sql-example]
* 2 threads
* 10 increments on each thread

Another one:
``
node --unhandled-rejections=strict ./parallel_select_and_update.js p 2 10 'READ COMMITTED' 'FOR UPDATE'
``
this will run \x[select-for-update] rather than just \x[select-sql]

Observed behaviour under different \x[sql-transaction-isolation-level]{p}:
* `READ COMMITTED`: fails. Nothing in this case prevents:
  * thread 1: SELECT, obtains i = 0
  * thread 2: SELECT, obtains i = 0
  * thread 2: newI = 1
  * thread 2: UPDATE i = 1
  * thread 1: newI = 1
  * thread 1: UPDATE i = 1
* `REPEATABLE READ`: works. the manual mentions that if multiple concurrent updates would happen, only the first commit succeeds, and the following ones fail and rollback and retry, therefore preventing the loss of an update.
* `READ COMMITTED` + `SELECT FOR UPDATE`: works. And does not do rollbacks, which probably makes it faster. With `p 10 100`, `REPEATABLE READ` was about 4.2s and `READ COMMITTED` + `SELECT FOR UPDATE` 3.2s on \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017].

  `SELECT FOR UPDATE` should be enough as mentioned at: https://www.postgresql.org/docs/13/explicit-locking.html#LOCKING-ROWS
  \Q[FOR UPDATE causes the rows retrieved by the SELECT statement to be locked as though for update. This prevents them from being locked, modified or deleted by other transactions until the current transaction ends. That is, other transactions that attempt UPDATE, DELETE, SELECT FOR UPDATE, SELECT FOR NO KEY UPDATE, SELECT FOR SHARE or SELECT FOR KEY SHARE of these rows will be blocked until the current transaction ends; conversely, SELECT FOR UPDATE will wait for a concurrent transaction that has run any of those commands on the same row, and will then lock and return the updated row (or no row, if the row was deleted). Within a REPEATABLE READ or SERIALIZABLE transaction, however, an error will be thrown if a row to be locked has changed since the transaction started. For further discussion see Section 13.4.]

A non-raw version of this example can be seen at: \x[file/nodejs/sequelize/parallel_select_and_update.js].

= nodejs/sequelize/raw/parallel_select_and_update_deterministic.js
{file}
{parent=file/nodejs/sequelize/raw/parallel_select_and_update.js}

This section is about the file: \a[nodejs/sequelize/raw/parallel_select_and_update_deterministic.js]

This example contains a deterministic demo of when \x[postgresql-serialization-failure]{p} may happen.

Tested on \x[postgresql] 13.5.

= nodejs/sequelize/raw/parallel_create_delete_empty_tag.js
{file}
{parent=sql-parallel-update-example}

In this example, posts have tags. When a post is deleted, we check to see if there are now any empty tags, and now we want to delete any empty tags that the post deletion may have created.

If we are creating and deleting posts concurrently, a naive implementation might wrongly delete the tags of a newly created post.

This could be due to a concurrency issue of the following types.

Failure case 1:
* thread 2: delete old post
* thread 2: find all tags with 0 posts. Finds `tag0` from the deleted old post which is now empty.
* thread 1: create new post, which we want to have tag `tag0`
* thread 1: try to create a new tag `tag0`, but don't because it already exists, this is done using \x[sqlite]'s `INSERT OR IGNORE INTO` or \x[postgresql]'s `INSERT ... ON CONFLICT DO NOTHING`
* thread 1: assign `tag0` to the new post by adding an entry to the join table
* thread 2: delete all tags with 0 posts. It still sees from its previous search that `tag0` is empty, and deletes it, which then cascades into the join table
which would result in the new post incorrectly not having the `tag0`.

Failure case 2:
* thread 2: delete old post
* thread 2: find all tags with 0 posts
* thread 1: create new post
* thread 1: try to create a new tag `tag0`, but don't because it already exists
* thread 2: delete all tags with 0 posts. It still sees from its previous search that `tag0` is empty, and deletes it
* thread 1: assign `tag0` to the new post
which leads to a foreign key failure, because the tag does not exist anymore when the assignment happens.

Failure case 3:
* thread 2: delete old post
* thread 1: create new post, which we want to have tag `tag0`
* thread 1: try to create a new tag `tag0`, and succeed because it wasn't present
* thread 2: find all tags with 0 posts, finds the tag that was just created
* thread 2: delete all tags with 0 posts, deleting the new tag
* thread 1: assign `tag0` to the new post
which leads to a foreign key failure, because the tag does not exist anymore when the assignment happens.

Sample executions:
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'READ COMMITTED'`: \x[postgresql], 9 tags, DELETE/CREATE the `tag0` test tag 1000 times, use `READ COMMITTED`

  Execution often fails, although not always. The failure is always:
  ``
  error: insert or update on table "PostTag" violates foreign key constraint "PostTag_tagId_fkey"
  ``
  because the:
  ``
  INSERT INTO "PostTag"
  ``
  tries to insert a tag that was deleted in the other thread, as it didn't have any corresponding posts, so this is the foreign key failure.

  TODO: we've never managed to observe the failure case in which `tag0` is deleted. Is it truly possible? And if not, by which guarantee?
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'READ COMMITTED' 'FOR UPDATE'`: do a `SELECT ... FOR UPDATE` before trying to `INSERT`.

  This is likely correct and the fastest correct method according to our quick benchmarking, about 20% faster than `REPEATABLE READ`.

  We are just now 100% sure it is corret becase we can't find out if the `SELECT` in the `DELETE` subquery could first select some rows, which are then locked by the tag creator, and only then locked by `DELETE` after selection. Or does it re-evaludate the `SELECT` even though it is in a subquery?
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'REPEATABLE READ'`: repeatable read

  We've never observed any failures with this level. This should likely fix the foreign key issue according to the PostgreSQL docs, since:
  * the `DELETE "Post"` commit cannot start to be seen only in the middle of the thread 1 transaction
  * and then if DELETE happened, the thread 1 transaction will detect it, ROLLBACK, and re-run. TODO how does it detect the need rollback? Is it because of the foreign key? It is very hard to be sure about this kind of thing, just can't find the information. Related: \x[postgresql-serialization-failure].
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'SERIALIZABLE'`: serializable
* `node --unhandled-rejections=strict ./parallel_create_delete_empty_tag.js p 9 1000 'NONE'`: magic value, don't use any transaction. Can blow up of course, since even less restrictions than `READ COMMITTED`
All executions use 2 threads.

Some theoretical notes:
* Failure case 3 is averted by a `READ COMMITTED` transaction, because thread 2 won't see the uncommitted tag that thread 1 created, and therefore won't be able to delete it

https://stackoverflow.com/questions/10935850/when-to-use-select-for-update from \x[select-for-update] also talks about a similar example, and has relevant answers.

= SQL keyword
{parent=sql}

= GROUP BY
{c}
{disambiguate=SQL}
{parent=sql-keyword}
{wiki=Group_by_(SQL)}

= JOIN
{c}
{disambiguate=SQL}
{parent=sql-keyword}
{wiki=Join_(SQL)}

= SQL prefix column names with the table they came from
{c}
{parent=join-sql}

It is mind blowing that this is not possible... the only way to avoid ambiguity in JOINs with column name conflicts is to give aliases to each column...

* https://stackoverflow.com/questions/329931/sql-select-join-is-it-possible-to-prefix-all-columns-as-prefix
* https://stackoverflow.com/questions/13153344/in-a-join-how-to-prefix-all-column-names-with-the-table-it-came-from

= SELECT
{c}
{disambiguate=SQL}
{parent=sql-keyword}
{wiki=Select_(SQL)}

= SELECT FOR UPDATE
{c}
{parent=select-sql}

An example where `SELECT FOR UPDATE` is a good solution to an use case can be seen at: \x[file/nodejs/sequelize/raw/parallel_select_and_update.js].

`SELECT FOR UPDATE` vs/together with the \x[sql-transaction-isolation-level] is commented at: https://stackoverflow.com/questions/10935850/when-to-use-select-for-update[].

= SQL standard
{c}
{parent=sql}
{wiki}

A quick look at \x[postgresql]'s compliance notes: https://www.postgresql.org/docs/13/features.html shows the complete utter mess that this standard is. Multiple compliance levels that no one fully implements and optional features everywhere.

= SQL standard version
{c}
{parent=sql-standard}

= SQL:1999
{c}
{parent=sql-standard-version}

= SQL implementation
{c}
{parent=sql}
{wiki}

= MySQL
{c}
{parent=sql-implementation}
{wiki}

Login without password: https://askubuntu.com/questions/915585/how-to-login-mysql-shell-when-mysql-have-no-password
``
sudo mysql
``
works on \x[ubuntu] 20.10.

Run command from CLI https://stackoverflow.com/questions/1602904/how-do-you-run-a-single-query-through-mysql-from-the-command-line
``
sudo mysql -e 'SHOW DATABASES'
``

Create user for further logins without `sudo` https://askubuntu.com/questions/915585/how-to-login-mysql-shell-when-mysql-have-no-password/1325689#1325689[]:
``
sudo mysql -e "CREATE USER $USER"
``

Create test user with password:
``
sudo mysql -e 'CREATE USER user0 IDENTIFIED WITH mysql_native_password BY "a"'
sudo mysql -e 'GRANT ALL PRIVILEGES ON database_name.* TO "user0"'
``
and login as that user:
``
mysql -u user0 -p
``
Login with password given on the command line:
``
mysql -u user0 -pmypassword
``
The `IDENTIFIED WITH mysql_native_password` part is to overcome "Client does not support authentication protocol requested by server" when connecting from \x[node-js].

List users:
``
sudo mysql -e 'SELECT * FROM mysql.user'
``

View permissions for each user on each DB: https://serverfault.com/questions/263868/how-to-know-all-the-users-that-can-access-a-database-mysql
``
sudo mysql -e 'SELECT * FROM mysql.db'
``

List databases:
``
sudo mysql -e 'SHOW DATABASES'
``

Create database:
``
sudo mysql -e 'CREATE DATABASE mydb0'
``

Destroy database:
``
sudo mysql -e 'DROP DATABASE mydb0'
``

Show tables in database:
``
sudo mysql -e 'SHOW TABLES' mydb0
``
or:
``
sudo mysql -e 'SHOW TABLES FROM mydb0'
``

= MariaDB
{c}
{parent=mysql}
{wiki}

Dude's a legend. Sells company for a few million. Then forks the open source project next year. Love it.

= PostgreSQL
{c}
{parent=sql-implementation}
{wiki}

= Postgres
{c}
{title2}
{synonym}

PostgreSQL feels good. Had a look at the source tree, and also felt good. If \x[oracle] is the \x[microsoft] of database, Postgres is the \x[linux], and \x[mysql] (or more precisely \x[mariadb]) is the \x[freebsd] (i.e. the one that got delayed by legal issues). Excepts that their \x[software-license]{p} were accidentally swapped.

The only problem with Postgres is its name. PostgreSQL is so unpronounceable and so untypeable that you should just call it "Postgres" like everyone else.

= PostgreSQL getting started
{c}
{parent=postgresql}

On Ubuntu 20.10 PostgreSQL 12.6, login with `psql` on my default username without \x[sudo] fails with: https://stackoverflow.com/questions/11919391/postgresql-error-fatal-role-username-does-not-exist

This is the one that worked on Ubuntu 21.04: https://stackoverflow.com/questions/11919391/postgresql-error-fatal-role-username-does-not-exist/38444152#38444152
``
sudo -u postgres createuser -s $(whoami)
createdb $(whoami)
``
Explanation:
* `sudo -u postgres` uses the `postgres` user via \x[peer-authentication]
* `-s` in `createuser -s`: make it a superuser
* `createdb`: TODO why do we have to create a table with the same name as the user? Otherwise login fails.

You can now run `psql` without any password. This works without password due to peer authentication, 
``
sudo cat /etc/postgresql/12/main/pg_hba.conf
``
shows that peer authentication is available to all users apparently:
``
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
``

List users:
``
psql -c '\du'
``
output:
``
                                    List of roles
  Role name  |                         Attributes                         | Member of 
-------------+------------------------------------------------------------+-----------
 ciro        | Superuser, Create role, Create DB                          | {}
 owning_user |                                                            | {}
 postgres    | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
``

Delete user later on:
``
psql -c 'DROP USER username;'
``

Create a database:
``
createdb testdb0
``

Help toplevel:
``
help
``

Get help for Postgres commands such as `\h` and so on:
``
\?
``

List supported SQL commands:
``
\h
``

Show syntax for one type of command:
``
\h SELECT
``

List all databases:
``
psql -c '\l'
``
which shows:
``
    Name     |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
-------------+----------+----------+-------------+-------------+-----------------------
 ciro        | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 |
 postgres    | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 |
 template0   | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 | =c/postgres          +
             |          |          |             |             | postgres=CTc/postgres
 template1   | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 | =c/postgres          +
             |          |          |             |             | postgres=CTc/postgres
 testdb0     | postgres | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 |
(6 rows)
``

Delete a database:
``
psql -c 'DROP DATABASE "testdb0";'
``

If you didn't give a database from the command line e.g.:
``
psql
``
you can do that afterwards with:
``
\c testdb0
``

Let's create a table and test that it is working:
``
psql testdb0 -c 'CREATE TABLE table0 (int0 INT, char0 CHAR(16));'
``

List tables, no special tables:
``
psql testdb0 -c '\dt'
``
gives:
``
        List of relations
 Schema |  Name  | Type  | Owner
--------+--------+-------+-------
 public | table0 | table | ciro
(1 row)
``

View table schema: https://stackoverflow.com/questions/109325/postgresql-describe-table
``
psql testdb0 -c '\d+ table0'
``
output:
``
                                      Table "public.table0"
 Column |     Type      | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+---------------+-----------+----------+---------+----------+--------------+-------------
 int0   | integer       |           |          |         | plain    |              | 
 char0  | character(16) |           |          |         | extended |              | 
``

Insert some data into it and get the data out:
``
psql testdb0 -c "INSERT INTO table0 (int0, char0) VALUES (2, 'two'), (3, 'three'), (5, 'five'), (7, 'seven');"
psql testdb0 -c 'SELECT * FROM table0;'
``
output:
``
 int0 |      char0
------+------------------
    2 | two
    3 | three
    5 | five
    7 | seven
(4 rows)
``

Delete the table:
``
psql testdb0 -c 'DROP TABLE table0;'
``

= Create a test user in PostgreSQL
{parent=postgresql}

In order to create a test user with password instead of \x[peer-authentication], let's create test user:
``
createuser -P user0
createdb user0
``
`-P` makes it prompt for the users password.

Alternatively, to create the password non-interactively https://stackoverflow.com/questions/42419559/postgres-createuser-with-password-from-terminal[]:
``
psql -c "create role NewRole with login password 'secret'"
``
Can't find a way using the `createuser` helper.

We can then login with that password with:
``
psql -U user0 -h localhost
``
which asks for the password we've just set, because the `-h` option turns off peer authentication, and turns off password authentication.

The password can be given non-interactively as shown at https://stackoverflow.com/questions/6405127/how-do-i-specify-a-password-to-psql-non-interactively with the `PGPASSWORD` \x[environment-variable]:
``
PGPASSWORD=a psql -U user0 -h localhost
``

Now let's create a test database which `user0` can access with an existing superuser account:
``
createdb user0db0
psql -c 'GRANT ALL PRIVILEGES ON DATABASE user0db0 TO user0'
``

We can check this permission with:
``
psql -c '\l'
``
which now contains:
``
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
 user0db0  | ciro     | UTF8     | en_GB.UTF-8 | en_GB.UTF-8 | =Tc/ciro             +
           |          |          |             |             | ciro=CTc/ciro        +
           |          |          |             |             | user0=CTc/ciro
``
The permission letters are explained at:
* https://www.postgresql.org/docs/13/ddl-priv.html
* https://stackoverflow.com/questions/25691037/postgresql-permissions-explained/25691587

`user0` can now do the usual table operations on that table:
``
PGPASSWORD=a psql -U user0 -h localhost user0db0 -c 'CREATE TABLE table0 (int0 INT, char0 CHAR(16));'
PGPASSWORD=a psql -U user0 -h localhost user0db0 -c "INSERT INTO table0 (int0, char0) VALUES (2, 'two'), (3, 'three'), (5, 'five'), (7, 'seven');"
PGPASSWORD=a psql -U user0 -h localhost user0db0 -c 'SELECT * FROM table0;'
``

= Peer authentication
{parent=postgresql}

https://www.postgresql.org/docs/13/auth-peer.html

Uses the name of the current \x[linux] user to login without a \x[password].

= PostgreSQL logging
{parent=postgresql}

https://stackoverflow.com/questions/722221/how-to-log-postgresql-queries

\x[ubuntu-21-10] has a certain default level of logging by default to:
``
/var/log/postgresql/postgresql-13-main.log
``
but it does not log everything, only/mostly errors it seems.

Setting:
``
log_statement = 'all'
``
under:
``
/etc/postgresql/13/main/postgresql.conf
``
and then restarting the server:
``
sudo service restart postgresql
``
just works.

Realtime monitoring for long queries instead: https://stackoverflow.com/questions/8597516/app-to-monitor-postgresql-queries-in-real-time

= PostgreSQL serialization failure
{parent=postgresql}

When using \x[sql-repeatable-read-isolation-level] and \x[sql-serializable-isolation-level], concurrent transactions may fail with a serialization failure, and then you might need to retry them. You server code or your ORM must always account for that.

A good way to explore when it happens is to use the example

Related questions:
* https://stackoverflow.com/questions/7705273/what-are-the-conditions-for-encountering-a-serialization-failure
* https://stackoverflow.com/questions/59351109/error-could-not-serialize-access-due-to-concurrent-update
* https://stackoverflow.com/questions/50797097/postgres-could-not-serialize-access-due-to-concurrent-update/51932824

= SQLite
{c}
{parent=sql-implementation}
{wiki}

The minimalimsm, serverlessness/lack of temporary caches/lack of permission management, Hipp's religious obsession with efficiency, the use of their own pure Fossil \x[version-control]https://sqlite.org/whynotgit.html{ref}. Wait, scrap that last one. Pure beauty!

Official \x[git] mirror: https://github.com/sqlite/sqlite

Create a table
``
sqlite3 db.sqlite3 "
CREATE TABLE 'IntegerNames' (int0 INT, char0 CHAR(16));
INSERT INTO 'IntegerNames' (int0, char0) VALUES (2, 'two'), (3, 'three'), (5, 'five'), (7, 'seven');
"
``

List tables:
``
sqlite3 db.sqlite3 '.tables'
``
output:
``
IntegerNames
``

Show schema of a table:
``
sqlite3 db.sqlite3 '.schema IntegerNames'
``
outputs the query that would generate that table:
``
CREATE TABLE IF NOT EXISTS 'IntegerNames' (int0 INT, char0 CHAR(16));
``

Show all data in a table:
``
sqlite3 db.sqlite3 'SELECT * FROM IntegerNames'
``
output:
``
2|two
3|three
5|five
7|seven
``

= SQLite isolation levels
{c}
{parent=sqlite}
{wiki}

https://www.sqlite.org/pragma.html#pragma_read_uncommitted mentions:

____
The default isolation level for SQLite is SERIALIZABLE
____

It does not appear possible to achieve the other two levels besides SERIALIZABLE and READ UNCOMMITED

https://www.sqlite.org/isolation.html

= Node.js SQLite bindings
{parent=sqlite}

= `sqlite3` Node.js package
{parent=node-js-sqlite-bindings}

* https://github.com/mapbox/node-sqlite3
* https://www.npmjs.com/package/sqlite3

Includes its own copy of sqlite3, you don't use the system one, which is good to ensure compatibility. The version is shown at: https://github.com/mapbox/node-sqlite3/blob/918052b538b0effe6c4a44c74a16b2749c08a0d2/deps/common-sqlite.gypi#L3 \x[sqlite] source is tracked compressed in-tree: https://github.com/mapbox/node-sqlite3/blob/918052b538b0effe6c4a44c74a16b2749c08a0d2/deps/sqlite-autoconf-3360000.tar.gz horrendous. This explains why it takes forever to clone that repository. People who don't believe in git submodules, there's even an official Git mirror at: https://github.com/sqlite/sqlite

It appears to spawn its own \x[thread]{p} via its \x[c-programming-language] extension (since \x[javascript-is-single-threaded] and and \x[sqlite] is not \x[server]-based), which allows for parallel queries using multiple threads: https://github.com/mapbox/node-sqlite3/blob/v5.0.2/src/threading.h

Hello world example: \a[nodejs/node-sqlite3/index.js].

As of 2021, this had slumped back a bit, as maintainers got tired. Unmerged pull requests started piling more, and \x[better-sqlite3-node-js-package] started pulling ahead a little.
* https://github.com/mapbox/node-sqlite3/issues/1381 `FATAL ERROR: Error::ThrowAsJavaScriptException napi_throw` with \x[node-js-worker-threads] vs \x[better-sqlite3-node-js-package] https://github.com/JoshuaWise/better-sqlite3/issues/237

= `better-sqlite3` Node.js package
{parent=node-js-sqlite-bindings}

As claimed on their README, their operation truly appears to be 10x faster than the node-sqlite package!! It is insane!! How can that other package still exist at all?

The only big problem was the lack of \x[orm], but people are looking into that by adding it to \x[sequelize]:
* https://github.com/JoshuaWise/better-sqlite3/issues/23
* https://github.com/sequelize/sequelize/issues/11400

= Table relationship
{parent=database}
{wiki=Associative_entity}

= One-to-one
{disambiguate=data-model}
{parent=table-relationship}
{wiki}

= One-to-many
{parent=table-relationship}
{wiki=One-to-many_(data_model)}

= Many-to-one
{synonym}
{title2}

= Many-to-many
{parent=table-relationship}
{wiki=Many-to-many_(data_model)}

= Many-to-many relation
{synonym}

= File manager
{parent=software}
{wiki}

\x[ciro-santilli] used to use file managers in the past.

But he finally converted to a shell `cd` aliases that auto-`ls`: https://github.com/cirosantilli/dotfiles/blob/a51bcc324f0cff0eddd4c3bb8654ec223a0adb7b/home/.bashrc#L1058

= Krusader
{parent=file-manager}
{wiki}

The most powerful \x[gui] \x[file-manager] ever?? Infinite configurability??

\x[ciro-santilli] wasted some time on it before he gave up on file managers altogether.

= Ranger
{disambiguate=file manager}
{parent=file-manager}
{wiki}

\x[ciro-santilli] considered it before he stopped using file managers altogether, it is not bad.

= File sharing
{parent=software}
{wiki}

= BitTorrent
{c}
{parent=file-sharing}
{wiki}

= Game engine
{parent=software}
{wiki}

A library to make \x[game]{p}{parent}.

= Cocos2d
{c}
{parent=game-engine}
{wiki}

\x[ciro-santilli] considered this as the basis for \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development], but ultimately decided it was a bit too messy. Nice overall though.

= Urho3D
{c}
{parent=game-engine}
{wiki}

Their project lead as of 2018 was pro-CCP: https://github.com/cirosantilli/china-dictatorship/blob/aa1176c57fc2929465294e520b43b50d44e202ba/communities-that-censor-politics.md

= Geographic information system
{parent=software}
{title2=GIS}
{wiki}

= Geographic information system file format
{parent=geographic-information-system}

= Keyhole Markup Language
{c}
{parent=geographic-information-system-file-format}
{title2=KML}
{wiki}

Originally by \x[keyhole-inc], which the nbecame \x[google-maps], but the format seems standardized and has non-Google support, so should be OK.

= List of geographic information systems
{parent=geographic-information-system}

= Google Maps
{c}
{parent=list-of-geographic-information-systems}
{wiki}

Owned/developed by \x[google]{parent} as of 2020.

Early on jumpstarted from several acquisitions.

= Keyhole Inc.
{c}
{parent=google-maps}

= Google Street View
{c}
{parent=google-maps}
{wiki}

Street View's go into the past mode is the dream of every archaeologist. Ciro can only dream of a magic street view that allows going back to earlier centuries and beyond... isn't it amazing to think that people in the future will have that ability to time travel back to around the year 2006? Ciro wonders how long \x[google] will be able to keep storing data like that.

Thanks, \x[keyhole-inc][CIA].

= OpenStreetMaps
{c}
{parent=list-of-geographic-information-systems}
{title2=OSM}
{wiki}

It is rare to find a project with such a ridiculously high importance over funding ratio.

E.g., as of 2020, their help login https://help.openstreetmap.org/ shows MyOpenID as an option, which was discontinued in 2014, and not \x[google] \x[oauth].

They do still seem to have a bit more activity than https://gis.stackexchange.com/questions/tagged/openstreetmap on \x[stack-exchange].

Complaints:
* \x[transliteration]{c} is off by default!...... https://wiki.openstreetmap.org/wiki/Translation You just have to learn all scripts ever. Good luck with the \x[chinese-character]{p}. Genius.
* In order to see information about places, you have to click "Query features" on the toolbar first. Who made such a terrible UI? Direct click is a much, and so easy to implement?
* It is impossible to discern different types of paths and other walking path symbols, the symbols are too small, and just scale down to a line no matter how much you zoom in.
* Power lines are way too visible. While that is kind of cool, it is useless and distracting to most people most of the time.
* No street-level imagery...: https://help.openstreetmap.org/questions/1178/adding-photos
* No aerial imagery: https://help.openstreetmap.org/questions/6849/how-can-i-see-the-aerial-imagery-without-editing-the-map But that is kind of understandable, as that one might not be free.
* No restaurant ratings: https://help.openstreetmap.org/questions/64852/ratings-for-pois because it is "Subjective". OMG those people, such a huge value powerhouse wasted.

  Not just for restaurants, but for other things as well, e.g. sharing of good cycle circuits.

All of this is a shame, because they do have some incredible data that you cannot find easily on other maps because people just edited it up.

= Ordnance Survey
{c}
{parent=list-of-geographic-information-systems}
{wiki}

Has some of the best map data available for the \x[united-kingdom], but their data appears to be proprietary?

= Integrated development environment
{parent=software}
{wiki}

= IDE
{c}
{synonym}
{title2}

IDEs are absolutely essential for developing complex software.

The funny thing is that you don't notice this until someone shows it to you. But once you see it, there is not turning back, just like \x[steve-jobs-customers-don-t-know-what-they-want-quote].

Unfortunately, after the https://movingfulcrum.com/the-fall-of-eclipse/[Fall of Eclipse] (https://web.archive.org/web/20190824081229/https://movingfulcrum.com/the-fall-of-eclipse/[archive]), the IDE landscape in 2019 is horrible and split between:
* highly buggy but still feature rich Eclipse
* many may many other feature lacking options using possibly more trendy and forward lasting implementations like https://en.wikipedia.org/wiki/Electron_(software_framework)[Electron]
* awesome cross-platform proprietary https://en.wikipedia.org/wiki/JetBrains[JetBrains] IDEs
* the God-like Windows-only proprietary language-lacking Visual Studio

Programmers of the world: unite! Focus on one IDE, and make it work for all languages and all build systems. Give it all the features that Eclipse has, but none of the bugginess. Work with top project to make sure the IDE works for all top projects.

Projects of the world: support one IDE, with in-tree configuration. Complex integration is often required between the IDE and the build system, and successful projects must to that once for all developers. Either do this, or watch you complex project wither away.

Build tool maintainers: make it possible for IDEs to support your tool! E.g., implement https://clang.llvm.org/docs/JSONCompilationDatabase.html[JSON Compilation Database] output so that IDEs can read the exact compiler commands from that, in order to automatically determine how files should be parsed! Or better, just use libllvm in your IDE itself as the main parser.

Ciro is evaluating some IDEs at: https://github.com/cirosantilli/ide-test-projects

= Vim
{c}
{parent=integrated-development-environment}
{wiki=Vim_(text_editor)}

Before we get a decent open source \x[integrated-development-environment], what else can you do?

But also perfect for small one-off files when you don't have the patience to setup said \x[ide].

vim's defaults are atrocious for the 21st century! Vundle is reasonable as an ad-hoc package manager, but it can't set fixed versions of packages:
* https://stackoverflow.com/questions/15259868/vundle-plugin-install-concrete-version-of-plugin/67870413#67870413
* https://github.com/VundleVim/Vundle.vim/pull/681

= vader.vim
{parent=integrated-development-environment}

https://github.com/junegunn/vader.vim

Vimscript unit testing!!!

= plasticboy/vim-markdown
{parent=vader-vim}

https://github.com/plasticboy/vim-markdown

\x[ciro-santilli] contributed a bit to this, and was even given push rights, see also: see also: \x[ciro-santilli-s-minor-projects].

= honza/vim-snippets
{parent=vader-vim}

https://github.com/honza/vim-snippets

= Vimium
{parent=vader-vim}

https://vimium.github.io/

Since you can't escape \x[shitty] browser \x[gui]{p} and live in the command line, the next best thing you can do is to bring Vim bindings to your browser :-)

There is one major annoyance: you can't use ESC to leave the address bar focus, but using Tab as a workaround works:
* https://superuser.com/a/1560178/128124

= Memory management
{parent=software}
{wiki}

= Garbage collection
{disambiguate=computer science}
{parent=software}
{wiki}

= Garbage collection
{synonym}

= Messaging software
{parent=software}

= Messaging software that force you to have a mobile phone
{parent=messaging-software}

Chat programs that don't have a proper web-only operation and force you to have a mobile phone, e.g. \x[whatsapp]{child}.

Heck, even \x[signal-software]{child}, which is supposed to be super secure and good for your privacy, forces you to disclose your freaking cell phone to all contacts! https://lifehacker.com/how-to-use-signal-without-revealing-your-private-phone-1818996580

What is my phone breaks? What if I don't want to have a \x[fucking] phone? What if I move countries and have to change the \x[fucking] number? Also evil but less because done by all: chat programs that can't send you an email https://webapps.stackexchange.com/questions/41528/how-can-i-automatically-forward-facebook-messages-to-my-email-or-phone[if you don't see the message in X minutes].

\x[europe][European Union], time to force those evil \x[company]{p} to use support open standards like \x[xmpp]?

The solution to "how to prevent spam" is simple: your ID is a public key that you own the private key for. If you start getting spammed, generate a new public key, and send it to all contacts, and dump the previous ID.

= Messaging software that force you to share your mobile phone with contacts
{parent=messaging-software-that-force-you-to-have-a-mobile-phone}

OK, you have to share your phone with the company to prevent spam, but why do you also have to share your phone with contacts? So you are then forced to give your phone number away on the \x[internet].

= Serverless browser P2P chat
{parent=messaging-software}

* https://stackoverflow.com/questions/2463665/how-create-a-p2p-web-chat-without-any-server

It seems impossible to avoid the signaling server. With signaling server:
* https://github.com/tom-james-watson/p2p.chat
* https://github.com/OTRMan/otr.to-chat
* maybe \x[jitsi]

Games:
* https://github.com/rameshvarun/netplayjs

= Email
{parent=messaging-software}
{wiki}

\x[ciro-santilli]'s email can be found by cloning one of his repositories on \x[github]. It is also given at: \x[how-to-contact-ciro-santilli]{full}.

= Plausible deniability of email password handover
{parent=email}

https://protonmail.uservoice.com/forums/284483-feedback/suggestions/39962275-plausible-deniability

You need a secondary password that when used leads to an empty inbox with a setting set where message are deleted after 2 days.

This way, if the attacker sends a test email, it will still show up, but being empty is also plausible.

Of course, this means that any new emails received will be visible by the attacker, so you have to find a way to inform senders that the account has been compromised.

So you have to find a way to inform senders that the account has been compromised, e.g. a secret pre-agreed canary that must be checked each time as part of the contact protocol.

= Privacy focused email provider
{parent=email}

* https://github.com/cirosantilli/cirosantilli.github.io/issues/66
* https://www.privacytools.io/providers/email/

= ProtonMail
{c}
{parent=privacy-focused-email-provider}
{wiki}

https://www.privacytools.io/providers/email/

https://techcrunch.com/2021/09/06/protonmail-logged-ip-address-of-french-activist-after-order-by-swiss-authorities/ you've fucking got to use \x[tor-browser] with it if you want your IP to remain hidden, learn that...

= List of email providers
{parent=email}

= Gmail
{c}
{parent=list-of-email-providers}
{wiki}

= Dots in Gmail address
{parent=gmail}

Ignored: https://support.google.com/mail/answer/7436150?hl=en-GB

This allows you to create multiple non-anonymous accounts on any website that doesn't account for it, as this is not part of the \x[email] protocols in general.

= Guerrilla Mail
{c}
{parent=list-of-email-providers}
{wiki}

OMG those devs are brutes, it's beautiful.

https://www.guerrillamail.com/

https://github.com/flashmob/go-guerrilla

= Microsoft Outlook
{c}
{parent=list-of-email-providers}
{wiki}

= Instant messaging
{parent=messaging-software}
{wiki}

= Instant messaging vs email
{parent=instant-messaging}
{wiki}

* https://github.com/cirosantilli/cirosantilli.github.io/issues/69
* https://www.quora.com/unanswered/Why-were-protocols-like-IRC-and-XMPP-created-after-email-if-both-can-send-messages

= The perfect privacy messaging software features
{parent=instant-messaging}

Haven't found the one yet:
* \x[open-source-software], doh
* \x[end-to-end-encryption]...
* has browser frontend and \x[android] app
* public URL without sharing your mobile phone: \x[messaging-software-that-force-you-to-have-a-mobile-phone]
* self-destroying messages (turned on by default please)
* user base large enough to give some confidence that it was reviewed for security issues
* easy/built-in setup over \x[tor-anonymity-network]

Optional but really \x[ideal]:
* can delete messages from the device of the person you sent it to, no matter how old
* decentralized, your username is a public key

The state of messaging is ridiculous as of 2020.

= Open instant messaging protocols
{parent=instant-messaging}
{wiki}

\x[internet-relay-chat] vs \x[xmpp]: https://stackoverflow.com/questions/4149380/whats-the-best-open-protocol-for-chat-room-software

= Internet Relay Chat
{c}
{parent=open-instant-messaging-protocols}
{wiki}

= IRC
{c}
{synonym}
{title2}

= Signal protocol
{c}
{parent=open-instant-messaging-protocols}
{wiki}

= XMPP
{c}
{parent=open-instant-messaging-protocols}
{wiki}

= List of instant messaging software
{parent=instant-messaging}

= Bitmessage
{c}
{parent=list-of-instant-messaging-software}
{wiki}

https://github.com/Bitmessage/PyBitmessage

TODO evaluate. No `pip install`???

= Discord
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

You gotta be born after the year 2000 to understand it.

No user URLs? https://support.discord.com/hc/en-us/community/posts/360041519131-UserProfilesLinks

Not possible to anonymously join just one server without creating a new account? https://www.reddit.com/r/discordapp/comments/6gmjl7/changing_nick_before_joining_a_new_server/

No proper threaded discussion without creating new channels?

= Jami
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{title2=Ring}
{wiki}

\x[ciro-santilli] worked on it for a brief time in 2016, when it was still called Ring, before he got fired. :-)

The people were quite nice and the project idea is fine, Ciro hopes they succeed.

\Video[https://www.youtube.com/watch?v=xAyIHhbQt3A]
{title=Ring - Peer to peer network for real time communication - FOSDEM 2016 by \x[ciro-santilli]}

= Jitsi
{c}
{parent=list-of-instant-messaging-software}
{wiki}

No chat only? .... https://community.jitsi.org/t/chat-function-only/79067

As of 2020: \x[end-to-end-encryption] optional and turned off as default, and marked as experimental...

Appears to be based on \x[xmpp]: https://community.jitsi.org/t/jitsi-users-is-jitsi-a-regular-xmpp-server/13211

= Pidgin
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

= Signal
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

Basic must haves:
* \x[end-to-end-encryption]: yes
* \x[open-source-software]: yes

Other cool stuff:
* sealed sender: https://signal.org/blog/sealed-sender/ Nice!

Missing:
* remove the need to share your phone number with contacts: \x[messaging-software-that-force-you-to-share-your-mobile-phone-with-contacts]{parent}. This is a deal breaker for online acquaintances:
  * https://security.stackexchange.com/questions/231637/signal-contact-people-or-have-people-contact-me-without-revealing-phone-numbe/245665#245665
  * https://community.signalusers.org/t/have-option-to-set-up-username/8723
  * https://www.reddit.com/r/signal/comments/8kybil/is_signal_ever_going_to_include_usernames/
  * remove need for phone completely:
    * https://community.signalusers.org/t/a-proposal-for-alternative-primary-identifiers/3023
    * https://community.signalusers.org/t/remove-the-need-for-a-mobile-phone/1543
    * https://community.signalusers.org/t/registering-with-an-email-address/919
    * https://community.signalusers.org/t/username-id-registration-without-phone-number/9800
    * https://community.signalusers.org/t/more-reasons-why-signal-should-ditch-phone-numbers-the-guardian-confirmed-the-identity-of-those-in-the-chat-by-cross-checking-phone-numbers-attached-to-the-signal-accounts/7311
    * https://community.signalusers.org/t/why-is-phone-and-phone-number-required/1425 https://community.signalusers.org/t/what-is-the-technical-reason-that-i-cannot-use-signal-without-a-phone-number-and-that-i-cannot-use-signal-desktop-without-signal-on-my-phone/11400
* \x[tor-anonymity-network] routing by default:
  * https://community.signalusers.org/t/use-the-built-in-tor-project-in-the-program-source/26291
* option to enable disappearing messages by default:
  * https://community.signalusers.org/t/ability-to-set-your-own-default-timer-for-disappearing-messages-on-all-new-conversations/5144 "Ability to set your own default timer for disappearing messages on all new conversations"
  * https://www.reddit.com/r/signal/comments/jhknuz/default_disappearing_messages_timeout_for_new/
* messages are not encrypted on desktop via the \x[password-manager]!?!?
  * https://github.com/signalapp/Signal-Desktop/issues/549
  * https://github.com/signalapp/Signal-Desktop/issues/1318
  * https://www.reddit.com/r/privacy/comments/fwux29/signal_desktop_stores_the_encryption_key_in_a/
  * https://whispersystems.discoursehosting.net/t/improve-security-of-desktop-apps-encryption-of-data-at-rest/26494
  * https://community.signalusers.org/t/why-cant-we-lock-the-desktop-app-with-a-password/1383
* web client:
  * https://security.stackexchange.com/questions/238011/why-is-there-no-web-client-for-signal
* secure anti-forensic \x[data-erasure] to attain \x[plausible-deniability] of disappearing messages:
  * https://www.reddit.com/r/signal/comments/ki5mbn/how_well_does_signal_delete_old_messages/
  * https://community.signalusers.org/t/is-deleting-secure-in-its-current-form/908
  * https://community.signalusers.org/t/traces-of-messages-that-have-disappeared/5049

TODO what's the fucking official discussion/feature request forum?
* https://community.signalusers.org appears to be the de-facto non-official one.
* https://github.com/signalapp/Signal-Android/issues/5372
* https://whispersystems.discoursehosting.net
* https://github.com/signalapp/Signal-Desktop/issues/1318 closes and points to discoursehosting
* https://github.com/signalapp/Signal-Desktop/issues/549
* https://www.reddit.com/r/signal/comments/lipo6z/community_signal_forum_vs_reddit/ gives some good history, says they pay for https://community.signalusers.org/ and have admin powers there.

Feature overview:
* https://security.stackexchange.com/questions/139493/is-signal-still-more-secure-than-whatsapp

= Telegram
{c}
{disambiguate=software}
{parent=list-of-instant-messaging-software}
{wiki}

Not \x[end-to-end-encrypted] by default, WTF... you have to create "secret chats" for that:
* https://www.quora.com/Why-does-Telegram-not-use-end-to-end-encryption-by-default-so-that-there-are-not-keys-to-give-to-the-government

You can't sync secret chats across devices, \x[signal-software] handles that perfectly by sending E2EE messages across devices:
* https://www.reddit.com/r/Telegram/comments/7hx8vd/when_will_telegram_get_secret_chats_crossdevices/
This is a deal breaker because Ciro needs to type with his keyboard.

Desktop does not have secret chats: https://www.reddit.com/r/Telegram/comments/9beku1/telegram_desktop_secret_chat/ This is likey because it does not store chats locally, it just loads from \x[server] every time as of 2019: https://www.reddit.com/r/Telegram/comments/baqs63/where_are_chats_stored_on_telegram_desktop/ just like the web version. So it cannot have a private key.

Allows you to register a public username and not have to share phone number with contacts: https://telegram.org/blog/usernames-and-secret-chats-v2.

Has \x[reproducible-builds] on Android and iOS: https://core.telegram.org/reproducible-builds 

Self deleting messages added to secret chats in Q1 2021: https://telegram.org/blog/autodelete-inv2

Can delete messages from the device of the person you sent it to, no matter how old.

= Skype
{c}
{parent=list-of-instant-messaging-software}
{wiki}

= WhatsApp
{c}
{parent=list-of-instant-messaging-software}
{wiki}

Claimed to remove metadata from servers unless \x[legally] obliged to collect it: https://www.quora.com/Does-WhatsApp-store-messages-on-its-servers-or-is-all-deleted-after-delivery-and-only-stored-on-recipients-phones/answer/Ciro-Santilli

They've had a few breaches: https://www.whatsapp.com/security/advisories/

They claim to delete metadata: https://www.quora.com/Does-WhatsApp-store-messages-on-its-servers-or-is-all-deleted-after-delivery-and-only-stored-on-recipients-phones/answer/Ciro-Santilli

\Video[https://www.youtube.com/watch?v=X4YsJt4rIOI]
{title=WhatsApp founder Jan Koum talks about their Journey by Roots (2017)}
{description=Good talk, explains how everything happened in the perfect location at the perfect time: unemployed people who knew how to code, bought an iPhone, the next big platform, at its very beginning, they had just release the required push notifications \x[api], and he travelled a lot and knew how much SMS sucked, especially international.}

= Multimedia software
{parent=software}

= FFmpeg
{c}
{parent=multimedia-software}
{wiki}

FFmpeg is the \x[assembler-computing] of audio and video.

As a result, \x[ciro-santilli] who likes "lower level stuff", has had many many hours if image manipulation fun with this software, see e.g.:
* the "Media" section of \x[articles].
* \x[image-ciro-knows-how-to-convert-videos-to-gifs]

As older Ciro grows, the more he notices that FFmpeg can do basically any lower level audio video task. It is just an amazing piece of software, the immediate go-to for any low level operation.

FFmpeg was created by \x[fabrice-bellard], which Ciro deeply respects.

Resize a video: https://superuser.com/questions/624563/how-to-resize-a-video-to-make-it-smaller-with-ffmpeg[]:
``
ffmpeg -i input.avi -filter:v scale=720:-1 -c:a copy output.mkv
``
Unlike every other convention under the sun, the height in `scale` is the first number.

= FFmpeg is the backend of YouTube
{c}
{parent=ffmpeg}

FFmpeg is likely the backend of \x[youtube] through \x[reverse-engineering]: https://streaminglearningcenter.com/blogs/youtube-uses-ffmpeg-for-encoding.html (https://web.archive.org/web/20190519135210/https://streaminglearningcenter.com/blogs/youtube-uses-ffmpeg-for-encoding.html[archive])

On \x[quora]: https://www.quora.com/What-does-YouTube-use-for-encoding-video/answer/Ciro-Santilli

= Concatenate two videos with ffmpeg
{parent=ffmpeg}

https://stackoverflow.com/questions/7333232/how-to-concatenate-two-mp4-files-using-ffmpeg

= ImageMagick
{c}
{parent=multimedia-software}
{wiki}

Crop `20` pixels from the bottom of the image:
``
convert image.png -gravity East -chop 20x0 result.png
``

= Join two images side-by-side
{parent=imagemagick}

https://stackoverflow.com/questions/20737061/merge-images-side-by-sidehorizontally/63575228#63575228

= Open source software
{parent=software}
{wiki}

= Open source
{synonym}

What happens when https://en.wikipedia.org/wiki/OpenCL[the underdogs] get https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755[together] and try to factor out their efforts to beat some https://en.wikipedia.org/wiki/CUDA[evil] dominant \x[microsoft-windows][power], sometimes \x[linux][victoriously].

Or when https://github.com/facebook[startups] use the cheapest stuff available and randomly become the https://github.com/google[next big thing], and decide to keep maintaining the open stuff to get features for free from other companies, or because they are \x[linux][forced by the Holy GPL].

Open source frees employees. When you change jobs, a large part of the specific knowledge you acquired about closed source a project with your blood and tears goes to the trash. When companies get bought, projects get shut down, and closed source code goes to the trash. What sane non desperate person would sell their life energy into such closed source projects that could die at any moment? Working on open source is the single most important non money perk a company can have to attract the best employees.

Open source is worth more than the mere pragmatic financial value of not having to pay for software or the ability to freely add new features.

Its greatest value is perhaps the fact that it allows people study it, to appreciate the beauty of the code, and feel empowered by being able to add the features that they want.

That is why \x[ciro-santilli] thought:
\Q[Life is too short for closed source.]

But quoting Ciro's colleague S.:
\Q[Every software is open source when you read https://en.wikipedia.org/wiki/Assembly_language[assembly code].]

And https://computergraphics.stackexchange.com/questions/7809/what-does-gpu-assembly-look-like["can \x[reverse-engineering][reverse engineer] the undocumented GPU hardware APIs"], \x[ciro-santilli][Ciro] would add.

While software is the most developed open source technology available in the 2010's, due to the https://www.vox.com/recode/2019/6/24/18715421/internet-free-data-ads-cost["zero cost"] of copying it over the Internet, Ciro also believes that \x[open-knowledge][the world would benefit enormously from open source knowledge in all areas on science and engineering], for the same reasons as open source.

= Free and open-source software
{parent=open-source-software}
{wiki}

= FOSS
{c}
{synonym}
{title2}

A more precise term for those in the know: \x[open-source-software] that also has a liberal license, for some definition of liberal.

\x[ciro-santilli] defines liberal as: "can be commercialized without paying anything back" (but possibly subject to other restrictions).

He therefore does not consider \x[creative-commons-license]{p} with NC to be FOSS.

For the newbs, the term \x[open-source-software] is good enough, since most open source software is also FOSS.

But when it's not, it's crucial to know.

= Models for financing open source software
{parent=free-and-open-source-software}

* \x[sponsorware]{child}

= Software developer collective
{parent=models-for-financing-open-source-software}

This model can work well when there is a set of commonly used libraries that some developers often use together, but such that there isn't enough maintenance work for each one individually.

So what people do is to create a group that maintains all those projects, to try and get enough money to survive from the contributions done primarily for each one individually.

Examples:
* https://github.com/pmndrs

= Open source software that is not-FOSS
{parent=free-and-open-source-software}
{wiki}

* \x[gitlab]{child}

= Source code leaks
{parent=open-source-software}

* \x[nintendo]
  * 2020-05-04 leaks via the BroadOn company
  * items
    * Wii \x[verilog]
  * coverage
    * https://www.ladbible.com/technology/gaming-the-biggest-nintendo-hack-in-history-leaks-console-source-codes-20200504
  * fake leak commentary
    * "Sebastian" is apparently reuploaded devkit demos claiming that they are from this leak, if that is correct, \x[fuck] him:
      * https://www.youtube.com/watch?v=6FSOFrgbi4I&lc=UgwWEWT3oyxf85J0PQB4AaABAg
      * https://www.youtube.com/watch?v=teRRcouGxwc&list=PL8Yms2YDl4qOXI99jpI8oH75d3X2oxnBM&index=14

= Open knowledge
{parent=open-source-software}
{wiki}

\x[ciro-santilli]'s raison d'etre, one of his attempts: \x[ourbigbook-com].

The outcome of closed knowledge is \x[reverse-engineering].

= Open educational resources
{parent=open-knowledge}
{title2=OER}
{wiki}

Projects:
* \x[mit-opencourseware]
* several \x[e-learning-website]{p}, e.g. \x[openstax]

= Horrors of open source
{parent=open-source-software}

Not everything is perfect.

One big problem of many big open source projects is that they are contributed to by separate selfish organizations, that have private information. Then what happens is that:
* people implement the same thing twice, or one change makes the other completely unmergeable
* you get bugs but can't share your closed source test cases, and then you can't automate tests for them, or clearly demonstrate the problem
* other contributors don't see your full semi secret important motivation, and may either nitpick too much or take too long to review your stuff

Another common difficulty is that open source maintainers may simply not care enough about their own project (maybe they did in the past but lost interest) to review external patches by people they don't know.

This is understandable: a new patch, is a new risk of things breaking.

Therefore, if you ever submit patches and they get ignore, don't be too sad. It just comes down to a question of maintenance cost, and means that you will waste some extra time on the next rebase. You just have to decide your goals and be cold about it:
* are you doing the right thing and going for a specific goal \x[backward-design]? Then just fork, run as fast as possible towards a minimum viable product, and if you start to feel that rebase is costing you a lot, or feel you could get some open source fame for cheap, open reviews and see what upstream says. If they ignore you, politely tell yourself in your mind silently "\x[fuck] them", and carry on with the MVP
* otherwise, e.g. you just want to randomly help out, you have to ask them before doing anything big "how can I be of help". If I propose a patch for this issue, do you promise to review it?

Writing documentation in an open source project in which you don't have immediate push rights is another major pain due to code reviews. Code code reviews tend to be much less subjective, because if you do something wrong, stuff crashes, runs slower, or you need more lines of code to reach the same goal. There are tradeoffs, but in a limited number. Documentation code reviews on the other hand, are an open invitation to https://en.wikipedia.org/wiki/Law_of_triviality[infinite bike-shedding], since you can't "run" documentation through a standardized \x[brain][brain model]. Much better is for one good documenter person to just make one cohesive \x[stack-overflow] post, and ping others with more knowledge to review details or add any missing pieces :-)

= Code drop
{parent=open-source-software}

\x[open-source]{c} development model in which developers develop in private, and only release code to the public during releases.

Notable example project: \x[android-open-source-project].

This development model basically makes reporting bugs and sending patches a waste of time, because many of them will already have been solved, which is why this development model is \x[evil]{parent}.

= Closed source is less bad on online services
{parent=open-source-software}

\x[ciro-santilli] can accept closed source on \x[server] products more easily than offline, because the servers have to be paid for somehow (by stealing your private data).

= Closed source offline software used by millions
{parent=closed-source-is-less-bad-on-online-services}

Closed source on offline products used by millions of people is \x[evil], when you could just have those for free with \x[open-source-software]! Thus Ciro's hatred for \x[microsoft-windows]{child} and \x[macos]{child} (at \x[is-the-macos-kernel-open-source][least userland, maybe]).

= Closed source software
{parent=open-source-software}

= Closed source
{synonym}

The opposite of \x[open-source-software].

= Closed standard
{parent=closed-source-software}

\x[iso] is the main culprit of this \x[bullshit], some notable examples related to \x[open-source-software]:
* \x[ansi-c]
* \x[sql-standard]
* \x[verilog]

The only low level thing that escaped this was \x[opengl] via \x[khronos], what heroes those people are.

How the hell are you supposed to develop an open source implementation of something that has a closed standard?

Not to mention open source test suites, that would be way too much to ask for, those always end up being made by some shady small companies that go bankrupt from time to time, see e.g. .

= International Organization for Standardization
{c}
{parent=closed-standard}
{wiki}

= ISO
{c}
{synonym}

= Inner source
{parent=closed-source-software}
{wiki}

If you are going to do \x[closed-source], at least do it like this.

Basically the opposite of \x[need-to-know] for \x[software].

= Personal information management
{parent=software}
{wiki}

= Productivity software
{parent=software}
{wiki}

= LibreOffice
{c}
{parent=productivity-software}
{wiki}

These people are heroes. There's nothing else to say.

= Program optimization
{parent=software}
{wiki}

= Benchmark
{parent=program-optimization}
{wiki}

= Profiling
{disambiguate=computer programming}
{parent=program-optimization}
{wiki}

= Profile
{disambiguate=computer programming}
{synonym}

= Programming language
{parent=software}
{wiki}

A language that allows you to talk and command a \x[computer].

There is only space for two languages at most in the world: the \x[compiled-programming-language][compiled] one, and the \x[interpreted-programming-language][interpreted] one.

For 2020 now, when you have a choice, you must go for:
* \x[python] as the interpreted one
* \x[c-plus-plus] for compiled

Those two are languages not by any means perfect from a language design point of view, and there are likely already better alternatives, they are only chosen due to a pragmatic tradeoff between ecosystem and familiarity.

Python in particular has a lot of annoying stuff, which other languages do better. Ciro predicts that Python will become like Fortran in the future: a legacy hated by most who have moved to \x[javascript] long ago, but with too much dominance in certain applications like machine learning to be worth replacing, like Fortran dominates certain HPC applications.

\x[c-plus-plus] however is decent, and is evolving in very good directions in the 2010's, and will remain relevant in the foreseeable future.

\x[bash] can also be used when you're lazy. But if the project goes on, you will sooner or later regret that choice.

The language syntax in itself does not matter. All that matters is how many useful libraries and tooling it has.

This is how other languages compare:
* \x[c-programming-language][C]: but cannot make a large codebase \x[dry] without insanity
* \x[ruby-programming-language][Ruby]: the exact same as Python, and only strong in one domain: \x[web-development], while Python rules everything else, and is not bad on web either. So just kill Ruby, please.
* \x[javascript]: it is totally fine if \x[node-js] destroys \x[python] and becomes the ONE scripting language to rule them all since Python and JavaScript are almost equally crappy (although JavaScript is a bit more of course).

  One thing must be said tough: `someobject.not_defined_property` silently returning `undefined` rather than blowing up is \x[bullshit].
* \x[go-language]: likely a good replacement for \x[python]. If the ecosystem gets there, will gladly use it more.
* \x[java]: good language, but has an ugly enterprisey ecosystem, Oracle has made/kept the development process too closed, and https://en.wikipedia.org/wiki/Google_v._Oracle_America[API patenting madness on Android just kills if off completely]
* \x[haskell]: many have tried to learn some functional stuff, but too hard. Sounds really cool though.
* Rust: sounds cool, you will gladly replace C and C++ with it if the ecosystem ramps up.
* C#: \x[microsoft-windows][Microsoft] is \x[evil]
* \x[tcl], \x[perl-programming-language]: Python killed them way back and is less insane
* R, GNU Octave and any other "\x[numerical-computing-language]": all of this is a waste of society's time as explained at: \x[numerical-computing-language]{full}
* Swift: Ciro would rather stay away from \x[apple] dominated projects if possible since they sell a \x[closed-source] \x[operating-system]

= Programming languages without a decent dominating package system
{parent=programming-language}

\x[c-programming-language]{child} and \x[c-plus-plus]{child}: OK, you're old before the Internet and compiled, forgiven.

\x[python]{child}: OMG, please, just make it work!!! Your are interpreted!!! You are a hot web technology!!! \x[node-js] and \x[ruby-programming-language] are doing just fine, and Ruby is not newer than you!!! See also: \x[pip-package-manager].

= Compiled vs interpreted programming language
{parent=programming-language}

= Compiled programming language
{parent=programming-language}

= Interpreted programming language
{parent=programming-language}

Interestingly, the very first programming language with an actual implementation was interpreted: \x[short-code-programming-language] in 1950.

This is not surprising, as interpreters are easier to write than compilers.

And just like modern scripting languages, it reduced execution speed by about 50x.

= List of programming languages
{parent=programming-language}

= Adobe Flash
{c}
{parent=list-of-programming-languages}
{wiki}

= Bash
{c}
{disambiguate=Unix shell}
{parent=list-of-programming-languages}

= Bash
{c}
{synonym}

The more heavily a project relies on it, the more you start to regret it.

= C
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{title2=1972}
{wiki=C++}

It gets the job done, but cannot make a large codebase DRY without insanity.

As of 2020, C is like \x[latin], and we are in the \x[middle-ages], where it has become a \x[lingua-franca].

It is interesting to note how late C appeared: 1972, compared e.g. to \x[fortran] which is from 1957. This is basically because C was a "systems programming language", i.e. with focus on pointer manipulation, and because early computers were so weak, there was no operating system or many software layers in the early days. Fortran however was a numerical language, and it ran directly on bare metal, an application that existed before systems programming.

= ANSI C
{c}
{parent=c-programming-language}
{wiki}

= C++
{c}
{parent=list-of-programming-languages}
{wiki}

C plus plus is what you get when you want to have all of:
* ability to write DRY code, which is e.g. impossible in the \x[c-programming-language]
* low level control, notably not having \x[garbage-collection], as possible in the \x[c-programming-language]
* somewhat backwards compatibility with \x[c-programming-language]

= C#
{c}
{id=c-sharp}
{parent=list-of-programming-languages}
{wiki=C_Sharp_(programming_language)}

= Fortran
{c}
{parent=list-of-programming-languages}
{wiki}

= Go
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

= Go
{c}
{disambiguate=language}
{synonym}

Likely a good replacement for \x[python]. If the ecosystem gets there, \x[ciro-santilli] would gladly use it more.

= Haskell
{c}
{parent=list-of-programming-languages}
{wiki}

There are only two pre-requisites to using Haskell in 2020. You have to be an \x[idealist]. And you have to be a genius.

= Java
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

= Java
{c}
{synonym}

= Java program
{c}
{parent=java-programming-language}

= JavaScript
{c}
{parent=list-of-programming-languages}
{wiki}

The language all browsers converted to as of 2019, and therefore the easiest one to distribute and most widely implemented programming language.

Hopefully will be killed by https://en.wikipedia.org/wiki/WebAssembly[WebAssembly] one day.

Because JavaScript is a relatively crap/ad-hoc language, it ended up some decent tooling to make up for that, e.g. stuff like linting via ESLint and reformatting through Prettier is much more widespread than in other languages.

JavaScript data structure are also quite a bit anemic, which makes libraries such as lodash incredibly popular. But most of that stuff should be in the stdlib.

Cheat:
* \a[web-cheat/js-image-load.html]: load an image from JavaScript dynamically: https://stackoverflow.com/questions/226847/what-is-the-best-javascript-code-to-create-an-img-element
* \a[web-cheat/js-image-load-viewport.html]: load an image from JavaScript dynamically when it would become visible on the viewport: https://stackoverflow.com/questions/2321907/how-do-you-make-images-load-only-when-they-are-in-the-viewport
* \a[web-cheat/image-load-lazy.html]: https://stackoverflow.com/questions/2321907/how-do-you-make-images-load-lazily-only-when-they-are-in-the-viewport/57389607#57389607
* \a[web-cheat/esm.html]: ESM modules
  * \a[web-cheat/esm1.js]
  * \a[web-cheat/esm2.js]
* \a[web-cheat/keydown.html]
  * https://stackoverflow.com/questions/16006583/capturing-ctrlz-key-combination-in-javascript

= Client-side storage
{parent=javascript}

https://www.google.com/search?q=client-side+storage&oq=Client-side+storage&aqs=chrome.0.0l3j0i22i30l4j69i60.88j0j7&client=ubuntu&sourceid=chrome&ie=UTF-8

= Clear client-side storage
{parent=client-side-storage}

= Clear client-side storage on Chromium
{parent=clear-client-side-storage}

* https://superuser.com/questions/366483/how-to-delete-cookies-for-a-specific-site
* https://superuser.com/questions/722498/what-is-the-fastest-way-to-clear-cache-and-cookies-in-google-chrome

= Emscripten
{c}
{parent=javascript}
{wiki}

= JavaScript library
{parent=javascript}

= Babel
{c}
{disambiguate=transcompiler}
{parent=javascript-library}
{wiki}

= JavaScript bi-directional communication library
{parent=javascript-library}
{tag=push-technology}

* https://stackoverflow.com/questions/30419455/server-side-data-push-for-web-services
* https://stackoverflow.com/questions/52146670/bi-directional-communication-between-server-and-client

= Socket.IO
{c}
{parent=javascript-library}
{wiki}

= JavaScript is single threaded
{c}
{parent=javascript}

\x[node-js] does have \x[node-js-worker-threads] however.

= JavaScript language
{c}
{parent=javascript}

= `async`
{disambiguate=JavaScript}
{parent=javascript-language}

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function

`async` is all present in \x[javascript] for two reasons:
* you make network requests all the time
* JavaScript is single threaded, so if you are waiting for a network request, the UI freezes, see remarks on the deprecation of synchronous HTTP request at: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests

However, it is also \x[hell]: \x[how-to-convert-async-to-sync-in-javascript].

= How to convert `async` to sync in JavaScript
{parent=async-javascript}

God, it's impossible! You just have to convert the entire fucking call stack all the way up to async functions.

* https://stackoverflow.com/questions/21819858/how-to-wrap-async-function-calls-into-a-sync-function-in-node-js-or-javascript
* https://stackoverflow.com/questions/9121902/call-an-asynchronous-javascript-function-synchronously
* https://stackoverflow.com/questions/47227550/using-await-inside-non-async-function
* https://stackoverflow.com/questions/43832490/is-it-possible-to-use-await-without-async-in-js
* https://stackoverflow.com/questions/6921895/synchronous-delay-in-code-execution

And then, after many many hours of this work, you might notice that the new code is way, way way slower than before, because making small functions `async` has a large performance impact: https://madelinemiller.dev/blog/javascript-promise-overhead/[]. Real world case with a 4x slowdown: https://github.com/cirosantilli/cirodown/tree/async-slow[].

= Node.js
{c}
{parent=javascript}
{wiki}

Wellhttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync], if you are gonna usehttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-jsp[Sync] this \x[javascript][wonky language] thing inhttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync] one place, you might as well usehttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync] it everywherehttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync] and make it more decent. See also: \x[how-to-convert-async-to-sync-in-javascript].

Their CLI debugger is a bit crap compared to GDB, basic functionality is either lacking or too verbose:
* https://stackoverflow.com/questions/65493221/how-to-break-at-a-specific-function-or-line-with-the-node-js-node-inspect-comman
* https://stackoverflow.com/questions/70486188/how-to-break-on-uncaught-exception-on-the-node-js-node-inspect-command-line-debu Some operations are only possible on the browser debug UI...
Documentation at: https://nodejs.org/dist/latest-v16.x/docs/api/debugger.html

= Node.js library
{c}
{parent=node-js}

= Node.js standard library
{c}
{parent=node-js-library}

= Node.js `worker_threads`
{c}
{parent=node-js-standard-library}

= Node.js database bindings
{parent=node-js-library}

* \x[node-js-sqlite-bindings]

= Node.js object-relational mapping library
{parent=node-js-library}

= Sequelize
{c}
{parent=node-js-object-relational-mapping-library}

Source code: https://github.com/sequelize/sequelize

Some usage examples under: \x[sequelize-example]{full}.

As of 2021, this library is extremely painful to use. It does feel semi-mature, but there are just too much horrible things going on;
* the documentation is a bit messy and misses a lot of stuff. The examples are often too short, and it is hard to understand what specific options they are talking about do because they lack clear input/expected output pairs. Examples:
  * https://github.com/sequelize/sequelize/issues/5385#issuecomment-324479607
  * https://github.com/sequelize/sequelize/issues/1775#issuecomment-360028396
* the implementation has several inelegant/unintuitive annoyances/requirements of code repetition that drive you mad.

  The association API feels notably bad, it took a few days for \x[ciro-santilli] to learn to do what he considers "basic" association operations, knowledge which he dumped to: https://stackoverflow.com/questions/22958683/how-to-implement-many-to-many-association-in-sequelize/67973948#67973948

  See also: \x[how-to-decide-if-an-orm-is-good].
* bugs are piling up. It appears that many key devs left, and current maintainers are just not being able to keep up.

  And they have setup a stupid bot that closes every thread automatically after a few days, what's the point... valid bugs are being closed due to this, and it is impossible to distinguish what is solved and what isn't since everything gets closed.

Some glaring issues are listed at \x[the-horrors-of-sequelize].

= The horrors of Sequelize
{parent=sequelize}

* foreign keys are capitalized:
  * https://stackoverflow.com/questions/55273091/why-use-the-uppercase-key-when-creating-association-model-in-sequelize 
  * https://github.com/sequelize/sequelize/issues/5828
* you must give `foreignKey` when using aliases, otherwise it fails subtely. That would be derived automatically.
* https://stackoverflow.com/questions/41502699/return-flat-object-from-sequelize-with-association can't auto-flatten to reuse the database's `ORDER`
* `limit` and `offset` don't work without `subQuery: false`
* https://stackoverflow.com/questions/34059081/how-do-i-reference-an-association-when-creating-a-row-in-sequelize-without-assum hard to not duplicate foreign keys values everywhere
* stack traces permanently broken or requiring non-obvious configs:
  * https://github.com/sequelize/sequelize/issues/8199#issuecomment-863943835
  * https://github.com/sequelize/sequelize/issues/12044
  * https://stackoverflow.com/questions/28231970/bluebird-shows-broken-stacktrace-when-using-with-sequelize-mysql
* does not automatically update fields on hooks: https://github.com/sequelize/sequelize/issues/8586#issuecomment-422877555
* no way to do (non-raw) queries during migrations, e.g. to update fields based on other fields in a complex way?
  * https://github.com/sequelize/cli/issues/862
  * https://stackoverflow.com/questions/45286429/custom-query-on-sequelize-seeder
  * https://stackoverflow.com/questions/18742962/add-data-in-sequelize-migration-script
* cannot change columns when other columns have constraints due to the backup table?
  * https://stackoverflow.com/questions/64533732/process-of-changing-a-table-with-sequelize-migration-if-foreign-key-constraint-i
* you have to use `.get()` for `attribute` aliased fields, why? https://stackoverflow.com/questions/32649218/how-do-i-select-a-column-using-an-alias/69890944#69890944
* `.id` gets added to `SELECT` no matter what, breaking `GROUP BY` unless you do horrible workarounds:
  * https://github.com/sequelize/sequelize/issues/3256
  * https://github.com/sequelize/sequelize/issues/5481
* they don't seem to have a simple built-in mechanism for transaction retries? \x[sequelize-transaction-retry]{p}.
* impossible to do subqueries in general. Docs just tell you to use literals. This in particular prevents single query deletes with join as done at \a[nodejs/sequelize/raw/many_to_many.js]:
  * https://sequelize.org/master/manual/sub-queries.html[]: the docs actually just tell you to use literals, lol
  * https://stackoverflow.com/questions/45354001/nodejs-sequelize-delete-with-nested-select-query
  Also, you can't get query strings either: https://github.com/sequelize/sequelize/issues/2325
* SQLite `changeColumn` migrations do on delete cascades of other tables. SQLite does not have change column statements, so they have to drop and recreate tables, but they don't temporarily remove cascades, so you lose data.

= Sequelize example
{parent=sequelize}

To run examples on a specific database:
* `./index.js` or `./index.js l`: \x[sqlite]
* `./index.js p`: \x[postgresql]. You must manually create a database called `tmp` and ensure that peer authentication works for it
All examples can be tested on all databases with:
``
cd sequelize
./test
``

Overview of the examples:
* \a[nodejs/sequelize/index.js]: a bunch of basic examples
* \a[nodejs/sequelize/raw/index.js]: raw query \x[hello-world]. Ideally one should never use a raw query in a real project. We use raw examples mostly as a \x[sql] tutorial under \x[sql-example], and will not comment on them much further on this section.
* \a[nodejs/sequelize/count.js]: a simplified single-table count example. In practice, this will be usually done together with \x[join-sql] queries across multiple tables. Answers: https://stackoverflow.com/questions/22627258/how-does-group-by-works-in-sequelize/69896449#69896449
* \a[nodejs/sequelize/date.js]: automatic date typecasts
* \a[nodejs/sequelize/camel_case.js]: trying to get everything in the database camel cased, columns starting with lowercase, and tables starting with uppercase. The defaults documented on getting started documentation do uppercase foreign keys, and lowercase non-foreign keys. It's a mess.
* \a[nodejs/sequelize/ignore_duplicates.js]: ignore query on unique violation with `ignoreDuplicates: true` which does \x[sqlite] `INSERT OR IGNORE INTO` or \x[postgresql] `ON CONFLICT DO NOTHING`
* \a[nodejs/sequelize/inc.js]: demonstrate the `increment` method. In \x[sqlite], it produces a statement of type:
  ``
  UPDATE `IntegerNames` SET `value`=`value`+ 1,`updatedAt`='2021-11-03 10:23:45.409 +00:00' WHERE `id` = 3
  ``
* \a[nodejs/sequelize/sync_alter.js]: illustrates `Model.sync({alter: true})` to modify a table definition, answers: https://stackoverflow.com/questions/54898994/bulkupdate-in-sequelize-orm/69044138#69044138
* \a[nodejs/sequelize/truncate_key.js]
* \a[nodejs/sequelize/update.js]: https://stackoverflow.com/questions/54898994/bulkupdate-in-sequelize-orm/69044138#69044138
* \a[nodejs/sequelize/updateOnDuplicate.js]
* \a[nodejs/sequelize/validation.js]: is handled by a third-party library: https://github.com/validatorjs/validator.js[]. They then add a few extra validators on top of that.

  The `args: true` thing is explained at: https://stackoverflow.com/questions/58522387/unhandled-rejection-sequelizevalidationerror-validation-error-cannot-create-pr/70263032#70263032
* \a[nodejs/sequelize/composite_index.js]: https://stackoverflow.com/questions/34664853/sequelize-composite-unique-constraint
* \a[nodejs/sequelize/indent_log.js]: https://stackoverflow.com/questions/34664853/sequelize-composite-unique-constraint
* association examples:
  * \a[nodejs/sequelize/one_to_many.js]: basic \x[one-to-many] examples.
    * \a[nodejs/sequelize/one_to_many_custom_column_name.js]:
      * https://stackoverflow.com/questions/43025861/sequelize-association-is-referencing-to-wrong-foreignkey-column-name
      * https://stackoverflow.com/questions/49818406/sequelize-targetkey-not-working/59953948#59953948
  * \a[nodejs/sequelize/many_to_many.js]: basic \x[many-to-many] examples, each user can like multiple posts. Answers: https://stackoverflow.com/questions/22958683/how-to-implement-many-to-many-association-in-sequelize/67973948#67973948
    * \a[nodejs/sequelize/many_to_many_custom_table.js]: \x[many-to-many] example, but where we craft our own table which can hold extra data. In our case, users can like posts, but likes have a integer weight associated with them. Related threads:
      * https://stackoverflow.com/questions/22958683/how-to-implement-many-to-many-association-in-sequelize/67973948#67973948
      * https://stackoverflow.com/questions/30308217/sequelize-find-by-association-through-manually-defined-join-table/69899876#69899876
    * \a[nodejs/sequelize/many_to_many_same_model.js]: association between a model and itself: users can follow other users. Answers: https://stackoverflow.com/questions/22958683/how-to-implement-many-to-many-association-in-sequelize/67973948#67973948
    * \a[nodejs/sequelize/many_to_many_same_model_super.js]
    * \a[nodejs/sequelize/many_to_many_super.js]: "Super many to many": https://sequelize.org/master/manual/advanced-many-to-many.html This should not exist and shows how bad this library is for associations, you need all that boilerplate in order to expose certain relationships that aren't otherwise exposed by a direct `hasMany` with implicit join table.
  * nested includes to produce queries with multiple \x[join-sql]{p}:
    * \a[nodejs/sequelize/nested_include.js]: find all posts by users that a given user follows. Answers: https://stackoverflow.com/questions/42632943/sequelize-multiple-where-clause/68018083#68018083
    * \a[nodejs/sequelize/nested_include_super.js]: like \a[nodejs/sequelize/nested_include.js] but with a super many to many. We should move this to \a[nodejs/sequelize/many_to_many_super.js].
  * two relationships between two specific tables: we need to use `as:` to disambiguate them
    * \a[nodejs/sequelize/many_to_many_double.js]: users can both follow and like posts
    * \a[nodejs/sequelize/one_to_many_double.js]: posts have the author and a mandatory reviewer
* hooks
  * \a[nodejs/sequelize/before_validate_modify.js]:
    * https://github.com/sequelize/sequelize/issues/3534
    * https://github.com/sequelize/sequelize/issues/8586
  * \a[nodejs/sequelize/hook_in_transaction.js]:
    * https://stackoverflow.com/questions/35014679/sequelize-hook-depending-on-transaction
* internals:
  * \a[nodejs/sequelize/common.js]: common utilities used across examples, most notably:
    * to easily setup different DBRM
    * do a lot more stuff under \a[nodejs/sequelize/raw] to have a little bit of DBRM portability where we need it, notably transactions
  * \a[nodejs/sequelize/min_nocommon.js]: to copy paste to \x[stack-overflow]
  * \a[nodejs/sequelize/min.js]: template for new exapmles in the folder

= Sequelize parallel example
{parent=sequelize-example}

= nodejs/sequelize/parallel_select_and_update.js
{file}
{parent=sequelize-parallel-example}

This example is the same as \x[file/nodejs/sequelize/raw/parallel_select_and_update.js], but going through \x[sequelize] rather than with raw queries. `NONE` is not supported for now to not have a transaction at all because lazy.

The examples illustrates: https://stackoverflow.com/questions/55452441/for-share-and-for-update-statements-in-sequelize

Sample invocation:
``
node --unhandled-rejections=strict ./parallel_select_and_update.js p 10 100 READ_COMMITTED UPDATE
``
where:
* `READ_COMMITTED`: one of the keys documented at: https://sequelize.org/master/class/lib/transaction.js~Transaction.html which correspond to the standard \x[sql-isolation-level]{p}. It not given, don't set one, defaulting to the database's/sequelize's default level.
* `UPDATE`: one of the keys documented at: https://sequelize.org/master/class/lib/transaction.js~Transaction.html#static-get-LOCK[]. Update generates a `SELECT FOR UPDATE` in \x[postgresql] for example. If not given, don't use any `FOR xxx` explicit locking.

Other examples:
* `node --unhandled-rejections=strict ./parallel_select_and_update.js p 10 100 READ_COMMITTED UPDATE`

Then, the outcome is exactly as described at: \x[file/nodejs/sequelize/raw/parallel_select_and_update.js]:
* `READ_COMMITTED`: fails
* `READ_COMMITTED UPDATE`: works
* `REPEATABLE_READ`: works, but is a bit slower, as it does rollbacks

  This case also illustrates \x[sequelize-transaction-retry]{p}, since in this transaction isolation level transactions may fail:
  * https://stackoverflow.com/questions/68427796/sequelize-transaction-retry-doenst-work-as-expected
  * https://github.com/sequelize/sequelize/issues/1478
  * https://github.com/sequelize/sequelize/issues/8294

= Sequelize transaction retry
{parent=sequelize}

Transaction retries are inevitable, as some \x[sql-isolation-level]{p}

Doesn't seem to have any simple built-in mechanism?
* https://stackoverflow.com/questions/68427796/sequelize-transaction-retry-doenst-work-as-expected
* https://github.com/sequelize/sequelize/issues/1478
* https://github.com/sequelize/sequelize/issues/8294

= Node.js web framework
{c}
{parent=node-js}

= Express.js
{c}
{parent=node-js-web-framework}

This doesn't do a hole lot. \x[ciro-santilli] wouldn't really call it a web framework. It's more like a middleware. Real web frameworks are built on top of it.

Examples under: \a[nodejs/express]:
* \a[nodejs/express/min.js]: minimal example. Visit http://localhost:3000 and it shows `hello world`. It is a bit wrong because the headers say HTML but we return plaintext.
* \a[nodejs/express/index.js]: example dump with automated tests where possible. The automated tests are run at startup after the server launches. Then the server keeps running so you can interact with it.

A live example on \x[heroku] can be seen at: https://github.com/cirosantilli/heroku-node-min

= Realworld app written in Express
{c}
{parent=express-js}

\x[gothinkster-realworld] implementations based on \x[express-js].

= gothinkster/node-express-realworld-example-app
{parent=realworld-app-written-in-express}

https://github.com/gothinkster/node-express-realworld-example-app

= sigoden/node-express-realworld-example-app
{parent=realworld-app-written-in-express}

Appears to be a port of \x[gothinkster-node-express-realworld-example-app] to \x[sequelize].

Seemed to just work at 68bbadfd77f679f0df0fcd0de5bceb9c37b1144a Ubuntu 20.10, was forked from parent project in 2018.

= Varun-Hegde/Conduit_NodeJS
{parent=realworld-app-written-in-express}

Very raw. Easy to understand. Relatively well organiezd. But also very buggy at 3ab8d9f849a1cdf2985a8d123b1893f0fd4e79ab: https://github.com/Varun-Hegde/Conduit_NodeJS/issues/3[], I just can't trust it. There must be several helper libraries that would greatly DRY up the repetitive CRUD. Ciro hates the style :-) 4 space indents, no space after commas, no semicolon. Not based on https://github.com/gothinkster/node-express-realworld-example-app[] which is essentially one of the reference implementations, so from scratch apparently, which is a bad sign.

= FeathersJS
{c}
{parent=node-js-web-framework}

* https://feathersjs.com
* https://github.com/feathersjs/feathers
* https://stackoverflow.com/questions/tagged/feathersjs

Looks interesting.

It seems to abstract the part about the client messaging the backend, which focuses on being able to easily plug in a number of \x[front-end-web-framework] to manage client state.

Has the "main web \x[api] is the same as the REST API" focus, which is fundamental 2020-nowadays.

Uses \x[socket-io], which allows the client Javascript to register callbacks when data is updated to achieve \x[socket-io], e.g. their default chat app does:
``
client.service('messages').on('created', addMessage);
``
so that message appear immediately as they are sent.

Their standard template from `feathers generate app` on `@feathersjs/cli@4.5.0` includes:
* several authentication methods, including \x[oauth]
* testing
* backend \x[database] with one of several \x[object-relational-mapping]! However, they don't abstract across them. E.g., the default Chat example uses NeDB, but a real app will likely use \x[sequelize], and a \x[port-software-portability] is needed
which looks promising! They don't have a default template for a \x[front-end-web-framework] however unfortunately: https://docs.feathersjs.com/guides/frameworks.html#the-feathers-chat lists a few chat app versions, which is their \x[hello-world]:
* \x[front-end-web-framework]: not built-in on generator, but there are some sample repos pointed from the documentation, and they did work out-of-box:
  * \x[feathers-chat-react]
But it is in itself a completely boring app with a single splash page, and no database interaction, so not a good showcase. The actual showcase app is \x[feathersjs-feathers-chat].

And there is no official example of the chat app that is immediately deployable to \x[heroku]: \x[feathersjs-heroku-deployment], all setups require thinking.

Global source entrypoint: determine on `package.json` as usual, defaults to `src/index.js`.

= FeatherJS demo apps
{c}
{parent=feathersjs}

https://github.com/feathersjs/awesome-feathersjs#projects-using-feathers

= feathersjs/feathers-chat
{c}
{parent=featherjs-demo-apps}

https://github.com/feathersjs/feathers-chat

The main \x[feathersjs] \x[hello-world] demo. Notable missing things...
* instant \x[heroku] deployability: \x[feathersjs-heroku-deployment]
* no \x[front-end-web-framework] which sucks, but there are basically official demos that worked e.g. \x[feathers-chat-react]
* \x[feathersjs-signup-email-verification]

= feathers-chat PostgreSQL
{c}
{parent=feathersjs-feathers-chat}

The default feathers-chat app runs on NeDB (local filesystem \x[json] database).

\x[ciro-santilli] managed to port it to \x[sequelize] for \x[postgresql] as shown at: https://github.com/cirosantilli/feathers-chat/tree/sequelize-pg

= feathers-chat-react
{c}
{parent=feathersjs-feathers-chat}

https://github.com/feathersjs-ecosystem/feathers-chat-react

Last updated 2018 as of 2021, but still just worked.

Also uses \x[webpack] which is fantastic.

Gotta run https://github.com/feathersjs/feathers-chat[] first: https://github.com/feathersjs-ecosystem/feathers-chat-react/issues/5[], then it worked:
``
git clone https://github.com/feathersjs/feathers-chat
cd feathers-chat
git checkout fd729a47c57f9e6170cc1fa23cee0c84a004feb5
npm install
npm start
``
and on the other terminal:
``
git clone https://github.com/feathersjs-ecosystem/feathers-chat-react
cd feathers-chat-react
git checkout 36d56cbe80bbd5596f6a108b1de9db343b33dac3
npm install
npm start
``
then visit http://localhost:3000/ and you can create an account and login, tested on Ubuntu 20.10. Data is stored on persistently.

TODO how to merge those two repos into a single repo.

If you \x[disable-javascript-on-chromium], it stops working completely. There is a section on how to solve that at: https://docs.feathersjs.com/cookbook/express/view-engine.html[] but it does not cover React specifically. \x[codaisseur-feathersjs-react-redux-ssr] might be good to look into.

= Codaisseur/feathersjs-react-redux-ssr
{c}
{parent=featherjs-demo-apps}

https://github.com/Codaisseur/feathersjs-react-redux-ssr

Also \x[webpack] and \x[babel-transcompiler], looks promising!

As of 2021, last commit from 2017.

Running:
``
git clone https://github.com/Codaisseur/feathersjs-react-redux-ssr
cd feathersjs-react-redux-ssr
npm install
``
failed on Ubuntu 20.10 \x[node-js] v14.15.3 with:
``
../src/create_string.cpp:17:37: error: no matching function for call to ‘v8::String::Utf8Value::Utf8Value(v8::Local<v8::Value>&)’
   17 |   v8::String::Utf8Value string(value);
      |                                     ^
``
Likely similar \x[bullshit] from: https://stackoverflow.com/questions/50111688/node-sqlite-node-gyp-build-error-no-member-named-forceset-in-v8object because the Node.js version is too new.

If I try `nvm install v10`

I \x[google] error messages until reaching:
``
diff --git a/gulpfile.js b/gulpfile.js
index b931e06..24d2cc8 100644
--- a/gulpfile.js
+++ b/gulpfile.js
@@ -14,34 +14,34 @@ gulp.task('css', function() {
            .pipe(gulp.dest('./dist'))
 })
 
-gulp.task('css:watch', ['css'], function() {
+gulp.task('css:watch', gulp.series('css', function() {
   gulp.watch('app/styles/**/*.sass', ['css'])
-})
+}))
 
 gulp.task('moveAssets', function() {
   return gulp.src('./app/assets/**/*')
              .pipe(gulp.dest('./dist/assets'))
 })
 
-gulp.task('build:revAssets', ['css', 'moveAssets'], function() {
+gulp.task('build:revAssets', gulp.series('css', 'moveAssets', function() {
   var rev = new $.revAll()
   return gulp.src('./dist/**/*')
              .pipe(rev.revision())
              .pipe(gulp.dest('./dist/public'))
              .pipe(rev.manifestFile())
              .pipe(gulp.dest('./dist'))
-})
+}))
 
 gulp.task('build:cpServer', function() {
   return gulp.src('./app/**/*.{js,ejs}')
              .pipe(gulp.dest('./dist/server-build'))
 })
-gulp.task('build:revServer', ['build:cpServer'], function() {
+gulp.task('build:revServer', gulp.series('build:cpServer', function() {
   var manifest = gulp.src('./dist/rev-manifest.json')
   return gulp.src('./dist/server-build/{components,containers}/**/*')
              .pipe($.revReplace({ manifest: manifest }))
              .pipe(gulp.dest('./dist/server-build'))
-})
+}))
 
 gulp.task('build', function() {
   runSequence('build:revAssets', 'build:revServer')
diff --git a/package.json b/package.json
index bcb29c3..86bd593 100644
--- a/package.json
+++ b/package.json
@@ -67,7 +67,7 @@
     "redux-thunk": "^0.1.0",
     "request": "^2.79.0",
     "rewire": "^2.3.4",
-    "run-sequence": "^1.2.2",
+    "run-sequence": "^2.2.1",
     "serve-favicon": "^2.3.2",
     "socket.io-client": "^1.7.2",
     "superagent": "^1.4.0",
@@ -86,16 +86,16 @@
     "concurrently": "^2.0.0",
     "cross-env": "^1.0.7",
     "enzyme": "^2.3.0",
-    "gulp": "^3.9.0",
+    "gulp": "^4.0.2",
     "gulp-autoprefixer": "^3.1.0",
     "gulp-load-plugins": "^1.2.0",
     "gulp-rev": "^6.0.1",
-    "gulp-sass": "^2.1.1",
+    "gulp-sass": "4.1.0",
     "gulp-sourcemaps": "^1.6.0",
     "jsdom": "^7.0.1",
     "mocha": "^2.4.5",
     "nock": "^2.17.0",
-    "node-sass": "^3.4.2",
+    "node-sass": "^5.0.0",
     "nodemon": "^1.6.0",
     "react-addons-test-utils": "^15.3.2",
     "react-transform-catch-errors": "^1.0.0",
``
and the next problem is: https://stackoverflow.com/questions/48513573/gulp-error-gulp-hastask-is-not-a-function

= randyscotsmithey/feathers-realworld-example-app
{parent=featherjs-demo-apps}

\x[feathersjs] entry for \x[gothinkster-realworld].

\x[mongodb]-based.

So once you install MongoDB, run with:
``
MONGODB_FEATHERS_REALWORLD=mongodb://localhost:27017/mydb npm start
``

Got it working on \x[ubuntu] 20.10 with both \x[react] and \x[vue-js] front-ends at https://github.com/randyscotsmithey/feathers-realworld-example-app/commit/8bc3a09242285de624c75bb8345630df499a7d07[] as mentioned at https://github.com/randyscotsmithey/feathers-realworld-example-app/issues/2 except for bad error reporting on UI.

Tests can be run with:
``
MONGODB_FEATHERS_REALWORLD=mongodb://localhost:27017/mydb npm run test
``
but there were 10 failures and 55 passes: https://github.com/randyscotsmithey/feathers-realworld-example-app/issues/3

= FeathersJS Heroku deployment
{c}
{parent=feathersjs}

Got it working as mentioned at: https://github.com/cirosantilli/feathers-chat/tree/sequelize-pg

One major step was to \x[port-software-portability] to \x[postgresql] as shown at \x[feathers-chat-postgresql].

Bibliography:
* https://stackoverflow.com/questions/47270219/deploy-feathersjs-app-on-heroku/66723974#66723974
* https://github.com/feathersjs/feathers/issues/1647
* https://medium.com/@mattchewone/feathersjs-deployment-gitlab-ci-cd-heroku-4ea9e34ab129

There's also a `heroku` branch at: https://github.com/feathersjs/feathers-chat/tree/heroku[], but it also seems to use NeDB? So you can have a filesystem in Heroku? Doesn't seem so: https://stackoverflow.com/questions/42775418/heroku-local-persistent-storage

= FeathersJS signup email verification
{c}
{parent=feathersjs}

* https://github.com/feathersjs/feathers/issues/1514
* https://blog.feathersjs.com/how-to-setup-email-verification-in-feathersjs-72ce9882e744

= Meteor
{c}
{disambiguate=web framework}
{parent=node-js-web-framework}

https://github.com/meteor/meteor

The idea is cool. It really unifies front-and back end.

But \x[ciro-santilli] feels the approach proposed by \x[feathersjs] of being a glue between bigger third-party \x[front-end-web-framework]{p} like \x[react] and backend (\x[object-relational-mapping]) is more promising and flexible.

= Nest.js
{c}
{parent=node-js-web-framework}

* https://github.com/lujakob/nestjs-realworld-example-app
* \x[object-relational-mapping]: https://docs.nestjs.com/techniques/database
* \x[front-end-web-framework]: looks weak:
  * https://github.com/yemiwebby/nest-react-project

= lujakob/nestjs-realworld-example-app
{c}
{parent=nest-js}

\x[nest-js] entry for \x[gothinkster-realworld].

Didn't manage to get it to work perfectly on \x[ubuntu] 20.10: https://github.com/lujakob/nestjs-realworld-example-app/issues/57

= lujakob/nestjs-realworld-example-app SQLite port
{parent=lujakob-nestjs-realworld-example-app}

Tried a quick port to \x[sqlite] to get rid of annoying local databases for development, but failed, at c1c2cc4e448b279ff083272df1ac50d20c3304fa
``
npm install sqlite3 --save-dev
``
and
``
{
  "type": "sqlite",
  "database": "db.sqlite3",
  "entities": ["src/**/**.entity{.ts,.js}"],
  "synchronize": true
}
``
then:
``
npm start
``
fails with:
``
DataTypeNotSupportedError: Data type "timestamp" in "ArticleEntity.created" is not supported by "sqlite" database.
``
Attempt to hack it:
``
--- a/src/article/article.entity.ts
+++ b/src/article/article.entity.ts
@@ -20,10 +20,10 @@ export class ArticleEntity {
   @Column({default: ''})
   body: string;

-  @Column({ type: 'timestamp', default: () => "CURRENT_TIMESTAMP"})
+  @Column({ default: () => "CURRENT_TIMESTAMP"})
   created: Date;

-  @Column({ type: 'timestamp', default: () => "CURRENT_TIMESTAMP"})
+  @Column({ default: () => "CURRENT_TIMESTAMP"})
   updated: Date;
``
and after that it seems to run.

I can signup and login, terrible error reporting as usual, make sure to use long enough usernames/passwords.

However, article creation fails with:
``
Unhandled Rejection (TypeError): Cannot read property 'slug' of undefined
``

= Sails.js
{c}
{parent=node-js-web-framework}

https://github.com/balderdashy/sails

\x[front-end-web-framework] integration: no native one:
* \x[react]:
  * https://github.com/markmur/sails-react-webpack
  * https://github.com/sepineda/sails-react-webpack Last updated as of 2021: 2018
  * https://stackoverflow.com/questions/28331032/sails-js-with-react-js-how-to-do-it-correctly
* \x[vue-js]:
  * https://github.com/mikermcneil/ration Issue tracker disabled...
    * live at: https://ration.io/
    * selling a course at: https://courses.platzi.com/courses/sails-js/
  * https://platzi.com/cursos/javascript-pro/ non-free and in Spanish pointed to from official README...
  * \x[nuxt-js]:
    * https://github.com/AngelMunoz/sails-nuxt

TODO \x[server-side-rendering] anyone??
* https://stackoverflow.com/questions/32412590/how-to-use-react-js-to-render-server-side-template-on-sails-js
* https://stackoverflow.com/questions/54217147/ssr-for-react-redux-application-with-sails
* https://gist.github.com/duffpod/746a660bcddfd986878c92dde1a04f06
* https://www.reddit.com/r/reactjs/comments/7saoqm/sailsjs_or_adonisjs_designed_for_server_side/

= NVM
{c}
{parent=node-js}

https://github.com/nvm-sh/nvm

The best way to install Node.js:
* https://askubuntu.com/questions/49390/how-do-i-install-the-latest-version-of-node-js/425888#425888
* https://askubuntu.com/questions/594656/how-to-install-the-latest-versions-of-nodejs-and-npm/971612#971612
* https://askubuntu.com/questions/426750/how-can-i-update-my-nodejs-to-the-latest-version/1115255#1115255

= TypeScript
{c}
{parent=javascript}
{wiki}

TypeScript is good. It does find errors in your \x[javascript]. But it is a form of "turd polishing". But \x[ciro-santilli] would rather have a polished turd than a non-polished one.

Part of the reason TypeScript became popular is due to the universality of \x[asset-bundler]{p}. Once you are already using an asset bundler, changing the `.js` extension into `.ts` to get a less shitty experience is an easy choice.

The other big reason is that JavaScript is so lose with type conversions, notably undefined happily converting to strings without problems, and any missing properties of Object happily being undefined. We should actually use ES6 Map everywhere.

Since TypeScript is not the default form of the language however, it inevitably happens that you need to add external types for a gazillion projects that are using raw JavaScript, and sometimes fight a lot to get things to work. And so we have: https://github.com/DefinitelyTyped/DefinitelyTyped[]. Not sure if this is beautiful, or frightening.

but in the end, as with other type of static linters, TypeScript generally transforms a few hard to debug runtime issues, into a bunch of stupid to solve compile time issues, which is generally a good thing.

Examples under \a[typescript]. Run with `npx example.ts`.
* \a[typescript/inferFromInit.ts]. Should fail with:
  \Q[hello.ts:2:1 - error TS2322: Type 'string' is not assignable to type 'number]
  since TypeScript infers the type of `i` from first assignment as `string`, and we then attempt a `number` assignment later on
* \a[typescript/inferAfterInit.ts]. Does not fail, as the first assignment cannot be computationally determined at runtime without breaking computer science.
* \a[typescript/js-from-ts/main.ts]: call \x[javascript] file \a[typescript/js-from-ts/notmain.js] from \x[typescript].
  ``
  npx tsc jsFromTs.ts && node jsFromTs.js
  ``
  TODO we are unable to make it typecheck that require, i.e. make that fail, but we've seen cases in complex codebases where that did happen and https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html has infinite information on supporting it. So... how to make it fail??

= Universal Module Definition
{c}
{parent=javascript}
{title2=UMD}
{wiki}

Since \x[javascript] devs are uncapable of defining an unified import standard, this design pattern emerged where you just check every magic global one by one. Here's a demo where a Js library works on both the \x[browser] and from \x[node-js]:
* \a[web-cheat/umd_my_lib.js]: the library
* \a[web-cheat/umd.js]: \x[node-js] user
* \a[web-cheat/umd.html]: \x[browser] user

= Perl
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

TODO why did \x[python] kill it? They are very similar and existed at similar times, and possibly Perl was more popular early on.
* https://www.quora.com/Why-is-Perl-no-longer-a-popular-programming-language on \x[quora]

Perl likely killed \x[tcl].

= Python
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

= Python
{c}
{synonym}

\x[ciro-santilli-s-wife] was studying a bit of basic Python for some job interviews, when she noticed:
\Q[Wow, `in` is so powerful! You can do `for x in list`, `for x in dict` and `if x in dict` all with that single word!]
Damn right, girl, damn right.

Ciro remembers hearing about \x[python] online briefly. It seemed like a distant thing from the \x[java]/\x[c-programming-language] dominated (and outdated) university courses. Then some teaching assistant mentioned during some course when Ciro was at \x[ecole-polytechnique] that Python was a great integration tool. That sounded cool.

Then finally, \x[when-the-ecole-polytechnique-mathematics-department-didn-t-let-ciro-santilli-do-his-internship-of-choice-due-to-grades] and Ciro was at an useless last moment backup internship, he learned more Python instead of doing his internship job, and was hooked.

= pip
{disambiguate=package manager}
{parent=python-programming-language}
{wiki}

How many stupid bugs. How many stupid bugs do we need to face???
* this fucking train-wreck cannot come up with a unified documented way of specifying dependencies:
  * https://stackoverflow.com/questions/14399534/reference-requirements-txt-for-the-install-requires-kwarg-in-setuptools-setup-py
  * https://stackoverflow.com/questions/26900328/install-dependencies-from-setup-py
  * https://stackoverflow.com/questions/30797124/how-to-use-setup-py-to-install-dependencies-only/63743115
  * https://stackoverflow.com/questions/6947988/when-to-use-pip-requirements-file-versus-install-requires-in-setup-py
  So basically `requirements.txt` is the `package-lock.json`. But how to generate it cleanly? You would need to create a virtualenv?
* `pip search` was disabled in 2020: https://stackoverflow.com/questions/17373473/how-do-i-search-for-an-available-python-package-using-pip[]. WTF. If server load is a problem, just create a token system! It is hard to understand how such a popular language can't rais enough money to keep such simple server functionality running.

= Python Package Index
{c}
{parent=python-programming-language}
{wiki}

= PyPI
{c}
{synonym}

https://pypi.org

The best package ever is: https://pypi.org/project/china-dictatorship/ see also: https://cirosantilli.com/china-dictatorship/mirrors

= Jupyter Notebook
{c}
{parent=python-programming-language}
{wiki=Project_Jupyter#Jupyter_Notebook}

A waste of time. Output in my source files https://stackoverflow.com/questions/28908319/how-to-clear-an-ipython-notebooks-output-in-all-cells-from-the-linux-terminal/47774393#47774393[pollutes git] and prevents me from editing it in \x[vim]. Just let me run the freacking code and render images as standalone PNGs which I can include from Markdown.

= Python virtualization
{parent=python-programming-language}

= pyenv
{c}
{parent=python-virtualization}

= virtualenv
{parent=python-virtualization}

``
python -m pip install --user virtualenv
virtualenv -p python3.8 .venv
. .venv/bin/activate
``

= Python library
{c}
{parent=python-programming-language}

= NumPy
{c}
{parent=python-library}
{wiki}

The people who work on this will \x[good][go straight to heaven], no questions asked.

= Python web framework
{c}
{parent=python-library}

= Django
{c}
{disambiguate=web-framework}
{parent=python-web-framework}
{wiki}

\x[react] setups:
* https://stackoverflow.com/questions/41867055/how-to-get-django-and-reactjs-to-work-together
* https://www.fullstackpython.com/react.html

One problem with Django is that it does not expose its \x[orm] as an external library: https://stackoverflow.com/questions/33170016/how-to-use-django-1-8-5-orm-without-creating-a-django-project which is wasteful of development time.

= gothinkster/django-realworld-example-app
{parent=django-web-framework}

As of 2021, last updated 2016, and python 3.5 appears to be mandatory or else:
``
RuntimeError: __class__ not set defining 'AbstractBaseUser' as <class 'django.contrib.auth.base_user.AbstractBaseUser'>. Was __classcell__ propagated to type.__new__?
``
which apparently broke in 3.6: https://stackoverflow.com/questions/41343263/provide-classcell-example-for-python-3-6-metaclass and `pyenv` install fails on Ubuntu 20.10, so... fuck. Workarounds at:
* https://askubuntu.com/questions/1034475/the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib-error-when
* https://stackoverflow.com/questions/52873193/error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib-inst
but am I in the mood considering that the ancient Django version would require an immediate port anyways? Repo is at Django 1.0, while newest is now already Django 3. The Rails one is broken for the same reason. Fuck 2.

= Ruby
{disambiguate=programming language}
{parent=list-of-programming-languages}
{c}
{wiki}

= Ruby on Rails
{parent=ruby-programming-language}
{c}
{wiki}

The only reason why \x[ruby-programming-language] exists.

This web framework is pretty good as of 2020 compared to others, because it managed to gain a critical community size, and there's a lot of basic setup already done for you.

it is just big shame it wasn't written in \x[python] or even better, \x[node-js], because learning \x[ruby-programming-language] is completely useless for anything else. As of 2020 for example, most \x[node-js] web frameworks feel like crap compared to Rails, you just have to debug so much there.

Used in \x[gitlab], which is why \x[ciro-santilli] touched it.

= Ruby on Rails React integration
{c}
{parent=ruby-on-rails}

Integrations \x[react] integration:
* https://github.com/shakacode/react_on_rails[]: \x[webpack] and \x[server-side-rendering]
* https://github.com/reactjs/react-rails Official on the React side only. Demo app linked from package: https://github.com/BookOfGreg/react-rails-example-app and how it fails: https://github.com/BookOfGreg/react-rails-example-app/issues/30[]... The related projects section has some good links:
* \x[shakacode-react-on-rails]
* https://github.com/hyperstack-org/hyperstack \x[transpiles] Ruby to JavaScript + React. What could possibly go wrong? :-)

= shakacode/react_on_rails
{parent=ruby-on-rails-react-integration}

Uses Redux, while reactjs/react-rails appears to do that more manually

Lots of focus on \x[heroku] deployability, which is fantastic: https://shakacode.gitbooks.io/react-on-rails/content/docs/additional-reading/heroku-deployment.html

Live instance: https://www.reactrails.com/ with source at: https://github.com/shakacode/react-webpack-rails-tutorial Not the most advanced web-app (a \x[gothinkster-realworld]-level would be ideal). Also has clear dependency description, which is nice.

Trying at https://github.com/shakacode/react-webpack-rails-tutorial/tree/8e656f97d7a311bbe999ceceb9463b8479fef9e2 on \x[ubuntu] 20.10. Got some failures: https://github.com/shakacode/react-webpack-rails-tutorial/issues/488 Finally got a version of it working at: https://github.com/shakacode/react-webpack-rails-tutorial/issues/488#issuecomment-812506821

Oh, and the guy behind that project lives in \x[hawaii] (\x[ciro-santilli-s-ideal-city-to-live-in]), has an Asian-mixed son, and two \x[kinesis-advantage-2-keyboard]{p} as seen at https://twitter.com/railsonmaui/status/1377515748910755851[], \x[ciro-santilli] was jealous of him.

= Short Code
{c}
{disambiguate=programming-language}
{parent=list-of-programming-languages}
{title2=1950}
{wiki=Short_Code_(computer_language)}

= Tcl
{c}
{parent=list-of-programming-languages}
{wiki}

One of the first big \x[interpreted-programming-language]{p} to go a bit further than \x[bash]' word replacement insanity.

To the modern viewer, it feels like a middle ground between \x[bash] and \x[python].

It was completely insane however, and it just died: \x[python] is much saner, and \x[bash], although totally insane still \x[code-golf][golfs] better, especially on the file manipulation context.

= Recreational programming
{parent=software}

= Code golf
{parent=recreational-programming}
{wiki}

= Search engine
{parent=software}
{wiki}

= Reverse image search
{parent=software}
{wiki}

= Scientific computing
{parent=software}
{wiki}

= Computer simulation
{parent=scientific-computing}
{wiki}

= Computer algebra system
{parent=scientific-computing}
{wiki}

= SymPy
{parent=computer-algebra-system}
{wiki}

This is the dream \x[exam][cheating] software every student should know about.

It also has serious applications obviously. https://www.sympy.org/scipy-2017-codegen-tutorial/ mentions \x[code-generation] capabilities, which sounds super cool!

The code in this section was tested on `sympy==1.8` and \x[python] 3.9.5.

Let's start with some basics. \x[fraction]{p}:
``
from sympy import *
sympify(2)/3 + sympify(1)/2
``
outputs:
``
7/6
``
Note that this is an exact value, it does not get converted to \x[floating-point-number]{p} where precision could be lost!

We can also do everything with symbols:
``
from sympy import *
x, y = symbols('x y')
expr = x/3 + y/2
print(expr)
``
outputs:
``
x/3 + y/2
``
We can now evaluate that expression object at any time:
``
expr.subs({x: 1, y: 2})
``
outputs:
``
4/3
``

How about a square root?
``
x = sqrt(2)
print(x)
``
outputs:
``
sqrt(2)
``
so we understand that the value was kept without simplification. And of course:
``
sqrt(2)**2
``
outputs `2`. Also:
``
sqrt(-1)
``
outputs:
``
I
``
`I` is the \x[imaginary-unit]. We can use that symbol directly as well, e.g.:
``
I*I
``
gives:
``
-1
``

Let's do some trigonometry:
``
cos(pi)
``
gives:
``
-1
``
and:
``
cos(pi/4)
``
gives:
``
sqrt(2)/2
``
The exponential also works:
``
exp(I*pi)
``
gives;
``
-1
``

Now for some \x[calculus]. To find the \x[derivative] of the \x[natural-logarithm]:
``
from sympy import *
x = symbols('x')
diff(ln(x), x)
``
outputs:
``
1/x
``
Just read that. One over x. Beauty.

Let's do some more. Let's solve a simple \x[differential-equation]:
``
y''(t) - 2y'(t) + y(t) = sin(t)
``
Doing:
``
from sympy import *
x = symbols('x')
f, g = symbols('f g', cls=Function)
diffeq = Eq(f(x).diff(x, x) - 2*f(x).diff(x) + f(x), sin(x)**4)
print(dsolve(diffeq, f(x)))
``
outputs:
``
Eq(f(x), (C1 + C2*x)*exp(x) + cos(x)/2)
``
which means:
$$
f(x) = C_1 + C_2x e^x + cos(x)/2
$$
To be fair though, it can't do anything crazy, it likely just goes over known patterns that it has solvers for, e.g. if we change it to:
``
diffeq = Eq(f(x).diff(x, x)**2 + f(x), 0)
``
it just blows up:
``
NotImplementedError: solve: Cannot solve f(x) + Derivative(f(x), (x, 2))**2
``
Sad.

Let's try some \x[polynomial-equation]{p}:
``
from sympy import *
x, a, b, c = symbols('x a b c d e f')
eq = Eq(a*x**2 + b*x + c, 0)
sol = solveset(eq, x)
print(sol)
``
which outputs:
``
FiniteSet(-b/(2*a) - sqrt(-4*a*c + b**2)/(2*a), -b/(2*a) + sqrt(-4*a*c + b**2)/(2*a))
``
which is a not amazingly nice version of the \x[quadratic-formula]. Let's evaluate with some specific constants after the fact:
``
sol.subs({a: 1, b: 2, c: 3})
``
which outputs
``
FiniteSet(-1 + sqrt(2)*I, -1 - sqrt(2)*I)
``
Let's see if it handles the \x[quartic-equation]:
``
x, a, b, c, d, e, f = symbols('x a b c d e f')
eq = Eq(e*x**4 + d*x**3 + c*x**2 + b*x + a, 0)
solveset(eq, x)
``
Something comes out. It takes up the entire terimnal. Naughty. And now let's try to \x[abel-ruffini-theorem][mess with it]:
``
x, a, b, c, d, e, f = symbols('x a b c d e f')
eq = Eq(f*x**5 + e*x**4 + d*x**3 + c*x**2 + b*x + a, 0)
solveset(eq, x)
``
and this time it spits out something more magic:
``
ConditionSet(x, Eq(a + b*x + c*x**2 + d*x**3 + e*x**4 + f*x**5, 0), Complexes)
``
Oh well.

Let's try some \x[linear-algebra].
``
m = Matrix([[1, 2], [3, 4]])
``
Let's invert it:
``
m**-1
``
outputs:
``
Matrix([
[ -2,    1],
[3/2, -1/2]])
``

= Scientific visualization software
{parent=scientific-computing}

https://en.wikipedia.org/wiki/Scientific_visualization

\x[ciro-santilli][Ciro's] large dataset survey: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]{full}.

= Open source scientific computing consultancies
{parent=scientific-visualization-software}

Huge respect to this companies.

= Enthought
{c}
{parent=open-source-scientific-computing-consultancies}
{wiki}

= Kitware
{c}
{parent=open-source-scientific-computing-consultancies}
{wiki}

= Plotting software
{parent=scientific-visualization-software}

= Survey of open source interactive plotting software with a 10 million point scatter plot benchmark by Ciro Santilli
{c}
{parent=plotting-software}

https://stackoverflow.com/questions/5854515/large-plot-20-million-samples-gigabytes-of-data/55967461#55967461

By \x[ciro-santilli].

\Image[VisIt_zoom_in_10_million_straight_line_plot_with_some_marked_points.png]
{source=https://stackoverflow.com/questions/5854515/large-plot-20-million-samples-gigabytes-of-data/55967461#55967461}

= Matplotlib
{c}
{parent=plotting-software}
{wiki}

It does a huge percentage of what you want easily, and from \x[python][the language that you want to use].

Tends to be \x[ciro-santilli][Ciro]'s pick if \x[gnuplot] can't handle the use case, or if the project is really really serious.

Couldn't handle exploration of large datasets though: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]

Examples:
* \a[matplotlib/hello.py]
* \a[matplotlib/educational2d.py]
* \a[matplotlib/axis.py]
* \a[matplotlib/label.py]
* Line style
  * \a[matplotlib/line_points.py]
  * \a[matplotlib/tick.py]
  * \a[matplotlib/prop_cycle.py]
* Subplots
  * \a[matplotlib/subplots.py]
  * \a[matplotlib/subplots_add.py]
* \a[matplotlib/two_lines.py]
  * \a[matplotlib/plot_matrix.py]
  * \a[matplotlib/plot_matrix_x.py]
  * \a[matplotlib/legend_outside.py]
* Data from files
  * \a[matplotlib/plotfile.py]
* Specialized
  * \a[matplotlib/bloch_sphere_walk.py]
  * \a[matplotlib/bloch_sphere.py]

= gnuplot
{c}
{parent=plotting-software}
{wiki=Gnuplot}

Tends to be \x[ciro-santilli]'s first attempt for quick and dirty graphing: https://github.com/cirosantilli/gnuplot-cheat[].

\x[domain-specific-language]. When it get the jobs done, it is in 3 lines and it feels great.

When it doesn't, you Google for an hours, and then you give up in frustration, and fall back to \x[matplotlib].

Couldn't handle exploration of large datasets though: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]

= Software bug
{parent=software}
{wiki}

= Glitch
{parent=software-bug}
{wiki}

A glitch is more precisely a \x[software-bug] that is hard to reproduce. But it has also been used to mean a software bug that is not very serious.

= Debugging
{parent=software-bug}
{wiki}

Related:

* \x[keep-debug-notes]{child}

= Bisection
{disambiguate=software engineering}
{parent=debugging}

One of the Holiest age old debugging techniques!

\x[git] has some helpers to help you achieve bisection Nirvana: https://stackoverflow.com/questions/4713088/how-to-use-git-bisect/22592593#22592593

Obviously not restricted to software engineering alone, and used in all areas of engineering, e.g. \x[video-air-tight-vs-vacuum-tight-by-alphaphoenix-2020] uses it in \x[vacuum-engineering].

The cool thing about bisection is that it is a brainless process: unlike when using a \x[debugger], you don't have to understand anything about the system, and it incredibly narrows down the problem cause for you. Not having to think is great!

= Debugger
{parent=debugging}
{wiki}

= GNU Debugger
{c}
{parent=debugger}

= GDB
{c}
{synonym}
{title2}

Just add \x[gdb-dashboard], and you're good to go.

= Reverse debugging
{parent=gnu-debugger}

Nirvana!!!

The best open source implementation as of 2020 seems to be: \x[mozilla-rr].

* https://stackoverflow.com/questions/1206872/go-to-previous-line-in-gdb/46996380#46996380
* https://stackoverflow.com/questions/1470434/how-does-reverse-debugging-work/53063242#53063242
* https://stackoverflow.com/questions/3649468/setting-breakpoint-in-gdb-where-the-function-returns/46116927#46116927
* https://stackoverflow.com/questions/27770896/how-to-debug-a-rare-deadlock/50073993#50073993
* https://stackoverflow.com/questions/522619/how-to-do-bidirectional-or-reverse-debugging-of-programs/50074106#50074106 link only, marked as duplicate of go to previous line
* https://softwareengineering.stackexchange.com/questions/181527/why-is-reverse-debugging-rarely-used

= Mozilla rr
{c}
{parent=reverse-debugging}

https://github.com/mozilla/rr

= GDB Dashboard
{c}
{parent=gnu-debugger}

https://github.com/cyrus-and/gdb-dashboard

\x[gdb] Nirvana?

https://stackoverflow.com/questions/10115540/gdb-split-view-with-code/51301717#51301717

\Image[https://web.archive.org/web/20200504130959if_/https://i.stack.imgur.com/mHC8f.png]
{height=600}
{title=Screenshot of terminal running GDB Dashboard.}
{source=https://github.com/cyrus-and/gdb-dashboard/tree/2d31a3b391e5d0e032b791e1fb7172338b02cecb}

= Minimal working example
{parent=software-bug}
{wiki}

The \x[musical-study] of \x[software-engineering].

\x[ciro-santilli] is obsessed by those in order to learn any new concept, not just for bug reporting.

This includes to learn more theoretical subjects like \x[physics] and \x[mathematics].

= Software testing
{parent=software-bug}
{wiki}

= test_executables.js
{file}
{parent=software-testing}

This script tests all executables under a selected directory.

\x[ciro-santilli] has been writing scripts of that type for a long time in order to test his \x[ciro-santilli-s-documentation-superpowers][programming self-learning setups with asserts].

The most advanced of those being the https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9b6552ab6c66cb14d531eff903c4e78f3561e9ca/test[test system] of \x[linux-kernel-module-cheat].

But had too much stuff that would be specific to that project, so Ciro decided to start this new one in \x[node-js], hopefully it will also be the last he ever writes.

A sample usage of the test library can be seen at: \a[nodejs/sequelize/test].

= Assertion
{disambiguate=software development}
{parent=software-testing}
{wiki}

= Continuous integration
{parent=software-testing}
{wiki}

= CI
{c}
{title2}
{synonym}

= Test driven development
{parent=software-testing}
{wiki}

This is a good approach. The downside is that while you are developing the implementation and testing interactively you might notice that the requirements are wrong, and then the tests have to change.

One intermediate approach \x[ciro-santilli] likes is to do the implementation and be happy with interactive usage, then create the test, make it pass, then remove the code that would make it pass, and see it fail. This does have a risk that you will forget to test something, but Ciro finds it is a worth it generally. Unless it really is one of those features that you are unable to develop without an automated test, generally more "logical/mathematical" stuff.

= Software documentation
{parent=software}
{wiki}

= README
{c}
{parent=software-documentation}
{wiki}

Please, use \x[asciidoc] and \x[one-page-to-rule-them-all].

= Software engineering
{parent=software}
{wiki}

= Software development
{parent=software-engineering}
{wiki}

= Software development principle
{parent=software-development}

= Don't repeat yourself
{parent=software-development-principle}
{wiki}

= Yet another
{parent=don-t-repeat-yourself}
{wiki}

The mandatory \x[xkcd]: \x[xkcd-927-standards].

= DRY
{c}
{synonym}

= Ciro Santilli's software engineering wisdom
{c}
{parent=software-engineering}
{tag=essays-by-ciro-santilli}

Of course, "\x[ciro-santilli]" with quotes, since all of those are either taken directly from others, or had been previously formulated by others.

= Excessive encapsulation is the root of much evil
{parent=ciro-santilli-s-software-engineering-wisdom}

Some anecdotes.

\x[ciro-santilli] never splits up functions unless there is more than one calling point. If you split early, the chances that the interface will be wrong are huge, and a much larger refactoring follows.

If you just want to separate variables, just use a scope e.g.:

``
int cross_block_var;

// First step.
{
    int myvar;
}

// Second step.
{
    int myvar;
}
``

Ciro has seen and had to deal with in his lifetime with two projects that had like 3 to 10 git separate Git repositories, all created and maintained by the same small group of developers of the same organization, even though one could not build without the other. Keeping everything in sync was Hell! Why not just have three directories inside a single repository with a single source of truth?

Another important case: \x[linux][Linux] should have at least a C standard library, init system, and shell in-tree, like \x[bsd-operating-system]{p}, as mentioned at: \x[linux][Linux]{full}.

= The development cycle time is your God
{parent=ciro-santilli-s-software-engineering-wisdom}

A slow development test cycle will kill your software.

New developers won't want to learn your project, because they would rather shoot themselves.

This means that build time, and the time to run tests, must be short.

5 seconds to rebuild is the maximum upper limit.

Of course, at some point software gets large enough that things won't fit anymore in 5 seconds. But then you \i[must] have either some kind of build caching, or options to do partial builds/tests that will bring things down to that 5 second mark.

You also have to spend some time profiling execution and build from scratch times.

A slow build from scratch will mean that your \x[continuous-integration] costs a lot, money that could be invested in a new developer!

It also means that people won't bother to reproduce bugs on given commits, or \x[bisection-software-engineering][bisect stuff].

One anecdote comes to mind. \x[ciro-santilli] was trying to debug something, and more experience colleague came over.

To reproduce a problem, ciro was running one command, wait 5 seconds, run a second command, wait 5 seconds, run a third command:
``
cmd1
# wait 5 seconds
cmd2
# wait 5 seconds
cmd3
``

The first thing the colleague said: join those three commands into one:
``
cmd1;cmd2;cmd3
``
And so, \x[the-correlation-between-software-engineers-and-buddhism][Ciro was enlightened].

= You aren't gonna need it
{parent=ciro-santilli-s-software-engineering-wisdom}
{wiki}

= YAGNI
{c}
{synonym}
{title2}

Sometimes you are really certain that something is a required substep for another thing that is coming right afterwards. 

When things are this concrete, fine, just do the substep.

But you have to always beware of cases where "I'm sure this will be needed at some unspecified point in the future", because such points tends to never happen.

YAGNI is so fundamental, there are several closely related concepts to it:
* \x[backward-design]
* \x[assign-the-hard-task-to-the-lazy-person]

= KISS principle
{c}
{parent=ciro-santilli-s-software-engineering-wisdom}
{tag=simplicity-is-the-ultimate-sophistication}
{wiki}

= Keep it simple, stupid
{synonym}
{title2}

The software engineer phrasing of \x[simplicity-is-the-ultimate-sophistication].

Like all other principles, it is not absolute.

But it is something that you should always have on the back of your mind.

\x[you-aren-t-gonna-need-it] is closely related, as generally the extra unnecessary complications are set in place to accommodate useless features that will never be needed.

= Hofstadter's law
{c}
{parent=ciro-santilli-s-software-engineering-wisdom}
{wiki}

= It is impossible to predict how long it will take to do something
{synonym}

The trivial takes a few hours.

The easy takes a week.

And what seemed hard takes a few hours.

As "deadlines" approach, feature sets get cut down, then there are delays, and finally a feasible feature set is delivered some time after the deadline.

The only deadlines that can be met are those of tasks which have already been done but not announced.

This is of course \x[hofstadter-s-law].

On the other hand, it is also known that the time it takes for a task to be done expands without limits to match the deadline. And therefore, without deadlines, tasks will take forever and never get done.

And so, in a moment, perceiving \x[koan][this paradox], \x[the-correlation-between-software-engineers-and-buddhism][Ciro was enlightened].

= Sometimes you can debug software by staring at the code for long enough
{parent=ciro-santilli-s-software-engineering-wisdom}
{wiki}

Once upon a time, when \x[ciro-santilli] had a job, he had a programming problem.

A senior developer came over, and rather than trying to run and modify the code like an idiot, which is what \x[ciro-santilli] usually does (see also experimentalism remarks at \x[ciro-santilli-s-bad-old-event-memory]{full}), he just stared at the code for about 10 minutes.

We knew that the problem was likely in a particular function, but it was really hard to see why things were going wrong.

After the 10 minutes of examining every line in minute detail, he said:
\Q[I think this function call has such or such weird edge case]
and truly, that was the cause.

And so, \x[the-correlation-between-software-engineers-and-buddhism][Ciro was enlightened].

= Office space design and remote work
{parent=ciro-santilli-s-software-engineering-wisdom}

Working remotely is hard if you don't already highly master the software and enterprise systems used.

Also you don't feel people's love as strongly, and usefulness is built on love, see also \x[steve-jobs]'s Pixar office space design philosophy.

But please, give workers a small silent office so that we can concentrate instead of a silly open space, and create an internal social network so people can see what others are doing.

Remote working is much better if the majority of the team also does it, otherwise you will get excluded. Maybe after VR...

= Keep debug notes
{parent=ciro-santilli-s-software-engineering-wisdom}

When \x[debugging] complex software, make sure to keep notes of every interesting find you make in a note file, as you extract it from the \x[integrated-development-environment] or \x[debugger].

Especially if your \x[ciro-santilli-s-bad-old-event-memory][memory sucks like Ciro's].

This is incredibly helpful in fully understanding and then solving complex bugs.

= "Hello, World!" program
{parent=software-engineering}
{wiki}

= Hello world
{synonym}

The most important \x[program] ever written!!!

Other programs that can be considered "hello worlds" in different contexts:

* \x[web-development]
  * \x[a-blog-in-every-web-framework]
* \x[video-game]
  * Doom is the hello world \x[shooter-game]

= Time to Hello World
{parent=hello-world-program}

= Software engineer
{parent=software-engineering}
{wiki}

= Programmer
{synonym}

Poet warriors monkeys? Or Code peasants (https://baike.baidu.com/item/码农/10262742[码农]) according to the Chinese.

\x[ciro-santilli] claims to be one of them.

Much like a pianist plays his piano, a software engineer plays his \x[computer].

= The correlation between software engineers and Buddhism
{parent=software-engineer}

= A correlation between software engineers and Buddhism
{synonym}

\x[ciro-santilli] believes that there is a positive correlation between being a \x[software-engineer][software engineer] and liking \x[buddhist]-like things.

Maybe it is linked to minimalism and \x[dry], which software engineers value so greatly.

Even Ciro had to try an unoriginal Buddhist joke intro in https://stackoverflow.com/questions/572897/how-does-javascript-prototype-work/23877420#23877420[one of this Stack Overflow answers].

Ciro also feels that his https://github.com/cirosantilli/linux-kernel-module-cheat/tree/e1d0a2fafbb35c9e65c1a8a0b6d46df3e9161461/userland["minimal reproducible example" scientific language/concept learning method obsession] of breaking things into tiny sub-problems has a strong link with \x[koan]{p}.

Other programmers are equally obsessed by koans:
* http://www.catb.org/~esr/writings/unix-koans/ "The Unix Koans of Master Foo - Rootless Root (无根的根)" by the legendary https://en.wikipedia.org/wiki/Eric_S._Raymond[Eric Steven Raymond] is notable
* http://thecodelesscode.com/ "The Codeless Code" by anonymous Qi.
* http://canonical.org/~kragen/tao-of-programming.html
* https://wiki.c2.com/?MysticalProgrammingKoans
* http://rubykoans.com/[] even \x[evil] programming languages adopt them!

Another thing that points the correlation out is the existence of https://wattsalan.github.io/ on a `github.io` about \x[alan-watts].

= List of software engineers
{parent=software-engineer}

= Aaron Swartz
{c}
{parent=list-of-software-engineers}
{wiki}

Aaron, \x[ciro-santilli] will complete \x[ourbigbook-com][your quest to make eduction free]. Just \x[legally] this time, with the and with the \x[creative-commons-license] you helped to create.

Ciro likes how \x[the-internet-s-own-boy-2014] explains how Aaron felt like high school was \x[bullshit], and that he could \x[autodidacticism][learn whatever he wanted from books], \x[ourbigbook-com/motivation][which is one of Ciro's key feelings].

It also mentions how he was a natural teacher from a very early age.

= Guerilla Open Access Manifesto by Aaron Swartz (2008)
{parent=aaron-swartz}
{wiki}

https://gist.github.com/briandoll/4522952

Hmmm, he does not know how to spell guerilla? \x[sic]? https://www.quora.com/What-is-the-correct-spelling-guerilla-or-guerrilla

Note to self: if you are going to commit a \x[crime], don't publish your plans online.

\x[ross-ulbricht]'s diaries come to mind.

That's how \x[russian] \x[shadow-library] maintainers do it, they know how to crime good old Russians. Maybe there is a good thing about having \x[dictatorship]{p} in the world that give zero fucks about \x[american] copyright laws. There will always be some random \x[russian] academic who will implement this and not go to jail. Maybe it's even \x[government][state] sponsored.

= The Internet's Own Boy (2014)
{parent=aaron-swartz}
{wiki}

= Sandy Maguire
{c}
{parent=list-of-software-engineers}
{wiki}

* https://sandymaguire.me
* https://github.com/isovector/

Lots of similar ideologies to \x[ciro-santilli], love it:
* https://sandymaguire.me/about/[]:
  * he's an \x[idealist]
  \Q[I might best be described somewhere between independent researcher and voluntarily-unemployed bum. At the ripe old age of 27 I decided to quit my highly-lucrative engineering job and decide to focus more on living than on grinding for the man. It's what you might call a work in progress.]
* https://sandymaguire.me/blog/reaching-climbing/[]: \x[don-t-be-a-pussy]
  \Q[Last Friday was my final day at work. According to my facebook profile, I am now "happily retired." As of today, I don't plan to do another day of "traditional work" in my life. That's not to say that I'll be sitting idle playing tiddly winks. I want to build things, to dedicate my life to independent study, and to get really, really good with building communities. I don't have time for any of this "work" stuff that somehow pervades our entire culture, choking our inspiration and sapping our energy away from the things we'd rather be doing.]
  One is also reminded of \x[gwern-branwen]. Sandy is also into self-improvement stuff, so even more like Gwern. This is a point Ciro diverges on. Ciro works actively on self-worsening.
* he thinks \x[university] is useless:
  * https://sandymaguire.me/blog/where-uni-fails/ Where University Fails (2018), mostly talking about \x[backward-design]
  * https://sandymaguire.me/blog/gatekept/ rejected from \x[imperial-college] \x[phd] program due to \x[grade-exam]{p} being slightly too low for their stupid requirements, even though he had a referral already, and an amazing CV
* he likes \x[jazz]: https://sandymaguire.me/blog/too-smart/

Other interesting points:
* https://sandymaguire.me/blog/sandy-runback/ he changed his own name to Sandy because he didn't like it, he was born Alexander
* https://algebradriven.design/ \x[closed-source] books though, ouch. At least they seem to have been made with \x[leanpub] though, could be worse.

He's a \x[haskell] person.

= Dan Dascalescu
{c}
{parent=list-of-software-engineers}

His website is down as of 2020, shame: https://wiki.dandascalescu.com/essays/english-universal-language

= English as a universal language by Dan Dascalescu (2008)
{c}
{parent=dan-dascalescu}

https://wiki.dandascalescu.com/essays/english-universal-language

https://web.archive.org/web/20200317221752/https://wiki.dandascalescu.com/essays/english-universal-language

\x[dan-dascalescu]'s version of \x[having-more-than-one-natural-language-is-bad-for-the-world].

= Donald Knuth
{c}
{parent=list-of-software-engineers}
{wiki}

= Knuth reward check
{c}
{parent=donald-knuth}
{wiki}

* https://tex.stackexchange.com/questions/110586/327-68-knuth-reward-check
* https://www.quora.com/What-is-it-like-to-receive-a-Knuth-reward-check
* https://www-cs-faculty.stanford.edu/~knuth/boss.html

= Eli Benderski
{c}
{parent=list-of-software-engineers}

Homepage: https://eli.thegreenplace.net/

Amazing \x[systems-programming] tutorials. Whenever you \x[google] a hard topic, his blog comes up.

Also has many great contributions on \x[stack-overflow]: https://stackoverflow.com/users/8206/eli-bendersky[]

As of 2016, Eli worked at \x[google] (https://dl.acm.org/citation.cfm?doid=2854038.2854041[reference]). TODO before that, I had found his earlier info previously but lost it.

Eli focuses mostly on \x[compiler-toolchain]{p}, apparently with specific focus on  

He also has some \x[mathematics] stuff, so cute: https://eli.thegreenplace.net/2015/change-of-basis-in-linear-algebra/

= Fabrice Bellard
{c}
{parent=list-of-software-engineers}
{wiki}

Creator of \x[qemu] and \x[ffmpeg], both of which \x[ciro-santilli] deeply respects. And a bunch other random stuff.

What is shocking about Fabrice this is that both are insanely important software that \x[ciro-santilli] really likes, and both seem to be completely unrelated subjects!

\x[google] made billions on top of this dude:
* \x[ffmpeg-is-the-backend-of-youtube]
* \x[qemu] is the default emulator for https://en.wikipedia.org/wiki/Android_Studio[Android Studio] as of 2019, which \x[android] developers use by default under the hood to develop Android Apps on their desktop without the need for a real device.

At last but not least, Fabrice also studied in the same school that Ciro studied in France, \x[ecole-polytechnique].

It is a shame that he keeps such a low profile, there are no videos of him on the web, and he https://smartbear.com/blog/test-and-monitor/fabrice-bellard-portrait-of-a-super-productive-pro/[declines interviews].

Another surprising fact is that Fabrice has not worked for the "Big Tech Companies" as far as can be publicly seen, but rather mostly on smaller companies that he co-founded: https://www.quora.com/Computer-Programmers/Computer-Programmers-Where-is-Fabrice-Bellard-employed

= Gwern Branwen
{c}
{parent=software-engineer}

A \x[lesswrong] person.

= gwern.net
{c}
{parent=gwern-branwen}
{tag=the-best-personal-webpages-of-all-time}

https://www.gwern.net/

One thing that annoys \x[ciro-santilli] about that website are the footnote overload. Ciro likes linear things.

= Richard Stallman
{c}
{parent=software-engineer}
{wiki}

TODO find the best source for the amazing "I have done your mother" quote.

= Linus Torvalds
{c}
{parent=software-engineer}
{wiki}

= Tim O'Reilly
{c}
{parent=software-engineer}
{wiki}

= Computer programming
{parent=software-engineering}
{wiki}

= Programming
{synonym}

Programming is hard. To \x[ciro-santilli], it's almost masochistic.

What makes Ciro especially mad when programming is not the hard things.

It is the things that should be easy, but aren't, and which take up a lot of your programming time.

Especially when you are already a few levels of "simple problems" down from your original goal, and another one of them shows up.

This is basically the cause of \x[hofstadter-s-law].

But of course, it is because it is hard that it feels amazing when you achieve your goal.

Putting a complex and useful program together is like composing a symphony, or reaching the summit of a hard \x[rock-climbing] proble.

= Software portability
{parent=software}
{wiki}

= Porting
{parent=software-portability}
{wiki}

= Port
{disambiguate=software-portability}
{synonym}

= Source code
{parent=software}
{wiki}

= The best code is no code at all
{parent=source-code}

Some \x[blog]{p}:
* https://blog.codinghorror.com/the-best-code-is-no-code-at-all/ The Best Code is No Code At All (2007)
* http://www.skrenta.com/2007/05/code_is_our_enemy.html Code is our enemy (2007)

Also resonates with \x[backward-design].

= Use The Source Luke
{parent=source-code}

https://wiki.c2.com/?UseTheSourceLuke

= Systems programming
{parent=source-code}
{wiki}

\x[ciro-santilli]'s definition: https://softwareengineering.stackexchange.com/questions/151610/what-exactly-is-system-programming/399625#399625

Ciro's tutorial: \x[linux-kernel-module-cheat].

Ciro's word of caution for 2019 aspiring system programmers: https://cirosantilli.com/linux-kernel-module-cheat/#should-you-waste-your-life-with-systems-programming[Should you waste your life with systems programming?]

= Operating system
{parent=systems-programming}
{title2=OS}
{wiki}

Magic software that allows you to write a single program that runs on a wide range of hardware.

= Driver
{disambiguate=software}
{parent=operating-system}
{wiki}

= UNIX
{c}
{parent=operating-system}
{wiki}

= Linux
{c}
{parent=operating-system}
{wiki}

It ain't perfect, but it's decent enough.

From a technical point of view, it can do anything that \x[microsoft-windows] can. Except being forcefully installed on every non-\x[macos] 2019 computer you can buy.

\x[ciro-santilli]'s conversion to Linux happened around 2012, and was a central part of \x[ciro-santilli-s-open-source-enlightenment], since it fundamentally enables the discovery and contribution to \x[open-source-software]. Because what awesome open source person would waste time porting their amazing projects to closed source OSes?

Ciro's modest nature can be seen as he likes to compare this event https://en.wikipedia.org/wiki/Great_Renunciation[Buddha's Great Renunciation].

Linux should track glibc and \x[posix-command-line-utility]{p} in-tree like \x[bsd-operating-system], otherwise people have \x[linux-kernel-module-cheat][no way to get the thing running in the first place without blobs or large out-of-tree scripts]! https://blog.farhan.codes/2018/06/25/linux-maintains-bugs-the-real-reason-ifconfig-on-linux-is-deprecated/[Another enlightened soul] who agrees.

Particularly interesting in the history of Linux is how it won out over the open competitors that were coming up in the time: https://en.wikipedia.org/wiki/MINIX[MINIX] (see https://ponderwall.com/index.php/2019/04/02/linux-tanenbaum-newsgroup-linus-torvalds/[the chat]) and \x[bsd-operating-system] that got https://en.wikipedia.org/wiki/UNIX_System_Laboratories,_Inc._v._Berkeley_Software_Design,_Inc.[legally bogged down] at the critical growth moment.

You must watch this: \x[truth-happens-advertisement-by-red-hat].

\Image[https://web.archive.org/web/20210129024945if_/https://imgs.xkcd.com/comics/supported_features.png]
{title=\x[xkcd] 619: Supported Features.}
{description=This perfectly illustrates Linux development. First features that matter. Then useless features.}
{source=https://xkcd.com/619/}

\Video[http://youtube.com/watch?v=njos57IJf-0]
{title=\x[bill-gates] vs \x[steve-jobs] by \x[epic-rap-battles-of-history] (2012)}
{description=Just stop whatever you are doing, and watch this right now. "I'm on Linux, bitch, I thought you GNU". https://epicrapbattlesofhistory.fandom.com/wiki/Steve_Jobs_vs_Bill_Gates/Rap_Meanings[Fandom explanations]. It is just a shame that the Bill Gates actor looks absolutely nothing like the real gates. Actually, the entire Gates/Jobs parts are good, but not genial. But the Linux one is.}

= Tux
{c}
{disambiguate=mascot}
{parent=linux}
{wiki}

= Linux kernel
{c}
{parent=linux}
{wiki}

\x[ciro-santilli] has a tutorial at \x[linux-kernel-module-cheat].

= Linux Foundation
{c}
{parent=linux-kernel}

The fact that this foundation has a bunch of paid, closed, certification courses makes \x[ciro-santilli] not respect them at all. They should be making \x[open-access] content instad!

= Linux insides
{parent=linux-kernel}
{c}

https://github.com/0xAX/linux-insides

Documents the \x[linux-kernel]. Somewhat of a competitor to \x[linux-kernel-module-cheat], but more wordy and less automated.

= Linux distribution
{c}
{parent=linux}
{wiki}

= Distro
{synonym}

= Linux distribution buildable from source
{parent=linux-distribution}

As of 2020, no one knows how to build the major desktop distros fully from source into the ISO, and especially so in a reproducible build way. Everything is done in build servers somewhere with complicated layers of prebuilds. It's crap.

See also: https://cirosantilli.com/linux-kernel-module-cheat/#linux-distro-choice

Yes:
* \x[buildroot]{child}
* \x[nixos]{child}

No:
* \x[ubuntu]: https://askubuntu.com/questions/82302/how-to-compile-ubuntu-from-source-code source: https://quoteinvestigator.com/2010/07/08/laws-sausages/[sausage factory]

= Package manager
{parent=linux-distribution}

= Cross distro package manager
{parent=linux-distribution}

= Flatpak
{c}
{parent=cross-distro-package-manager}
{wiki}

= Snap
{c}
{disambiguate=package manager}
{parent=cross-distro-package-manager}
{wiki}

https://merlijn.sebrechts.be/blog/2020-08-02-why-one-snap-store/ has some very good comments on how `snap` is more closed than \x[flatpak].

= List of Linux distributions
{c}
{parent=linux}
{wiki}

= Android
{c}
{disambiguate=operating system}
{parent=list-of-linux-distributions}

= Android
{synonym}

* the best full featured free OS we have today, since POSIX gave up short of any UI specification, and Chrome OS is not there yet
* usable and likely efficient \x[java] \x[api] for apps if https://en.wikipedia.org/wiki/Google_v._Oracle_America[Oracle doesn't manage to destroy it with its lawsuit]

However, many, many, many terrible horrors come with it:
* it hasn't made the move to desktop for too many years. It could destroy \x[microsoft-windows] and replace it with open source, but they just won't budge towards an unified mobile/desktop setup.
* vendors litter it with uninstallable bloatware that should be \x[illegal]. \x[european-union] to the rescue!!! https://www.cnbc.com/2020/12/15/digital-markets-act-eus-new-rules-on-big-tech.html
* vendors lock down devices so it is very hard to get sudo, let alone to modify their images!
* there isn't enough hardware standardization for open source distros to thrive like on desktop
* code drops mean that "master" is useless and trying to contribute from outside vendors' closed walls is a waste of time: https://stackoverflow.com/questions/1809774/how-to-compile-the-android-aosp-kernel-and-test-it-with-the-android-emulator/48310014#48310014
* if you ever go below the Java API, e.g. to \x[c-plus-plus] or AOSP build, everything is horrendous and https://unix.stackexchange.com/questions/122787/how-to-compile-extra-files-into-the-root-directory-of-an-android-rom[undocumented]
* \x[google] doesn't care about the CLI, even the \x[hello-world] requires creating infinite out-of-control boilerplate from a \x[gui]: https://stackoverflow.com/questions/20801042/how-to-create-android-project-with-gradle-from-command-line/46994747#46994747
* the boot is uber bloated and takes forever in cycle simulators

= Android Open Source Project
{c}
{parent=android-operating-system}
{title2=AOSP}
{wiki}

= Transfer Android 11 camera videos to Ubuntu 20.10
{c}
{parent=android-operating-system}

https://android.stackexchange.com/questions/66385/how-to-transfer-files-from-an-android-phone-to-a-ubuntu-pc-by-using-a-usb-cable/194107#194107

The video folder is `DCIM/Camera`.

= F-Droid
{c}
{parent=android-operating-system}
{wiki}

= Arch Linux
{c}
{parent=list-of-linux-distributions}
{tag=linux-distribution-buildable-from-source}
{wiki}

Respect. Big respect. Those people are hardcore from scratch hackers, and their wiki is amazing: https://wiki.archlinux.org/

It's just that \x[buildroot] is more hardcore ;-)

But can you build the ISO full from source: \x[linux-distribution-buildable-from-source]

= Buildroot
{c}
{parent=list-of-linux-distributions}
{tag=linux-distribution-buildable-from-source}
{wiki}

The basis for \x[linux-kernel-module-cheat].

Buildroot is \x[good].

= BusyBox
{c}
{parent=buildroot}
{wiki}

= NixOS
{c}
{parent=list-of-linux-distributions}
{tag=linux-distribution-buildable-from-source}
{wiki}

This thing is sexy.

= Ubuntu
{c}
{parent=list-of-linux-distributions}
{wiki}

\x[ciro-santilli]'s Linux distro of choice as of 2019.

It ain't perfect, but it's decent enough.

The greatest advantage of it being that it has the likely largest desktop user base, and therefore the highest likelihood that your problems are solved on https://askubuntu.com/users/52975[Ask Ubuntu], and goes together with Ciro's philosophy that \x[having-more-than-one-natural-language-is-bad-for-the-world]["people should do everything in the same way to factor stuff out"], especially the \x[open-source-software][open source losers].

Ciro considers that the killer flaw of Ubuntu, and most desktop distros of 2020, is that no one under the Sun knows how to build them fully from source: \x[linux-distribution-buildable-from-source]. This is why Ciro based the \x[linux-kernel-module-cheat] on \x[buildroot], see also: \x[linux-distribution-buildable-from-source].

= How to report Ubuntu crashes
{parent=ubuntu}
{wiki}

Their crash system does not have an amazing user interface.

Tested on \x[ubuntu-21-10].

After something crashes, look under `/var/crash` for a crash file, which helps to determine which package to report under on \x[launchpad-website].

E.g. a file `/var/crash/_usr_sbin_gdm3.0.crash` makes you want to file the bug under gdm at: https://bugs.launchpad.net/ubuntu/+source/gdm/+filebug

Then, while reporting the bug, you want to give the developpers access to that `.crash` file. But you can't publicly upload it because it contains memory dumps and could contain secret information. The way to do it is to look at the ID under:
``
sudo cat /var/crash/_usr_sbin_gdm3.0.uploaded
``
Ubuntu's crash report system has already uploaded the `.crash` for you, so you just have to confirm it and give the ID on the ticket.

You can view a list of all your uploaded errors at:
``
xdg-open https://errors.ubuntu.com/user/$(sudo cat /var/lib/whoopsie/whoopsie-id)
``
and each of those contain a link to:
``
https://errors.ubuntu.com/oops/<.uloaded error id>
``
which you yourself cannot see.

https://askubuntu.com/questions/434431/how-can-i-read-a-crash-file-from-var-crash asks how to read the `.crash` files.

Running:
``
sudo apport-unpack /var/crash/_usr_sbin_gdm3.0.crash /tmp/app
``
splits it up into a few files, but does not make any major improvements.

`apport-retrace`
``
sudo apt install apport-retrace
sudo chmod 666 /var/crash/_usr_sbin_gdm3.0.crash
apport-retrace -g /var/crash/_usr_sbin_gdm3.0.crash
``
opens GDB with the core dump. Debug symbols are supplied as separate packages, which is a really cool idea: so you should be able to download them after the crash to see symbols. https://askubuntu.com/questions/487222/how-to-install-debug-symbols-for-installed-packages mentions how to install them. Official docs at: https://wiki.ubuntu.com/DebuggingProgramCrash#Debug_Symbol_Packages

Tried:
``
echo "deb http://ddebs.ubuntu.com $(lsb_release -cs) main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ddebs.list
echo -e "deb http://ddebs.ubuntu.com $(lsb_release -cs)-updates main restricted universe multiverse\ndeb http://ddebs.ubuntu.com $(lsb_release -cs)-proposed main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ddebs.list
sudo apt install ubuntu-dbgsym-keyring
``
but then `sudo apt update` fails with:
``
E: The repository 'http://ddebs.ubuntu.com impish-security Release' does not have a Release file.
``

= Ubuntu release
{c}
{parent=ubuntu}
{wiki}

= Ubuntu 21.10
{c}
{parent=ubuntu-release}

GDM crashes sometimes when switching windows right after opening a new window: https://bugs.launchpad.net/ubuntu/+source/gdm/+bug/1956299

= Ubuntu 21.10 does not wake up from suspend
{parent=ubuntu-21-10}
{title2=`nv_set_system_power_state`}

Please refer to \x[video-linus-torvalds-saying-nvidia-fuck-you-2012].

https://askubuntu.com/questions/1032633/18-04-screen-remains-blank-after-wake-up-from-suspend/1391917#1391917

Reported at: https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-470/+bug/1953674

On \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017].

Does not happen every time, only some times. Can't figure out why. Usually happens when has suspended for a longer time.

https://bugs.launchpad.net/ubuntu/+source/nvidia-graphics-drivers-470/+bug/1946303 sounds like a likely report, \x[nvidia] driver version 470, but can't find those error messages anywhere. The last line of:
``
journalctl -o short-precise -k -b -1
``
once was:
``
PM: suspend entry (deep)
``
which is when sleep starts.

This suggests that it is not a video bug then, seems that it is not waking up at all? Gotta try to SSH into it. OK. I did SSH into it, and that was fine, so it is just the video that won't start.

``
PM: suspend exit
``

https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1949977 is another possible bug, based on kernel version. I'm running 5.13, which is one of the failing versions on the report. Can't find any interesting dmesg though.

In another crash:
``
journalctl -o short-precise -k -b -1
``
had the following interesting lines:
``
nvidia-modeset: WARNING: GPU:0: Lost display notification (0:0x00000000); continuing.
[24307.640014] NVRM: GPU at PCI:0000:01:00: GPU-18af74bb-7c72-ff70-e447-87d48378ea20
[24307.640018] NVRM: Xid (PCI:0000:01:00): 79, pid=8828, GPU has fallen off the bus.
[24307.640021] NVRM: GPU 0000:01:00.0: GPU has fallen off the bus.
[24328.054022] nvidia-modeset: ERROR: GPU:0: The requested configuration of display devices (LGD (DP-4)) is not supported on this GPU.
[repeats several more times]
[24328.056767] nvidia-modeset: ERROR: GPU:0: The requested configuration of display devices (LGD (DP-4)) is not supported on this GPU.
[24328.056951] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:0:0:0x0000000f
[24328.056955] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:1:0:0x0000000f
[24328.056959] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:2:0:0x0000000f
[24328.056962] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000927c:3:0:0x0000000f
[24328.056983] nvidia-modeset: ERROR: GPU:0: DP-4: Failed to disable DisplayPort audio stream-0
[24328.056992] nvidia-modeset: ERROR: GPU:0: Failed to query display engine channel state: 0x0000947d:0:0:0x0000000f
``
and there was a corresponding `/var/crash/_usr_sbin_gdm3.0.crash`.

Related "GPU has fallen off the bus": https://askubuntu.com/questions/868321/gpu-has-fallen-off-the-bus-nvidia

= Ubuntu 20.04
{c}
{parent=ubuntu-release}

= Launchpad
{c}
{disambiguate=website}
{parent=ubuntu}
{wiki}

= BSD Operating System
{c}
{parent=operating-system}

https://en.wikipedia.org/wiki/List_of_BSD_operating_systems

\x[legal]{c} issues stalled them at the turning point of the \x[internet], and \x[linux] won. Can't change \x[history].

Did \x[apple] just fork it and made Mac OS X without giving anything back?

= FreeBSD
{c}
{parent=bsd-operating-system}
{wiki}

= Microsoft
{c}
{parent=operating-system}

They are \x[evil] because they produce \x[closed-source-offline-software-used-by-millions]: \x[microsoft-windows].

And also their monopolistic practices: \x[united-states-v-microsoft-corp].

So, as put in \x[video-bill-gates-vs-steve-jobs-by-epic-rap-battles-of-history-2012] by fake \x[steve-jobs] to fake \x[bill-gates]:
\Q[Why'd you name your company after your \x[dick]?]

However, like all \x[big-tech] companies with infinite money, they do end up doing some cool things in their research department, \x[microsoft-research], notably for \x[ciro-santilli] being:
* \x[lean-proof-assistant]
* their \x[quantum-computing] work. C# is of course a bad idea, we don't need \x[yet-another] \x[domain-specific-language], \x[python] library based solutions like \x[qiskit] are obviously the way to go

= United States v. Microsoft Corp
{c}
{parent=microsoft}
{wiki}

= Microsoft Research
{c}
{parent=microsoft}
{wiki}

= Microsoft product
{c}
{parent=microsoft}
{wiki}

= Microsoft Windows
{c}
{parent=microsoft-product}
{tag=closed-source-offline-software-used-by-millions}
{wiki}

A monopolistic operating system that only exists in the 2010's because of the \x[ibm]-linked historical lock-in and constant useless changes of the Microsoft Word document format to prevent cross operability.

It offers no technical advantages over free \x[linux] distros in the late 2010's, and it is barely impossible to buy a non-Mac computer without paying for it, which should be \x[illegal]. \x[european-union], time to use your \x[europe-cookie-law][regulatory powers].

The following anecdote illustrates Windows' pervasiveness. \x[ciro-santilli] was once tutoring a high school student in Brazil, and decided to try and get her into programming. When the "Windows is not free" subject came up, the high school student was shocked: "I paid 100 dollars for this?". She never even knew it was there. To her, it was "just a computer".

Laws should really be passed forcing OEMs to allow you to not buy Microsoft Windows when buying a computer, \x[europe-cookie-law][European Union], why have you failed me in 2016??? https://en.wikipedia.org/wiki/Bundling_of_Microsoft_Windows

http://blog.zorinaq.com/i-contribute-to-the-windows-kernel-we-are-slower-than-other-oper/ I Contribute to the Windows Kernel. We Are Slower Than Other Operating Systems. Here Is Why. by Marc Bevand (2013) has some interesting remarks:
\Q[There's also little incentive to create changes in the first place. On linux-kernel, if you improve the performance of directory traversal by a consistent 5%, you're praised and thanked. Here, if you do that and you're not on the object manager team, then even if you do get your code past the Ob owners and into the tree, your own management doesn't care. Yes, making a massive improvement will get you noticed by senior people and could be a boon for your career, but the improvement has to be very large to attract that kind of attention.]

\Video[https://www.youtube.com/watch?v=Uh64nPT7JWk]
{title=Bomb disposal robot by \x[the-it-crowd].}

= DOS
{c}
{parent=microsoft-windows}
{wiki}

= Bill Gates
{parent=microsoft}
{c}
{wiki}

The enemy?

You must watch this: \x[video-bill-gates-vs-steve-jobs-by-epic-rap-battles-of-history-2012].

It does not matter how many trillions you donate to charity, Bill. If you want to prove your point, make MS Word free and open source and port it to Linux. And then Window implements \x[posix]-compatible APIs and then deprecate non-POSIX APIs.

= Quote by Bill Gates
{parent=bill-gates}

= Assign the hard task to the lazy person
{parent=bill-gates}
{tag=you-aren-t-gonna-need-it}

https://quoteinvestigator.com/2014/02/26/lazy-job/ (http://archive.is/kcXuQ[archive]):
\Q[I will always choose a lazy person to do a difficult job because a lazy person will find an easy way to do it.]

See also: \x[effortless-effort].

= POSIX
{c}
{parent=operating-system}
{wiki}

The real explanation: https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755

= Environment variable
{parent=posix}
{wiki}

= GNU Core Utils
{c}
{parent=posix}
{wiki}

https://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html

= Non-POSIX GNU Core Utils command line utility
{parent=gnu-core-utils}

= sha1sum
{parent=non-posix-gnu-core-utils-command-line-utility}
{wiki}

= shred
{disambiguate=UNIX}
{parent=non-posix-gnu-core-utils-command-line-utility}
{wiki}

= Non-POSIX command line utility
{parent=posix}

* \x[non-posix-gnu-core-utils-command-line-utility]{child}

= rsync
{c}
{parent=non-posix-command-line-utility}
{wiki}

= sudo
{c}
{parent=non-posix-command-line-utility}
{wiki}

Availability: https://unix.stackexchange.com/questions/48522/how-universal-is-sudo

https://xkcd.com/149/

= POSIX command line utility
{c}
{parent=posix}

= `diff`
{c}
{parent=posix}
{wiki}

= `grep`
{c}
{parent=posix}
{wiki}

If you are a programmer, `grep` becomes a verb: "to grep" means "to search text files".

= `wc`
{c}
{disambiguate=unix}
{parent=posix}
{wiki}

= Standard streams
{parent=posix}
{wiki}

= Standard output
{parent=standard-streams}

= stdout
{synonym}

= TempleOS
{c}
{parent=operating-system}
{wiki}

The OS that the \x[god]{p} ordered be made.

One is reminded of https://ulillillia.fandom.com/wiki/Ulillillia[Ulillillia], see also: https://www.youtube.com/watch?v=9-79yOZ13qg The Story of Ulillillia by Atrocity Guide (2019)

We are \x[autism][all somewhere in the spectrum].

= Executable file format
{parent=systems-programming}

* https://en.wikipedia.org/wiki/Executable
* https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats
* https://en.wikipedia.org/wiki/Object_file

= Executable and Linkable Format
{parent=executable-file-format}
{title2=ELF}
{wiki}

For a quick and dirty introduction to the format, see: \x[elf-hello-world].

\Include[elf-hello-world]

= Virtualization
{parent=systems-programming}
{wiki}

= Docker
{c}
{disambiguate=software}
{parent=virtualization}
{wiki}

= Docker
{c}
{synonym}

= Emulator
{parent=virtualization}
{wiki}

= Emulate
{synonym}

One of the things \x[ciro-santilli] really likes, see: \x[linux-kernel-module-cheat]

If \x[computational-physics] simulates physics, emulators simulates \x[computer]{p}.

= gem5
{c}
{parent=emulator}
{wiki}

https://cirosantilli.com/linux-kernel-module-cheat/gem5

= QEMU
{c}
{parent=emulator}
{wiki}

https://cirosantilli.com/linux-kernel-module-cheat/introduction-to-qemu

The leading open source cross architecture and KVM emulator of the 2010's.

Great way to understand how operating systems work, which \x[ciro-santilli] used extensively in his \x[linux-kernel-module-cheat].

\x[ciro-santilli] has some good related articles listed under: \x[articles].

= Systems programming software engineer
{parent=systems-programming}

= The most awesome systems programming software engineers
{parent=systems-programming-software-engineer}

* \x[eli-benderski]{child}
* \x[fabrice-bellard]{child}
* \x[linus-torvalds]{child}

Other notable people that are likely also awesome but Ciro has less familiarity with their contributions:
* https://en.wikipedia.org/wiki/D._Richard_Hipp[Dwayne Richard Hipp] from \x[sqlite]
* https://en.wikipedia.org/wiki/Daniel_Stenberg[Daniel Stenberg] from cURL
* Michael Niedermayer also from \x[ffmpeg]. http://ikaruga.co.uk/~snacky/mn.html highlights his brutal directness and efficiency, and sometimes sense of humour

= Terminal emulator
{parent=software}
{wiki}

Terminals don't really matter. Just use \x[tmux].

= Yakuake
{parent=terminal-emulator}

https://github.com/KDE/yakuake

= Terminal multiplexer
{parent=terminal-emulator}
{wiki}

= tmux
{c}
{parent=terminal-multiplexer}
{wiki}

https://github.com/tmux/tmux

If session autosave was finally mainlined, this would be Nirvana.

= Version control
{parent=software}
{wiki}

= Concurrent Versions System
{c}
{parent=version-control}
{title2=CSV}
{wiki}

It is said, that once upon a time, programmers used CSV and collaborated on \x[sourceforge], and that everyone was happy.

These days, are however, long gone in the mists of time as of 2020, and beyond \x[ciro-santilli]'s programming birth.

= Git
{c}
{parent=version-control}
{wiki}

= Git UI
{parent=git}

Perfect Git integration belongs in \x[integrated-development-environment]{p} :-)

= tig
{disambiguate=git UI}
{parent=git-ui}

https://github.com/jonas/tig

This is good. But it misses some key operations, so much so that makes Ciro not want to learn/use it daily.

= Pro Git book
{parent=git}
{c}

https://github.com/progit/progit2

= libgit2
{parent=git}
{c}

https://github.com/libgit2/libgit2

= libgit2/rugged
{parent=libgit2}
{c}

https://github.com/libgit2/rugged

= Git web interface
{parent=git}
{c}

= GitHub
{c}
{parent=git-web-interface}
{wiki}

This is where \x[ciro-santilli] stored his code since he started coding nonstop in 2013.

He \x[closed-source-is-less-bad-on-online-services][does not like the closed source aspect of it], but hey, there are more important things to worry about, the network effect is just too strong.

= GitHub users deleted by GitHub
{c}
{parent=github}

https://stackoverflow.com/questions/50720844/can-github-delete-your-account/66105692#66105692

= GitHub Pages
{c}
{parent=github}

https://pages.github.com/

The cheapest and most resilient way to publish \x[how-to-teach/text-is-cheaper-than-video][text content] humanity has achieved so far.

= GitHub Sponsors
{c}
{parent=github}

= Who are the developers that are making the most money through GitHub sponsors?
{c}
{parent=github-sponsors}

https://github.com/isaacs/github/issues/1824

= Octokat.js
{parent=github}
{c}

https://github.com/philschatz/octokat.js

= octokit.js
{parent=octokat-js}
{c}

https://github.com/philschatz/octokit.js

= GitLab
{c}
{parent=git-web-interface}
{wiki}

GitLab was very important to Ciro because he wanted to base https://github.com/booktree/booktree[Booktree] on it.

See also: \x[ciro-santilli-s-minor-projects].

= GitLab CI
{c}
{parent=gitlab}
{tag=continuous-integration}

https://github.com/gitlabhq/gitlab-ci

= GitLab cookbook
{parent=gitlab}
{c}

https://gitlab.com/gitlab-org/cookbook-gitlab

= SourceForge
{c}
{parent=git-web-interface}
{wiki}

RIP: https://www.quora.com/Is-SourceForge-still-relevant-to-open-source-projects/answer/Ciro-Santilli

= Web technology
{parent=software}

= Web cheat
{synonym}

Cheatsheet on \x[html], \x[cascading-style-sheets] and \x[javascript]{child}.

Old cheat on separate repo: \a[web/]{check=0}.

Now moving to either:
* separate files under: \a[web-cheat/] for the boring stuff
* subsections under this section for the more exciting stuff!

Index:
* \x[html]
  * \a[web-cheat/min.html]: minimal valid HTML document. It is insane however.
  * \a[web-cheat/min-sane.html]: minimal sane HTML document. There are smaller valid ones, but they are insane.
  * \a[web-cheat/img.html]
  * \a[web-cheat/img-broken.html]: https://stackoverflow.com/questions/22051573/how-to-hide-image-broken-icon-using-only-css-html
* \x[youtube] embeds
  * \a[web-cheat/youtube-embed.html]
  * \a[web-cheat/youtube-embed-lazy.html]: https://stackoverflow.com/questions/7154958/lazy-load-iframe-delay-src-http-call-with-jquery/62523325#62523325
* External libraries
  * Text editors
    * \a[web-cheat/monaco-editor.html]:
      * https://github.com/microsoft/monaco-editor
      * https://stackoverflow.com/questions/63179813/how-to-run-the-monaco-editor-from-a-cdn-like-cdnjs/63179814#63179814
  * Interactive HTML table sorting
    * \a[web-cheat/tablesort.html]: https://github.com/tristen/tablesort
    * \a[web-cheat/sortable.html]: https://github.com/HubSpot/sortable

= HTML
{c}
{parent=web-technology}
{wiki}

= HTML canvas
{c}
{parent=html}

https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API

Allows us to draw with JavaScript pixel by pixel! Great way to create \x[computational-physics] demos!

Here is an animation demo with some useful controls:
\JsCanvasDemo[[
new class extends CirodownCanvasDemo {
  init() {
    super.init('hello');
    this.pixel_size_input = this.addInputAfterEnable(
      'Pixel size',
      {
        'min': 1,
        'type': 'number',
        'value': 1,
      }
    );
  }
  draw() {
    var pixel_size = parseInt(this.pixel_size_input.value);
    for (var x = 0; x < this.width; x += pixel_size) {
      for (var y = 0; y < this.height; y += pixel_size) {
        var b = ((1.0 + Math.sin(this.time * Math.PI / 16)) / 2.0);
        this.ctx.fillStyle =
          'rgba(' +
          (x / this.width) * 255 + ',' +
          (y / this.height) * 255 + ',' +
          b * 255 +
          ',255)'
        ;
        this.ctx.fillRect(x, y, pixel_size, pixel_size);
      }
    }
  }
}
]]

Bibliography: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations

= WebGL
{c}
{parent=html-canvas}

https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example

\JsCanvasDemo[[
new class extends CirodownCanvasDemo {
  init() {
    super.init('webgl', {context_type: 'webgl'});
    this.ctx.viewport(0, 0, this.ctx.drawingBufferWidth, this.ctx.drawingBufferHeight);
    this.ctx.clearColor(0.0, 0.0, 0.0, 1.0);
    this.vertexShaderSource = `
#version 100
precision highp float;
attribute float position;
void main() {
  gl_Position = vec4(position, 0.0, 0.0, 1.0);
  gl_PointSize = 64.0;
}
`;

    this.fragmentShaderSource = `
#version 100
precision mediump float;
void main() {
  gl_FragColor = vec4(0.18, 0.0, 0.34, 1.0);
}
`;
    this.vertexShader = this.ctx.createShader(this.ctx.VERTEX_SHADER);
    this.ctx.shaderSource(this.vertexShader, this.vertexShaderSource);
    this.ctx.compileShader(this.vertexShader);
    this.fragmentShader = this.ctx.createShader(this.ctx.FRAGMENT_SHADER);
    this.ctx.shaderSource(this.fragmentShader, this.fragmentShaderSource);
    this.ctx.compileShader(this.fragmentShader);
    this.program = this.ctx.createProgram();
    this.ctx.attachShader(this.program, this.vertexShader);
    this.ctx.attachShader(this.program, this.fragmentShader);
    this.ctx.linkProgram(this.program);
    this.ctx.detachShader(this.program, this.vertexShader);
    this.ctx.detachShader(this.program, this.fragmentShader);
    this.ctx.deleteShader(this.vertexShader);
    this.ctx.deleteShader(this.fragmentShader);
    if (!this.ctx.getProgramParameter(this.program, this.ctx.LINK_STATUS)) {
      console.log('error ' + this.ctx.getProgramInfoLog(this.program));
      return;
    }
    this.ctx.enableVertexAttribArray(0);
    var buffer = this.ctx.createBuffer();
    this.ctx.bindBuffer(this.ctx.ARRAY_BUFFER, buffer);
    this.ctx.vertexAttribPointer(0, 1, this.ctx.FLOAT, false, 0, 0);
    this.ctx.useProgram(this.program);
  }
  draw() {
    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);
    this.ctx.bufferData(this.ctx.ARRAY_BUFFER, new Float32Array([Math.sin(this.time / 60.0)]), this.ctx.STATIC_DRAW);
    this.ctx.drawArrays(this.ctx.POINTS, 0, 1);
  }
}
]]

= Cascading Style Sheets
{c}
{parent=web-technology}
{wiki}

= CSS
{c}
{synonym}
{title2}

* \a[web-cheat/image-table-vertical-center.html]
* \a[web-cheat/viewport-height.html]: a div that is a tall as the viewport, and does not generate a toplevel scrollbar
* \a[web-cheat/responsive-image-max-height.html]: here we try to create an image that is never wider than the screen. If the screen is less wide than the image, then the image scales down proportionally. Otherwise, the image has a user determined fixed by the CSS or the HTML `height` property. Related:
  * https://stackoverflow.com/questions/13632985/limit-the-height-of-a-responsive-image-with-css
  * https://stackoverflow.com/questions/50193946/responsive-image-with-max-height-max-width/50194061
  TODO I'm unable to do this....... https://stackoverflow.com/questions/69964332/how-to-set-the-default-height-of-responsive-images-when-screen-is-wide-and-have The objective was to implement: https://github.com/cirosantilli/cirodown/issues/168

= CSS flex
{parent=cascading-style-sheets}
{wiki=CSS_Flexible_Box_Layout}

* \a[css/flex.html]: illustrates basic flex usage, including:
* `flex-grow`: if there's space left, this determines how much extra space will be given to each.
* `flex-basis`: the size the items want to be. But if there isnt' enough space, this can be cut up.

  Note that the minimal space required by children of the flex children cannot be necessarily cut up, and might lead things to overflow out of the container.
* `flex-shrink`: if there's space missing, this determines how much extra space will be removed from each `flex-basis`

That example calculates and displays the final widths via \x[javascript], making it easier to understand the calculations being done.

Answers: https://stackoverflow.com/questions/28473807/how-does-flex-grow0-get-interpreted/69995712#69995712

Bibliography:
* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout

= Sass
{disambiguate=stylesheet language}
{parent=cascading-style-sheets}
{wiki}

= Sass
{c}
{synonym}

The more of their syntax gets merged into mainline \x[cascading-style-sheets], the better the world will be.

= Asset bundler
{parent=web-technology}

In order to make websites efficient and portable, a lot of \x[transpilation] is needed.

= webpack
{c}
{parent=asset-bundler}
{wiki}

Webpack is like a magic hydra that can \x[eat] any type of file and bundle it into a single output: .js, .ts, .ccs, .scss, .jsx, .tsx, `require`, `import`, `import` css from `.js`, it doesn't matter at all, it just digests all into the same \x[shit][dump].

When it works, you are just left in awe. When it doesn't, you're fucked and have to debug for several hours.

Demos under: \a[webpack/].

= webpack/template
{file}
{parent=webpack}

\a[webpack/template] contains a reasonable starter template.

Usage:
``
cd webpack/template
npm install
npm run build
``

This will produce, under `dist/` the following minimized files:
* `dist/index.html`: from \a[webpack/template/index.html]. You can open it to see:
  ``
  Hello webpack
  ``
  show on the browser. This was added from \x[javascript].
* `dist/index.js`: from \a[webpack/template/index.js] and anything in its import tree, e.g.:
  * \a[webpack/template/main.scss]: \x[sass-stylesheet-language] source. It gets embedded the the \x[javascript] output as a string, and the JavaScript then applies it to the page, making the font blue
  * `lodash` third party library

You can also run this test with the development server on http://localhost:9000[]:
``
npm start
``
which uses unminimized outptus, and automatically push reloads the page whenever you change any of the input files!

= webpack/sass
{file}
{parent=webpack}

This example shows how to use \x[sass].

To make things simple, it generates a completely separate `dist/index.js` and `dist/main.css` which are manually included from `index.html`, and does not do any type of injection (neither Js into HTML nor CSS in Js).

= webpack/no-js-inject
{file}
{parent=webpack}

This example shows how you could manually include the `dist/index.js` that is output from webpack into your `index.html`.

This is generally not what you want to do, because what you actually want to do is to use a Js output name with a hash in it, so that browsers only need to refetch when the name changes.

And to do that, we have to let webpack dynamically inject that unpredictable hash as done in \x[file/webpack/template] with:
``
new HtmlWebpackPlugin({
  filename: 'index.html',
  // Inject the include to our hashed filename,
  // since it is not deterministic due to the hash.
  inject: true,
  template: path.resolve(__dirname, 'index.html'),
}),
``

= webpack Sass import
{c}
{parent=asset-bundler}
{wiki}

This shows how to produce a minimized fully embedded CSS file with webpack from a \x[sass-stylesheet-language]:
``
cd webpack/sass
npm install
npm run build
xdg-open index.html
``
That example produces a `dist/main.css` file which is a compresesd combination of:
* \a[webpack/sass/main.scss]
* https://necolas.github.io/normalize.css/[normalize.css], added to the project as a regular `node_modules` package

= Push technology
{parent=web-technology}
{title2=Bi-directional communication}
{wiki}

= Web browser
{parent=web-technology}
{wiki}

= Browser
{synonym}

= Chromium
{c}
{disambiguate=web-browser}
{parent=web-browser}
{wiki}

\x[google] is trying to kill it as of 2021: https://www.omgubuntu.co.uk/2021/01/chromium-sync-google-api-removed The lack of sync is a major major blow. So selfish. Google makes billions, and it won't give in a little bit of settings storage...

= Disable JavaScript on Chromium
{parent=chromium-web-browser}

https://stackoverflow.com/questions/13405383/how-to-disable-javascript-in-chrome-developer-tools

= Firefox
{c}
{parent=web-browser}
{wiki}

= Web development
{parent=web-technology}

= Web framework
{c}
{parent=web-technology}
{wiki}

Per \x[programming-language]:
* \x[node-js-web-framework]{child}{p}
* \x[python-web-framework]{child}{p}

How to select one:
* https://insights.stackoverflow.com/trends?tags=django%2Cruby-on-rails%2Cexpress%2Csails.js%2Cflask%2Cnestjs
* \x[gothinkster-realworld]

= Hello world website
{parent=web-framework}

= A blog in every web framework
{c}
{parent=hello-world-website}
{wiki}

A (multi-user) \x[blog] is the \x[hello-world] of the web, so creating one of those is the best way to quickly evaluate web technology, i.e. \x[time-to-hello-world].

Some new frameworks like \x[feathersjs] are making a chat app instead, as that highlights the push notifications a bit better.

= gothinkster/realworld
{parent=a-blog-in-every-web-framework}

https://github.com/gothinkster/realworld

\x[ciro-santilli]'s implementation: \x[node-express-sequelize-next-js-realworld-example-app].

Ahh, you \x[a-blog-in-every-web-framework][can't have new ideas anymore]!

Basically puts together every backend with \x[front-end-web-framework] to create the exact same website.

The reference live demo can be found at: https://demo.realworld.io/#/ It is based on \x[angular-js] as it links to: https://github.com/gothinkster/angularjs-realworld-example-app TODO backend?

There are however also live demos of other frontends, e.g.:
* \x[react]: https://react-redux.realworld.io[]. But note that tag addition at post creation is broken there as of March 2021, but not on master: https://github.com/gothinkster/react-redux-realworld-example-app/issues/151#issuecomment-808417846 so they forgot to update the live \x[server].
* \x[vue-js]: https://vue-vuex-realworld.netlify.app[]
Note that all those frontends communicate with the same backend.

As of 2021 Devs are seemed a bit too focused on monetizing the project through their "how to use this project" premium tutorial, and documentation could be better: just getting the \x[hello-world] of the most popular backend with the most popular frontend is not easy... come on.

https://github.com/gothinkster/realworld/issues/578 asks for community support, as devs have moved on since unfortunately.

Remember:
* by default, the frontends hardcode the upstream public data \x[api]: `https://conduit.productionready.io/api` so you have to hack their code to match the port of the backend. And each backend can have a different port.
* when you switch between backends, you must first manually \x[clear-client-side-storage] cookies/local new run will fail due to authentication issues!

Important missing things from the minimum base app:
* \x[server-side-rendering]:
  * https://github.com/arrlancore/nextjs-ssr-real-world-app-example[]. As advertised, that global instance does render with \x[javascript] disabled! Proposed for upstream at: https://github.com/gothinkster/realworld/issues/423
  * https://github.com/gothinkster/realworld/issues/266
* no \x[javascript-bi-directional-communication-library] built-in... come on: https://github.com/gothinkster/realworld/issues/107
* \x[email] notifications however as tested on the live demo: https://demo.realworld.io/#/
* error handling is broken/missing/inconsistent across apps

First you should the most popular backend/frontend combination running, which is the most likely to be working. We managed to run on \x[ubuntu] 20.10, \x[react] + \x[node-js] \x[express-js] as described at https://github.com/gothinkster/node-express-realworld-example-app/pull/116[]:
* https://github.com/cirosantilli/node-express-realworld-example-app/tree/mongo4 which has a simple patch on top of https://github.com/gothinkster/node-express-realworld-example-app/tree/ba04b70c31af81ca7935096740a6e083563b3a4a for MongoDB 4 support

  This requires you to first \x[install-mongodb-on-ubuntu] and ensure you can login to it from the command line.
* https://github.com/gothinkster/react-redux-realworld-example-app/tree/9186292054dc37567e707602a15a0884d6bdae35 patched to use the correct server host/port `localhost:3000`:
  ``
  diff --git a/src/agent.js b/src/agent.js
  index adfbd72..e3cdc7f 100644
  --- a/src/agent.js
  +++ b/src/agent.js
  @@ -3,7 +3,7 @@ import _superagent from 'superagent';

   const superagent = superagentPromise(_superagent, global.Promise);

  -const API_ROOT = 'https://conduit.productionready.io/api';
  +const API_ROOT = 'http://localhost:3030/api';

   const encode = encodeURIComponent;
   const responseBody = res => res.body;
  ``
Then just:
``
npm install
npm start
``
on both \x[server] and \x[client-computing], and then visit the client URL: http://localhost:4100/

You have to hit the Enter key to add tags, it's terrible: https://github.com/gothinkster/react-redux-realworld-example-app/issues/151#issuecomment-808417846

One cool thing is that the main repo has unified backend API tests:
``
git clone https://github.com/gothinkster/realworld
cd realworld
git checkout e7adc6b06b459e578d7d4a6738c1c050598ba431
cd api
APIURL=http://localhost:3000/api USERNAME="u$(date +%s)" ./run-api-tests.sh
``
so the per-repository tests are basically useless, and that single test can test everything for any backend! There is no frontend testing however: https://github.com/gothinkster/realworld/issues/269 so newb.

= gothinkster/realworld implementation
{parent=gothinkster-realworld}

Setups we've tried:
* backend:
  * \x[randyscotsmithey-feathers-realworld-example-app]{child} worked with \x[react] and \x[vue-js]
  * the \x[react] setup failed as shown at: https://github.com/gothinkster/react-redux-realworld-example-app/issues/187
  * \x[gothinkster-django-realworld-example-app]{child}
  * the \x[nest-js] failed on Ubuntu 20.10 as per https://github.com/lujakob/nestjs-realworld-example-app/issues/19
* frontend:

= TodoMVC
{c}
{parent=hello-world-website}
{wiki}

https://todomvc.com/

\x[front-end-web-framework][Front-end] only, so infinitely simpler, and generally much less useful than \x[gothinkster-realworld].

= Front-end web framework
{c}
{parent=web-framework}

You need those because it is hard to do the following:
* client \x[javascript] sends a request to \x[server]
* server sends back data
* client updates what the user sees

This is hard to do notably because when the update happens, several things might need to change on the webpage at the same time.

Notably, new elements might need to be added to the webpage, which in turn means that new bindings such as button clicks have to be added to those, in a way that keeps the page working.

The only way to do this basically is to have a functional dependency graph that keeps everything in the page in working state as updates come.

= Single page application
{parent=front-end-web-framework}
{title2=SPA}
{wiki}

= Isomorphic JavaScript
{parent=single-page-application}
{wiki}

= Server-side rendering
{parent=isomorphic-javascript}
{title2=SSR}

= List of front-end web frameworks
{parent=front-end-web-framework}

= Angular.js
{c}
{parent=list-of-front-end-web-frameworks}
{wiki}

= React
{c}
{disambiguate=JavaScript library}
{parent=list-of-front-end-web-frameworks}
{wiki}

= React
{c}
{synonym}

= React.js
{c}
{synonym}

Website: https://reactjs.org

React officially recommends that you use \x[next-js]https://reactjs.org/docs/create-a-new-react-app.html#recommended-toolchains{ref}, so just do it. It just sets up obvious missing functionality from raw React.

React feels good.

Its main design goal is to reduce DOM changes to improve rendering times.

And an important side effect of that is that it becomes easier to do stuff of the type:
* user creates a new comment that appears on screen without page reload
* comment has a delete button, which is JavaScript callback activated
and then the new comment easily gets the callback attached to it.

And it also ends up naturally doubling as a template engine.

But React can also be extremelly hard to use. It can be very hard to know what you can and cannot do sometimes, then you have to stop and try to understand how react works things better:
* \x[cannot-update-a-component-while-rendering-a-different-component-warning-in-react]
* Rendered more hooks than during the previous render.
* cannot use hooks from helpers:
  * https://www.benmvp.com/blog/helper-functions-react-useeffect-hook/
  * https://stackoverflow.com/questions/68273638/using-hooks-inside-helper-functions
  * https://stackoverflow.com/questions/64689409/helper-function-using-hooks-inside-a-functional-component
The biggest problem is that it is hard to automatically detect such errors, but perhaps this is the same for other frontend stuff. Though when doing \x[server-side-rendering], the setup should really tell you about such errors, so you don't just discover them in production later on.

Is is also very difficult to understand precisely why hooks run a certain number of times.

Examples under: \a[web-cheat/react].
* \a[web-cheat/react/hello.html]: minimal example. As you click:
  * one counter increments every time
  * the other increments every two clicks
  By opening a web inspector, you can see that only modified elements get updated. So we understand that \x[jsx] parses its "HTML-like" into a tree, and then propagates updates on that tree.

  By looking at the terminal, we see that `render()` does get called every time the button is clicked, so the tree gets recreated every time.
* \a[web-cheat/react/hello-hook.html]: Hello World with hooks instead of classes, but also  that is fully correct and optimized. Exactly equivalent to \a[web-cheat/react/hello.html].

  `React.useState` plays the role of the constructor.

  Hooks were introduced much after classes, and just require less code, so everyone is using them now instead of classes.

  It appears that the hello world in the React.js docs is wrong though, you need functional sets to update values based on their current value: https://stackoverflow.com/questions/375913/how-can-i-profile-c-code-running-on-linux/60265409#60265409[], otherwise you could lose updates. The `setTimeout` example from https://stackoverflow.com/questions/57828368/why-react-usestate-with-functional-update-form-is-needed/65306828#65306828 is particularly relevant. A real world case would be that but waiting for network requests to update.

  We cannot reproduce a quick double click faliure without the functional update however, not even with `e = document.getElementById('button');e.click();e.click()`.
* \a[web-cheat/react/hello-without-jsx.html]: Hello World in pure \x[javascript], without \x[jsx]. Exactly equivalent to \a[web-cheat/react/hello.html]. Documented at: https://reactjs.org/docs/react-without-jsx.html Understanding this is fundamental to understanding React.
* \a[web-cheat/react/prop-change.html]: shows what gets called as parameters flow down through the tree.

  By looking at the console, we see all `render` get called every time, even if `props` didn't change, but not the constructors.

  After page load the console contains:
  ``
  Main.constructor
  Main.render
  NotMain.constructor
  NotMain.render
  NotMain2.constructor
  NotMain2.render
  ``

  Then, every time we click the button it adds:
  ``
  handleClick
  Main.render
  NotMain.render
  NotMain2.render
  ``

  Note how the `props` of `NotMain` only change every other click, but `render` still gets called every time.

  In order to make `React` not re-render when there are not changes, you have to either:
  * define the `shouldComponentUpdate` method of class components
  * wrap functional components in `React.memo`

  Related:
  * https://stackoverflow.com/questions/61301937/why-is-react-component-rerendering-when-props-has-not-changed
  * https://stackoverflow.com/questions/67214500/why-react-rerendres-components-even-if-props-didnt-changed
* \a[web-cheat/react/prop-change-hook.html]: same as \a[web-cheat/react/prop-change.html], but using hooks. The notable difference is that functional components don't have a clear constructor/render separation, the function just gets called every time. Then React does some magic to ensure that `useState` returns the current state, except for the first render where they return the initial value.
* \a[web-cheat/react/prop-change-hook-use-memo.html]: TODO forgot if this example is useful, was tring to use `useMemo`
* \a[web-cheat/react/prop-change-child.html]: shows what child prop changes do not call render on parent, `Main` does not show up on console when you click under `NotMain`
* \a[web-cheat/react/hook-from-function-fail.html]: TODO got some errors that seemed linked to this on a larger program, but failed to minimize them here
* \a[web-cheat/react/hook-different-number-of-times.html]: this illustrates one of the cardinal points of using hooks: you must always call them the same number of times, otherwise it fails with:
  \Q[React has detected a change in the order of Hooks called by Main. This will lead to bugs and errors if not fixed.]
  In the case of `useState`, we can kind of understand why this happens: React must use the order of calls to determine which state variable to return at each point in time.
* \a[web-cheat/react/hello-hook-use-effect.html]: just checking when it gets called. Happens after every render
  ``
  handleClick
  Main
  useEffect
  useEffect2
  ``
* TODO create a test `\a[web-cheat/react/img-broken.html]`
  * https://stackoverflow.com/questions/34097560/react-js-replace-img-src-onerror
  * https://stackoverflow.com/questions/36305805/how-to-hide-alt-text-using-css-when-the-image-is-not-present

How React works bibliography:
* https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/ shows how `uesState` works under the hood with crazy closures
* https://medium.com/@gethylgeorge/how-virtual-dom-and-diffing-works-in-react-6fc805f9f84e

= React JSX
{c}
{parent=react-javascript-library}

= JSX
{c}
{synonym}
{title2}

= React error
{c}
{parent=react-javascript-library}

= Cannot update a component while rendering a different component warning in React
{parent=react-error}

Minimal reproduction: https://stackoverflow.com/questions/62336340/cannot-update-a-component-while-rendering-a-different-component-warning/70317831#70317831

= Next.js
{c}
{parent=react-javascript-library}
{wiki}

Framework built on top of \x[react-javascript-library].

Officially recommended by \x[react-javascript-library]https://reactjs.org/docs/create-a-new-react-app.html{ref}:
\Q[Recommended Toolchains

If you’re building a server-rendered website with Node.js, try Next.js.]

\x[gothinkster-realworld] blog example by \x[ciro-santilli]: \x[node-express-sequelize-next-js-realworld-example-app].

Basically what this does is to get \x[server-side-rendering] just working by \x[react-javascript-library], including hydration, which is a good thing.

Next.js sends the first pre-rendered HTML page along with the JavaScript code. Then, JavaScript page switches just load the API data.

Next.js does this nicely by forcing you to provide page data in a serialized JSON format, even when rendering server-side (e.g. the return value of `getServerSideProps`). This way, it is also able to provide either the full HTML, or just the JSON.

Some general downsides:
* it does feel like they don't document deployment very well however, especially non-Vercel options, which is the company behind Next.js. I'm unable to find how to use a non Vercel CDN with ISR supposing that is possible.
* Next.js is very opinionated, and like any opinionated library it is sometimes hard to know why something is/isn't happening, and sometimes it is hard/impossible to do what you want with it unless they add support

In-tree examples at: https://github.com/vercel/next.js/tree/canary/examples

`canary` is their `master`: https://github.com/vercel/next.js/issues/3211

In order to offer its amazing features, Next.js is also extremely opinionated, which means that if something wasn't designed to be possible, it basically isn't.

No prerender with custom \x[server]? It forces you to write your API with next as well? Or does it mean something else?
* https://github.com/vercel/next.js/discussions/25394
* https://nextjs.org/docs/advanced-features/custom-server

TODO can it statically generate pages that are created at runtime? E.g. if I create a new blog post, will it automatically upload a static page? It seems that yes, and that this is exactly what Incremental Static Regeneration means:
* https://github.com/vercel/next.js/discussions/25410
* https://vercel.com/docs/next.js/incremental-static-regeneration
* https://github.com/vercel/next.js/discussions/17711
* https://www.reddit.com/r/nextjs/comments/mvvhym/a_complete_guide_to_incremental_static/
* https://github.com/vercel/next.js/discussions/11552#discussioncomment-115595
* https://stackoverflow.com/questions/62105756/how-to-use-aws-with-next-js
* https://github.com/vercel/next.js/discussions/17080
* https://github.com/vercel/next.js/discussions/16852
However, Ciro can't find any mention of how to specify where the pages are uploaded to... this is pat of the non-Vercel deployment problem.

Can't prerenter by URL query parameters:
* https://stackoverflow.com/questions/66133814/how-to-get-url-query-string-on-next-js-static-site-generation
* https://github.com/vercel/next.js/discussions/17269

"Module not found: Can't resolve 'fs'" \x[hell]. The main reason this happens seems to be the that in a higher order component, \x[webpack] can't determine if callbacks use the require or not to remove it from frontend code.
* https://stackoverflow.com/questions/64926174/module-not-found-cant-resolve-fs-in-next-js-application

Overviews:
* https://www.reddit.com/r/reactjs/comments/8evy5d/what_are_the_downsides_to_nextjs/ 2017 What are the downsides to Next.js?

TODO answer:
* https://stackoverflow.com/questions/59674496/how-to-pass-pageprops-in-next-js-from-a-child-component-to-app-js

Our oxamples under \a[nodejs/next]:
* \a[nodejs/next/hello-world]: a hello world. There's an in-tree one at: https://github.com/vercel/next.js/tree/e75361fd03872b097e817634c049b3185f24cf56/examples/hello-world[], but ours is truly minimal
* \a[nodejs/next/hoc]: shows how to use a higher order component (HOC) to factor out `getStaticProps` across two pages: \a[nodejs/next/hoc/pages/index.js] and \a[nodejs/next/hoc/pages/notindex.js]

  Notably, that shows how `require` errors are avoided in that case as mentioned at: https://stackoverflow.com/questions/64926174/module-not-found-cant-resolve-fs-in-next-js-application/70363153#70363153
* \a[nodejs/next/localStorage]: a counter that is persistent across page reloads by using `localStorage`. Used in: https://stackoverflow.com/questions/54819721/next-js-access-localstorage-before-rendering-page/68136224#68136224

Solved ones:
* solved by https://nextjs.org/docs/advanced-features/preview-mode[preview mode] in Next.js 12:
  * ISR was basically unusable for CRUD websites because you can't force a one-off immediate page update:
    * https://github.com/vercel/next.js/discussions/25677

= Node Express Sequelize Next.js realworld example app
{parent=next-js}
{tag=gothinkster-realworld-implementation}

https://github.com/cirosantilli/node-express-sequelize-nextjs-realworld-example-app

= Vue.js
{c}
{parent=list-of-front-end-web-frameworks}
{wiki}

= Nuxt.js
{c}
{parent=vue-js}

= Software bibliography
{parent=software}

= EbookFoundation/free-programming-books
{parent=software-bibliography}

https://github.com/EbookFoundation/free-programming-books

= Error correction code
{parent=information-technology}
{wiki}

= Cyclic redundancy check
{parent=error-correction-code}
{wiki}

= CRC-32
{c}
{parent=cyclic-redundancy-check}
{wiki=Cyclic_redundancy_check#CRC-32_algorithm}

= Telecommunication
{parent=information-technology}
{wiki}

= Television
{parent=telecommunication}
{wiki}

= Publishing
{parent=telecommunication}
{wiki}

= Self-publishing website
{parent=publishing}
{wiki}

= Leanpub
{parent=publishing}

https://leanpub.com

Founder: Peter Armstrong

The general idea is publishing entire books with usual copyright, but with gradual updates.

http://ruboss.com/ documents their stack, a somewhat similar choice to \x[ourbigbook-com] as of 2021, notably \x[next-js]. But backend in \x[ruby-on-rails]. They actually managed Apollo/\x[graphql], which \x[ciro-santilli] would have liked, but din't have the patience for.

The founder/CEO Peter Armstrong https://www.linkedin.com/in/peterburtonarmstrong/ He looks like a nice guy.

= Markua
{parent=leanpub}

In \x[leanpub] you write your book in a \x[markdown] variant they call Markua, marketed as "markdown for books".

TODO is there a reference implementation that runs locally for HTML output? Or the only reference implementation is closed under \x[leanpub]?

Spec: http://markua.com/

= Publishing company
{parent=publishing}
{wiki}

= O'Reilly Media
{c}
{parent=publishing-company}
{wiki}

= Lighter
{parent=technology}
{wiki}

= Barbequeue lighter
{parent=lighter}

= Microscopy
{parent=technology}
{wiki}

= Microscope
{synonym}

= Leeuwenhoek microscope
{c}
{parent=microscopy}

\x[microscope]{c} by \x[antonie-van-leeuwenhoek] used to first observe \x[microorganism]{p}.

= Phase-contrast microscopy
{parent=microscopy}
{wiki}

= Electron microscope
{parent=microscopy}
{wiki}

= Scanning electron microscope
{parent=electron-microscope}
{title2=SEM}
{wiki=Scanning_electron_microscopy}

\Video[https://www.youtube.com/watch?v=GY9lfO-tVfE]
{title=The Scanning Electron Microscope by MaterialsScience2000 (2014)}
{description=Shows operation of the microscope really well. Seems too easy, there must have been some extra setup before however. Impressed by how fast the image update, it is basically instantaneous. Produced by Prof. Dr.-Ing. Rainer Schwab from the https://en.wikipedia.org/wiki/Karlsruhe_University_of_Applied_Sciences[Karlsruhe University of Applied Sciences].}

= Scanning tunnelling microscope
{parent=electron-microscope}
{title2=STM}
{wiki}

It sees and moves individual atoms!!!

* https://en.wikipedia.org/wiki/IBM_(atoms)
* https://en.wikipedia.org/wiki/A_Boy_and_His_Atom

= Transmission electron microscopy
{parent=electron-microscope}
{title2=TEM}
{wiki}

= Transmission electron microscope
{synonym}

= Scanning transmission electron microscopy
{parent=transmission-electron-microscopy}
{wiki}

= Scanning transmission electron microscope
{synonym}

= Electron holography
{parent=transmission-electron-microscopy}
{wiki}

= Cryogenic electron microscopy
{parent=electron-microscope}
{wiki}

= cryoEM
{c}
{synonym}
{title2}

This technique has managed to determine protein 3D structures for proteins that people were not able to crystallize for \x[x-ray-crystallography].

It is said however that cryoEM is even fiddlier than \x[x-ray-crystallography], so it is mostly attempted if crystallization attempts fail.

By looking at \x[image-cryoem], you can easily understand the basics of cryoEM.

We just put a gazillion copies of our molecule of interest in a solution, and then image all of them in the frozen water.

Each one of them appears in the image in a random rotated view, so given enough of those point of view images, we can deduce the entire 3D structure of the molecule.

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Cryoem_groel.jpg/600px-Cryoem_groel.jpg]
{id=image-cryoem}
{height=400}
{source=https://en.wikipedia.org/wiki/File:Cryoem_groel.jpg}
{title=Image showing This is the type of image that you get out of a raw CryoEM experiment.}

= Two-photon excitation microscopy
{parent=microscopy}
{wiki}

\Video[https://www.youtube.com/watch?v=JSnh-btk22U]
{title=Two Photon Microscopy by Nemonic NeuroNex (2019)}
{description=Shows a prototype of a \x[two-photon-excitation-microscopy][two-photon electron microscope] on an \x[optical-table], and describes it in good detail, well done.}

= X-ray crystallography
{c}
{parent=microscopy}
{wiki}

One of its main applications is to determine the 3D structure of \x[protein]{p}.

Sometimes you are not able to crystallize the proteins however, and the method cannot be used.

Crystallizing is not simple because:
* you need a considerable amount of the protein
* sometimes it only crystallizes if you add some extra small chemical that stabilizes it

\x[cryogenic-electron-microscopy] can sometimes determine the structures of proteins that failed crystallization.

= Reverse engineering
{parent=technology}
{wiki}

This is what society gets for not using \x[open-knowledge]: some of its best minds will be bound to waste endless hours reversing some useless technology.

With that said, even when you do have the source code, reading run logs and using \x[debugger]{p} are a sort of reverse engineering at heart.

One of the most jaw dropping reverse engineering projects Ciro has ever seen is the \x[super-mario-64-reverse-engineering-project].

= Science is the reverse engineering of nature
{parent=reverse-engineering}
{wiki}

How \x[software-engineer][software engineers] view science:
\Q[Science is the \x[reverse-engineering] of nature.]

\x[ciro-santilli] had once assigned this as one of \x[ciro-santilli-s-best-random-thoughts], but he later found that \x[wikipedia] actually says exactly that: https://en.wikipedia.org/wiki/Reverse_engineering ("similar to scientific research, the only difference being that scientific research is about a natural phenomenon") so maybe that is where Ciro picked it up unconsciously in the first place.

= Social technology
{parent=technology}
{wiki}

= Conference
{parent=social-technology}
{wiki}

= TED
{c}
{disambiguate=conference}
{parent=conference}
{wiki}

A bit like a \x[cult]{parent}.

Many speakers are good. But especially in TEDx, we've had some notorious ones:
* https://cirosantilli.com/china-dictatorship/raz-gal-or[Raz Gal-or and his father Amir Gal-Or]

= Education
{parent=social-technology}
{wiki}

= Educational system
{synonym}

One of the causes \x[ciro-santilli] care the most about: \x[ourbigbook-com/motivation].

How to improve education? Simple:
* \x[tax-the-rich][tax the fuck out of the rich] people and companies: \x[wealth-tax] and invest it in education
* invest intelligently as mentioned at \x[what-poor-countries-have-to-do-to-get-richer]:
  * focus on fewer higher excellence schools that select the most promising poor students, rather than giving crappy average to everyone
  * use \x[ourbigbook-com]

= Stuff school should actually teach
{parent=education}
{tag=essays-by-ciro-santilli}

* \x[having-more-than-one-natural-language-is-bad-for-the-world][English]
* https://en.wikipedia.org/wiki/NATO_phonetic_alphabet[NATO phonetic alphabet]
* https://en.wikipedia.org/wiki/Mnemonic_major_system[Mnemonic major system]

= Autodidacticism
{parent=education}
{wiki}

= Autodidactic
{synonym}

= Self-taught
{synonym}

There are two types of people:
* those who are autodidacts
* those who didn't really learn

Some possible definitions:
* learning without a gun pointed at your head
* learning from an \x[e-book] or video rather than from a talking head 5 rows of chairs in front of you

  How that is different from a video, you tell me.

Thus \x[ourbigbook-com].

= Self-directed learning
{parent=autodidacticism}

\x[ciro-santilli]'s eulogy: \x[students-must-have-a-flexible-choice-of-what-to-learn].

= Year On
{c}
{parent=self-directed-learning}
{title2=UnCollege}
{wiki}

\Video[https://www.youtube.com/watch?v=tOsCQY6q1Ro]
{title=Learning Approach Uncollege by Dale Stephens (2011)}

= Educational technology
{parent=education}
{wiki}

= EdTech
{c}
{synonym}

= E-learning
{parent=educational-technology}

See also: \x[e-learning-website]{child}.

= Free education
{parent=education}

= Gifted education
{parent=education}

If \x[ourbigbook-com/motivation][school weren't bullshit], 99% of students would be in gifted education for what they truly love and are good at.

Related programs:
* \x[advanced-placement]{child}

= Recitation class
{parent=education}

https://www.varsitytutors.com/blog/what+is+a+recitation+class

Example from \x[ecole-polytechnique]: \x[a-typical-small-classroom-at-ecole-polytechnique].

= School
{parent=education}
{wiki}

Basically the same remarks as for \x[university], just 10 times more useless, see also: \x[ourbigbook-com/motivation]{full}.

= Boarding school
{parent=school}
{wiki}

= Innovative school
{parent=school}

= Innovative schools
{synonym}

Bascially schools that follows \x[ciro-santilli]'s ideas as shown at \x[how-to-teach].

= Innovative high school
{parent=innovative-school}

= Escola da Ponte
{c}
{parent=innovative-high-school}
{title2=Portugal, 1976-}
{wiki}

https://www.escoladaponte.pt/

\Video[https://www.youtube.com/watch?v=NMNVc0Yz434]
{title=Aprender em Comunidade | Prof. José Pacheco | TEDxFortaleza}

= XP School
{c}
{parent=innovative-high-school}
{title2=Doncaster, UK, 2014-}
{wiki}

https://www.thetimes.co.uk/article/no-uniforms-no-detentions-no-maths-lessons-is-xp-in-doncaster-the-school-of-the-future-jnc6n80kq

Amazing \x[self-directed-learning] direction:
\Q[The pupils have a parents' evening coming up but instead of their teachers giving an account of their progress, it is a "student-led conference" at which they must present a portfolio of their work, explain what they are most proud of and discuss where they need to put in more effort.]

https://world.hey.com/gwyn/no-excuses-bc4152fb mentions that the founder was inspired by other schools: High Tech High and Expeditionary Learning.

Lots of focus on \x[how-to-teach/showcase-student-work].

The founder \x[gwyn-ap-harri] is quite dirty mouthed, which is also cool.

\x[ciro-santilli] tried to contact them in 2021 at: https://twitter.com/cirosantilli/status/1448924419016036353 and on website contact form to see if we could do some project together, but no reply.

= Gwyn ap Harri
{c}
{parent=xp-school}

https://twitter.com/gwynap

= Innovative university course
{parent=innovative-school}

= Molecular Sciences Course of the University of São Paulo
{parent=innovative-university-course}
{title2=Curso de Ciências Moleculares, CCM}

http://www.cecm.usp.br/

https://pt.wikipedia.org/wiki/Curso_de_Ciências_Moleculares

Good \x[portuguese-language] overview: http://www.scielo.br/scielo.php?script=sci_arttext&pid=S1806-11172017000300301&lng=pt&tlng=pt

A fantastic sounding full time 4-year course that any student could transfer to called that teaches various \x[natural-science] topics, notably \x[mathematics], \x[physics], \x[chemistry] and \x[molecular-biology].

Many past students Ciro talked to however share a common frustration with the course: in the first 2 years at least, you have infinitely many courses, and no time to study, and \x[students-must-have-a-flexible-choice-of-what-to-learn][no choice of what to study], it is only in the latter 2 years that you get the choices.

Also, if you get low grades in a single subject, your out. And \x[exams-are-useless] of course.

Here's a \x[quora] question in \x[portuguese-language] about the course: https://pt.quora.com/Como-funciona-o-tal-do-curso-secreto-da-USP[], the only decent answer so far being: https://pt.quora.com/Como-funciona-o-tal-do-curso-secreto-da-USP/answer/Victor-Soares-31[]. Very disappointing to hear.

Students from the entire \x[university-of-sao-paulo] can apply to transfer to it only after joining the university, with the guarantee that they can go back to their original courses if they don't adapt to the new course, which is great!

Not doing it is one of \x[ciro-santilli]'s regrets in life, see also: \x[don-t-be-a-pussy].

Around 2007, they were in a really shady building of the University, but when Ciro checked in 2021, they had apparently moved to a shiny new entrepreneurship-focused building. Fantastic news!!!

This place has one of the best changes of spawning the first \x[brazilian] \x[nobel-prize] or \x[unicorn-startup].

One of the \x[brazilian]{p} who came to \x[ecole-polytechnique] together with Ciro was from this course. The fact that he is one of the most intelligent people Ciro knows gave further credit to that course in his eyes.

= Independent programming schools
{parent=innovative-school}

= 42
{disambiguate=school}
{parent=independent-programming-schools}
{wiki}

No teachers, no courses, no tuition fees. Yes please!!! By \x[xavier-niel].

= Recurse Center
{c}
{parent=independent-programming-schools}
{wiki}

= Science, technology, engineering, and mathematics
{parent=education}
{wiki}

= STEM
{c}
{synonym}
{title2}

= K-12
{c}
{parent=education}
{wiki=K–12}

= Primary school
{parent=k-12}
{title2=4-11}
{wiki}

= Secondary school
{parent=k-12}
{title2=12-18}
{wiki}

= High school
{synonym}

= University
{parent=education}
{wiki}

As of 2020, university has the following very important applications:
* meet an \x[ciro-santilli-s-wife][intelligent sexual partner] (see also: \x[sexual-selection]{full}, \x[the-main-function-of-university-is-sexual-selection]{full}) and or have fun and or \x[come-out-of-the-closet]
* get you in debt if you are from the \x[united-states]

Or as \x[elon-musk] https://www.theguardian.com/technology/2020/mar/10/elon-musk-college-for-fun-not-learning[put it]:
\Q[I think college is basically for fun and to prove that you can do your chores, but they're not for learning]

Which is why \x[ciro-santilli] wants to destroy its current format with \x[ourbigbook-com]. He believes that we can find a more efficient organization to achieve both the social and research functions of university, by first doing as much as possible online

Ciro's university experiences are mentioned at: \x[ciro-santilli-s-formal-education].

Once Ciro was at a University course practical session, and a graduate was around helping out. Ciro asked if what the graduate did anything specifically related to the course, and they replied they didn't. And they added that:
\Q[One has to put the bread on the table.]
Even though Ciro was already completely disillusioned by then, that still made an impression on him. Something is really wrong with this \x[shit].

Other people that think that the educational system is currently \x[bullshit] as of 2020:
* \x[ron-maimon]
* \x[xavier-niel]: https://fortune.com/2018/11/30/billionaire-xavier-niel/ "Want This Billionaire's Attention? Drop Out of School" (2018). He also created \x[42-school].
* \x[year-on]
* by Zach Caceres
  * https://zach.dev/blog/unschooling-myself
  * https://zach.dev/blog/mpc

\Video[https://www.youtube.com/watch?v=cAxzkl2cmNY]
{title=Peter Gregory from \x[silicon-valley-tv-series] shows his hate for \x[university] in a fake \x[ted-conference] talk.}
{description=Key moment: someone from the crowd cries:
\Q[The true value of a college education is intangible!]
to which the speaker replies:
\Q[The true value of snake oil is intangible as well.]
\x[imdb] https://www.imdb.com/name/nm0927706[says] it's not a cameo. It really looked like one, good acting, but what a missed opportunity. Imagine a \x[xavier-niel] appearance.
}

= The only reason for universities to exist should be the laboratories
{parent=university}

Besides of course \x[the-main-function-of-university-is-sexual-selection][sexual selection], considering in this section only "formal learning" activities.

Consider e.g. the 2020 \x[university-of-oxford], where many many people are taking courses without any \x[laboratory] work (and also without much use at all) like literature and history, and they are paying about 9k \x[pound]{p}/year for it: \x[how-much-it-costs-to-study-at-the-university-of-oxford].

Basically all of this could be done \x[ourbigbook-com][online from books].

Laboratories are impossible however, because expendables of every experiment you do cost from hundreds to thousands of dollars, not to mention crazy upfront equipment costs.

For this reason, the brick and mortar aspect universities should focus exclusively on laboratories, and ensuring that the students with the most relevant knowledge (which can be readily obtained online) get access to those laboratories. Students should of course fully master every aspect of theory pertinent to their experiments.

Furthermore, the use of laboratories should put great focus on \x[novel-research]. A lot of laboratory instruction could be done from video of an experiments. As much as possible, we should use laboratories for novel research.

= When in doubt, choose the course that has the most experimental work
{parent=the-only-reason-for-universities-to-exist-should-be-the-laboratories}

You can always learn pure theory later on for free or very cheap from books.

And above all of all, you can always learn \x[software-engineering] later on for free, because the programming community is so much more open than any other so far, notably e.g. with \x[stack-overflow] and \x[github], see also: \x[ciro-santilli-s-open-source-enlightenment]{full}. \x[ciro-santilli] is trying to change that with \x[ourbigbook-com], but don't hold your breath.

Actually, there is a good chance you will learn to program, like it or not, because chances are that you won't be able to find as decent a job doing anything else.

But there is one thing you cannot learn for free: laboratory work. Laboratory work is just \x[the-only-reason-for-universities-to-exist-should-be-the-laboratories][too expensive to carry out outside of an institution].

Basically, if you don't do laboratory work in \x[undergrad], you will very likely never be able to do so in your entire life.

Because laboratories are so rare and expensive, it is laboratories that put you in the best most unfair position at creating world changing \x[deep-tech] startups, which is why \x[when-in-doubt-choose-the-course-that-has-the-most-experimental-work]. Yes, you won't be able to achieve those insanely concentrated \x[equity]{p} of the early-\x[internet], as you will need more \x[venture-capital] to run your company, but those days are over now, deal with it.

= The main function of university is sexual selection
{parent=university}

As mentioned at \x[university]{full}, this is the actual main function of university for many people. And it fulfills it quite well.

= MRS degree
{c}
{parent=the-main-function-of-university-is-sexual-selection}
{wiki}

After learning this term, \x[ciro-santilli] finally understood that \x[ciro-santilli-s-wife][his actual major was MR], and not bullshit like \x[applied-mathematics] or \x[control-theory].

= Public university
{parent=university}
{wiki}

= Private university
{parent=public-university}
{wiki}

= University ranking
{parent=university}

= Times Higher Education
{c}
{parent=university-ranking}

= Undergraduate education
{parent=university}
{wiki}

= Undergraduate
{synonym}

= Undergrad
{synonym}

= Postgraduate education
{parent=undergraduate-education}
{wiki}

= Postgraduate
{synonym}

= Postgrad
{synonym}

= American university
{parent=university}

= University in the United States
{c}
{parent=american-university}

https://archive.ph/GpyQv#selection-925.340-925.495 Reagan's OMB Director David Stockman told congress:
\Q[students are "tax eaters... \[and\] a drain and drag on the American economy." Student aid "isn’t a proper obligation of the taxpayer,"]
and then:
\Q[In fact, voters were far more likely to punish lawmakers for raising taxes. Elected officials made the political calculus that it was safer politically to divert existing funds from discretionary costs to mandatory costs like health care, prisons and primary education, than raise taxes.]

= Brigham Young University
{c}
{parent=american-university}
{title2=BYU}
{wiki}

\x[utah]'s \x[mormon]-uni.

= Brown University
{c}
{parent=american-university}
{wiki}

= Ivy League
{c}
{parent=american-university}
{wiki}

* \x[columbia-university]

= California Institute of Technology
{c}
{parent=american-university}
{wiki}

= Caltech
{c}
{synonym}
{title2}

Near \x[los-angeles].

= Columbia University
{c}
{parent=american-university}
{wiki}

= Columbia Radiation Laboratory
{c}
{parent=columbia-university}

= Cornell University
{c}
{parent=american-university}
{wiki}

= Harvard University
{c}
{parent=american-university}
{wiki}

= Harvard
{c}
{synonym}

= HarvardX
{c}
{parent=harvard-university}
{wiki}

\x[harvard]'s \x[e-learning] thing. Weak. Related: \x[the-purpose-of-harvard-is-not-to-educate-people-by-sean-carroll-2008].

= Harvard Project Physics
{c}
{parent=harvard-university}
{wiki}

TODO where can all videos be found??

https://www.aip.org/history-programs/niels-bohr-library/ex-libris-universum/harvard-project-physics-role-history-science mentions that they have a special focus to the \x[history-of-physics], as can be seen e.g. on \x[the-world-of-enrico-fermi-by-harvard-project-physics-1970].

= Massachusetts Institute of Technology
{c}
{parent=american-university}
{wiki}

= MIT
{c}
{synonym}
{title2}

= MIT OpenCourseWare
{c}
{parent=massachusetts-institute-of-technology}

\x[cc-by-nc-sa] unfortunately.

Upload is actually optional, and it appears that teachers do retain their \x[copyright]: https://ocw.mit.edu/ans7870/global/MIT_OpenCourseWare_FAQs.pdf Hmmm, so how have they convinced so many teachers to do it?

= MIT Radiation Laboratory
{c}
{parent=massachusetts-institute-of-technology}
{wiki}

= Rad Lab
{c}
{synonym}
{title2}

Made huge advances in \x[radar].

Notably, \x[isidor-isaac-rabi] was a leading figure there, and later he was head at the \x[columbia-university] laboratory that carried out the crucial \x[lamb-retherford-experiment] and the \x[anomalous-magnetic-dipole-moment-of-the-electron] published at \x[the-magnetic-moment-of-the-electron-by-kusch-and-foley-1948] using related techniques.

= Princeton University
{c}
{parent=american-university}
{wiki}

= Institute for Advanced Study
{c}
{parent=princeton-university}
{wiki}

The "Truth and Beauty" motto hugely coincides with \x[ciro-santilli]'s ideas.

Truth is easier somewhat as it is more subjective.

Beauty, like all arts, sometimes you achieve, sometimes you don't.

Searcing beauty is a painful thing. You just keep endlessly looking for that one new insight that will blow your mind.

The key missing point would be "usefulness". See also: \x[art]{full}.

= Rice University
{c}
{parent=american-university}
{wiki}

= Stanford University
{c}
{parent=american-university}
{wiki}

= Stanford University research group
{c}
{parent=stanford-university}

https://www.covert.stanford.edu/

= Covert Lab
{c}
{parent=stanford-university-research-group}

https://www.covert.stanford.edu/

Makes the \x[e-coli-whole-cell-model-by-covert-lab].

Lead: \x[markus-w-covert].

= Markus W. Covert
{c}
{parent=covert-lab}
{wiki}

= Markus Covert
{c}
{synonym}

\x[covert-lab] lead.

\x[ciro-santilli] really likes this dude, because Ciro really likes simulation.

\Video[https://www.youtube.com/watch?v=0Be21VwlgrQ]
{title=How to build a computer model of a cell by \x[markus-covert] (2020)}

= Stanford University faculty
{c}
{parent=american-university}

* \x[leonard-susskind]{child}

= University of California
{c}
{parent=american-university}
{title2=UC}
{wiki}

= University of California, Berkeley
{c}
{parent=american-university}
{wiki}

The closest site of the \x[university-of-california] to \x[san-francisco]. \x[berkeley-california] is a small town on the East of the \x[san-francisco-bay].

= University of California, Davies
{c}
{parent=american-university}
{wiki}

= UC Davies
{c}
{synonym}
{wiki}

= University of California, Santa Barbara
{c}
{parent=american-university}
{title2=UCSB}
{wiki}

= Kavli Institute for Theoretical Physics
{c}
{parent=university-of-california-santa-barbara}

= University of Chicago
{c}
{parent=american-university}
{wiki}

= Brazilian university
{parent=university}

= University of Campinas
{c}
{parent=brazilian-university}
{title2=UNICAMP}
{wiki}

= University of São Paulo
{c}
{parent=brazilian-university}
{title2=USP}
{wiki=University_of_São_Paulo}

\x[ciro-santilli] \x[ciro-santilli-s-formal-education][studied there] for a few years starting in 2007.

= Banheiros da USP
{parent=university-of-sao-paulo}
{title2=USP Toilets}

https://www.facebook.com/banheirosdausp

Semi-comical student website to review the toilets of the \x[university-of-sao-paulo]. Some of the toilets had a reputation for being terrible.

One is reminded of \x[crushbridge].

= Polytechnic School of the University of Sao Paulo
{c}
{parent=university-of-sao-paulo}
{title2=Escola Politécnica da Universidade de São Paulo}
{wiki}

= Sao Remo, the favela next to USP
{c}
{parent=university-of-sao-paulo}
{wiki}

https://pt.wikipedia.org/wiki/São_Remo

While in Brazil, \x[ciro-santilli] used to walk through the outskirts of a small \x[favela]{parent} to get \x[university-of-sao-paulo][to university] every day, the https://pt.wikipedia.org/wiki/São_Remo[Favela de São Remo].

See the street view for: https://goo.gl/maps/ZVnTjxNpsK6QPqTE9[R. Catumbi - Vila Butantã Vila Butantã, São Paulo - State of São Paulo, Brazil], e.g. https://www.google.com/maps/@-23.5611635,-46.7449982,3a,75y,77.15h,72.78t/data=!3m6!1e1!3m4!1swNEwJR0x5wkuKHvp7c0IHw!2e0!7i16384!8i8192[with this link].

To the left, the outer walls of a large police station, with \x[concertina-wire] on top and all.

To the right, dudes \x[drug-traffic][selling drugs] on the entry of a small corridor street, presumably to which they could easily escape to in case of need.

The cops could have identified the dealers with binoculars if they actually wanted to!!!

The drug sellers did keep the peace in their business area, and Ciro never got robbed, and would come back from university parties on foot late through the favela.

But Ciro's friends did say that things got much worse after Ciro left, for example http://g1.globo.com/sao-paulo/noticia/2015/01/engenheiro-e-vitima-de-sequestro-relampago-na-cidade-universitaria.html[a flash kidnapping was reported in 2015].

Wikipedia says that this favela started in the 60s and 70s as settlements of the builders of the University, and that many of the people there still work for the University.

This is consistent with the terribly old buildings Ciro saw when he was at university. They even had the building skills to build their own homes.

The state just has to either \x[legalize] those people, or give them houses somewhere else nearby. A \x[what-poor-countries-have-to-do-to-get-richer][world class University is the most important thing a poor country can have], and its image cannot be jeopardized like that.

The existence of that favela, right next to one of the most important universities in Latin America, puts \x[brazil]'s surreal social inequality into perspective. Especially considering that before extremely heavy \x[university-entry-quotas] were added, basically all students of the university (or at least of the courses that lead to high paying jobs) had attended private schools, and therefore were not of the poorer classes (see passage about 10 out 500 passage from \x[free-gifted-education]{full}).

The janitors of the apartment block Ciro lived all lived in the favela. Yes, in poor countries lives are worth nothing, and some poorer people work by watching the entrance of buildings of less poor people 24/7 to guard it from other even more desperate poor people who might want to rob the not so poor inhabitants. They also do janitor jobs like cleaning common areas in parallel.

They were incredibly nice hard-working people, and Ciro spoke often with them. If only given the opportunity, those people could be amazing engineers or scientists obviously. Ciro was also glad to be their friends, and sat down with them quite a few times for several minutes after coming back from University parties, partly because he felt bad about them having to work at that time, but also partly because he just liked them. And they were always up to date on who had come back with a girl to the apartment or not. Ciro imagines that if it had been him, it would have been a perfect bragging opportunity ;)

They had "nothing" but were still happy. This is true wisdom, and a good reminder \x[buddhism][that all our non-\x[transhumanist] technical goals are nothing].

We must destroy \x[social-inequality].

= British university
{c}
{parent=university}
{wiki=University_in_the_United_Kingdom}

= University in the United Kingdom
{c}
{synonym}

= Are public universities in the UK owned by the Government?
{parent=british-university}

No, they are basically \x[not-for-profit]{p}, more like what the \x[united-states] more sensibly calls "\x[private-university]{p}". But if they take government funding (directly or indirectly through subsiding enrolment fees?), they have to follow some government rules, and all major ones do it seems.
* https://academia.stackexchange.com/questions/49187/in-what-sense-are-uk-universities-public/49188

A similar confusing naming pattern appears to apply to \x[public-school]{p}.

In the \x[university-of-cambridge] for example, all MA degree holders or higher appear to have some voting power: https://www.cam.ac.uk/about-the-university/how-the-university-and-colleges-work/governance (https://web.archive.org/web/20210811192322/https://www.cam.ac.uk/about-the-university/how-the-university-and-colleges-work/governance[archive])

This adds an extra layer of difficulty for the average taxpayer to make changes to university policy, e.g. making universities publish all material with \x[creative-commons-license]{p}. At most, voters could require this indirectly through the government funding requisites. It is a mess.

Not even the \x[open-university] seems to be very open!

= List of British universities
{parent=british-university}

= Imperial College London
{c}
{parent=list-of-british-universities}
{wiki}

= Imperial College
{c}
{synonym}

Nice, nice place. \x[natural-science]{c}{p} only, no bullshit.

= Open University
{c}
{parent=list-of-british-universities}
{wiki}

Not really dedicated to open source course material, nor to free courses... it is hard to understand what is "Open" about this institution compared to traditional \x[oxbridge]. "Cheap more online university" would be more adequate.

Wikipedia even says that the initial focus was on broadcasting learning material on \x[television] and \x[radio], so what happened to that now that we have an even more powerful on-demand tool called \x[internet]!

A few open sources at: https://www.open.edu/openlearn/free-courses[]. The 5-hour course on \x[particle-physics] says it all.

https://www.youtube.com/watch?v=Pj0rbafFBak What's an Open University Degree Like? by Luke Cutforth (2021) mentions that it is more \x[autodidactic]/online, and it encourages part time learning.

https://youtu.be/rsWwffX-u0A?t=99 Open University - How does it work? by Matt Greg Vlogs (2017) shows that they do have their own custom institutional material. And it is not open???? Please. https://youtu.be/rsWwffX-u0A?t=222 mentions that there is no entry exam, and you can change your courses at any time, that is good at least.

= University of Bristol
{c}
{parent=list-of-british-universities}
{wiki}

= University of Cambridge
{c}
{parent=list-of-british-universities}
{wiki}

= Cambridge University
{c}
{synonym}

Located in \x[cambridge-united-kingdom].

Second largest number of \x[nobel-prize] as of 2019, need on say more? https://en.wikipedia.org/w/index.php?title=List_of_Nobel_laureates_by_university_affiliation&oldid=934987075
* \x[paul-dirac]

= Crushbridge
{c}
{parent=university-of-cambridge}
{wiki}

It is good to see that top-\x[university]{p} is still keeping up with it's main purpose: spontaneous \x[eugenics]:
* https://www.facebook.com/crushbridge/
* https://www.cambridge-news.co.uk/news/cambridge-news/cambridge-university-crushbridge-love-declaration-15879668
* https://thetab.com/uk/cambridge/2019/06/11/an-admins-ode-to-crushbridge-125875

= Oxford Brookes University
{c}
{parent=list-of-british-universities}
{wiki}

Their only undergraduate courses that matter:
* https://www.brookes.ac.uk/courses/undergraduate/biological-sciences-mbiol/ (https://archive.ph/wip/0Pg4y[archive])
* https://www.brookes.ac.uk/courses/undergraduate/mathematics/ should be called applied mathematics (https://archive.ph/wip/aMUQp[archive])

= University of Oxford
{c}
{parent=list-of-british-universities}
{wiki}

Their "open" video material: http://podcasts.ox.ac.uk/ A somewhat small part is \x[creative-commons], but most proprietary. Despite the name "podcasts", they do contain video, it is just a relic.

http://podcasts.ox.ac.uk/open contains actual \x[creative-commons] only it seems.

Talks: https://talks.ox.ac.uk/[]. Mathematical, Physical and Life Sciences (MPLS) subset: https://talks.ox.ac.uk/talks/department/id/oxpoints:23232639 

= University of Oxford study costs
{c}
{parent=university-of-oxford}

= How much it costs to study at the University of Oxford?
{synonym}
{title2}

As of 2022:
* https://www.ox.ac.uk/students/fees-funding/fees/rates gives study fees. Almost all courses are about 9k pounds / academic year. Courses take minimum 3 years, with an optional 4th year masters. The costs of masters can be higher however, though most aren't much.

  It is funny to note how Public Policy is comically priced at 45,890 for a course without laboratories, how can a country be so corrupt? :-) It was later brought to Ciro's attention that the reason is that those courses are not usually paid by individuals, but by their employers...

  Another eye popping one is Mathematical & Computational Finance MSc for £36,370.
* https://www.ox.ac.uk/students/fees-funding/living-costs gives living costs, an average 12k for the usual 9 month period
* there is the Crankstart scholarship: https://www.ox.ac.uk/admissions/undergraduate/student-life/help-with-the-cost/crankstart-scholarships which gives 5k/year to students whose families have less than 27k/year income, and values decrease from there to 60k/year income where they become zero.

  It is funny to note that the scholarship was previously named after a Welsh billionaire who studied there and donated and his wife, https://en.wikipedia.org/wiki/Michael_Moritz[Michael Moritz] and wife Harriet Heyman. It is actually the Welsh who are creating those scholarships for the English! It is so funny to see. His background is quite amazing, from historian to journalist to venture capitalist.

  It was later renamed Crankstart after the \x[crankstart-foundation], presumably to help gather funds from others, but it is just still led by Michael.

  It does appear that most/all of the \x[natural-science]{p} ones are reasonably priced, perhaps they are subsided.

The median household income at the time was 31khttps://web.archive.org/web/20210909201931/https://www.ons.gov.uk/peoplepopulationandcommunity/personalandhouseholdfinances/incomeandwealth/bulletins/householddisposableincomeandinequality/financialyearending2020provisional{ref}. Clearly, putting one child through university with that income would be basically impossible, you would pay 19 - 5 = 14k/year, almost half of your income. Two children would be impossible. Remember how each family needs to have two children minimum to perpetuate life?

= History of the University of Oxford
{parent=university-of-oxford}

This book series appears to be the one: https://global.oup.com/academic/content/series/h/history-of-the-university-of-oxford-huo/[]. A mere 250 pounds+ each.

\Video[https://www.youtube.com/watch?v=uol4V1Wa8B0]
{title=History of Oxford University by Chris Day (2018)}
{description=A large part of the video talks about how the insane system of \x[colleges-of-the-university-of-oxford] came about organically.
* https://youtu.be/uol4V1Wa8B0?t=343 at the \x[university-of-bologna], the original system was for students to decide what they would learn, and hire and fire teachers as they decided. This is opposed to the system of the \x[university-of-paris], in which teachers make the final decisions. He mentions that this is the system that the \x[university-of-oxford] and the \x[university-of-cambridge] use: the "congregation". He mentions that \x[oxbridge] are one of the few universities that maintained this structure (as opposed to having funding sources select the final decision makers)
* https://youtu.be/uol4V1Wa8B0?t=1327 mentions the quadrangle architecture which served as the basis of the Colleges: make a closed square with everything students need: Chapel, Hall to eat, classes and accommodation. This is based of course on monastic cloisters.
}

= Colleges of the University of Oxford
{parent=university-of-oxford}
{wiki}

A good explanation of how this insane system came up is given at \x[video-history-of-oxford-university-by-chris-day-2018].

As if it weren't enough, there are also the 6 Halls: \x[permanent-private-hall].

The colleges are controlled by its fellows, a small self-electing body of highly successful scholars, usually in the dozens per college number it seems. Each college also usually has different types of fellows, e.g. see he university college page: https://www.univ.ox.ac.uk/about/college-fellowships/ (https://web.archive.org/web/2/https://www.univ.ox.ac.uk/about/college-fellowships/[archive])

= Permanent private hall
{parent=colleges-of-the-university-of-oxford}
{wiki}

Similar to a college, but led by religious denomination leaders rather than fellows.

= University of Oxford intellectual property policy
{parent=university-of-oxford}

For students (who are paying for the university to start with...), they will not claim tutorials linked to courses. But a tutorial that shows university laboratories, it is unclear: https://www.ox.ac.uk/students/academic/guidance/intellectual-property (https://web.archive.org/web/20210625015911/https://www.ox.ac.uk/students/academic/guidance/intellectual-property[archive]) This likely includes graduate students, who are also not paid by the university.

For faculty, the university owns everything it seems, to be confirmed.

= Course of the University of Oxford
{parent=university-of-oxford}

Course actually means "degree", not just one specific "course":
* \x[undergraduate]: https://www.ox.ac.uk/admissions/undergraduate/courses/course-listing | 2020/2021 https://web.archive.org/web/20210818212635/https://www.ox.ac.uk/admissions/undergraduate/courses/course-listing
* graduate: https://www.ox.ac.uk/admissions/graduate/courses/courses-a-z-listing | 

The course outline is given in a "handbook", a one or more \x[pdf] files that contain what people will learn and other practicalities.

= Undergraduate course of the University of Oxford
{parent=course-of-the-university-of-oxford}

= Biochemistry course of the University of Oxford
{parent=undergraduate-course-of-the-university-of-oxford}

Handbook 2020/2021: https://weblearn.ox.ac.uk/access/content/group/b5e24110-24b6-45fb-9789-9e7f6b7236f8/Handbooks%20%26%20Guidance/Handbooks/HANDBOOK%202020.pdf

= Chemistry course of the University of Oxford
{parent=undergraduate-course-of-the-university-of-oxford}

Handbook 2019/2020: https://web.archive.org/web/20210211192812/http://teaching.chem.ox.ac.uk/Data/Sites/58/media/courseinfo/ug-handbook-chemistry-2019-20.pdf

At http://teaching.chem.ox.ac.uk/undergraduate-course-handbook.aspx there's a paywall, but \x[google] found the \x[pdf] it anyways.

https://www.ox.ac.uk/students/academic/guidance/undergraduate/handbooks in theory links to all handbooks, but some are likely paywalled. But \x[google] can generally find them anyways.

= Physics course of the University of Oxford
{parent=undergraduate-course-of-the-university-of-oxford}

= Graduate course of the University of Oxford
{parent=course-of-the-university-of-oxford}

= MSc course of the University of Oxford
{c}
{parent=graduate-course-of-the-university-of-oxford}

= Oxford Master Course in Mathematical and Theoretical Physics
{parent=msc-course-of-the-university-of-oxford}

https://mmathphys.physics.ox.ac.uk/

= Divisions of the University of Oxford
{parent=university-of-oxford}

https://www.ox.ac.uk/about/divisions-and-departments

Given jointly by the \x[department-of-physics-of-the-university-of-oxford] and the \x[mathematics-institute-of-the-university-of-oxford].

= Mathematical, Physical and Life Sciences division of the University of Oxford
{parent=divisions-of-the-university-of-oxford}

= Department of physics of the University of Oxford
{parent=mathematical-physical-and-life-sciences-division-of-the-university-of-oxford}
{wiki=Department_of_Physics,_University_of_Oxford}

= Research group of the Department of physics of the University of Oxford
{parent=department-of-physics-of-the-university-of-oxford}

= Quantum systems engineering Research group of the  University of Oxford
{parent=research-group-of-the-department-of-physics-of-the-university-of-oxford}

= Mathematics institute of the University of Oxford
{parent=mathematical-physical-and-life-sciences-division-of-the-university-of-oxford}

No, they couldn't be like everyone else and be a department, proud mathematicians had to be an "institute"!

= Oxbridge
{c}
{parent=university-of-oxford}
{wiki}

= Loxbridge
{c}
{parent=oxbridge}
{wiki}

\x[oxbridge] + \x[london], a "golden triangle" of \x[british] universities.

= Night climbing
{parent=oxbridge}
{wiki}

= WebLearn
{c}
{disambiguate=University of Oxford}
{parent=university-of-oxford}

\x[learning-management-system] of the \x[university-of-oxford], appears fully custom and \x[closed-source]?

= University of Warwick
{c}
{parent=list-of-british-universities}
{wiki}

= Canadian university
{parent=university}

https://en.wikipedia.org/wiki/List_of_universities_in_Canada

= University of Alberta
{c}
{parent=canadian-university}
{wiki}

= French university
{c}
{parent=university}

= École Polytechnique
{c}
{parent=french-university}
{wiki}

The "most prestigious French engineering school". Only https://en.wikipedia.org/wiki/List_of_École_Polytechnique_alumni#Nobel_laureates[3 Nobels] though as of 2019, the scientists are mostly at \x[ecole-normale-superieure-paris]. A https://www.timeshighereducation.com/student/news/where-do-worlds-top-ceos-go-university[gazillion CEOs] ad politicians however.

\x[ciro-santilli] \x[ciro-santilli-s-formal-education][studied there] from 2010 to 2013.

Ciro considers him \x[effortless-effort][entering at Polytechnique a small miracle]. First, on his second year of \x[university-of-sao-paulo][University in Brazil], he first had to fail to join the also good but not as good https://fr.wikipedia.org/wiki/Groupe_des_%C3%89coles_centrales[École centrales], which really annoyed him as he saw the "other good students" who wanted to go out get their wish. This also explains why there are so few students from his university going to Polytechnique in the late 2010's: most already went to other locations! Then, on his third year, he tried Polytechnique and got in despite feeling that the others who got in knew much more mathematics and physics than him. Rather, Ciro believes that he got in chiefly due to his \x[ourbigbook-com/motivation][intense passion for the sciences] which he showed during the interview.

The miracle would have been even greater if it had happened in 2020. At this time, out of 10 \x[brazilian]{p}, 9 are from https://en.wikipedia.org/wiki/Instituto_Tecnológico_de_Aeronáutica[ITA], the "hardest to get into" university in Brazil, and also military like Polytechnique. Make no mistake, those students are amazing and deserve it without any doubt. But there is more to the story. It could be argued that many of them only go because they don't have any other choice of exchange program. Remember: Ciro had to fail applications on previous universities before getting into Polytech. Also, they don't get any Brazilian degree because ITA has no agreements with Polytechnique, and are therefore extremely likely to never come back. \x[what-poor-countries-have-to-do-to-get-richer/exchange-students][Not that Ciro thinks this is particularly bad for Brazil though], but it does make for a better deal for France overall as well. They also happen to have closer ties across cohorts of different years, and have managed to maintain a Google Doc with scanned past examinations (as of 2020 however, http://www.brasilnax.com/material-de-preparaccedilatildeo.html[some/all of those examinations have been uploaded publicly], big kudos to them). Also almost all of them are software engineers, which is one of the few disciplines given at the relatively small ITA. This lack of diversity might not be \x[ideal]: if I were France, I would rather fish around all top Brazilian schools for "the best".

Besides the amazing funding/opportunities/alumni/staff loop which you can read about elsewhere, Polytechnique is amazing because you can \x[students-must-have-a-flexible-choice-of-what-to-learn][choose what you will study every year to a very large extent].

This is in huge contrast to the crappy systems Ciro had seen e.g. in Brazil's \x[polytechnic-school-of-the-university-of-sao-paulo], where students have to decide basically all their courses in huge packages, either at university entry (thus when they are completely clueless), or at a single point inside the university studies, changes being much harder.

Life quality was also amazing. Good free accommodation on campus and at the time a no-obligations scholarship for every foreign student great sport facilities. It seems that after Ciro left however more restrictions are added to the scholarships, what a shame! As of 2020 not everyone gets scholarships anymore it seems, mostly only loans that have to be paid back later. And those who are not poor have to pay Polytechnique scholarship fees on top of their living costs. And thus French austerity measures are undermining the greatest long term investment a country can possibly make: that of importing the very best students from other countries into yours. This after their host country has already spent 20 years raising and selecting them. And you won't even pay them 2 years of frugal existence to steal some of them them. Even if those students move away from your country later on, the contacts they made in your country mean they are much more likely to bring businesses over. But some will stay. Basically, \x[university-in-the-united-states][France is becoming more like the United States].

This also makes it much more difficult for those students to do a \x[phd] afterwards, where they would get paid very little, and are unable to pay their student debts. A PhD would be where they would possibly \x[deep-tech][bring more of the next big thing to your country]. Instead, they are much more likely to just go work for some big \x[american] company \x[software-engineer][data wrangling] and bring nothing to your country but their student debt dividends instead, which they will be pay to pay for in one year with those amazing salaries. And unsurprisingly many go to into \x[bank]{p}. What a big time fail, \x[france].

Sport was mandatory due to the military nature of the school. This did have the upside of getting students together more, although Ciro is \x[students-must-have-a-flexible-choice-of-what-to-learn][against all forms of forced intellectual of physical activities for students.] If you liked your sport it would be really cool though. But due to \x[ciro-santilli-s-knee]{full}, he was forced to give up his first beloved choice which was \x[soccer]... life can be cruel. If only Ciro had known \x[cycling] at at the time, and if only that had been one of the sports you could choose (but of course it isn't, no school will want the bad reputation of \x[restrict-the-fuck-out-of-cars][when one of their students gets killed in a car accident]).

There were also some useless "military exercises", or special situations in which you had to wear the useless school uniform as a formal "respect social clothing". \x[ciro-santilli] is completely against all that meaningless bullshit, this his just a form of theatrical masturbation to nostalgically remember the good old days of \x[napoleon] when France still ruled the world, and \x[battle-of-algiers-1966][before they tortured the Algerians]. If you are going to do military-like stuff, then at least teach students how to shoot modern rifles and modern warfare tactics (which some of the French students actually do in the pre-school mandatory internship), and not this 18th century bullshit. Ciro favours of course the hoodie-wearing, "I only care about your abilities meritocracy" culture of \x[silicon-valley]. And without the \x[political-correctness] now associated with it in the 2020s. And no shooting people if possible.

During the time Ciro was at Polytechnique in early 2010's, the school was really isolated in the Palaiseau plateau, there were no shops in 10 minute walking distance! You either had to climb 300 steps to go down to the nearest village, Lozère, or take a bus to the nearest town, Massy. The fact that https://www.timeshighereducation.com/student/best-universities/best-small-universities#survey-answer[Times Higher Education ranked it as the second best university in the world in 2019] (https://web.archive.org/web/20190918230605/https://www.timeshighereducation.com/student/best-universities/best-small-universities[archive]) makes it good justice, given the small 500 student body. Things started to change a bit after Ciro left however, with the creation of the \x[polytechnic-institute-of-paris], which is bringing other schools to the Lozere area. This is for the best, as it might improve the global rankings of Polytechnique. Also it is a waste to have so few students at a technopole. But it will reduce the mystique of the place. You can't have everything in life.

Before 1976, Polytechnique was actually in the center of \x[paris] at the https://en.wikipedia.org/wiki/Latin_Quarter,_Paris[Latin Quarter], so the Lozère mystique is not a traditional thing. But even when in Paris, students were in theory restricted to school grounds a most of the time. Although there are famous stories of a certain tree that could be used to climb the fence to go to Parisian parties when they couldn't stand it anymore. The tree was somewhat intentionally overlooked by school administrators.

This made for some good memories though. The isolation favored concentration, and gave the place a mystical feeling. And then when you went to https://github.com/cirosantilli/china-dictatorship/restaurants--france--paris[eat amazing Chinese food in Paris] it just felt even more special and magic since you were so limited during the week. It was also under those magical circumstances in which Ciro met \x[ciro-santilli-s-wife][his wife], another student of the school, see also: \x[the-main-function-of-university-is-sexual-selection]{full}.

Ciro also agonized about passing courses to get useless grades though! Polytechnique is hard for most Brazilians, specially if you select the more mathematics oriented courses, because the French students were math brainwashed for two years before joining.

Ciro's favorite spots/activities:
* hide in top corner desk of the library to learn some science. Ciro loves libraries.
* \x[weekend][weekend days] in his awesome room learning Chinese

  \Image[Desk_of_Ciro_Santilli's_room_at_École_Polytechnique_as_he_as_in_the_middle_of_moving_out_in_2012.jpg]
  {description=The room also has a bed and toilet, it was great, and it was free back in those days! Only the kitchen was shared, which is good for meeting people. And for getting your password https://en.wikipedia.org/wiki/Keystroke_logging[keylogged] in the shared supplies buying system. This actually happened while Ciro was at in Polytechnique, but the keylogger operator was caught, and the semi-secret-unknown-participants-Gestapo-like-but-mostly-head-of-school-approved student association "\x[khomiss]" broke their door (which leads to an internal corridor) with a fire axe, their traditional way of saying that someone fucked up. All students live on campus, which is great for concentration.}
* sit next to the lake in a warm day to relax

  \Image[Lake_view_of_the_Grand_Hall_building_of_École_Polytechnique_in_a_cloudy_day.jpg]
  {description=Just imagine this in a perfect sunny weekend day with pure silence, it was just perfect. The lake also has a long area where rowing is practiced.}
* randomly go study at night in one of the small 20 person classrooms that were used in the day and left open at night

  \Image[https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Master_STER_Nassar_Polytechnique.jpg/640px-Master_STER_Nassar_Polytechnique.jpg]
  {id=a-typical-small-classroom-at-ecole-polytechnique}
  {title=A typical small classroom at \x[ecole-polytechnique].}
  {description=The tables are shown in the usual course configuration. Imagine that at night, in pure silence, with some of your best friends studying on a nearby room. The usual course configuration was first a course by the main teacher in a large amphitheater, and then break down into small groups with tutors, known in French as "Petites classes" (PC). In some \x[english-language] traditions, such small class system is known as \x[recitation-class]. While those small classes are a reasonable approach, \x[ciro-santilli]'s slow brain would rather just have a book and an online forum where tutors answer questions instead.}

\Image[Horny_polytechnicienne_mural_by_binet_BD_96_at_École_Polytechnique_with_nipple_censored_as_seen_in_2010.jpg]
{description=Every year, student organizations, https://www.polytechnique.net/groups/binets[called "binets"] (TODO etymology), get to compete for student elections, and they are allowed to make murals in the school to advertise themselves. They kinky people from the 1996 Cartoon Binet (BD == Band Dessiné == Cartoon in French) decided to take it to the next level. Good old 1996, this would never be allowed in 2019 due to \x[political-correctness]. As an engineering school, Polytechnique students were predominantly male up as of 2019. Let's see how much longer it will last. How about adding a sexy male polytechnician suggestively holding his theatrical sword (nicknamed the "tangente") with shirt open instead of removing the lady?}
{height=600}

The following promotional videos give an idea of how the school looks like, although they fundamentally miss the little corners that Ciro really loved in that the place and which made it magic:
* \Video[http://youtube.com/watch?v=qr_xQVyVj9U]
  {title=Pourquoi choisir l'Ecole polytechnique by \x[ecole-polytechnique] (2013)}
* \Video[http://youtube.com/watch?v=9X1yZSQE-VM]
  {title=Rentrée des élèves de la promotion 2017 du cycle ingénieur by \x[ecole-polytechnique] (2017)}

And a one second \x[ciro-santilli] appearance from a 2016 video made during the annual \x[brazilian] barbecue (or as close as you an get to it) which many ex-Brazilian students attend able: https://www.youtube.com/watch?v=ndX_-A2Rjpo&t=189 wearing a \x[jami-software][Ring t-shirt].

= When the École Polytechnique mathematics department didn't let Ciro Santilli do his internship of choice due to grades
{parent=ecole-polytechnique}
{wiki}

This was one of the only bad experience Ciro had at Polytechnique, besides the inevitable fear of not graduating.

Ciro wanted to do a robotics internship in \x[germany], linked to his interests in \x[artificial-general-intelligence], see also: \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development]{full}.

But the head of the \x[applied-mathematics] department Polytechnique prevented him from going because Ciro didn't have the necessary \x[grade]{p}, even though the Germans had already agreed to it: he had a C, but he needed a B. As mentioned at \x[ecole-polytechnique], most Brazilians had crappy grades due to their Polytechnique-incompatible background.

This was done because in the past students with bad grades had abandoned their internships halfway and given foreigners a bad impression of Polytechnique.

It is impossible to say if the head of department really agreed with this bullshit policy, or if it was something beyond his powers and he hid his true opinion, but it felt like the agreed.

What an extremely limited view!!!

To leave the worse, the worse. To assume that grades mean anything!

And thus Ciro had to choose a last moment internship that he hated, rather than becoming the greatest roboticist that ever lived, and did terribly at it.

At least on the other hand Ciro learnt \x[python] instead of working at the internship, and became \x[ciro-santilli-s-stack-overflow-contributions][the greatest programming tutorial writer that ever lived]. Maybe.

= Binet
{c}
{disambiguate=École Polytechnique}
{parent=ecole-polytechnique}
{wiki}

= Khômiss
{c}
{parent=binet-ecole-polytechnique}
{title2="secret" École Polytechnique Binet}
{wiki}

The Khômiss was a \x[binet-ecole-polytechnique] that had 12 undisclosed participants every year.

They intentionally projected the idea of a semi scary and cool \x[secret-society]/\x[cult]/Fascist/Gestapo/non-racist Ku Klux Klan-like organization

Khômiss members would wear a face cover whenever they would go out "on duty", notably to break a student's door with a fire axe when some student had fucked up particularly bad.

The Khômiss had an ambivalent character: while on one hand they would punish students that they felt had fucked up, they were actually semi approved by the school's head.

And conversely, they could also play pranks on the school head, e.g. vandalizing their office with funny objects if they had made some decision that was particularly unpopular to the students. This also likely with tacit approval, and as a way to be a "cool independent organization that also represents the students".

As such, the Khômiss aimed to be a sort of a "conscience" of the cohort, punishing the evil deeds of either side.

They were apprently unfortunately disbanded by the school in 2013 it seems, just after \x[ciro-santilli] left. They took some poor student out by car and left him more than 1km outsie of the school for some reason. But he had a \x[cell-phone] and walked came back, so doesn't feel that serious. Likely the \x[political-correctness] of the times just caught up with them.

Bibliography:
* https://fr.wikipedia.org/wiki/Traditions_de_l%27École_polytechnique#La_Khômiss
* 2013 https://www.leparisien.fr/archives/la-mauvaise-blague-de-trop-a-polytechnique-02-07-2013-2945871.php news about the dissolution of the Khômiss.
* 2012 https://www.lajauneetlarouge.com/la-khomiss-deux-cents-ans-et-resolument-moderne/ A profile of the Khômiss by the student magazine "La Jeune et la Rouge"

\Image[https://web.archive.org/web/20210125203857im_/https://www.polytechnique.net/Khomiss/logo]
{title=The logo of the Khômiss.}
{source=https://www.polytechnique.net/Khomiss/}

\Image[https://web.archive.org/web/20220109112332im_/https://www.lajauneetlarouge.com/wp-content/uploads/2012/01/672-exp-khomiss.jpg]
{title=Low resolution image of Khômiss members standing on top of a roof in Paris.}
{description=They are wearing their official unmasked clothing in that photo. It appears that ex-Khômiss are allowed to reveal their identities from this. The one with a French military cap is the their leader, and is known as the "GénéK" in their jargon.}
{source=https://www.lajauneetlarouge.com/la-khomiss-deux-cents-ans-et-resolument-moderne/}

= École Polytechnique alumnus
{c}
{parent=ecole-polytechnique}

= Polytechnic Institute of Paris
{c}
{parent=ecole-polytechnique}
{wiki}

= École normale supérieure (Paris)
{c}
{parent=french-university}
{wiki}

This is the one where \x[french] \x[nobel-prize]{p} come from: https://en.wikipedia.org/wiki/List_of_École_normale_supérieure_people#Nobel_laureates

= University of Paris
{parent=french-university}
{title2=1150-1970}
{wiki}

Their split in 1970 was a huge fuck up. If it were a single entity, the univeresity would likely be in the top 10 university rankings, undoubtedly top 20. But as of 2020 \x[french] universities only appear instead in the top 40s or 50s.

= Sorbonne University
{c}
{parent=university-of-paris}
{title2=2018-}

= Pierre and Marie Curie University
{c}
{parent=sorbonne-university}
{title2=UPMC, Paris 6, 1971-2017}
{wiki}

= German university
{c}
{parent=university}

= Karlsruhe Institute of Technology
{c}
{parent=german-university}
{title2=KIT}
{wiki}

= Italian university
{c}
{parent=university}

= University of Bologna
{c}
{parent=italian-university}
{wiki}

= Academia
{parent=education}
{wiki=Academy}

= Academic
{synonym}

= Academic fraud
{parent=academia}
{wiki}

= Academic misconduct
{synonym}

= Jan Hendrik Schön
{c}
{parent=academic-fraud}

= Schön scandal
{c}
{parent=jan-hendrik-schon}
{wiki=Schön_scandal}

One is reminded of \x[nick-leeson].

One things must be said: the root cause of all of this is the \x[replication-crisis].

This is why he managed to go on for so long.

People felt it was normal to have to try for one or two years to replicate a paper.

\Video[https://www.youtube.com/watch?v=nfDoml-Db64]
{title=The man who almost faked his way to a \x[nobel-prize] by BobbyBroccoli (2021)}
{description=Playlist: https://www.youtube.com/watch?v=nfDoml-Db64&list=PLAB-wWbHL7Vsfl4PoQpNsGp61xaDDiZmh&index=1}

= Research group
{parent=academia}
{wiki}

= Academic publishing
{parent=academia}
{tag=publishing}
{wiki}

= Research paper
{title2}
{synonym}

\x[guerilla-open-access-manifesto-by-aaron-swartz-2008].

Key \x[physics] papers from the 50's are still \x[copyright] encumbered as of 2020, see e.g. \x[lamb-retherford-experiment]. Authors and reviewers got nothing for it. Something is wrong.

= Academic journal
{parent=academic-publishing}
{wiki}

= List of academic journals
{parent=academic-journal}
{wiki}

= Cell
{c}
{disambiguate=journal}
{parent=list-of-academic-journals}
{tag=journal-by-elsevier}
{wiki}

= American academic journal
{parent=academic-journal}

= Science
{c}
{disambiguate=journal}
{parent=american-academic-journal}
{wiki}

= British academic journal
{parent=academic-journal}

= Nature
{c}
{disambiguate=journal}
{parent=british-academic-journal}
{title2=1869-}
{wiki}

Ended up under \x[springer] in 2015 after a massive merger.

= German physics journal
{parent=academic-journal}

= Session reports of the Royal Prussian Academy of Sciences at Berlin
{parent=german-physics-journal}
{title2=Sitzungsberichte der Königlich Preussischen Akademie der Wissenschaften zu Berlin}

Publications by the \x[prussian-academy-of-sciences].

Links to their publications: https://de.wikisource.org/wiki/Sitzungsberichte_der_K%C3%B6niglich_Preu%C3%9Fischen_Akademie_der_Wissenschaften_zu_Berlin

Notable papers:
* \x[gravity-and-electricity-by-hermann-weyl-1918]{child}

= Annalen der Physik
{c}
{title2=Annals of Physics, 1799-}
{parent=german-physics-journal}
{wiki}

Notable papers:
* \x[annus-mirabilis-papers]

= Zeitschrift für Physik
{c}
{title2=Journal for Physics, 1920-1997}
{parent=german-physics-journal}
{wiki}

Belongs to \x[springer], so you can still find papers under paywalls on their website.

Notable papers:
* \x[quantum-mechanical-re-interpretation-of-kinematic-and-mechanical-relations-by-heisenberg-1925] on volume 33

= Academic paper
{parent=academic-publishing}
{wiki}

= Replication crisis
{parent=academic-paper}
{wiki}

Of course, if \x[academic-journal]{p} require greater reproducibility, then the cost per paper increases.

However, that cost has to be smaller than the cost everyone who reads the paper spends to reproduce, no?

The truth is, part of the replication crisis is also due to \x[research-group]{p} not wanting to share their precious secrets with others, so they can keep ahead of the publication curve, or maybe spin off a \x[startup].

\x[ciro-santilli] wants to help in this area with his \x[videos-of-all-key-physics-experiments] project idea.

= Review article
{parent=academic-paper}
{wiki}

= Review paper
{synonym}

= Academic publisher
{parent=academic-publishing}
{wiki}

= Elsevier
{c}
{parent=academic-publisher}
{wiki}

= Journal by Elsevier
{parent=elsevier}

= Springer Science+Business Media
{c}
{parent=academic-publisher}
{wiki}

= Springer
{c}
{synonym}

= Open access academic publisher
{parent=academic-publisher}

= eLife
{c}
{parent=open-access-academic-publisher}
{wiki}

= MDPI
{c}
{parent=open-access-academic-publisher}
{wiki}

= Novel result
{parent=academic-publishing}
{wiki}

= Novel research
{synonym}

= Open access
{parent=academic-publishing}
{wiki}

= Paywall
{parent=open-access}
{wiki}

= Doctor of Philosophy
{parent=academia}
{wiki}

= PhD
{c}
{synonym}
{title2}

= All but dissertation
{parent=doctor-of-philosophy}
{title2=ABD}
{wiki}

= Research institute
{parent=education}

= Biology research institute
{parent=research-institute}

= Cold Spring Harbor Laboratory
{c}
{parent=biology-research-institute}
{wiki}

A hot hot place.

= DNA Learning Center
{c}
{parent=cold-spring-harbor-laboratory}
{wiki=Dolan_DNA_Learning_Center}

https://www.youtube.com/user/DNALearningCenter/about

https://dnalc.cshl.edu/

= J. Craig Venter Institute
{c}
{parent=biology-research-institute}
{wiki}

= JCVI
{c}
{synonym}
{title2}

Founded by \x[craig-venter] by joining up other existing institutes.

= MRC Laboratory of Molecular Biology
{c}
{parent=biology-research-institute}
{wiki}

These people don't fuck around.

= WEHI
{c}
{parent=biology-research-institute}
{wiki}

= Walter and Eliza Hall Institute of Medical Research
{c}
{synonym}
{title2}

Poor renaming choice.

= WEHImovies
{c}
{parent=wehi}
{title2=wehi.tv}

https://www.youtube.com/user/WEHImovies

Fantastic \x[animations-of-molecular-biology-processes].

https://www.wehi.edu.au/wehi-tv

https://wehi.tv redirects to https://www.wehi.edu.au/wehi-tv[].

= Drew Berry
{c}
{parent=wehimovies}
{wiki}

This is the dude that made many of the amazing \x[wehimovies] animation.

Unfortunately, the process appears to be quite manual and laborious, more art than simulation, based on the software list used: https://www.drewberry.com/faq

\Video[https://www.youtube.com/watch?v=WFCvkkDSfIU]
{title=Animations of unseeable biology by \x[drew-berry] (2021)}
{description=Presented at \x[ted-conference].}

= Company research institute
{parent=research-institute}

Ah, some of the coolest places on Earth?
* \x[bell-labs]{child}
* \x[google-x]{child}

= Bell Labs
{c}
{parent=company-research-institute}
{wiki}

\x[ciro-santilli] sometimes fantasizes of having worked there in their golden years...

Original headquarters and laboratories: 463 West Street in \x[new-york], \x[manhattan] area. On \x[surely-you-re-joking-mr-feynman] Feynman mentions that in 1941 they could see the construction of the George Washington Bridge, presumably from that building, when \x[william-shockley] brought him over to visit to get a job there. However, the actual 

Later:
* 1967 \x[bell-labs-murray-hill]

Some interesting videos:
* \x[video-the-story-of-light-by-bell-labs-2015]

= Bell Labs Holmdel Complex
{c}
{parent=company-research-institute}
{wiki}

101 Crawfords Corner Rd Holmdel, NJ 07733 USA

It started with radio research apparently, including \x[karl-guthe-jansky].

\Video[https://www.youtube.com/watch?v=BPq_ZyOvbsg]
{title=Holmdel 20th Anniversary, a history of the legendary Bell Labs facility designed by Eero Saarinen by AT&T Tech Channel (1982)}

= Bell Labs Murray Hill
{c}
{parent=company-research-institute}

600 Mountain Ave bldg 5, New Providence, NJ 07974, \x[united-states].

Became headquarters in 1967,

Drone footage: https://www.youtube.com/watch?v=z0Ld2KFjaC8 Bell LABS Headquarters Murray Hill NJ in 4K Drone Flight by ESTOUCHFPV (2017)

Notable inventions made there:
* the first \x[transistor]
* TODO confirm  \x[c-programming-language]

= Skunk Works
{c}
{parent=company-research-institute}
{wiki}

= Physics research institute
{parent=research-institute}

= National Institute of Standards and Technology
{c}
{parent=physics-research-institute}
{wiki}

= NIST
{c}
{synonym}
{title2}

These people are serious.

= United States Department of Energy
{c}
{parent=physics-research-institute}
{title2=DoE}
{wiki}

= United States Department of Energy national laboratories
{c}
{parent=united-states-department-of-energy}
{wiki}

Where \x[nuclear-weapon]{p} and \x[nuclear-power], and a ton of derived research is made.

For a fun and brief random \x[software] encounter with that universe, see the VisIt section of https://stackoverflow.com/questions/5854515/interactive-large-plot-with-20-million-sample-points-and-gigabytes-of-data/55967461#55967461[].

= Argonne National Laboratory
{c}
{parent=united-states-department-of-energy-national-laboratories}
{wiki}

This is where they moved the \x[chicago-pile-1] after they decided it might be a bad idea to run \x[chicago-pile-1][highly experimental nuclear reactions] right in the middle of one of the most populous cities of the \x[united-states].

After it was reassembled, the \x[chicago-pile-1] was renamed as Chicago Pile 2 (CP2).

So more precisely, it is a continuation of the \x[metallurgical-laboratory].

It's still not that far though, only about 20 kilometers, and today is also a populated area.

\x[ciro-santilli] maintains that they chose the site because the name is so cool. Wikipedia says it is derived from the https://en.wikipedia.org/wiki/Forest_of_Argonne[Forest of Argonne], maybe it even shared etymology with the element \x[argon].

= Fermilab
{c}
{parent=united-states-department-of-energy-national-laboratories}
{tag=particle-accelerator-facility}
{wiki}

= Lawrence Livermore National Laboratory
{c}
{parent=united-states-department-of-energy-national-laboratories}
{title2=LLNL}
{wiki}

Founded partly due to the influcence of \x[edward-teller] who thought \x[los-alamos-national-laboratory] was not making good progress on \x[thermonuclear-weapon]{p}, large part of which was developed there.

= Los Alamos National Laboratory
{c}
{parent=united-states-department-of-energy-national-laboratories}
{wiki}

= Los Alamos Laboratory
{c}
{parent=los-alamos-national-laboratory}
{wiki}

Name of the site during the \x[manhattan-project].

= Oak Ridge National Laboratory
{c}
{parent=united-states-department-of-energy-national-laboratories}
{wiki}

Located in \x[tennessee] in the East of the \x[united-states].

This is where the \x[x-10-graphite-reactor] was located.

= X-10 Graphite Reactor
{c}
{parent=oak-ridge-national-laboratory}
{title2=1943-11-04}
{wiki}

An intermediate step between the \x[nuclear-chain-reaction] prototype \x[chicago-pile-1] and the full blown mass production at \x[hanford-site]. Located in the \x[oak-ridge-national-laboratory].

= Clinton Engineer Works
{c}
{parent=physics-research-institute}
{wiki}

Produced the \x[enriched-uranium] used for \x[little-boy], located in the area/predecessor of \x[oak-ridge-national-laboratory].

= Learned society
{parent=education}
{wiki}

= American learned society
{parent=learned-society}

= American Physical Society
{c}
{parent=american-learned-society}
{wiki}

= Reviews of Modern Physics
{c}
{parent=american-physical-society}
{title2=1929-}
{wiki}

= Physical review
{c}
{parent=american-physical-society}
{title2=1893-}
{wiki}

= National Academy of Sciences
{c}
{parent=american-learned-society}
{wiki}

= British learned society
{c}
{parent=learned-society}

= Institute of Physics
{c}
{parent=british-learned-society}

= Physics World
{c}
{parent=institute-of-physics}

Magazine of the \x[institute-of-physics].

= Royal Society
{c}
{parent=british-learned-society}
{wiki}

They do two things:
* make a closed source science journal with insanely high https://en.wikipedia.org/wiki/Impact_factor[impact factor] as of 2019
* gamify science by letting (mostly \x[united-kingdom][mostly British]) dudes like Newton and \x[paul-dirac] add \x[post-nominal-letters][some random letters] after their real names to show off

= Post-nominal letters
{parent=royal-society}
{wiki}

One of \x[ciro-santilli-s-selfish-desires].

= German learned society
{c}
{parent=learned-society}

= Prussian Academy of Sciences
{c}
{parent=german-learned-society}
{title2=1700-1990}
{wiki}

Published as \x[session-reports-of-the-royal-prussian-academy-of-sciences-at-berlin].

= Exam
{parent=education}
{wiki=Test_(assessment)}

= Exams are useless
{synonym}
{title2}

Exams are useless. Exams must be abolished. The only metrics that matter are \x[money] and fame. See also: \x[ourbigbook-com/motivation].

Once the question of an exam has been formulated, the usefulness of the problem is already been completely destroyed, because formulating the problem that matters is the most important part of things. And any problem with an answer, is useless to put effort into: \x[how-to-teach/give-answers].

Furthermore, preventing people from searching for answers while answering an exam, AKA preventing "cheating", also makes absolutely no sense. In the real world, we want people to find answers as quickly as possible! We should be teaching people how to "cheat"! What we should teach them instead is what a \x[fucking] \x[license] is, and what you have to do to comply with it.

And if you must absolutely have exams, they must be open to anyone who wants to applies. Then people have to pay to take the exam, with subsidies for "official course takers", who are spending 100x more anyways due to not living with their parents.

And if you pass the exam, you pass the course, without any further time requirements.

And those exams must be applied by professional test application companies to ensure no cheating and to factor out the anti-cheat work, while still making the tests available to people anywhere.

A quote from \x[richard-feynman] present in the book \x[surely-you-re-joking-mr-feynman-chapter-o-americano-outra-vez]:
\Q[
You cannot get educated by this self-propagating system in which people study to pass exams, and teach others to pass exams, but nobody knows anything.

You learn something by doing it yourself, by asking questions, by thinking, and by experimenting.
]

The only metric that matters is "to feel that you've satisfied youre curiosity". When one studies for that, it can take a lot more time to actually learn everything, because it is sometimes not as clear when you should stop. But it is the only way to go deeper.

A person's understanding is the most \x[illiquid] asset that exists, to judge that based only on standardized exams, is a certain way to fail to identify top talent.

Related: \x[how-to-teach/exams-and-homework-are-useless-only-projects-matter]

= Grade
{disambiguate=exam}
{parent=exam}

= Grade
{synonym}

See: \x[exam].

= Homework
{parent=exam}
{wiki}

Same remarks as \x[exam]{full}.

= Philosophy of education
{parent=education}
{wiki}

= Teaching method
{title2}
{synonym}

By \x[ciro-santilli]: \x[how-to-teach]{full}.

Others:
* https://web.archive.org/web/20191223214225/http://settheory.net/academic-system from \x[settheory-net]

= Montessori education
{c}
{parent=philosophy-of-education}
{wiki}

= Paulo Freire
{c}
{parent=philosophy-of-education}
{wiki}

https://en.wikipedia.org/wiki/Paulo_Freire[]:
\Q[During his childhood and adolescence, Freire ended up four grades behind, and his social life revolved around playing pick-up football with other poor children, from whom he claims to have learned a great deal. These experiences would shape his concerns for the poor and would help to construct his particular educational viewpoint. Freire stated that poverty and hunger severely affected his ability to learn. These experiences influenced his decision to dedicate his life to improving the lives of the poor: "I didn't understand anything because of my hunger. I wasn't dumb. It wasn't lack of interest. My social condition didn't allow me to have an education. Experience showed me once again the relationship between social class and knowledge"]
OMG so nice.

= Waldorf education
{c}
{parent=philosophy-of-education}
{title2=1919}
{wiki}

= Government
{parent=social-technology}
{wiki}

= Democracy
{parent=government}
{wiki}

= Voting
{parent=democracy}
{wiki}

= Vote
{synonym}

= Electronic voting
{parent=voting}
{wiki}

This is a must if the people want to regain control of their society from apathetic politicians.

I would also increase voter percentage due to convenience, and reduce the weight of voting fraud cases, as everyone would be able to check that their own vote was counted correctly.

And then, we would be able to have \x[referendum]{p} for basically any important decision being made. No need to go out on the streets and waste your time in a mass protest! Just vote!

It is possible to implement anonymous electronic voting with \x[ring-signature]{p}, an algorithm also used by \x[monero], an \x[anonymity] focused \x[cryptocurrency], as mentioned e.g. on this 2004 paper https://eprint.iacr.org/2004/281.pdf[]. The system can be set in a way such that you can only deanonymize someone if everyone else, or a very large number of people, conspire against that person.

The same system could also be used to setup forums where only citizens of the country could comment and propose changes and vote on them.

With electronic voting, we could have a system where you can let someone you trust vote for you automatically, or vote automatically for certain subjects alone, a bit like we do by electing senators. But then you would also be able to override specific votes if you wanted to.

In this system therefore, anyone who can proxy vote has to have their vote public, and placed in a decent website that shows clearly who voted for what.

Related:
* https://www.vote-coin.com/ allows you to delegate your voting power to someone else, that's perfect!

= Referendum
{parent=voting}
{wiki}

= Dictatorship
{parent=government}
{wiki}

\x[china] related: https://cirosantilli.com/china-dictatorship/dictatorship

= Tax
{parent=government}
{wiki}

= Taxation
{synonym}

= Fiscal paradise
{parent=tax}
{wiki}

Fiscal paradises must be invaded and destroyed.

= Legal tender
{parent=tax}
{wiki}

= Tax the rich
{parent=tax}
{wiki}

\Video[https://www.youtube.com/watch?v=t6V9i8fFADI]
{title=How the rich avoid paying taxes by Vox (2021)}
{description=Features interview with Morris Pearl, a rich dude that is campaigning to tax the rich. He also participates in an association called  https://patrioticmillionaires.org/about/["Patriotic Milionairs"] to further this agenda.}

= Georgism
{parent=tax-the-rich}
{wiki}

\Video[https://www.youtube.com/watch?v=Li_MGFRNqOE]
{title=Georgism 101 by BritMonkey (2019)}

= Redistribution of wealth
{parent=tax-the-rich}

= Progressive tax
{parent=tax-the-rich}
{wiki}

= Wealth tax
{parent=tax-the-rich}
{wiki}

Obviously coupled with measures to prevent \x[capital-flight]. This would be a required step to achieve \x[ciro-santilli]'s dream of \x[unconditional-basic-income].

Why don't the poor vote in mass for it is incomprehensible considering e.g. the \x[wealth-inequality-in-the-united-states] as of 2020!
* https://www.jstor.org/stable/20027743?seq=1#metadata_info_tab_contents
* https://www.washingtonpost.com/news/monkey-cage/wp/2018/02/27/why-the-poor-dont-vote-to-soak-the-rich/

Perhaps the election of \x[donald-trump] in 2016 woke up the \x[democrat]{p} at last, that they were just making empty promises without actually benefiting the poor? https://www.vox.com/2019/3/19/18240377/estate-tax-wealth-tax-70-percent-warren-sanders-aoc[]. Or is just another facade?

Bibliography:
* https://www.npr.org/sections/money/2019/02/26/698057356/if-a-wealth-tax-is-such-a-good-idea-why-did-europe-kill-theirs If a Wealth Tax is Such a Good Idea, Why Did \x[europe] Kill Theirs?
* https://www.youtube.com/watch?v=XzonR81vVzM The Mayfair Set, Episode 2 - Entrepreneur Spelt S.P.I.V. (1999) by \x[adam-curtis] explains nicely how in the 60's, https://en.wikipedia.org/wiki/Jim_Slater_(accountant)[Jim Slater] bought stock of inefficient companies, and sold off inefficient assets to make a profit.

  He managed to do that because previously people had regarded those companies as family companies, and never looked into the fact that they families weren't actually majority shareholders anymore.

  While this increased efficiency, it also fired many people, and the government didn't manage to change legislation fast enough to \x[tax] those profits to increase welfare.

= Law
{parent=social-technology}
{wiki}

= Legal
{synonym}

= Illegal
{synonym}

= Legality
{synonym}

= Illegality
{synonym}

= Legally
{synonym}

= Illegally
{synonym}

= Legalize
{synonym}

= Intellectual property
{parent=law}
{title2=IP}
{wiki}

= Patent
{parent=intellectual-property}
{wiki}

= Patented
{synonym}

= Crime
{parent=law}
{wiki}

Some types of crimes include:
* \x[cybercrime]{child}

= Fraud
{parent=crime}
{wiki}

= Bait-and-switch
{parent=fraud}
{wiki}

= Clickbait
{parent=bait-and-switch}
{wiki}

= Clickbaity
{synonym}

= Organized crime
{parent=crime}
{wiki}

= Punishment
{parent=crime}
{wiki}

= Crucifixion
{parent=punishment}
{wiki}

= Crucify
{synonym}

= Crucified
{synonym}

= Theft
{parent=crime}
{wiki}

= Freedom of speech
{parent=law}
{wiki}

For \x[ciro-santilli]'s campaign for freedom of speech in China: \x[cirosantilli-china-dictatorship]{full}.

Ciro has the radical opinion that absolute freedom of speech must be guaranteed by \x[law] for anyone to talk about absolutely anything, anonymously if they wish, with the exception only of copyright-related infringement.

And Ciro believes that there should be no age restriction of access to any information.

People should be only be punished for actions that they actually do in the real world. Not even purportedly planning those actions must be punished. Access and ability to publish information must be completely and totally free.

If you don't like someone, you should just block them, or start your own campaign to prepare a counter for whatever it is that they are want to do.

This freedom does not need to apply to citizens and organizations of other countries, only to citizens of the country in question, since foreign governments can create influence campaigns to affect the rights of your citizens. More info at: https://cirosantilli.com/china-dictatorship/mark-government-controlled-social-media

Limiting foreign influence therefore requires some kind of nationality check, which could harm \x[anonymity]. But Ciro believes that almost certainly such checks can be carried out in anonymous blockchain consensus based mechanisms. Governments would issues nationality tokens, and tokens are used for anonymous confirmations of rights in a way that only the token owner, not even the government, can determine who used the token. E.g. something a bit like what \x[monero] does. Rights could be checked on a once per account basis, or yearly basis, so transaction costs should not be a big issue. Maybe expensive proof-of-work systems can be completely bypassed to the existence of this central token authority?

Some people believe that freedom of speech means "freedom of speech that I agree with". Those people should move to \x[china] or some other \x[dictatorship].

Related: https://cirosantilli.com/china-dictatorship/hate-speech

= Censorship
{parent=freedom-of-speech}
{wiki}

The opposite of \x[freedom-of-speech].

For \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][censorship in China] see: https://cirosantilli.com/china-dictatorship/censorship

= Law enforcement
{parent=law}
{wiki}

= Police
{parent=law-enforcement}
{wiki}

= License
{parent=law}
{wiki}

= Licensed
{synonym}

Related:
* \x[freely-licensed-bibles]{child}

= Copyright
{parent=license}
{wiki}

= Fair use
{parent=copyright}
{wiki}

= Freedom of panorama
{parent=license}
{wiki}

= Free license
{parent=license}
{wiki}

= Creative Commons license
{c}
{parent=free-license}
{wiki}

= Creative Commons
{c}
{synonym}

= CC BY
{c}
{parent=creative-commons-license}

= CC BY-SA
{c}
{parent=creative-commons-license}

This one strikes the right balance between restriction and permissions. NC and ND are simply too restrictive.

TODO where does the SA boundary end? E.g.:
* \x[software]: https://opensource.stackexchange.com/questions/173/what-do-i-need-to-share-if-i-include-cc-by-sa-artwork-in-my-software/11323#11323
* \x[video-game]:
  * https://gamedev.stackexchange.com/questions/92536/is-it-legal-to-use-creative-commons-art-in-a-commercial-game/189293#189293
  * https://www.reddit.com/r/creativecommons/comments/5nn01q/using_sharealike_music_in_a_video_game_must_i/
* \x[website]: https://graphicdesign.stackexchange.com/questions/68805/using-cc-by-sa-3-0-images-in-website-does-share-alike-affect-my-websites-lice/145124#145124
* book: https://academia.stackexchange.com/questions/48375/using-images-with-cc-by-sa-license-in-slides-or-a-thesis
* \x[music] in a podcast: https://opensource.stackexchange.com/questions/7022/using-cc-by-sa-music-in-a-podcast

Does source code need to be redistributed: https://opensource.stackexchange.com/questions/1849/does-the-cc-by-sa-license-require-that-source-code-of-derivative-works-be-shared

Case law list on the CC wiki: https://wiki.creativecommons.org/wiki/Category:Case_Law

= CC BY-SA 4.0
{parent=cc-by-sa}

= CC BY-NC-SA
{c}
{parent=creative-commons-license}

Too restrictive. People should be able to make money from stuff.

The definition of "commercial" could also be taken in extremely broad senses, making serious reuse risky in many applications.

Notably, many \x[university] courses use it, notably \x[mit-opencourseware]. Ciro wonders if it is because \x[academic]{p} are wary of \x[industry], or if they want to make money from it themselves. This reminds Ciro of a documentary he watched about the origins of one an early \x[web-browser]{p} in some \x[american] university. And then that university wanted to retain copyright to make money from it. But the PhDs made a separate company nonetheless. And someone from the company rightly said something along the lines of:
\Q[The goal of \x[university]{p} is to help create companies and to give back to society like that. Not to try and make money from inventions.]
TODO source.

= Public domain
{parent=free-license}
{wiki}

= Software license
{parent=license}
{wiki}

= Affero General Public License
{c}
{parent=software-license}
{wiki}

= AGPL
{c}
{synonym}

= Server Side Public License
{c}
{parent=affero-general-public-license}
{title2=SSPL}
{wiki}

Created by \x[mongodb], attempts to be even more restrictive than \x[agpl] by more explicitly saying that indirect automatic requests are also included in the "you must give source" domain: https://opensource.stackexchange.com/questions/8025/difference-between-mongodb-sspl-and-gnu-agpl

The base use case is:
* client contacts \x[server] software, e.g. a \x[python] program
* \x[python] contacts the \x[database], and returns results back to the client
which is what MongoDB is trying to ensure, which sounds fair.

= Freeware
{parent=software-license}
{wiki}

= Freemium
{parent=software-license}
{wiki}

= MIT License
{c}
{parent=software-license}
{wiki}

= Proprietary software
{parent=software-license}
{wiki}

= Software license that starts closed and becomes open once a certain amount of money is raised
{parent=software-license}

This is an interesting licensing model that might just scale.

= Sponsorware
{parent=software-license-that-starts-closed-and-becomes-open-once-a-certain-amount-of-money-is-raised}

https://calebporzio.com/sponsorware

= Management
{parent=social-technology}
{wiki}

\Video[https://www.youtube.com/watch?v=GsN0WVLjpcs]
{title=DealBook Conference 2015 - Activist Investing by \x[new-york-times] Events (2015)}
{description=At this timestamp, Carl Icahn tells an anecdote of how he found that an entire 12-floor building of the https://en.wikipedia.org/wiki/American_Car_and_Foundry_Company[American Car and Foundry Company] which he had recently bought was not doing anything useful, and fired the entire building.}
{start=377}

= Marketing
{parent=social-technology}
{wiki}

= Advertising
{parent=marketing}
{wiki}

= Advertisement
{parent=advertising}
{wiki}

= The best advertisements of all time
{parent=advertising}
{wiki}

= Chumbox
{parent=advertising}
{wiki}

\x[clickbait]{c} advertisement

= Taboola
{c}
{parent=advertising}
{wiki}

Taboola is a \x[clickbait] trained neural network. Which happens to have been written by \x[adolf-hitler].

= If a product of a big company has a catchy name it came from an acquisition
{parent=marketing}

If a Big Company makes a product that Does Something, they just call it Big Company Does Something.

If a product is called "Big Company Catchy Name Does Something", then it came from an acquisition, and they wanted to keep the name due to its prestige and to not confuse users.

= Meal deal
{parent=marketing}
{wiki}

= Media
{disambiguate=communication}
{parent=social-technology}
{wiki}

= Media company
{parent=media-communication}

= Vice News
{c}
{parent=media-company}
{wiki}

= Newspaper
{parent=media-communication}
{wiki}

= New York Times
{c}
{parent=newspaper}
{wiki}

= Social media
{parent=media-communication}

Basically a \x[social-network] where you don't know the other people very well.

= Aggressively filter your social media follows
{parent=social-media}
{tag=cirism}

Ciro Santilli very aggressively aggressively people in social media.

There are basically 3 categories:

* are you Ciro's parents or children or brothers: OK, keep following, unless you are truly truly very noise.
* does Ciro really really like or respect you? OK, he can take some useless (i.e. non-technical/scientific) posts
* otherwise: one bad post and unfollow

= Social network
{parent=social-media}
{wiki}

Related:
* \x[social-media]

= Distributed social network
{parent=social-media}
{wiki}

= Federated social network
{synonym}

* \x[mastodon-software]{child}

= List of social media
{parent=social-media}
{wiki}

= Facebook
{c}
{parent=list-of-social-media}
{wiki}

= Instagram
{c}
{parent=facebook}
{wiki}

\x[ciro-santilli] is just too old to understand what the point of that website is compared to \x[twitter]. There must be one, right?

Also, it is impossible to use it on the \x[browser] without a \x[cell-phone], similar critique as \x[messaging-software-that-force-you-to-have-a-mobile-phone]{full} but a bit more aggravating, because, well, you would expect creators want people to see their stuff on a \x[browser] unlike private messages?

= Mark Zuckerberg
{c}
{parent=facebook}
{wiki}

= Zuckerberg
{c}
{synonym}

= Mastodon
{c}
{disambiguate=software}
{parent=list-of-social-media}
{wiki}

Of course those racist \x[nazi]{p} are a bunch of idiots, but how can you be surprised when freedom-of-speech focused tech gets used by them? https://www.theverge.com/2019/7/12/20691957/mastodon-decentralized-social-network-gab-migration-fediverse-app-blocking

Obviously, a few large instances dominate the user base for all practical purposes: https://kevq.uk/centralisation-and-mastodon/[]. And likely the network splits into hate-speech/non-hate-speech blacklist boundaries. And since the dominating closed networks will never lose user counts (???), the only instance that dominates will be the main hate speech one.

The flagship instance was https://mastodon.social[] and then in 2020 they closed signups for it and created a secondary https://mastodon.online[].

= LinkedIn
{c}
{parent=list-of-social-media}
{tag=microsoft-product}
{wiki}

\x[ciro-santilli]'s LinkedIn profile: https://www.linkedin.com/in/cirosantilli/ see also: \x[accounts].

LinkedIn fully complies with censorship imposed locally by the \x[chinese-government], and does so in a non-transparent way: https://cirosantilli.com/china-dictatorship/linkedin[].

It is hard to understand what the point of that website is, as it is basically just a more closed version of \x[facebook], but alas, it has flourished as the only place where people post more useful content compared to \x[twitter] and \x[facebook]. In any case, Ciro just applies the same unfollow policy to all of them: \x[aggressively-filter-your-social-media-follows].

Impossible to hide your current location?
* https://www.quora.com/How-can-I-hide-my-location-on-LinkedIn
* https://www.reddit.com/r/linkedin/comments/342uwu/hide_my_location/

= Twitter
{c}
{parent=list-of-social-media}
{wiki}

\x[ciro-santilli]'s accounts: \x[ciro-santilli-s-twitter-accounts]{full}.

https://twitter.com/zaikandongxi

= Money
{parent=social-technology}
{wiki}

= Asset
{parent=money}
{wiki}

= Tangible asset
{parent=asset}

= Intangible asset
{parent=asset}

= Cryptocurrency
{parent=money}
{wiki}

The key difficulties of cryptocurrencies are:
* how do transaction fees/guarantees/times compare to centralized systems such as credit cards:
  * https://bitcoin.stackexchange.com/questions/1261/is-it-possible-to-send-bitcoins-without-paying-a-fee "The Blockchain Scalability Problem & the Race for Visa-Like Transaction Speed" (2019)

    \Q[The battle for a scalable solution is the blockchain's moon race. Bitcoin processes 4.6 transactions per second. Visa does around 1,700 transactions per second on average (based on a calculation derived from the official claim of over 150 million transactions per day).]
  * https://towardsdatascience.com/the-blockchain-scalability-problem-the-race-for-visa-like-transaction-speed-5cce48f9d44
  Obviously, decentralized currencies cannot be cheaper to maintain than centralized ones, since with decentralization you still have to send network messages at all times, and instead of one party carrying out computations, multiple parties have to carry out computations.

  Crypto could however be close enough in price to centralized systems that it becomes viable, this can be considered.
* how can \x[government]{p} \x[tax] cryptocurrency. Notably, because:
  * taxation has to be \x[progressive-tax][progressive], e.g. \x[wealth-tax][we have to tax the rich more than the poor], and \x[anonymity] in transactions would weaken that
  * it would be even easier to move money into \x[fiscal-paradise]{p}, and then just say, oops, lost my passwords, those coins are actually gone
  See also \x[globalization-reduces-the-power-of-governments].
Until those problems are solved, the only real applications of cryptocurrency will by \x[illegal] activities, notably buying \x[drug]{p}, paying for \x[ransomware]. But also paying for anti-\x[censorship] services from inside \x[dictatorship]{p}. It is for this reason that \x[ciro-santilli] believes that \x[privacy-coin]{p} are the best investments until then. People concerned with their privacy are likely to more naturally make fewer larger payments to reduce exposure, and therefore transaction fees matter less, and can be seen as a reasonable privacy \x[tax]. Also drugs are expensive, just have a look at any \x[uncensored-onion-service-search-engine], so individual transactions tend to be large.

If crypto really takes off, 99.99% of people will only ever use it through some \x[cryptocurrency-exchange] (unless scalability problems are solved, and they replace \x[fiat-currency]{p} entirely), so the experience will be very similar to \x[paypal], and without "true" decentralization.

For those reasons, \x[ciro-santilli] instead believes that governments should issue \x[electronic-money], and maintain an open \x[api] that all can access instead. The centralized service will always be cheaper for \x[society] to maintain than any distributed service, and it will still allow for proper taxation.

Ciro believes that it is easy for people to be seduced by the \x[idealistic] promise that "cryptocurrency will make the world more fair and equal by giving everyone equal opportunities, away from the corruption of Governments". Such optimism that new \x[technology]{p} will solve certain key \x[social] problems without the need for constant \x[government] intervention and management is not new, as shown e.g. at \x[hypernormalisation-by-adam-curtis-2016] when he talks about the cyberspace (when the \x[internet] was just beginning): https://youtu.be/fh2cDKyFdyU?t=2375[]. Technologies can make our lives better. But in general, some of them also have to be managed.

In any case, cryptocurrencies are \x[bullshit], the true currency of the future is going to be \x[magic-the-gathering] cards. And \x[cirocoin].

One closely related thing that Ciro Santilli does think could be interesting exploring right now however, notably when having \x[monero]-like anonymity in mind, would be anonymous \x[electronic-voting].

TODO evaluate the possible application of cryptocurrency for international transfers:
* https://bitcoin.stackexchange.com/questions/25583/does-it-make-sense-to-use-bitcoin-to-transfer-money-to-yourself-internationally
Of course, the ideal solution would be for governments to just allow for people from other countries to create accounts in their country, and use the centralized API just like citizens. Having an account of some sort is of course fundamental to avoid money laundering/tax evasion, be it on the API, or when you are going to cash out the crypto into \x[fiat-currency][fiat]. So then the question becomes: suppose that governments are shit and never make such APIs, are international transfers just because traditional banks are inneficient/greedy? Or is it because of the inevitable cost of auditing transfers? E.g. how does Transferwise compare to Bitcoin these days? And if cryptocurrency is more desirable, why wouldn't Transferwise just use it as their backend, and reach very similar fees?

= Privacy coin
{parent=cryptocurrency}

Notable ones:
* \x[monero]

= Cryptocurrency mining
{parent=cryptocurrency}

= Mining pool
{parent=cryptocurrency-mining}
{wiki}

= Vanity address
{parent=cryptocurrency}

https://bitcoin.stackexchange.com/questions/20305/what-is-vanity-address

= List of cryptocurrencies
{parent=cryptocurrency}

= Bitcoin
{c}
{parent=list-of-cryptocurrencies}
{wiki}

= Bitcoin blockchain
{c}
{synonym}

How it works: \x[how-bitcoin-works]{full}.

Official website: https://bitcoin.org/en/

Reference implementation: \x[bitcoin-core].

= How Bitcoin works
{parent=bitcoin}

Here is a very direct description of the system:
* each transaction (transaction is often abbreviated "tx") has a list of inputs, and a list of outputs
* each input is the output of a previous transaction. You verify your identity as the indented receiver by producing a \x[digital-signature] for the \x[public-key] specified on the output
* each output specifies the \x[public-key] of the receiver and the value being sent
* the sum of output values cannot obvious exceed the sum of input values. If it is any less, the leftover is sent to the miner of the transaction as a transaction fee, which is an incentive for mining.
* once an output is used from an input, it becomes marked as spent, and cannot be reused again. Every input uses the selected output fully. Therefore, if you want to use an input of 1 BTC to pay 0.1 BTC, what you do is to send 0.1 BTC to the receiver, and 0.9 BTC back to yourself as change. This is why the vast majority of transactions has two outputs: one "real", and the other change back to self.
\x[code-sample-bitcoin-transaction-graph] illustrates these concepts:
* `tx0`: magic transaction without any inputs, i.e. either \x[genesis-block] or a coinbase mining reward. Since it is a magic transaction, it produces 3 Bitcoins from scratch: 1 in `out0` and 2 in `out1`
* `tx1`: regular transaction that takes:
  * a single input from `tx0 out0`, with value 1
  * produces two outputs:
    * `out0` for value 0.5
    * `out1` for value 0.3
  * this means that there was 0.2 left over from the input. This value will be given to the miner that mines this transaction.
  Since this is a regular transaction, no new coins are produced.
* `tx2`: regular transaction with a single input and a single output. It uses up the entire input, leading to 0 miner fees, so this greedy one might (will?) never get mined.
* `tx3`: regular transaction with two inputs and one output. The total input is 2.3, and the output is 1.8, so the miner fee will be 0.5

``
                   tx1                     tx3
  tx0            +---------------+       +---------------+
+----------+     | in0           |       | in0           |
| out0     |<------out: tx0 out0 |  +------out: tx1 out1 |
| value: 1 |     +---------------+  |    +---------------+
+----------+     | out0          |  |    | in1           |
| out1     |<-+  | value: 0.5    |  | +----out: tx2 out0 |
| value: 2 |  |  +---------------+  | |  +---------------+
+----------+  |  | out1          |<-+ |  | out1          |
              |  | value: 0.3    |    |  | value: 1.8    |
              |  +---------------+    |  +---------------+
              |                       |
              |                       |
              |                       |
              |    tx2                |
              |  +---------------+    |
              |  | in0           |    |
              +----out: tx0 out1 |    |
                 +---------------+    |
                 | out0          |<---+
                 | value: 2      |
                 +---------------+
``
{title=Sample \x[bitcoin] transaction \x[graph].}

Since every input must come from a previous output, there must be some magic way of generating new coins from scratch to bootstrap the system. This mechanism is that when the miner mines successfully, they get a mining fee, which is a magic transaction without any valid inputs and a pre-agreed value, and an incentive to use their power/compute resources to mine. This magic transaction is called a "https://en.bitcoin.it/wiki/Coinbase[coinbase transaction]".

The key innovation of Bitcoin is how to prevent double spending, i.e. use a single output as the input of two different transactions, via mining.

For example, what prevents me from very quickly using a single output to pay two different people in quick succession?

The solution are the blocks. Blocks \x[discretize] transactions into chunks in a way that prevents double spending.

A block contains:
* a list of transactions that are valid amongst themselves. Notably, there can't be double spending within a block.

  People making transactions send them to the network, and miners select which ones they want to add to their block. Miners prefer to pick transactions that are:
  * small, as less bytes means less hashing costs. Small generally means "doesn't have a gazillion inputs/outputs".
  * have higher transaction fees, for obvious reasons
* the ID of its parent block. Blocks therefore form a linear linked list of blocks, except for temporary ties that are soon resolved. The longest known list block is considered to be the valid one.
* a nonce, which is an integer chosen "arbitrarily by the miner"

For a block to be valid, besides not containing easy to check stuff like double spending, the miner must also select a nonce such that the hash of the block starts with N zeroes.

For example, considering the transactions from \x[code-sample-bitcoin-transaction-graph], the block structure shown at \x[code-sample-bitcoin-blockchain] would be valid. In it `block0` contains two transactions: `tx0` and `tx1`, and `block1` also contains two transactions: `tx2` and `tx3`.

``
 block0           block1             block2
+------------+   +--------------+   +--------------+
| prev:      |<----prev: block0 |<----prev: block1 |
+------------+   +--------------+   +--------------+
| txs:       |   | txs:         |   | txs:         |
| - tx0      |   | - tx2        |   | - tx4        |
| - tx1      |   | - tx3        |   | - tx5        |
+------------+   +--------------+   +--------------+
| nonce: 944 |   | nonce: 832   |   | nonce: 734   |
+------------+   +--------------+   +--------------+

``
{title=Sample \x[bitcoin] blockchain.}

The `nonce`s are on this example arbitrary chosen numbers that would lead to a desired hash for the block.

`block0` is the \x[genesis-block], which is magic and does not have a previous block, because we have to start from somewhere. The network is hardcoded to accept that as a valid starting point.

Now suppose that the person who created `tx2` had tried to double spend and also created another transaction `tx2'` at the same time that looks like this:
``
  tx2'
+---------------+
| in0           |
| out: tx0 out1 |
+---------------+
| out0          |
| value: 2      |
+---------------+
``
Clearly, this transaction would try to spend `tx0 out1` one more time in addition to `tx2`, and should not be allowed! If this were attempted, only the following outcomes are possible:
* `block1` contains `tx2`. Then when `block2` gets made, it cannot contain `tx2'`, because `tx0 out1` was already spent by `tx2`
* `block1` contains `tx2'`. `tx2` cannot be spent anymore
Notably, it is not possible that `block1` contains both `tx2` and `tx2'`, as that would make the block invalid, and the network would not accept that block even if a miner found a `nonce`.

Since hashes are basically random, miners just have to try a bunch of nonces randomly until they find one that works.

The more zeroes, the harder it is to find the hash. For example, on the extreme case where N is all the bits of the hash output, we are trying to find a hash of exactly 0, which is statistically impossible. But if e.g. N=1, you will in average have to try only two nonces, N=2 four nonces, and so on.

The value N is updated every 2 weeks, and aims to make blocks to take 10 minutes to mine on average. N has to be increased with time, as more advanced hashing hardware has become available.

Once a miner finds a nonce that works, they send their block to the network. Other miners then verify the block, and once they do, they are highly incentivized to stop their hashing attempts, and make the new valid block be the new parent, and start over. This is because the length of the chain has already increased: they would need to mine two blocks instead of one if they didn't update to the newest block!

Therefore if you try to double spend, some random miner is going to select only one of your transactions and add it to the block.

They can't pick both, otherwise their block would be invalid, and other miners wouldn't accept is as the new longest one.

Then sooner or later, the transaction will be mined and added to the longest chain. At this point, the network will move to that newer header, and your second transaction will not be valid for any miner at all anymore, since it uses a spent output from the first one that went in. All miners will therefore drop that transaction, and it will never go in.

The goal of having this mandatory 10 minutes block interval is to make it very unlikely that two miners will mine at the exact same time, and therefore possibly each one mine one of the two double spending transactions. When ties to happen, miners randomly choose one of the valid blocks and work on top of it. The first one that does, now has a block of length L + 2 rather than L + 1, and therefore when that is propagated, everyone drops what they are doing and move to that new longest one.

Bibliography:
* https://arstechnica.com/tech-policy/2020/12/how-bitcoin-works/

= Satoshi Nakamoto
{c}
{parent=bitcoin}
{wiki}

https://bitcoin.org domain registration: 2008-08-18 by https://www.namecheap.com[], an \x[american] company. But using a privacy oriented registrar: https://bitcoin.stackexchange.com/questions/89532/how-did-nakamoto-untraceably-pay-for-registering-bitcoin-org It is unknown how he could have paid anonymously, so it seems likely that the true identity could be obtained by \x[law-enforcement] if needed.

2008-08-22: private \x[wei-dai] email. Reproduced at https://www.gwern.net/docs/bitcoin/2008-nakamoto[] on \x[gwern-net] from address `satoshi@anonymousspeech.com`. Email provider shutting down entirely on 2021-09-30 as per https://archive.ph/wip/RRNKx[], homepage now juts contains useless Bitcoin stuff.

\x[bitcoin-whitepaper] announcement: 2008-10-31 https://www.metzdowd.com/pipermail/cryptography/2008-October/014810.html linking to http://www.bitcoin.org/bitcoin.pdf[], email sent from from satoshi@vistomail.com Claimed one year and a half development time. Provider apparently closed in 2014: https://www.reddit.com/r/Bitcoin/comments/3h80mi/vistomailcom_closed_and_domain_changed_owner_in/[], as of 2021 just reads:
\Q[Once upon a time a man paid me a visit in cyberspace, at this very domain. He planted a seed in our heads that would become the path we are walking today.]

Replies in November: https://www.metzdowd.com/pipermail/cryptography/2008-November/thread.html#14863 under satoshi@anonymousspeech.com claims source code shared privately by request at that point.

First open source release: 9 January 2009. Announcement: https://www.metzdowd.com/pipermail/cryptography/2009-January/014994.html "Windows only for now. Open source C++ code is included" Arghhhhhh how can those libertarians use \x[microsoft-windows]??? Had a \x[gui] already.

2011-04-23 Satoshi sent his last email ever, it was to Martti Malmi. https://www.nytimes.com/2015/05/17/business/decoding-the-enigma-of-satoshi-nakamoto-and-the-birth-of-bitcoin.html mentions:
\Q[May 2011 was also the last time Satoshi communicated privately with other Bitcoin contributors. In an email that month to Martti Malmi, one of the earliest participants, Satoshi wrote, "I've moved on to other things and probably won't be around in the future."]

How Satoshi hid his mining \x[ip-address]:
* https://bitcoin.stackexchange.com/questions/91187/was-the-first-full-node-ip-address-satoshis-and-how-did-shim-hide-it

Hal Finney:
* Jan 11, 2009 https://twitter.com/halfin/status/1110302988 "Running Bitcoin"

= Adam Back
{c}
{parent=satoshi-nakamoto}
{wiki}

= Hashcash
{c}
{parent=adam-back}
{wiki}

= David Chaum
{c}
{parent=satoshi-nakamoto}
{wiki}

= ecash
{c}
{parent=david-chaum}
{wiki}

= Hal Finney
{c}
{disambiguate=computer scientist}
{parent=satoshi-nakamoto}
{wiki}

= Nick Szabo
{c}
{parent=satoshi-nakamoto}
{wiki}

= bit gold
{c}
{parent=nick-szabo}

= Wei Dai
{c}
{parent=satoshi-nakamoto}
{title2=戴维}
{wiki}

= b-money
{c}
{parent=wei-dai}

= Bitcoin whitepaper
{c}
{parent=satoshi-nakamoto}

Released by \x[satoshi-nakamoto] on the early \x[mailing-list] discussions where \x[bitcoin] was announced.

Reuploaded into the blockchain itself: https://bitcoin.stackexchange.com/questions/35959/how-is-the-whitepaper-decoded-from-the-blockchain-tx-with-1000x-m-of-n-multisi/105574#105574 by using the \x[satoshi-uploader].

More conveniently available at: https://bitcoin.org/bitcoin.pdf nowadays.

= Bitcoin script
{c}
{parent=bitcoin}

= Bitcoin non-standard transaction
{c}
{parent=bitcoin-script}

Full list at: https://github.com/cirosantilli/bitcoin-strings-with-txids/blob/master/data/utxo_nonstandard

Bibliography:
* https://bitcoin.stackexchange.com/questions/5883/is-there-a-listing-of-strange-or-unusual-scripts-found-in-transactions/105392#105392
* https://bitcoin.stackexchange.com/questions/547/useful-alternative-bitcoin-transaction-scripts
* https://bitcoin.stackexchange.com/questions/35956/non-standard-tx-with-obscure-op-codes-examples/36037#36037 notably provides the amazing https://www.quantabytes.com/articles/a-survey-of-bitcoin-transaction-types

Interesting ones:

* 77822fd6663c665104119cb7635352756dfc50da76a92d417ec1a12c518fad69 0 `OP_IF OP_INVALIDOPCODE None None OP_ENDIF`. The second constant contains an ASCII patch `Remove (SINGLE|DOUBLE)BYTE` so presumably this is a proof of concept.
+
https://bitcointalk.org/index.php?topic=5231222.0 duscusses what happens if there is an invalid opcode in a branch that is not taken.
+
Discussed at: https://bitcoin.stackexchange.com/questions/35956/non-standard-tx-with-obscure-op-codes-examples
* 4373b97e4525be4c2f4b491be9f14ac2b106ba521587dad8f134040d16ff73af 0 `OP_ADD OP_ADD None OP_EQUAL OP_NOTIF OP_RETURN OP_ENDIF OP_FROMALTSTACK None OP_DROP` is provably unspendable because it always falls on `OP_FROMALTSTACK` but nothing is ever placed in the ALTSTACK

= Invalid Bitcoin script
{c}
{parent=bitcoin}

They appear to be included, with rationale that you can already include syntactically valid crap in an unprovable way: https://github.com/bitcoin/bitcoin/issues/320 Better then have syntactically invalid crap that is provable.

The outputs of this transaction seem to be the first syntactically incorrect scripts of the blockchain: https://blockchain.info/tx/ebc9fa1196a59e192352d76c0f6e73167046b9d37b8302b6bb6968dfd279b767?format=json[], found by parsing everything locally. The transaction was made in 2013 for 0.1 BTC, which then became unspendable.

The first invalid script is just e.g. "script":"01", which says will push one byte into the stack, but then ends prematurely.

= Bitcoin Core
{c}
{parent=bitcoin}

Reference implementation?

Links:
* https://github.com/bitcoin/bitcoin
* https://bitcoin.org

Executables provided:
* `bitcoin-qt`

= How to store data in the Bitcoin blockchain
{parent=bitcoin}

There are apparently two methods:
* in the script, e.g. as in the \x[genesis-block-message]
* in output addresses

Specific implementations:
* http://eternitywall.it/ Eternity Wall

  Launched 2015 https://www.newsbtc.com/news/bitcoin/eternity-wall-records-1150-documents-blockchain-first-year/

  TODO find sample transactions. Did it support images?

  Shutdown sometime after 2019, working archive: https://web.archive.org/web/20190417074034/https://eternitywall.it/ says "Sorry, the service is not properly working at the moment..." and last working message timestamped "April 16, 2019 8:02 PM GMT".

Bibliography:
* https://bitcoin.stackexchange.com/questions/32575/what-methods-are-currently-used-to-embed-additional-data-into-the-bitcoin-blockc
* https://bitcoin.stackexchange.com/questions/39347/how-to-store-data-on-the-blockchain

= How to extract data from the Bitcoin blockchain
{parent=bitcoin}

TODO: it would be cool to have something like https://bitcoinstrings.com[] but including the actual transactions:

Local methods:
* \x[bitcoin-strings-with-txids]
* https://bitcoin.stackexchange.com/questions/30295/how-can-i-search-for-transaction-text-on-the-blockchain
* https://bitcoin.stackexchange.com/questions/22500/is-there-a-lightweight-blockchain-parser-library-server/101472#101472
* https://github.com/alecalve/python-bitcoin-blockchain-parser
* https://bitcoin.stackexchange.com/questions/84266/wondering-how-to-use-bitcoin-parser
* https://github.com/bitcoinprivacy/Bitcoin-Graph-Explorer stores the blockchain in a database, and should allow more intelligent querying.

Further bibliography:
* https://bitcoin.stackexchange.com/questions/799/can-i-download-the-whole-block-chain-from-somewhere
* https://bitcoin.stackexchange.com/questions/68925/how-can-data-be-accessed-searched-for-in-a-blockchain
* https://bitcoin.stackexchange.com/questions/55188/download-single-and-specific-block-for-study-purposes
* https://www.fiverr.com/usefulshine/embed-your-logo-or-brand-art-on-blockchain user usefulshine from India embeds ASCII art for you into the blockchain starting at 260 dollars! XD

= Blockchain.info
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

TODO who owns it? Are they reliable?

* transaction hex data: https://blockchain.info/tx/930a2114cdaa86e1fac46d15c74e81c09eee1d4150ff9d48e76cb0697d8e1d72?format=hex
* disassembled transaction as JSON: https://blockchain.info/tx/930a2114cdaa86e1fac46d15c74e81c09eee1d4150ff9d48e76cb0697d8e1d72?format=json
* block by height:
  * https://blockchain.info/block/0?format=json
  * https://blockchain.info/block/0?format=hex

This helper dumps a transaction JSON to a binary:
``
bitcoin-tx-out-scripts() (
    # Dump data contained in out scripts. Remove first 3 last 2 bytes of
    # standard transaction boilerplate.
    h="$1"
    echo curl "https://blockchain.info/tx/${h}?format=json" |
    jq '.out[].script' tmp.json |
    sed 's/"76a914//;s/88ac"//' |
    xxd -r -p > "${h}.bin"
)
``

= bitcoin-strings-with-txids
{c}
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

https://github.com/cirosantilli/bitcoin-strings-with-txids

Set of scripts b \x[ciro-santilli], primarily created while researching \x[cool-data-embedded-in-the-bitcoin-blockchain].

= BitcoinStrings.com
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

https://bitcoinstrings.com has all `strings -n20` strings, we can obtain the whole thing and clean it up a bit with:
``
wget -O all.html https://bitcoinstrings.com/all
cp all.html all-recode.html
recode html..ascii all-recode.html
awk '!seen[$0]++' all-recode.html > all-uniq.html
``
`awk` to skip the gazillion "mined by message" repeats.

A lot of in that website stuff appears to be cut up at the 20 mark. As shown in \x[cool-data-embedded-in-the-bitcoin-blockchain/force-of-will], this is possibly because they didn't use `-w` in `strings -n20`, and the text after the newlines was less than 20 characters.

That website can be replicated by downloading the \x[bitcoin] blockchain locally, then:
``
cd .bitcoin/blocks
for f in blk*.dat; do strings -n20 -w $f | awk '!seen[$0]++' > ${f%.dat}.txt; done
tail +n1 *.txt
``

Remove most of the binary crap:
``
head -n-1 *.txt | grep -e '[. ]' | grep -iv 'mined by' | less
``

= Satoshi uploader
{c}
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

See also: https://bitcoin.stackexchange.com/questions/35959/how-is-the-whitepaper-decoded-from-the-blockchain-tx-with-1000x-m-of-n-multisi/105574#105574

By "Satoshi uploader" we mean the data upload script present in tx https://www.blockchain.com/btc/tx/4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17[4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17] of the \x[bitcoin-blockchain].

The uploader, and its accompanying downloader, are \x[python] programs stored in the blockchain itself. They are made to upload and download arbitrary data into the blockchain via RPC.

These scripts were notably used for: \x[cool-data-embedded-in-the-bitcoin-blockchain/illegal-content-of-block-229k]. The script did not maintain its popularity much after this initial surge up loads, likely all done by the same user: there are very very few uploads done after block 229k with the Satoshi uploader.

Our choice of name as "Satoshi uploader" is copied from \x[cool-data-embedded-in-the-bitcoin-blockchain/a-quantitative-analysis-of-the-impact-of-arbitrary-blockchain-content-on-bitcoin-by-matzutt-et-al-2018] because the scripts are Copyrighted Satoshi Nakamoto on the header comment, although as mentioned at \x[cool-data-embedded-in-the-bitcoin-blockchain/hidden-surprises-in-the-bitcoin-blockchain-by-ken-shirriff-2014] this feels very unlikely to be true.

A more convenient version of those scripts that can download directly from \x[blockchain-info] without the need for a full local node can be found at: https://github.com/cirosantilli/bitcoin-strings-with-txids/blob/master/download_tx_consts.py by using the `--satoshi` option. E.g. with it you can download the uploader script with:
``
./download_tx_consts.py --satoshi 4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17
mv 4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17.bin uploader.py
``

The scripts can be found in the blockchain at:
* uploader: tx 4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17 block 229991 reproduced at: https://gist.github.com/cirosantilli/ade4dde7c2f2f5020d792872681763e8

  The uploader https://gist.github.com/cirosantilli/ade4dde7c2f2f5020d792872681763e8#file-bitcoin-insertion-tool-py-L161[creates a standard Pay-to-PubkeyHash transaction] with a single output and data as a fake pubkey hash, and sends change to an address specified on the command line:
  ``
  ./bitcoinInsertionTool.py <data> <change-addr>
  ``
* downloader: tx 6c53cd987119ef797d5adccd76241247988a0a5ef783572a9972e7371c5fb0cc block 229991 reproduced at https://gist.github.com/cirosantilli/e90bd2e6c3fab25a20898e61e3ab3e90

  The downloader just https://gist.github.com/shirriff/64f48fa09a61b56ffcf9#file-bitcoin-file-downloader-py-L32[strips all operands], and keeps all data, notably where public key hashes would be normally put.

The uploader script uses its own cumbersome data encoding format, which we call the "Satoshi uploader format". The is as follows:
* ignore all script operands and constants less than 20 bytes (40 hex characters). And there are a lot of small operands, e.g. the uploader itself uses format https://www.blockchain.com/btc/tx/4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17 has a `OP_1`, data, `OP_3`, `OP_CHECKMULTISIG` pattern on every output script, so the `OP_1` and `OP_3` are ignored
* ignore the last output, which contains a real change transaction instead of arbitrary data. TODO why not just do what with the length instead?
* the first 4 bytes are the payload length, the next 4 bytes a \x[crc-32] signature. The payload length is in particular useful because of possible granularity of transactions. But it is hard to understand why a CRC-32 is needed in the middle of the largest \x[hash-tree] ever created by human kind!!! It does however have the adavantage that it allows us to more uniquely identify which transactions use the format or not.
This means that if we want to index certain file types encoded in this format, a good heuristic is to skip the first 9 bytes (4 size, 4 CRC, 1 `OP_1`) and look for file signatures.

Let's try out the downloader to download itself. First you have to be running a \x[bitcoin-core] server locally. Then, supposing `.bitcon/bitoin.conf` containing:
``
rpcuser=asdf
rpcpassword=qwer
server=1
txindex=1
``
we run:
``
git clone git://github.com/jgarzik/python-bitcoinrpc.git
git -C python-bitcoinrpc checkout cdf43b41f982b4f811cd4ebfbc787ab2abf5c94a
wget https://gist.githubusercontent.com/shirriff/64f48fa09a61b56ffcf9/raw/ad1d2e041edc0fb7ef23402e64eeb92c045b5ef7/bitcoin-file-downloader.py
pip install python-bitcoinrpc==1.0
BTCRPCURL=http://asdf:qwer@127.0.0.1:8332 \
  PYTHONPATH="$(pwd)/python-bitcoinrpc:$PYTHONPATH" \
  python3 bitcoin-file-downloader.py \
  6c53cd987119ef797d5adccd76241247988a0a5ef783572a9972e7371c5fb0cc
``
worked! The source of the downloader script is visible! Note that we had to wait for the sync of the entire blockchain to be fully finished for some reason for that to work.

Other known uploads in Satoshi format except from the first few:
* tx 89248ecadd51ada613cf8bdf46c174c57842e51de4f99f4bbd8b8b34d3cb7792 block 344068 see \x[ascii-art]
* tx 1ff17021495e4afb27f2f55cc1ef487c48e33bd5a472a4a68c56a84fc38871ec contains the ASCII text `e5a6f30ff7d43f96f61af05efaf96f869aa072b5a071f32a24b03702d1dcd2a6`. This number however is not a known transaction ID in the blockchain, and has no Google hits.

= Peter Todd's data upload scripts
{parent=satoshi-uploader}

https://github.com/cirosantilli/bitcoin-strings-with-txids/blob/master/data/in/0349.txt#L1930[tx 243dea31863e94dc2f293489db02452e9bde279df1ab7feb6e456a4af672156a] contains another upload script. The help reads:
\Q[Publish text in the blockchain, suitably padded for easy recovery with strings]

The script is: https://github.com/petertodd/python-bitcoinlib/blob/master/examples/publish-text.py

= Bitcoin blockchain `j(` upload system
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

This is likely a system that uploads text to the blockchain.

One example can be seen on the \x[cool-data-embedded-in-the-bitcoin-blockchain/marijuana-plant].

Messages are uploaded one line per transaction, and thus may be cut up on the blk.txt, and possibly even out of order.

But because each line starts with `j(` you can generally piece things up regardless.

TODO identify. The first occurrence seems to be in tx e8c61e29c6b829e289f8d0fc95f9eb2eb00c89c85cfa3a9c700b15805451ae6a:
``
j(DOCPROOF@?pnvf=!;AG
``

= Services based on Bitcoin
{parent=bitcoin}

= Satoshi Dice
{c}
{parent=services-based-on-bitcoin}

https://en.bitcoin.it/wiki/Satoshi_Dice

Claims provably fair. https://satoshidice.com/fair clarifies what that means: they prove fairness by releasing a hash of the seed before the bets, and the actual seed after the bets.

As mentioned in bitcoin.it, it functions basically as \x[cryptocurrency-tumbler] in practice.

\Include[cool-data-embedded-in-the-bitcoin-blockchain]{parent=bitcoin}

= Genesis block
{c}
{parent=bitcoin}
{wiki}

https://blockchain.info/block-height/0?format=json

https://en.bitcoin.it/wiki/Genesis_block contains some comments on the data.

= Genesis block message
{c}
{parent=genesis-block}
{wiki}

https://blockchain.info/block-height/0?format=json

From that page we manually extract the hash `000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f` and then:
``
wget -O 0.hex https://blockchain.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f?format=hex
xxd -p -r 0.hex
``
and that does contain the famous genesis block string:
``
EThe Times 03/Jan/2009 Chancellor on brink of second bailout for banks
``
The JSON clarifies that the data is encoded in the `script` field of the transaction `input`:
``
{
      {
         "script":"04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73"
``

The extra `E` (0x45 in \x[ascii]) in `EThe Times` is just extra noise required by the script, we can break things up as:
``
04ffff001d0104 45 5468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73
``
where:
* `54` is `T`
* the `04ffff001d0104` part just doesn't show up on the terminal because it is not made of any printable characters.

The initial `04` is `OP_RETURN`

TODO what is actual the meaning of the `ffff001d010445` part?

TODO the `output` of the transaction has a jumbled script, likely just a regular output to get things going, can't be arbitrary like input.

The message proves a minimal starting date for the first mine.

And it hints that one of \x[bitcoin]'s motivation was the \x[financial-crisis-of-2007-2008], where banks were given bailouts by the government to not go under, which many people opposed as the crisis was their own fault in the first place.

A notable related stab is taken at \x[cool-data-embedded-in-the-bitcoin-blockchain/len-sassaman-tribute].

= Ethereum
{c}
{parent=list-of-cryptocurrencies}
{wiki}

= Monero
{c}
{parent=list-of-cryptocurrencies}
{tag=privacy-coin}
{wiki}

Cryptocurrency with focus on \x[anonymity].

As mentioned at \x[cryptocurrency]{full}, \x[ciro-santilli] believes that anonymity is the only feature that really matters on crypto coins, and therefore if he were to invest in crypto, he would invest in Monero or some other \x[privacy-coin].

https://localmonero.co/knowledge/monero-stealth-addresses?language=en gives an overview of the privacy mechanisms:
* \x[ring-signature]{p}, which hide the true output (sender)

  https://localmonero.co/knowledge/ring-signatures Gives an overview. Mentions that it is prone to heuristic attacks.

  Uses a system of decoys, that adds 10 fake possible previous outputs as inputs, in addition to the actual input.

  So the network only knows/verifies that one of those 11 previous outputs was used, but it does not know which one.

  It's a bit like having a built-in \x[cryptocurrency-tumbler] in every transaction.

  TODO so how do you know which previous outputs were spent or not?
* RingCT which hides the amounts.
* stealth addresses, which hides who you send to

  This forces receivers to scan try and unlock every single transaction in the chain to see if it is theirs or not.

  The sender therefore can know when the money is spent, but once again, not to whom it is being sent.

Based on https://en.wikipedia.org/wiki/CryptoNote and like \x[satoshi-nakamoto] created by under the pseudonym "Nicolas van Saberhagen" https://www.reddit.com/r/Monero/comments/7v2obe/offering_a_bounty_for_a_video_of_the_speech_by/

Developers tried to fight \x[application-specific-integrated-circuit] mining, but they failed it seems:
* https://www.coindesk.com/inside-moneros-last-ditch-effort-to-block-crypto-mining-asics
* https://news.bitcoin.com/report-claims-85-of-the-monero-network-dominated-by-asic-miners/
This can also be seen by the ridiculous hash rates on Ciro's test: \x[how-to-mine-monero].

\x[coinbase] has actually stayed away from trading it even as of 2019 when Monero was the third largest market capitalization crypto because of fear of regulatory slashback: https://decrypt.co/36731/heres-why-coinbase-still-hasnt-listed-monero[]. Although it must be said, the value of privacy crypto is greatly reduced when everyone is trading it on exchanges, which require a passport upload to work.

= How to mine Monero
{parent=monero}

\x[ubuntu] 20.10 as per https://xmrig.com/docs/miner/build/ubuntu[]:
``
sudo apt install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
git clone https://github.com/xmrig/xmrig.git
mkdir xmrig/build && cd xmrig/build
cmake ..
make -j$(nproc)
``
At https://minexmr.com/#getting_started we see that all you then need is a single CLI command:
``
xmrig -o pool.minexmr.com:4444 -u <your-monero-address>
``
Seems simple, well done devs!

Benchmark on \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017] as per https://xmrig.com/docs/miner/benchmark[]:
``
./xmrig --bench=1M
``
gives:
``
948.1 h/s
``
which according to the https://minexmr.com \x[mining-pool] would generate 0.0005 XMR/day, which at the February 2021 rate of 140 USD/XMR is 0.07 USD/day. The minimum payout in that pool is 0.004 XMR so it would take 8 days to reach that.

So clearly, \x[application-specific-integrated-circuit] mining is the only viable way of doing this.

Some people considering \x[raspberry-pi]{p} also conclude obviously that it is useless at a 10H/s rate:
* https://monero.stackexchange.com/questions/6862/could-i-use-a-raspberry-pi-to-mine-monero
* https://raspberrypi.stackexchange.com/questions/49552/the-hashrate-of-the-raspberry-pi-2-and-3/87252#87252

= Cryptocurrency exchange
{parent=cryptocurrency}
{wiki}

= Off-chain transaction
{parent=cryptocurrency-exchange}

https://en.bitcoin.it/wiki/Off-Chain_Transactions

= List of cryptocurrency exchanges
{parent=cryptocurrency-exchange}

= Binance
{c}
{parent=list-of-cryptocurrency-exchanges}
{wiki}

= Coinbase
{c}
{parent=list-of-cryptocurrency-exchanges}
{wiki}

= Mt. Gox
{c}
{parent=list-of-cryptocurrency-exchanges}
{wiki}

= Cryptocurrency tumbler
{parent=cryptocurrency}
{wiki}

= Fiat currency
{parent=money}
{wiki}

A useless piece of paper (or \x[digital-currency][digital version] of it) that you can pay \x[tax]{p} with :)

As opposed to:
* 2020 \x[cryptocurrency]{p}, while \x[government]{p} still don't accept them for taxes, as well as other \x[asset]{p} that are also not accepted for taxes (i.e. most assets)
* physical currencies that have intrinsic material value, e.g. \x[gold] coins

= Digital currency
{parent=fiat-currency}
{wiki}

= Electronic money
{parent=digital-currency}

Our minimal definition of "electronic money" is the following.

Instead of creating \x[legal-tender] such as \x[dollar]{p} as banknotes or transactions in some complex obscure banking system, the \x[government] offers an official simple centralized API that represents it instead.

Each citizen or legal entity has an account there, and transfers between registered users are just simple API calls.

 So for example you would e able to put all your money in the government account instead of using useless banks. And then you would invest it as you want with the investment company of your choice, without tying the "my money is here" with "this is the best investment" aspects of banks.

= GNU Taler
{c}
{parent=electronic-money}

Centralized system that still attempts some level of privacy.

In it, a central bank issue tokens that are stored offline in your cell phone, a bit like cash bank notes.

When you take those tokens, a corresponding amount gets removed from your bank account, a bit like cash bank notes.

When a transaction is made, tokens are put into a spent token list via central API, and cannot be double spent thereafter. The corresponding ammount is then added to the bank account of the receiver. This also means that offline transactions are not possible.

When emitting, the bank signs the token with their private key. When spending, the bank checks that signature.

How do we prevent the bank from logging which token goes to which user besides trusting that they are running the software we whink they are running? Notably, couldn't timing be used to identify that?

= Dollar
{c}
{parent=fiat-currency}
{title2=\$}
{wiki}

= Pound sterling
{c}
{parent=fiat-currency}
{title2=£}
{wiki}

= Pound
{synonym}

= Decimal day
{parent=pound-sterling}
{wiki}

\Video[https://www.youtube.com/watch?v=dip8eHw3guo]
{title=Predecimal Currency: The Nightmare in Your Pocket by BritMonkey (2021)}

= Payment system
{parent=money}
{wiki}

= PayPal
{c}
{parent=money}
{wiki}

You need separate accounts for different countries: https://money.stackexchange.com/questions/73361/two-banks-in-two-countries-is-it-possible-to-have-a-unique-paypal-account it's a pain.

= Organization
{parent=social-technology}
{wiki}

= Company
{parent=organization}
{wiki}

All companies with investors are \x[evil], make no mistake.

They may have nice looking save the world charity campaigns, but once you get even close to affecting their revenue stream, the axe falls.

Some level of \x[governments-have-lost-all-power-to-companies][Government intervention is needed].

It is just a question of business model: some business models are eviler than others. \x[microsoft-windows][Making people pay for operating systems] being possible the most evil of all.

One thing must be said however. You can learn a lot by working in a good company, because it ends up putting you in contact with practical real problems that you wouldn't otherwise see by just doing your own random low-tech startup. This is especially valuable if said company is also enlightened enough to use and contribute back to \x[open-source-software], thus improving the world and paying back the moral debt of using other people's work for free.

= Technology company
{parent=company}
{wiki}

= Tech company
{synonym}

= Big tech
{parent=technology-company}
{wiki}

= List of technology companies
{c}
{parent=technology-company}
{wiki}

= Red Hat
{c}
{parent=list-of-technology-companies}
{wiki}

= Truth Happens advertisement by Red Hat
{parent=red-hat}
{tag=the-best-advertisements-of-all-time}

\x[video-1984-macintosh-advertisement-by-apple-1984] comes to mind.

TODO year. This was a reply to \x[microsoft] anti-\x[linux] propaganda it seems: https://www.ubuntubuzz.com/2012/03/truth-happens-redhats-legendary-reply.html

TODO date.

Trascript from: https://www.dailymotion.com/video/xw3ws
\Q[
The world is flat. Earth is the centre of the universe. Fact - until proven otherwise.\br
Despite ignorance. Despite ridicule. Despite opposition. Truth happens.

Despite ignorance. \br
The telephone has too many shortcomings to be seriously considered as a means of communication. /Western Union 1876/\br
In 1899 the US Patent Commissioner stated, everything that can be invented has been invented.

Despite ridicule.\br
The phonograph has no commercial value at all. /Thomas Edison 1880/\br
The radio craze will die out in time. /Thomas Edison 1922/\br
The automobile has practically reached the limit of its development. /Scientific American 1909/

Despite it all truth happens.\br
Man will not fly for fifty years. /Orville Wright 1901/\br
The rocket will never leave the Earth's atomosphere. /New York Times 1936/\br
There is a world market for maybe five computers. /IBM's Thomas Watson 1943/\br
640K Ought to be enough for anybody. /Bill Gates 1981/

First they ignore you...\br
\x[linux] is the hype du jour. /Gartner Group 1999/

Then they laugh at you...\br
We think of linux as competitor in the student and hobbyist market. But I really don't think in the commercial market we'll see it in any significant way. /Bill Gates 2001/

Then they fight you...\br
Linux isn't going away. Linux is a serious competitor. We will rise to this challenge. /Steve Ballmer 2003/

Then you win... /Mohandas Gandhi/

You are here.\br
Red Hat Linux. IBM.
]

\Video[https://www.youtube.com/watch?v=IE00uo3o_MU]
{title=Truth Happens \x[advertisement] by \x[red-hat]}

= Siemens
{c}
{parent=list-of-technology-companies}
{wiki}

= Conglomerate
{disambiguate=company}
{parent=company}

= Lifestyle business
{parent=company}
{wiki}

= Startup company
{parent=company}
{wiki}

= Startup
{synonym}

= Unicorn
{disambiguate=startup}
{parent=startup-company}

= Venture capital
{parent=startup-company}

= List of companies
{parent=company}
{wiki}

= Apple Inc.
{c}
{parent=list-of-companies}
{wiki}

= Apple
{c}
{synonym}

* owns the entire stack and creates high quality highly optimized systems
* creates closed lock-in systems without inter-operability and actively fights users from owning their devices
* do they give back enough to \x[open-source], or do they leech mostly?
  * https://www.reddit.com/r/linux/comments/u6avq/does_apple_contribute_to_the_open_source_community/ on \x[reddit]
  * https://www.quora.com/Has-Apple-contributed-to-any-open-source-projects on \x[quora]

\Video[https://www.youtube.com/watch?v=G2GfKUi9ghM]
{title=The Mapple Store and Steve Mobs from \x[the-simpsons].}

= Think different
{c}
{parent=apple-inc}
{tag=it-s-popular-now-it-sucks}
{wiki}

Of course, this only made sense when Apple was more of an underdog to \x[ibm], and \x[ciro-santilli] greatly \x[ciro-santilli-s-self-perceived-creative-personality][admires their defiance of the norm].

As of 2020 however, \x[apple] is kind of on the top of the mobile world, and Think different simply makes no sense anymore, notably because it relies on \x[closed-source-offline-software-used-by-millions].

\x[it-s-popular-now-it-sucks] comes to mind.

This is a trap every company that prides itself on it's "alternative culture" sets for itself. If they succeed, they could become the norm.

\Image[Think_different_with_Tux.png]
{title=Take on Apple's \x[think-different] logo with \x[tux-mascot] instead of the Apple logo.}
{description=In 2020, to think different, is to think \x[open-knowledge]. Work by \x[ciro-santilli], based on https://en.wikipedia.org/wiki/File:Tux.svg[].}

\Image[Apple_Think_different_1976_Think_mainstream_2011.png]
{title=1976 Think different. 2011 Think mainstream.}
{description=Cropped from https://wallpapersafari.com/w/RqYUEj[].}

\Video[https://www.youtube.com/watch?v=VtvjbmoDx-I]
{title=1984 \x[macintosh] \x[advertisement] by \x[apple] (1984)}
{description=This ad suggests that Apple was the new thinker that would destroy \x[ibm], as \x[steve-jobs] said it himself when introducing the ad: https://www.youtube.com/watch?v=zlQvMp5rB6g[]. And then \x[apple] became \x[ibm] in the 2000's starting with the launch of the \x[ipod] and then leading up to the \x[iphone].}

= Here's to the crazy ones
{c}
{parent=think-different}
{tag=being-naughty-and-creative-are-correlated}

https://en.wikipedia.org/w/index.php?title=Think_different&oldid=990983100#Television

\Q[Because the people who are crazy enough to think they can change the world are the ones who do.]

\Video[https://www.youtube.com/watch?v=5sMBhDv4sik]

= Apple Inc product
{c}
{parent=apple-inc}

= iPod
{c}
{parent=apple-inc-product}
{title2=2001}
{wiki}

Was a direct tech predecessor to the \x[iphone].

= iPhone
{c}
{parent=apple-inc-product}
{wiki}

= Macintosh
{c}
{parent=apple-inc-product}
{title2=Mac, 1984-}
{wiki}

= MacOS
{c}
{parent=apple-inc-product}
{wiki}

Nice looking and expensive operating system by \x[apple]. \x[ciro-santilli] believes that:
* if you want to be ripped off, just use \x[microsoft-windows] which has more software available
* or if you want to attain \x[ourbigbook-com/motivation][Enlightenment], just use \x[linux], which is free and open source

The story of how OS X was ported to x86 from PowerPC with large initial work up to boot by a single man in the year 2000, John Kullmann, is really worth reading: https://www.quora.com/Apple-company/How-does-Apple-keep-secrets-so-well/answer/Kim-Scheinberg on \x[quora], see also:
* https://www.theregister.co.uk/2012/06/11/apple_project_marklar_secrets/
* https://en.wikipedia.org/wiki/Apple%27s_transition_to_Intel_processors

= Is the MacOS kernel open source?
{parent=macos}

Can you do anything with it? What's the license?
* https://github.com/apple/darwin-xnu
* https://en.wikipedia.org/wiki/XNU
* https://stackoverflow.com/questions/43136124/how-to-boot-xnu-kernel

= Steve Jobs
{c}
{parent=apple-inc}
{wiki}

Co-founder of \x[apple].

Is Jobs \x[evil]? Is he interesting? Undoubtedly.

https://www.folklore.org/ProjectView.py?project=Macintosh&characters=Steve%20Jobs[] has some good anecdotes about him.

\x[ciro-santilli] is especially fond of: \x[jobs-and-wozniak-s-blue-box].

Good quotes:
* "Try to have a nice family life, have fun, save a little money." quote at: \x[don-t-be-a-pussy]{full} and the related \x[jobs-and-wozniak-s-blue-box] attitude
* "Steve Jobs Insult Response" on \x[backward-design]
* Steve Jobs Pixar office design philosophy: great ideas happen from chance meetings on corridors, not in board rooms: https://officesnapshots.com/2012/07/16/pixar-headquarters-and-the-legacy-of-steve-jobs/
* \x[steve-jobs-2005-stanford-commencement-address]
* \x[here-s-to-the-crazy-ones]: Ciro would like to believe that this is mostly written by Jobs, but apparently it was just written by an advertisement agency. Good job though. 

You must watch this: \x[video-bill-gates-vs-steve-jobs-by-epic-rap-battles-of-history-2012].

Evil deeds:
* not recognizing own daughter for many years??? https://en.wikipedia.org/wiki/Lisa_Brennan-Jobs
* lying to \x[steve-wozniak] about the 5000 dollar Atari bonus: https://web.archive.org/web/20110612071502/http://www.woz.org/letters/general/91.html
* not giving stock to early garage employees: https://www.businessinsider.com/steve-wozniak-gave-early-apple-employees-10-million-in-stock-2014-9 OK, not a \x[legal] obligation. But... love?

= Steve Jobs quote on saving lives with a faster boot
{c}
{parent=steve-jobs}

https://www.folklore.org/StoryView.py?story=Saving_Lives.txt

This idea also comes up in other sources of course.

\Video[http://youtube.com/watch?v=m8Mc-38C88g]
{title=https://en.wikipedia.org/wiki/Margin_Call[Margin Call (2011)] bridge scene.}

= Steve Jobs customers don't know what they want quote
{parent=steve-jobs}
{c}

TODO clear attribution source:
\Q[Some people say, "Give the customers what they want." But that's not my approach. Our job is to figure out what they're going to want before they do. I think Henry Ford once said, "If I'd asked customers what they wanted, they would have told me, 'A faster horse!'" People don't know what they want until you show it to them. That's why I never rely on market research. Our task is to read things that are not yet on the page.]

= Steve Wozniak
{c}
{parent=steve-jobs}
{wiki}

= Steve Wozniak plays magic the gathering
{c}
{parent=steve-wozniak}

\x[ciro-santilli] likes \x[magic-the-gathering] and he was pleased when he learned that \x[steve-wozniak] does too, and has an expensive collection: https://redsunsoft.com/2019/03/how-a-post-to-play-magictg-turned-into-an-afternoon-with-the-woz/

= Jobs and Wozniak's blue box
{c}
{parent=steve-jobs}

https://en.wikipedia.org/wiki/Blue_box

\x[being-naughty-and-creative-are-correlated]{c}.

Some have actually been preserved: https://en.wikipedia.org/wiki/File:Blue_Box_in_museum.jpg

= Amazon
{c}
{disambiguate=company}
{parent=list-of-companies}
{wiki}

= Amazon
{c}
{synonym}

= Amazon Prime Video
{c}
{parent=amazon-company}
{wiki}

As of 2021, \x[ciro-santilli] feels strongly that Amazon originals are so much sillier compared to \x[netflix] ones in average.

Of course, everything pales in comparison to \x[the-criterion-collection].

= Amazon Web Services
{c}
{parent=amazon-company}
{wiki}

= AWS
{c}
{synonym}

= Google
{c}
{parent=list-of-companies}
{tag=search-engine}
{wiki}

= Googler
{c}
{synonym}

= Googling
{c}
{synonym}

= Googled
{c}
{synonym}

One of the least \x[evil] of the big tech companies, partly because https://en.wikipedia.org/wiki/Sergey_Brin[Sergey's] parents fled from the Soviet Union and so he is \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][anti censorship], although they https://en.wikipedia.org/wiki/Dragonfly_(search_engine)[have been tempted by it].

Google only succeeds at highly algorithmic tasks or at giving infinite storage to users to then mine their data.

It is incapable however of adding any obvious useful end user features to most of its products, most of which get terminated and cannot be relied on:
* https://en.wikipedia.org/wiki/Google+
* https://en.wikipedia.org/wiki/Picasa
* https://killedbygoogle.com/ | http://web.archive.org/web/20190726225042/https://killedbygoogle.com/

This also seems to extend to \x[business-to-business]: https://twitter.com/MohapatraHemant/status/1343969802080030720 ex-Googler tells how they lost the cloud to \x[amazon-company].

More mentions of that:
* https://world.hey.com/dhh/google-suffers-from-a-digital-petro-curse-908e919a "Google suffers from a digital petro curse" by David Heinemeier Hansson (2021), the creator of \x[ruby-on-rails]
* https://killedbygoogle.com/ dedicated website, source on \x[github]: https://github.com/codyogden/killedbygoogle

Too many genius engineers. They need some dumber people like \x[ciro-santilli] who \x[ciro-santilli-s-bad-old-event-memory][need to write documentation to learn stuff].

\x[ciro-santilli] actually attempted two interviews to work at Google in the early 2010's but very quickly failed both on the first phase, because you have to be a fast well trained coding machine to pass that interview.

Ciro later felt better about himself by fantasizing how he would actually do more important things outside of Google and that they would beg to buy him instead.

He was also happy that he wouldn't have to use Google crazy internal tools: someone once said that Google's tools make easy tasks middle hard, and they also make impossible tasks middle hard. TODO source.

But whatever the case: Ciro \x[grinding-for-software-interviews][will not, ever, spend his time drilling programmer competition problems to join a company].

One of Google's most interesting stories is how their startup garage owner https://en.wikipedia.org/wiki/Susan_Wojcicki[became an important figure inside Google], and how Sergei https://en.wikipedia.org/wiki/Anne_Wojcicki[married her sister]. These were the best garage tenants ever! https://www.youtube.com/watch?v=pomgRbVLUGs "The company's sixth employee made this video tour of the office in 1998" should be the Susan's garage, since the next office move was only in 1999 to 165 University Avenue in Palo Alto.

https://www.wired.com/story/google-shakes-up-its-tgif-and-ends-its-culture-of-openness/ "GOOGLE TGIF 1999 video". TGIF is the weekly all hands meeting abolished in 2019: https://www.wired.com/story/google-shakes-up-its-tgif-and-ends-its-culture-of-openness/

= Google Analytics
{c}
{parent=google}
{wiki}

Their \x[ui] is horrendous as of 2020:
* https://danielmiessler.com/blog/google-is-getting-left-behind-due-to-horrible-ui-ux/
* https://medium.com/carwow-product-engineering/google-analytics-sucks-a-lot-f6f7bf3c51ad

I need this for \x[cirodown]!! https://webmasters.stackexchange.com/questions/104241/can-google-analytics-track-url-fragment-in-url

= Google Photos
{c}
{parent=google}
{wiki}

= Google Search
{c}
{parent=google}
{wiki}

= Google Images
{c}
{parent=google-search}
{wiki}

= Google reverse image search
{c}
{parent=google-images}
{tag=reverse-image-search}

= Google X
{c}
{parent=google}
{wiki}

= PageRank
{c}
{parent=google}
{wiki}

= IBM
{c}
{parent=list-of-companies}
{wiki}

As of the 2020's, a slumbering giant.

But the pre-Internet impact of IBM was insane! Including notably:
* \x[sql]
* \x[ibm-generalized-markup-language], which is a predecessor to \x[xml] and \x[html]

= Nvidia
{c}
{parent=list-of-companies}
{wiki}

Open source \x[driver-software]{p}/hardware interface specification??? E.g. on \x[ubuntu], a large part of the nastiest UI breaking bugs \x[ciro-santilli] encountered over the years have been GPU related. Do you think that is a coincidence??? E.g. \x[ubuntu-21-10-does-not-wake-up-from-suspend].

\Video[https://www.youtube.com/watch?v=_36yNWw_07g]
{title=\x[linus-torvalds] saying "Nvidia Fuck You" (2012)}

= Netflix
{c}
{parent=list-of-companies}
{wiki}

= Oracle Corporation
{c}
{parent=list-of-companies}
{wiki}

= Oracle
{c}
{synonym}

\x[evil] company that desecrated the beauty created by \x[sun-microsystems], and was https://en.wikipedia.org/wiki/Google_v._Oracle_America[trying to bury Java once and or all in the 2010's].

Their database is already matched by \x[open-source] e.g. \x[postgresql], and https://en.wikipedia.org/wiki/Enterprise_resource_planning[ERP] and https://en.wikipedia.org/wiki/Customer_relationship_management[CRM] specific systems are boring.

Oracle basically grew out of selling one of the first \x[sql] implementations in the late 70's, and notably to the \x[united-states-government] and particularly the \x[cia]. They did deliver a lot of value in those early pre-internet days, but now \x[open-source] is and will supplant them entirely.

= Sun Microsystems
{c}
{parent=oracle-corporation}
{wiki}

Although \x[ciro-santilli] is a bit past their era, there's an aura of technical excellence about those people. It just seems that they sucked at business. Those open source hippies. Erm, wait.

= Business-to-business
{parent=company}
{title2=B2B}
{wiki}

= Entrepreneur
{parent=company}

= Elon Musk
{c}
{parent=entrepreneur}
{wiki}

\x[ciro-santilli][Respect on the technical side].

But the way he treated his first wife, is very very weird, incomprehensible: https://www.marieclaire.com/sex-love/a5380/millionaire-starter-wife/

\Video[https://www.youtube.com/watch?v=IcIzaqSnBdA]
{title=The REAL Reason Why Tesla Made All Patents Open-Source by The not so boring Man (2021)}
{description=Supercut from various interviews/presentations in which Elon saying that Tesla has \x[open-source] patents and pro open source stuff. Can we trust it? Maybe.}

= Xavier Niel
{c}
{parent=entrepreneur}
{wiki}

\Video[https://www.youtube.com/watch?v=oBPMFcURM_Y]
{title=Xavier Niel, Iliad - Free: Je suis un casseur de monopoles by DECIDEURSTV (2011)}
{description=Title translation: "I'm a hunter of monopolies".}

= Internal communications
{parent=organization}
{wiki}

= Need to know
{parent=internal-communications}
{wiki}

= Nonprofit organization
{parent=organization}
{wiki}

= Not-for-profit
{synonym}
{title2}

= Charitable organization
{parent=nonprofit-organization}
{wiki}

= Educational charitable organization
{parent=charitable-organization}
{wiki}

In this section we list charitable organizations that support \x[education] or research:
* https://elifesciences.org/labs by \x[elife]
* https://www.digital-science.com/investment/catalyst-grant/ by Shuttleworth foundation.
* https://en.wikipedia.org/wiki/PLOS
* https://www.chanzuckerberg.com/ Zuck has already invested in education previously:
  * https://www.forbes.com/sites/kathleenchaykowski/2018/02/14/zuckerberg-invests-in-on-demand-education-site-varsity-tutors-in-50-million-fundraise/#1c9b6b385dab
  * http://uk.businessinsider.com/mark-zuckerberg-schools-education-newark-mayor-ras-baraka-cory-booker-2018-5
* https://openuk.uk/
* https://bccampus.ca/ \x[cc-by], \x[the-missing-link-between-basic-and-advanced][lower undergrad stuff], but better than nothing.

  Hmm, some/all of it is a copy of \x[libretexts] but with URLs shorter than a million characters, e.g.:
  * https://opentextbc.ca/universityphysicsv3openstax/chapter/de-broglies-matter-waves/
  * https://phys.libretexts.org/Bookshelves/University_Physics/Book%3A_University_Physics_(OpenStax)/Book%3A_University_Physics_III_-_Optics_and_Modern_Physics_(OpenStax)/06%3A_Photons_and_Matter_Waves/6.06%3A_De_Broglies_Matter_Waves
* https://en.wikipedia.org/wiki/Peter_Lampl[Sir Peter Lampl], https://en.wikipedia.org/wiki/Education_Endowment_Foundation[Education Endowment Foundation] and https://en.wikipedia.org/wiki/Sutton_Trust[Sutton Trust]

= Crankstart Foundation
{c}
{parent=educational-charitable-organization}

https://crankstart.org

At https://crankstart.org/grants the organization's website describes mostly California activities, but they do at least also act in the \x[university-of-oxford], see: \x[university-of-oxford-study-costs]{full}.

Presumably the name refers to crank starting an old car, as in helping out those in difficulty like poor students get started in life. But is also an obscure slang for https://www.urbandictionary.com/define.php?term=Crank%20start[a type of handjob] according to \x[urban-dictionary].

= KIPP
{c}
{parent=educational-charitable-organization}
{wiki}

= IntoUniversity
{c}
{parent=educational-charitable-organization}
{wiki}

= LibreTexts
{c}
{parent=educational-charitable-organization}
{wiki}

https://libretexts.org

Appears to have mixed licenses? E.g.:
* https://phys.libretexts.org/Bookshelves/University_Physics/Book%3A_University_Physics_(OpenStax)/Book%3A_University_Physics_III_-_Optics_and_Modern_Physics_(OpenStax)/06%3A_Photons_and_Matter_Waves/6.06%3A_De_Broglies_Matter_Waves is \x[cc-by]
* but we had seen another one that was \x[cc-by-nc-sa]

Appears to be \x[uc-davies]-based mostly.

= Open Knowledge Foundation
{c}
{parent=educational-charitable-organization}
{wiki}

= Saylor Academy
{c}
{parent=educational-charitable-organization}
{wiki}

As of 2021, mostly useless business courses: https://learn.saylor.org

One redeeming factor however: they have a \x[github]: https://github.com/saylordotorgo

https://saylordotorg.github.io/text_introduction-to-economic-analysis/s00-license.html

They seem to favor the dreaded \x[cc-by-nc-sa].

The founder Sayler looks a bit crooked: https://en.wikipedia.org/wiki/Michael_J._Saylor#SEC_investigation[], \x[rich-people-who-create-charitable-prizes-are-often-crooked] comes to mind.

= Simons Foundation
{c}
{parent=educational-charitable-organization}
{wiki}

= Teach For All
{c}
{parent=educational-charitable-organization}
{wiki}

= Brazillian educational charitable organization
{parent=charitable-organization}
{wiki}

= Fundação Estudar
{parent=brazillian-educational-charitable-organization}

* https://pt.wikipedia.org/wiki/Fundação_Estudar
* https://www.estudar.org.br/

\Video[https://www.youtube.com/watch?v=rhaeYj7cln0]
{title=What I learned in \x[harvard] part 1 by Jorge Paulo Lemann (2012)}
{description=\x[portuguese-language] talk about his experiences. A bit bably, but has a few good comments:
* \Q[You don't learn the Harvard experience, you absorb it.]
* \Q[Being amongst excellent people makes you learn what excelent people are like, just like only by tasting many different types of wine can you know what good wine is like.]
  This one does have bias danger though. But detecting greatness, is as type of bias arguably.
}

= Jorge Paulo Lemann
{c}
{parent=fundacao-estudar}
{wiki}

= Public relations
{parent=organization}
{wiki}

= Secret society
{parent=organization}
{wiki}

= Prize
{parent=social-technology}
{wiki}

Generally, prizes that pay big lumps of money to well established individuals are a bit useless, it would be better to pay smaller sums to struggling beginners in the field, of which there are aplenty.

The most important part about prizes should not be the money, nor the recognition, but rather explaining better what the laureates did. In this, most prizes fail. Thus \x[ciro-santilli]'s project idea: \x[project-to-explain-each-nobel-prize-better].

= Breakthrough Prize
{c}
{parent=prize}
{wiki}

By \x[zuckerberg]. The selection seems decent. And \x[natural-science]{p} only, which is good. A bit more application oriented than the \x[nobel-prize] it seems, e.g. 2022 separates physics and fundamental physics.

Appears to explain award reasoning even worse than the \x[nobel-foundation].

= Copley Medal
{c}
{parent=prize}
{title2=1731-}
{wiki}

The \x[royal-society]'s \x[nobel-prize].

https://royalsociety.org/grants-schemes-awards/awards/copley-medal/ says it is now open to international citizens, but having a quick look at the 2010 awards still suggests that it is very British centric, or at least anglophone centric, much like the society fellowship itself. That's likely the reason why the Nobel prize won, being much more international from the start.

Good background: https://www.theguardian.com/science/the-h-word/2016/oct/07/prize-science-medal-history-nobel

Kyoto Prize

= Fields Medal
{c}
{parent=prize}
{title2=1935-}
{wiki}

The \x[nobel-prize] of \x[mathematics]!

That 15,000 canadian dollar prize though, what a joke!!

= Kyoto medal
{c}
{parent=prize}
{title2=1985-}
{wiki}

= Nobel Prize
{c}
{parent=prize}
{title2=1901-}
{wiki}

And the articles that really matter:
* https://en.wikipedia.org/wiki/List_of_Nobel_laureates_by_country
* https://en.wikipedia.org/wiki/List_of_Nobel_laureates_by_university_affiliation

\x[web-of-stories] contains amazing interviews with many (mostly \x[american]) winners.

See \x[surely-you-re-joking-mr-feynman-chapter-alfred-nobel-s-other-mistake]'s amazing comments about the Nobel Prize.

TODO who is the digital switch person he mentions?
* https://www.quora.com/unanswered/Who-was-Richard-Feynman-referring-to-in-the-book-Surely-Youre-Joking-Mr-Feynman-chapter-Alfred-Nobels-Other-Mistake-when-he-talks-about-A-friend-of-mine-whos-a-rich-man-he-invented-some-kind-of-simple-digital-switch on \x[quora]
* https://github.com/cirosantilli/cirosantilli.github.io/issues/72

= Nobel disease
{c}
{parent=nobel-prize}
{wiki}

= Project to explain each Nobel Prize better
{c}
{parent=nobel-prize}

Understand and explain amazingly every single \x[nobel-prize] in \x[physics], \x[chemistry] and \x[biology]. Since in particular the \x[nobel-foundation] is unable to do that for any at all, especially of the key old ones, e.g. https://www.nobelprize.org/prizes/physics/1965/summary/[]. Hopeless.

To be fair, those in theoretical physics at least basically come down to reading a bunch of books. But perhaps anything slightly more experimental could have 

= Nobel Foundation
{c}
{parent=nobel-prize}
{wiki}

= List of Nobel Prizes
{c}
{parent=nobel-prize}
{wiki=List_of_Nobel_laureates}

= List of Nobel Prizes in Chemistry
{c}
{parent=nobel-prize}
{wiki=List_of_Nobel_laureates}

= 1908 Nobel Prize in Chemistry
{parent=list-of-nobel-prizes-in-chemistry}

= List of Nobel Prizes in Physiology and Medicine
{c}
{parent=nobel-prize}
{wiki=List_of_Nobel_laureates}

= 2021 Nobel Prizes in Physiology and Medicine
{parent=list-of-nobel-prizes-in-physiology-and-medicine}
{title2=Human heat and pressure sensor proteins}

https://www.nobelprize.org/prizes/medicine/2021/press-release/

It is quite amusing that the starting point to identifying the heat one was \x[capsaicin], as it stimulates the exact same receptor!!!

= List of Nobel Prizes in Physics
{c}
{parent=nobel-prize}
{wiki=List_of_Nobel_laureates}

= 1902 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=Zeeman}

\x[pieter-zeeman]{child} for the \x[zeeman-effect]{child}.

= 1921 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=photoelectric effect}

\x[einstein]{child} for the theoretical explanation of the \x[photoelectric-effect] from 1905, notably published as \x[on-a-heuristic-viewpoint-concerning-the-production-and-transformation-of-light-by-einstein-1905].

= 1922 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=photoelectric effect}

\x[niels-bohr]{child} for the \x[bohr-model].

= 1926 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=Jean Perrin, atomic theory}

\x[atomic-theory]{c}{child}.

= 1927 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=cloud chamber, Compton scattering}

* \x[cloud-chamber]{child}
* \x[compton-scattering]{child}

= 1932 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=cyclotron}

To \x[ernest-lawrence] for the \x[cyclotron].

= 1936 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=positron, cosmic rays}

Discovery of:
* the \x[positron]{child} by \x[carl-david-anderson]{child}
* he \x[cosmic-ray]{child}{p} by \x[victor-francis-hess]{child}

= 1937 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=electron diffraction}

Early \x[electron-diffraction-experiment] from 1927 that drastically confirmed the \x[matter-wave] hypothesis.
* \x[davisson-germer-experiment]
* \x[diffraction-of-cathode-rays-by-a-thin-film-by-thomson-and-reid-1927]

= 1944 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=Nuclear magnetic resonance, Rabi}

\x[nuclear-magnetic-resonance] work:
* \x[isidor-isaac-rabi]{child}

= 1955 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=QED experiments, Lamb and Kusch}

The key initial \x[quantum-electrodynamics] experiments:
* \x[willis-lamb]{child} for the \x[lamb-retherford-experiment]{child}
* \x[polykarp-kusch]{child} for the \x[anomalous-magnetic-dipole-moment-of-the-electron]{child}, key publication: \x[the-magnetic-moment-of-the-electron-by-kusch-and-foley-1948]{child}

= 1960 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=bubble chamber}

\x[bubble-chamber]{child}.

= 1965 Nobel Prize in Physics
{parent=list-of-nobel-prizes-in-physics}
{title2=QED theory, Feynman, Schwinger and Tomonaga}

Fundamentals of \x[quantum-electrodynamics]{child}.

= 1965 Nobel Prize in Physics laureate
{parent=1965-nobel-prize-in-physics}

* \x[richard-feynman]{child}

= Thiel Fellowship
{c}
{parent=prize}
{wiki}

\x[ciro-santilli] approves of this one, related: \x[free-gifted-education]{full}.

= Turing Award
{c}
{parent=prize}
{wiki}

The \x[nobel-prize] of \x[computer] \x[software] or \x[computer-hardware][hardware]!

More like a "lifetime achievement" though, rather than the Nobel Prize, which tends to be for more specific achievements.

= Knowledge olympiads
{parent=prize}

E.g. https://en.wikipedia.org/wiki/International_Mathematical_Olympiad[International Mathematical Olympiad], https://en.wikipedia.org/wiki/International_Physics_Olympiad[International Physics Olympiad], https://en.wikipedia.org/wiki/Competitive_programming[competitive programming], etc.

Events that trick young kids into thinking that they are making progress, but only serve to distract them from what really matters, which is to dominate a \x[state-of-the-art] as fast as possible, contact researches in the area, and publish truly \x[novel-result]{p}.

Financially backed by high schools trying to make ads showing how they will turn your kids into geniuses (but also passionate teachers who fell into this hellish system), or companies who hire machines rather than entrepreneurs.

The most triggering thing possible is when programming competitions don't release their benchmarks as \x[open-source-software] afterwards: at least like that they might help someone to solve their real world problems. Maybe.

On a related note, hackathons are also mostly useless. Instead of announcing a hackathon, just announce a web forum where people with similar interests can talk to one another instead, and let them code it out on \x[github] if they want to. Restricting intensive development to a few days tends to produce crappy code and not reach real goals.

Some https://en.wikipedia.org/wiki/Artur_Avila[irrelevant people] highlight https://youtu.be/jz-41LxrI_M?t=46[that knowledge Olympiads can have good effects], because they are "an opportunity to meet university teachers and their research organizations". Ciro's argument is just that there are much more efficient ways to achieve those goals.

= Competitive programming
{parent=knowledge-olympiads}
{wiki}

A waste of time like the rest of the \x[knowledge-olympiads].

= Competitive programming website
{parent=competitive-programming}

= LeetCode
{c}
{parent=competitive-programming-website}

https://leetcode.com

= Grinding for software interviews
{parent=knowledge-olympiads}

If your kids are about to starve, fine, do it.

But otherwise, \x[ciro-santilli] will not, ever, spend his time drilling programmer competition problems to join a \x[company], life is too short for that.

Life is too short for that. Companies must either notice that you can make amazing \x[open-source-software] projects or contributions, and hire you for that, or they must \x[fuck] off.

Companies must either notice that you can make amazing projects or contributions, and hire you for that, or they must \x[fuck] off.

= Weekend
{parent=social-technology}

Days of the week where you don't do what you set out to do. And yet, it is in those days that you save your sanity, and possibly the world. Wait, this sounds exactly like a week day?

\Image[https://web.archive.org/web/20200718073243if_/https://pbs.twimg.com/media/DWObYfMU0AAgJJP?format=jpg&name=small]
{title=Calvin and Hobbes "Oh No! I overslept! I gotta get up!" cartoon.}
{source=https://twitter.com/calvinn_hobbes/status/964785603467395072}

= Transport
{parent=technology}
{wiki}

= Bicycle
{parent=transport}
{wiki}

= Bicycle tire sizes
{parent=bicycle}
{wiki}

The images you have to have in mind are:
* https://en.wikipedia.org/wiki/File:Sezione_cerchione_bicicletta.svg
* https://cdn-0.sheldonbrown.com/images/bead-seat-diameter.jpg

Yes, Sheldon he has separate American and British English versions of pages!!!
* https://www.sheldonbrown.com/tyre-sizing.html
* https://www.sheldonbrown.com/tire-sizing.html

For example, \x[ciro-santilli-s-hardware/kross-bicycle-2017] had a Schwalbe tyre with markings:
\Q[42-622 (28 x 1.60, 700x40C)]
When inflated, the tires were about 3.5cm wide as measured with a ruler.

And the https://shop.mavic.com/en-gb/a-319-j24500.html#1028=3283&1035=3501[Mavic A319 rim] had markings:
\Q[622x19C]

In this:
* ISO (Etrto): 42-622. So:
  * 42 is the inner rim width. The actual inflated tire is going to be even wider.
  * 622 is the bead seat diameter. The actual inflated tire is going to be even wider.
* imperial: 28 x 1.60
* French: 700x40C:
  * meaning of the "C" asked at: https://bicycles.stackexchange.com/questions/16190/what-does-the-c-in-bicycle-tire-size-mean
    * https://www.sheldonbrown.com/tire-sizing.html#french says A is larger than B which is larger than C, and C means 622 mm

= Shimano
{c}
{parent=bicycle}
{wiki}

Manuals: https://si.shimano.com/

= Shimano product lines
{c}
{parent=shimano}

Overview of Shimano brands 2018: https://www.evanscycles.com/coffeestop/advice/the-complete-guide-to-shimanos-mountain-bike-groupsets-and-their-hierarchy

* Shimano Altus RD-M310: almost cheapest MTB
* Shimano Acera RD-M360: second cheapest MTB
* Shimano Alivio RD-M410: third cheapest MTB
* Shimano Claris: entry 8-speed road bike https://www.youtube.com/watch?v=6dFQDDg6Wt0
* Shimano Sora: 9-speed road bike https://bike.shimano.com/en-EU/product/component/sora-r3000.html
* Shimano Tiagra: 10-speed road bike https://bike.shimano.com/en-EU/product/component/tiagra-4700.html
* Shimano Deore: non-\x[shitty] MTB, in increasing performance: M610, M6000, M7000, ...)
* Shimano Tourney; commuter, likely the shittiest of all lines: https://bike.shimano.com/en-EU/product/component/tourney.html

= Balloon
{parent=transport}
{wiki}

= Car
{parent=transport}
{wiki}

= Public transport
{parent=transport}
{wiki}

= Train
{parent=transport}
{wiki}

= User interface
{parent=technology}
{wiki}

= UI
{c}
{synonym}
{title2}

For \x[computer] interfaces see: \x[computer-user-interface].

= Software with bad user interface
{parent=user-interface}

It is hard to pinpoint why, but the following useful software just feel bad for some reason:
* \x[inkscape]{child}
* \x[launchpad-website]{child}

= Brain-computer interface
{parent=user-interface}
{wiki=Brain–computer_interface}

The ultimate \x[computer-user-interface]{parent}.

\x[brain-computer-interfaces-could-be-the-next-big-thing]{c}.

And life extension? https://worldbuilding.stackexchange.com/questions/112022/would-an-invasive-spinal-cord-brain-computer-interface-allow-healthy-individuals

= Neuralink
{parent=brain-computer-interface}
{wiki}

\x[elon-musk]{parent}'s attempt.

\Video[https://www.youtube.com/watch?v=CLUWDLKAF1M]
{title=Neuralink: \x[elon-musk]'s entire brain chip presentation in 14 minutes (supercut) by CNET (2020)}
{description=
* https://youtu.be/CLUWDLKAF1M?t=380 Shows a pig with the implant, and live signals are shown when its nose touches something.
* https://youtu.be/CLUWDLKAF1M?t=536 shows a pre-recorded pig study correlating really the joint positions while walking with the neuralink signals
}


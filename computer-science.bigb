= Computer science
{wiki}

A branch of <mathematics> that attempts to prove stuff about <computers>.

Unfortunately, all <software engineers> already know the answer to the useful theorems though (except perhaps notably for <cryptography>), e.g. all programmers obviously know that iehter <p versus NP problem>[P != NP] or that this is <independence (mathematical logic)>[unprovable or some other "for all practical purposes practice P != NP"], even though they don't have proof.

And 99% of their time, software engineers are not dealing with mathematically formulatable problems anyways, which is sad.

The only useful "computer science" subset every programmer ever needs to know is:
* for arrays: <dynamic array> vs <linked list>
* for <associative array>: <binary search tree> vs <hash table>. See also https://stackoverflow.com/questions/6147242/heap-vs-binary-search-tree-bst/29548834#29548834[Heap vs Binary Search Tree (BST)]. No need to understand the algorithmic details of the hash function, the <NSA> has already done that for you.
* don't use https://en.wikipedia.org/wiki/Bubble_sort[Bubble sort] for sorting
* you can't parse HTML with regular expressions: https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454[] because of <formal language theory>

Funnily, due to the <formalization of mathematics>, <mathematics> can be seen as a branch of computer science, just like computer science can be seen as a branch of Mathematics!

= Turing machine
{c}
{parent=Computer science}
{wiki}

The dominating model of a computer.

The model is extremely simple, but has been proven to be able to solve all the problems that any reasonable computer model can solve, thus its adoption as the "default model".

The smallest known Turing machine that cannot be proven to halt or not as of 2019 is 7,918-states: https://www.scottaaronson.com/blog/?p=2725[]. https://www.scottaaronson.com/[Shtetl-Optimized] by Scott Aaronson is just the best website.

A bunch of non-reasonable-looking computers have also been proven to be Turing complete for fun, e.g. <Magic: The Gathering>.

= Universal Turing machine
{c}
{parent=Turing machine}
{wiki}

A Turing machine that simulates another Turing machine/input pair that has been encoded as a string.

In other words: an <emulator>!

The concept is fundamental to state several key results in <computer science>, notably the <halting problem>.

= Turing complete
{c}
{parent=Turing machine}
{wiki=Turing_completeness}

A computer model that is as powerful as the most powerful computer model we have: <Turing machine>!

= Formal language theory
{parent=Computer science}

= Formal language
{parent=Formal language theory}
{wiki}

= Recursively enumerable language
{parent=Formal language theory}
{wiki}

There is a <Turing machine> that halts for every member of the language with the answer yes, but does not necessarily halt for non-members.

Non-examples: https://cs.stackexchange.com/questions/52503/non-recursively-enumerable-languages

= RE
{disambiguate=complexity}
{parent=Recursively enumerable language}
{wiki}

= Recursive language
{parent=Formal language theory}
{wiki}

Subset of <recursively enumerable language>{parent} as explained at: <difference between recursive language and recursively enumerable language>.

= R
{disambiguate=complexity}
{parent=Recursive language}
{wiki}

Set of all <decision problems> solvable by a <Turing machine>, i.e. that decide if a string belongs to a <recursive language>.

= Undecidable problem
{parent=Recursive language}
{wiki}

Is a <decision problem>{parent} of determining if something belongs to a non-<recursive language>.

Or in other words: there is no <Turing machine> that always halts for every input with the yes/no output.

Every undecidable problem must obviously have an infinite number of "possibilities of stuff you can try": if there is only a finite number, then you can brute-force it.

Some undecidable problems are of <recursively enumerable language>, e.g. the <halting problem>.

Lists of undecidable problems.
* https://mathoverflow.net/questions/11540/what-are-the-most-attractive-turing-undecidable-problems-in-mathematics
* https://en.wikipedia.org/wiki/List_of_undecidable_problems

Coolest ones besides the obvious boring <halting problem>:
* <mortal matrix problem>
* <Diophantine equation> existence of solutions: <undecidable Diophantine equation problems>{child}

= Mortal matrix problem
{parent=Undecidable problem}

https://en.wikipedia.org/wiki/Zero_matrix#Occurrences

One of the most simple to state <undecidable problems>.

The reason that it is undecidable is that you can repeat each matrix any number of times, so there isn't a finite number of possibilities to check.

= Computable problem
{parent=Undecidable problem}
{wiki}

= Uncomputable problem
{synonym}

= Uncomputable
{synonym}

A:
* <undecidable problem>[decidable problem] is to a <decision problem>
* like a computable problem is to a <function problem>

= Computable number
{parent=Undecidable problem}
{wiki}

= Uncomputable number
{synonym}

https://math.stackexchange.com/questions/462790/are-there-any-examples-of-non-computable-real-numbers

There are only boring exampes of taking an uncomputable language and converting it into a number?

= Difference between recursive language and recursively enumerable language
{parent=Recursive language}
{wiki}

https://stackoverflow.com/questions/33467040/what-is-the-difference-between-recursive-and-recursively-enumerable-languages/65455863#65455863

= Recursive set
{parent=Recursive language}
{wiki}

Same as <recursive language> but in the context of the <integers>.

= Chomsky hierarchy
{c}
{parent=Formal language theory}
{wiki}

This is the classic result of <formal language theory>, but there is too much slack between context free and context sensitive, which is PSPACE (larger than <NP (complexity)>!).

By <Noam Chomsky>.

TODO had seen a good table on Wikipedia with an expanded hierarchy, but lost it!

= Computational problem
{parent=Computer science}
{wiki}

The list: https://complexityzoo.uwaterloo.ca/Complexity_Zoo

= Decision problem
{parent=Computational problem}
{wiki}

<computational problem> where the solution is either yes or no.

When there are more than two possible answers, it is called a <function problem>{parent}.

Decision problems come up often in <computer science> because many important problems are often stated in terms of "decide if a given string belongs to given <formal language>".

= Halting problem
{parent=Decision problem}
{wiki}

The canonical <undecidable problem>{parent}.

= Function problem
{parent=Computational problem}
{wiki}

A problem that has more than two possible yes/no outputs.

It is therefore a generalization of a <decision problem>.

= Busy beaver
{parent=Function problem}
{title2=$BB(n)$}
{wiki}

= Busy beaver game
{synonym}

$BB(n)$ is the largest number of 1's written by a <halting problem>[halting] $n$-state <Turing machine>.

Some variant definitions define it as the number of time steps taken by the machine instead. Wikipedia talks about their relationship, but no patience right now.

Overviews:
* https://www.scottaaronson.com/blog/?p=4916
* https://www.quantamagazine.org/the-busy-beaver-game-illuminates-the-fundamental-limits-of-math-20201210

This problem is theoretically interesting because many important mathematical <conjectures> have been proved to be equivalent to whether a given Turing machine halts or not, this is notably the case for:
* <Goldbach's conjecture>: 27 states
* <Riemann hypothesis>: 744 states
* the <consistency> of <Zermelo-Fraenkel set theory>: 7910 states

Therefore, if we were able to compute $BB(n)$, we would be able to prove those conjectures automatically, by letting the machine run up to $BB(n)$, and if it hadn't halted by then, we would know that it would never halt.

Of course, in practice, $BB$ is generally <uncomputable>, so we will never know it. And furthermore, even if it were, it would take a lot longer than the age of the universe to compute any of it, so it would be useless.

However, philosophically speaking at least, the number of states of the equivalent <Turing machine> gives us a philosophical idea of the complexity of the problem.

= Integer multiplication
{parent=Function problem}

https://cs.stackexchange.com/questions/16226/what-is-the-fastest-algorithm-for-multiplication-of-two-n-digit-numbers

= Integer factorization
{parent=Function problem}
{wiki}

Complexity: <NP-intermediate> as of 2020:
* expected not to be <NP-complete> because it would imply NP != <Co-NP>: https://cstheory.stackexchange.com/questions/167/what-are-the-consequences-of-factoring-being-np-complete#comment104849_169
* expected not to be in <P (complexity)> because "could we be that dumb that we haven't found a solution after having tried for that long?

The basis of RSA: <RSA (cryptosystem)>. But not proved <NP-complete>, which leads to:

= Integer factorization algorithm
{parent=Integer factorization}

= NP-hard cryptosystems
{c}
{parent=Integer factorization}

This is natural question because both <integer factorization> and <discrete logarithm> are the basis for the most popular <public-key cryptography> systems as of 2020 (<RSA (cryptosystem)> and <Diffie-Hellman key exchange> respectively), and both are <NP-intermediate>. Why not use something more provenly hard?
* https://cs.stackexchange.com/questions/356/why-hasnt-there-been-an-encryption-algorithm-that-is-based-on-the-known-np-hard "Why hasn't there been an encryption algorithm that is based on the known NP-Hard problems?"

= Discrete logarithm
{parent=Function problem}
{wiki}

<logarithm> but for <discrete> <group (mathematics)>[groups].

<NP-intermediate> as of 2020 for similar reasons as <integer factorization>.

= Algorithm
{parent=Computational problem}
{wiki}

A solution to a <computational problem>!

= Algorithm cheatsheet
{parent=Algorithm}

Draft by <Ciro Santilli> with cross language input/output test cases: https://github.com/cirosantilli/algorithm-cheat

By others:
* https://github.com/TheAlgorithms/Python

= Data structure
{parent=Algorithm}
{wiki}

= Associative array
{parent=Data structure}
{title2=map, dictionary}
{wiki}

More commonly known as a map or dictionary.

= Binary search tree
{parent=Associative array}
{tag=Binary tree}
{tag=Ordered tree}
{wiki}

= Hash table
{parent=Associative array}
{wiki}

= Hash map
{synonym}
{title2}

= Dynamic array
{parent=Data structure}
{wiki}

= Linked list
{parent=Data structure}
{wiki}

= Recursion
{disambiguate=computer science}
{parent=Algorithm}
{wiki}

= Recursion
{synonym}

= Recursive algorithm
{synonym}

= Iteration
{parent=Recursion (computer science)}
{wiki}

= Iterative algorithm
{parent=Iteration}
{wiki}

= Sorting algorithm
{parent=Algorithm}
{wiki}

= String-sorting algorithm
{parent=Sorting algorithm}

= Natural sort order
{parent=String-sorting algorithm}
{wiki}

= String-search algorithm
{parent=Algorithm}
{wiki}

= Complexity class
{parent=Computational problem}
{wiki}

= Big O notation family
{parent=Complexity class}

This is a family of notations related to the <big O notation>. A good mnemonic summary of all notations would be:
* <big O notation>: $|f| \le g$
* <little-o notation>: $|f| \lt g$

= Big O notation
{parent=Big O notation family}
{title2=$O(n)$}
{wiki}

Module bound above, possibly multiplied by a constant:
$$
f(x) = O(g(x))
$$
is defined as:
$$
\exists M > 0 \exists x_0  \forall x > x_0 \colon |f(x)| \leq M g(x)
$$

E.g.:
* $\forall c \in \R x + c = O(x)$. For $c < 0$, $M = 1$ is enough. Otherwise, any $M > 1$ will do, the bottom line will always catch up to the top one eventually.

= Little-o notation
{parent=Big O notation family}
{title2=$o(n)$}

Stronger version of the <big O notation>, basically means that ratio goes to zero. In <big O notation>, the ratio does not need to go to zero.

So in informal terms, <big O notation> means $\leq$, and <little-o notation> means $<$.

E.g.:
* $x = O(x)$
* $x \ne o(x)$K does not tend to zero
* $x = O(x^2)$
* $x = o(x^2)$

= P
{disambiguate=complexity}
{c}
{parent=Complexity class}
{wiki}

= NP
{disambiguate=complexity}
{c}
{parent=Complexity class}
{wiki}

Strictly speaking, only defined for decision problems: https://cs.stackexchange.com/questions/9664/is-it-necessary-for-np-problems-to-be-decision-problems/128702#128702

= NP-complete
{c}
{parent=NP (complexity)}
{wiki=NP-completeness}

A problem that is both <NP (complexity)> and <NP-hard>.

= Cook-Levin theorem
{c}
{parent=NP-complete}
{wiki=Cook–Levin_theorem}

= P versus NP problem
{parent=NP-complete}
{wiki}

= P vs NP
{c}
{synonym}
{title2}

Interesting because of the <Cook-Levin theorem>: if only a single <NP-complete> problem were in <P (complexity)>, then all NP-complete problems would also be P!

We all know the answer for this: either false or <independent (mathematical logic)>.

= Ladner's Theorem
{c}
{parent=P versus NP problem}

= NP-hard
{c}
{parent=NP (complexity)}
{wiki=NP-hardness}

A problem such that all NP problems can be reduced in polynomial time to it.

= NP-intermediate
{c}
{parent=NP (complexity)}
{wiki}

This is the most interesting class of problems for <BQP> as we haven't proven that they are neither:
* <P (complexity)>: would be boring on quantum computer
* <NP-complete>: would likely be impossible on a quantum computer

Big list: https://cstheory.stackexchange.com/questions/79/problems-between-p-and-npc/460#460

= BQP
{c}
{parent=NP-intermediate}
{wiki}

<P (complexity)> for <quantum computing>!

Heck, we know nothing about this class yet related to non quantum classes!
* conjectured not to intersect with <NP-complete>, because if it were, all NP-complete problems could be solved efficiently on quantum computers, and none has been found so far as of 2020.
* conjectured to be larger than <P (complexity)>, but we don't have a single algorithm provenly there:
  * it is believed that the NP complete ones can't be solved
  * if they were neither NP-complete nor P, it would imply <p versus NP problem>[P != NP]
* we just don't know if it is even contained inside <NP (complexity)>!

= Co-NP
{c}
{parent=NP (complexity)}
{wiki}

* https://math.stackexchange.com/questions/361422/why-isnt-np-conp "Why isn't NP = coNP?"
* https://stackoverflow.com/questions/17046440/whats-the-difference-between-np-and-co-np
* https://cs.stackexchange.com/questions/9795/is-the-open-question-np-co-np-the-same-as-p-np
* https://mathoverflow.net/questions/31821/problems-known-to-be-in-both-np-and-conp-but-not-known-to-be-in-p

= Optimization problem
{parent=Computational problem}
{wiki}

= Linear programming
{parent=Optimization problem}
{wiki}

= Logistics
{parent=Optimization problem}
{wiki}

= Last mile problem
{parent=Logistics}

The exact same problem appears over and over, e.g.:
* https://en.wikipedia.org/wiki/Last_mile_(transportation)[transportaion]: the last mile of the trip when everyone leaves the train and goes to their different respective offices is the most expensive
* https://en.wikipedia.org/wiki/Last_mile_(telecommunications)[telecommunications]: the last mile of wire linking local hubs to actual homes is the most expensive
* electrical grid: same as telecommunications

<Ciro Santilli> also identified knowledge version of this problem: <the missing link between basic and advanced>.

= Optimization software
{parent=Optimization problem}
{tag=Software}

* https://en.wikipedia.org/wiki/List_of_optimization_software
* https://en.wikipedia.org/wiki/Comparison_of_optimization_software

= CPLEX
{c}
{parent=Optimization software}

= Limiting factor
{parent=Optimization problem}
{wiki}

= Critical path method
{parent=Limiting factor}
{wiki}

= Critical path
{parent=Limiting factor}

= Value function
{parent=Optimization problem}
{wiki}

The function being maximized in a <optimization problem>.

\Include[cryptography]{parent=computer-science}

= Hash function
{parent=Computer science}
{wiki}

= Hash
{synonym}

Applications:
* https://en.wikipedia.org/wiki/Hash_table[hash map] which is a O(1) amortized implementation of a map
* creating unbreakable chains of data, e.g. for https://stackoverflow.com/questions/22968856/what-is-the-file-format-of-a-git-commit-object-data-structure/37438460#37438460[Git commits] or <Bitcoin>. 
* storing passwords on a server in a way that if the password database is stolen, attackers can't reuse them on other websites where the user used the same password: https://security.blogoverflow.com/2013/09/about-secure-password-hashing/

= Secure Hash Algorithms
{c}
{parent=Hash function}
{wiki}

= SHA-1
{c}
{parent=Secure Hash Algorithms}
{wiki}

= SHA-2
{c}
{parent=Secure Hash Algorithms}
{wiki}

= Merkle tree
{c}
{parent=Hash function}

= Hash tree
{synonym}

= Computer scientist
{parent=Computer science}
{wiki}

= Alan Turing
{c}
{parent=Computer scientist}
{wiki}

= Noam Chomsky
{c}
{parent=Computer scientist}
{tag=Cool person}
{wiki}

= Scott Aaronson
{c}
{parent=Computer scientist}
{wiki}

= webpack
{c}
{wiki}

Webpack is like a magic hydra that can <eat> any type of file and bundle it into a single output: .js, <TypeScript>[.ts], .ccs, .scss, .jsx, .tsx, `require`, `import`, `import` css from `.js`, it doesn't matter at all, it just digests all into the same <shit>[dump].

When it works, you are just left in awe. When it doesn't, you're fucked and have to debug for several hours.

Demos under: \a[webpack/].

= webpack/template
{file}
{parent=webpack}

\a[webpack/template] contains a reasonable starter template.

Usage:
``
cd webpack/template
npm install
npm run build
``

This will produce, under `dist/` the following minimized files:
* `dist/index.html`: from \a[webpack/template/index.html]. You can open it to see:
  ``
  Hello webpack
  ``
  show on the browser. This was added from <JavaScript>.
* `dist/index.js`: from \a[webpack/template/index.js] and anything in its import tree, e.g.:
  * \a[webpack/template/main.scss]: <sass (stylesheet language)> source. It gets embedded the the <JavaScript> output as a string, and the JavaScript then applies it to the page, making the font blue
  * `lodash` third party library

You can also run this test with the development server on http://localhost:9000[]:
``
npm start
``
which uses unminimized outptus, and automatically push reloads the page whenever you change any of the input files!

= webpack/sass
{file}
{parent=webpack}

This example shows how to use <Sass>.

To make things simple, it generates a completely separate `dist/index.js` and `dist/main.css` which are manually included from `index.html`, and does not do any type of injection (neither Js into HTML nor CSS in Js).

= webpack/no-js-inject
{file}
{parent=webpack}

This example shows how you could manually include the `dist/index.js` that is output from webpack into your `index.html`.

This is generally not what you want to do, because what you actually want to do is to use a Js output name with a hash in it, so that browsers only need to refetch when the name changes.

And to do that, we have to let webpack dynamically inject that unpredictable hash as done in <file/webpack/template> with:
``
new HtmlWebpackPlugin({
  filename: 'index.html',
  // Inject the include to our hashed filename,
  // since it is not deterministic due to the hash.
  inject: true,
  template: path.resolve(__dirname, 'index.html'),
}),
``

= webpack Sass import
{c}
{parent=webpack}

This shows how to produce a minimized fully embedded CSS file with webpack from a <sass (stylesheet language)>:
``
cd webpack/sass
npm install
npm run build
xdg-open index.html
``
That example produces a `dist/main.css` file which is a compresesd combination of:
* \a[webpack/sass/main.scss]
* https://necolas.github.io/normalize.css/[normalize.css], added to the project as a regular `node_modules` package

= webpack CSS ignore font format
{c}
{parent=webpack}

* https://stackoverflow.com/questions/37667444/is-there-a-way-to-ignore-a-file-type-with-webpack/39886771#39886771
* https://stackoverflow.com/questions/71320578/how-to-ignore-exclude-certain-font-formats-font-face-in-css-with-webpack
* https://github.com/cherrry/ignore-loader/issues/8

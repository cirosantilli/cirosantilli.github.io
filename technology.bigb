= Technology
{wiki}

= Technological
{synonym}

= Clothing
{parent=technology}
{wiki}

= Bra
{parent=clothing}
{wiki}

= Deep tech
{parent=technology}
{wiki}

\x[ciro-santilli] is a fan of this late 2010's buzzword.

It basically came about because of the endless stream of useless software startups made since the 2000's by one or two people with no investments with the continued increase in computers and Internet speeds \x[moore-s-law][until the great wall was reached].

Deep tech means not one of those. More specifically, it means technologies that require significant investment in expensive materials and laboratory equipment to progress, such as \x[molecular-biology-technologies] and \x[quantum-computing].

And it basically comes down to technologies that wrestle with the fundamental laws of \x[physics] rather than software data wrangling.

\x[computer]{c}{p} are of course limited by the laws of physics, but those are much hidden by several layers of indirection.

Full visibility, and full control, make computer tasks be tasks that eventually always work out more or less as expected.

The same does not hold true when real Physics is involved.

Physics is brutal.

To start with, you can't even see your system very clearly, and often doing so requires altering its behaviour.

For example, in molecular biology, most great discoveries are made after some new technique is made to be able to observe smaller things.

But you often have to kill your cells to make those observations, which makes it very hard to understand how they work dynamically.

What we would really want would be to track every single protein as it goes about inside the cell. But that is likely an impossible dream.

The same for the brain. If we had observations of every neuron, how long would it take to understand it? Not long, people are really good at \x[reverse-engineering] things when there is enough information available to do so, see also \x[science-is-the-reverse-engineering-of-nature].

Then, even when you start to see the system, you might have a very hard time controlling it, because it is so fragile. This is basically the case of quantum computing in 2020.

It is for those reasons that deep tech is so exciting.

The \x[the-next-big-thing][next big things] will come from deep tech. Failure is always a possibility, and you can't know before you try.

But that's also why its so fun to dare.

Stuff that \x[ciro-santilli] considers "deep tech" as of 2020:
* \x[brain-computer-interface]{child}
* \x[fusion-power]{child}. The question there is, when is "deep", "too deep"?

= Engineering
{parent=technology}
{wiki}

= Engineer
{parent=engineering}
{wiki}

= Computer engineer
{parent=engineer}
{wiki}

= Gordon Moore
{c}
{parent=computer-engineer}
{wiki}

= Robert Noyce
{c}
{parent=computer-engineer}
{wiki}

= Robert Noyce: The Man Behind the Microchip by Leslie Berlin (2006)
{c}
{parent=robert-noyce}
{tag=good-book}

Borrow from the \x[internet-archive] for free: https://archive.org/details/manbehindmicroc000berl/page/n445/mode/2up

= Seymour Cray
{c}
{parent=computer-engineer}
{wiki}

= Cray
{c}
{parent=seymour-cray}
{wiki}

= The Supermen: The Story of Seymour Cray by Charles J. Murray (1997)
{c}
{parent=seymour-cray}
{tag=good-book}

Borrow from the \x[internet-archive] for free: https://archive.org/details/supermenstory00murr

Initial chapters put good clarity on the formation of the \x[military-industrial-complex]. Being backed by the military, especially just after \x[world-war-ii], was in itself enough credibility to start and foster a company.

It is funny to see how the first computers were very artisanal, made on a one-off basis.

Amazing how Control Data Corporation raised capital IPO style as a startup without a product. The dude was selling shares at dinner parties in his home.

Very interesting mention on page 70 of how \x[israel] bought CDC's https://en.wikipedia.org/wiki/UNIVAC_1103[UNIVAC 1103] which Cray contributed greatly to design, and everyone knew that it was to make \x[thermonuclear-weapon]{p}, since that was what the big American labs like  this mention should be added to: https://en.wikipedia.org/wiki/Nuclear_weapons_and_Israel but that's Extended Protected... the horrors of \x[wikipedia].

Another interesting insight is how "unintegrated" computers were back then. They were literally building computers out of individual \x[vacuum-tube]{p}, then individual semiconducting transistors, a gate at a time. Then things got more and more integrated as time went. That is why the now outdated word "microprocessor" existed. When processors start to fit into a single \x[integrated-circuit], they were truly micro compared to the monstrosities that existed previously.

Also, because integration was so weak initially, it was important to more manually consider the length of wire signals had to travel, and try to put components closer together to reduce the \x[critical-path] to be able to increase clock speeds. These constraints are also of course present in modern computer design, but they were just so much more visible in those days.

The book does unfortunately not give much detail in Crays personal life as mentioned on this book review: https://www.goodreads.com/review/show/1277733185?book_show_action=true[]. His childhood section is brief, and his wedding is described in one paragraph, and divorce in one sentence. Part of this is because he was very private about his family most likely note how Wikipedia had missed his first wedding, and likely misattribute children to the second wedding; https://en.wikipedia.org/wiki/Talk:Seymour_Cray section "Weddings and Children".

Crays work philosophy is is highlighted many times in the book, and it is something worthy to have in mind:
* if a design is not working, start from scratch
* don't be the very first pioneer of a technology, let others work out the problems for you first, and then come second and win

Cray's final downfall was when he opted to try to use a promising but hard to work with material \x[gallium-arsenide] instead of \x[silicon] as his way to try and speed up computers, see also: \x[gallium-arsenide-vs-silicon]. Also, he went against the extremely current of the late 80's early 90's pointing rather towards using massively parallel systems based on \x[silicon] off-the-shelf \x[intel] processors, a current that had \x[darpa] support, and which by far the path that won very dramatically as of 2020, see: \x[intel-supercomputer-market-share].

= Industry
{parent=engineering}
{wiki}

= Industrial
{synonym}

= Industrialized
{synonym}

= Electricity generation
{parent=technology}
{wiki}

= Nuclear power
{parent=electricity-generation}
{wiki}

= Fusion power
{parent=nuclear-power}
{wiki}

= Fusion energy
{synonym}

\x[fusion-power-could-be-the-next-big-thing]{c}.

Most promising approaches as of 2020:
* \x[magnetic-confinement-fusion]
* \x[inertial-confinement-fusion]

= Magnetic confinement fusion
{parent=fusion-power}
{wiki}

Once again, relies on \x[superconductivity] to reach insane magnetic fields. Superconductivity is just so important.

\x[ciro-santilli] saw a good presentation about it once circa 2020, it seems that the main difficulty of the time was turbulence messing things up. They have some nice simulations with cross section pictures e.g. at: https://www.eurekalert.org/news-releases/937941[].

= List of magnetic confinement fusion reactors
{parent=magnetic-confinement-fusion}

= JT-60
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{title2=Japan, 1985-2010}
{wiki}

= Joint European Torus
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{title2=JET, Oxfordshire, United Kingdom, 1985-2010, 1991-}
{wiki}

\Video[https://www.youtube.com/watch?v=JrGeuIe17MA]
{title=Inside JET: The world's biggest nuclear fusion experiment by Wired UK (2020)}

= ITER
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{wiki}

= Inertial confinement fusion
{parent=fusion-power}
{wiki}

= Fusion energy gain factor
{parent=fusion-power}
{wiki}

= Lawson criterion
{c}
{parent=fusion-energy-gain-factor}
{wiki}

= Fusion ignition
{parent=lawson-criterion}
{wiki}

= Electronics
{parent=technology}
{wiki}

= Electronic component
{parent=electronics}
{wiki}

= Amplifier
{parent=electronic-component}
{wiki}

Main implementations: the same as \x[electronic-switch]{p}: \x[vacuum-tube]{p} in the past, and \x[transistor]{p} in the second half of the 20th century.

= Diode
{parent=electronic-component}
{wiki}

= Resistor
{parent=electronic-component}
{wiki}

= Electrical resistance
{parent=resistor}
{wiki=Electrical_resistance_and_conductance}

= Transformer
{parent=electronic-component}
{wiki}

= Electronic switch
{parent=electronic-component}
{wiki}

= Vacuum tube
{parent=electronic-switch}
{wiki}

= Transistor
{parent=electronic-switch}
{wiki}

A \x[solid-state] \x[electronic-switch] and \x[amplifier].

Although transistors were revolutionary, it is fun to note that they were just "way cheaper and more reliable and smaller" versions of exactly the main functions that a \x[vacuum-tube] could achieve
* \x[amplifier]
* \x[electronic-switch]

= Point-contact transistor
{parent=transistor}
{title2=BJT, 1947}
{wiki}

The first working one in 1947 by \x[john-bardeen] and \x[walter-brattain] in \x[bell-labs-murray-hill].

People had already \x[patented] a lot of stuff before without being able to make them work. Nonsense.

As the name suggests, this is not very sturdy, and was quickly replaced by \x[bipolar-junction-transistor].

= Bipolar junction transistor
{parent=transistor}
{title2=BJT, 1948}
{wiki}

By \x[william-shockley] in 1948 also at \x[bell-labs-murray-hill].

As of 2020, not used anymore in \x[logic-gate]{p}, but still used in \x[amplifier]{p}.

= Field-effect transistor
{parent=transistor}
{title2=FET}
{wiki}

= MOSFET
{c}
{parent=field-effect-transistor}
{title2=1959}
{wiki}

= CMOS
{c}
{parent=mosfet}
{wiki}

= Electronic test equipment
{parent=electronics}
{wiki}

= Oscilloscope
{parent=electronic-test-equipment}
{wiki}

= Electronic circuit
{parent=electronics}
{wiki}

= Breadboard
{parent=electronic-circuit}
{wiki}

= Digital electronic circuit
{parent=electronic-circuit}

= Frequency divider
{parent=digital-electronic-circuit}
{wiki}

= Semiconductor package
{parent=electronics}
{wiki}

= Dual in-line package
{parent=semiconductor-package}
{wiki}

= Explosive
{parent=technology}
{wiki}

Types:
* \x[chemical-explosive]. Almost a synonym for explosive in most contexts.

= Information technology
{parent=technology}
{wiki}

\Include[computer]{parent=information-technology}

= Error correction code
{parent=information-technology}
{wiki}

= Cyclic redundancy check
{parent=error-correction-code}
{wiki}

= CRC-32
{c}
{parent=cyclic-redundancy-check}
{wiki=Cyclic_redundancy_check#CRC-32_algorithm}

= Telecommunication
{parent=information-technology}
{wiki}

= Television
{parent=telecommunication}
{wiki}

= Publishing
{parent=telecommunication}
{wiki}

= Self-publishing website
{parent=publishing}
{wiki}

= Leanpub
{parent=publishing}

https://leanpub.com

Founder: Peter Armstrong

The general idea is publishing entire books with usual copyright, but with gradual updates.

http://ruboss.com/ documents their stack, a somewhat similar choice to \x[ourbigbook-com] as of 2021, notably \x[next-js]. But backend in \x[ruby-on-rails]. They actually managed Apollo/\x[graphql], which \x[ciro-santilli] would have liked, but din't have the patience for.

The founder/CEO Peter Armstrong https://www.linkedin.com/in/peterburtonarmstrong/ He looks like a nice guy.

= Markua
{parent=leanpub}

In \x[leanpub] you write your book in a \x[markdown] variant they call Markua, marketed as "markdown for books".

TODO is there a reference implementation that runs locally for HTML output? Or the only reference implementation is closed under \x[leanpub]?

Spec: http://markua.com/

= Publishing company
{parent=publishing}
{wiki}

= O'Reilly Media
{c}
{parent=publishing-company}
{wiki}

= Lighter
{parent=technology}
{wiki}

= Barbequeue lighter
{parent=lighter}

\Include[microscopy]{parent=technology}

= Mechanical engineering
{parent=technology}
{wiki}

= Mechanical engineering company
{parent=mechanical-engineering}

= Park Tool
{c}
{parent=mechanical-engineering-company}
{tag=good}
{wiki}

= Reverse engineering
{parent=technology}
{wiki}

This is what society gets for not using \x[open-knowledge]: some of its best minds will be bound to waste endless hours reversing some useless technology.

With that said, even when you do have the source code, reading run logs and using \x[debugger]{p} are a sort of reverse engineering at heart.

One of the most jaw dropping reverse engineering projects Ciro has ever seen is the \x[super-mario-64-reverse-engineering-project].

= Science is the reverse engineering of nature
{parent=reverse-engineering}
{wiki}

How \x[software-engineer][software engineers] view science:
\Q[Science is the \x[reverse-engineering] of nature.]

\x[ciro-santilli] had once assigned this as one of \x[ciro-santilli-s-best-random-thoughts], but he later found that \x[wikipedia] actually says exactly that: https://en.wikipedia.org/wiki/Reverse_engineering ("similar to scientific research, the only difference being that scientific research is about a natural phenomenon") so maybe that is where Ciro picked it up unconsciously in the first place.

= Social technology
{parent=technology}
{wiki}

= Conference
{parent=social-technology}
{wiki}

= TED
{c}
{disambiguate=conference}
{parent=conference}
{wiki}

A bit like a \x[cult]{parent}.

Many speakers are good. But especially in TEDx, we've had some notorious ones:
* https://cirosantilli.com/china-dictatorship/raz-gal-or[Raz Gal-or and his father Amir Gal-Or]

\Include[education]{parent=social-technology}

= Government
{parent=social-technology}
{wiki}

= Democracy
{parent=government}
{wiki}

= Voting
{parent=democracy}
{wiki}

= Vote
{synonym}

= Electronic voting
{parent=voting}
{wiki}

This is a must if the people want to regain control of their society from apathetic politicians.

I would also increase voter percentage due to convenience, and reduce the weight of voting fraud cases, as everyone would be able to check that their own vote was counted correctly.

And then, we would be able to have \x[referendum]{p} for basically any important decision being made. No need to go out on the streets and waste your time in a mass protest! Just vote!

It is possible to implement anonymous electronic voting with \x[ring-signature]{p}, an algorithm also used by \x[monero], an \x[anonymity] focused \x[cryptocurrency], as mentioned e.g. on this 2004 paper https://eprint.iacr.org/2004/281.pdf[]. The system can be set in a way such that you can only deanonymize someone if everyone else, or a very large number of people, conspire against that person.

The same system could also be used to setup forums where only citizens of the country could comment and propose changes and vote on them.

With electronic voting, we could have a system where you can let someone you trust vote for you automatically, or vote automatically for certain subjects alone, a bit like we do by electing senators. But then you would also be able to override specific votes if you wanted to.

In this system therefore, anyone who can proxy vote has to have their vote public, and placed in a decent website that shows clearly who voted for what.

Related:
* https://www.vote-coin.com/ allows you to delegate your voting power to someone else, that's perfect!

= Referendum
{parent=voting}
{wiki}

= Dictatorship
{parent=government}
{wiki}

\x[china] related: https://cirosantilli.com/china-dictatorship/dictatorship

= Tax
{parent=government}
{wiki}

= Taxation
{synonym}

= Fiscal paradise
{parent=tax}
{wiki}

Fiscal paradises must be invaded and destroyed.

= Legal tender
{parent=tax}
{wiki}

= Tax the rich
{parent=tax}
{wiki}

\Video[https://www.youtube.com/watch?v=t6V9i8fFADI]
{title=How the rich avoid paying taxes by Vox (2021)}
{description=Features interview with Morris Pearl, a rich dude that is campaigning to tax the rich. He also participates in an association called  https://patrioticmillionaires.org/about/["Patriotic Milionairs"] to further this agenda.}

= Georgism
{parent=tax-the-rich}
{wiki}

\Video[https://www.youtube.com/watch?v=Li_MGFRNqOE]
{title=Georgism 101 by BritMonkey (2019)}

= Redistribution of wealth
{parent=tax-the-rich}

= Progressive tax
{parent=tax-the-rich}
{wiki}

= Wealth tax
{parent=tax-the-rich}
{wiki}

Obviously coupled with measures to prevent \x[capital-flight]. This would be a required step to achieve \x[ciro-santilli]'s dream of \x[unconditional-basic-income].

Why don't the poor vote in mass for it is incomprehensible considering e.g. the \x[wealth-inequality-in-the-united-states] as of 2020!
* https://www.jstor.org/stable/20027743?seq=1#metadata_info_tab_contents
* https://www.washingtonpost.com/news/monkey-cage/wp/2018/02/27/why-the-poor-dont-vote-to-soak-the-rich/

Perhaps the election of \x[donald-trump] in 2016 woke up the \x[democrat]{p} at last, that they were just making empty promises without actually benefiting the poor? https://www.vox.com/2019/3/19/18240377/estate-tax-wealth-tax-70-percent-warren-sanders-aoc[]. Or is just another facade?

Bibliography:
* https://www.npr.org/sections/money/2019/02/26/698057356/if-a-wealth-tax-is-such-a-good-idea-why-did-europe-kill-theirs If a Wealth Tax is Such a Good Idea, Why Did \x[europe] Kill Theirs?
* https://www.youtube.com/watch?v=XzonR81vVzM The Mayfair Set, Episode 2 - Entrepreneur Spelt S.P.I.V. (1999) by \x[adam-curtis] explains nicely how in the 60's, https://en.wikipedia.org/wiki/Jim_Slater_(accountant)[Jim Slater] bought stock of inefficient companies, and sold off inefficient assets to make a profit.

  He managed to do that because previously people had regarded those companies as family companies, and never looked into the fact that they families weren't actually majority shareholders anymore.

  While this increased efficiency, it also fired many people, and the government didn't manage to change legislation fast enough to \x[tax] those profits to increase welfare.

\Include[law]{parent=social-technology}

= Management
{parent=social-technology}
{wiki}

\Video[https://www.youtube.com/watch?v=GsN0WVLjpcs]
{title=DealBook Conference 2015 - Activist Investing by \x[new-york-times] Events (2015)}
{description=At this timestamp, Carl Icahn tells an anecdote of how he found that an entire 12-floor building of the https://en.wikipedia.org/wiki/American_Car_and_Foundry_Company[American Car and Foundry Company] which he had recently bought was not doing anything useful, and fired the entire building.}
{start=377}

= Marketing
{parent=social-technology}
{wiki}

= Advertising
{parent=marketing}
{wiki}

= Advertisement
{parent=advertising}
{wiki}

= The best advertisements of all time
{parent=advertising}
{wiki}

= Chumbox
{parent=advertising}
{wiki}

\x[clickbait]{c} advertisement

= Taboola
{c}
{parent=advertising}
{wiki}

Taboola is a \x[clickbait] trained neural network. Which happens to have been written by \x[adolf-hitler].

= If a product of a big company has a catchy name it came from an acquisition
{parent=marketing}

If a Big Company makes a product that Does Something, they just call it Big Company Does Something.

If a product is called "Big Company Catchy Name Does Something", then it came from an acquisition, and they wanted to keep the name due to its prestige and to not confuse users.

= Meal deal
{parent=marketing}
{wiki}

= Media
{disambiguate=communication}
{parent=social-technology}
{wiki}

= Media company
{parent=media-communication}

= Vice News
{c}
{parent=media-company}
{wiki}

= Newspaper
{parent=media-communication}
{wiki}

= New York Times
{c}
{parent=newspaper}
{wiki}

= Social media
{parent=media-communication}

Basically a \x[social-network] where you don't know the other people very well.

= Aggressively filter your social media follows
{parent=social-media}
{tag=cirism}

Ciro Santilli very aggressively aggressively people in social media.

There are basically 3 categories:

* are you Ciro's parents or children or brothers: OK, keep following, unless you are truly truly very noise.
* does Ciro really really like or respect you? OK, he can take some useless (i.e. non-technical/scientific) posts
* otherwise: one bad post and unfollow

= Social network
{parent=social-media}
{wiki}

Related:
* \x[social-media]

= Distributed social network
{parent=social-media}
{wiki}

= Federated social network
{synonym}

* \x[mastodon-software]{child}

= List of social media
{parent=social-media}
{wiki}

= Facebook
{c}
{parent=list-of-social-media}
{wiki}

= Instagram
{c}
{parent=facebook}
{wiki}

\x[ciro-santilli] is just too old to understand what the point of that website is compared to \x[twitter]. There must be one, right?

Also, it is impossible to use it on the \x[browser] without a \x[cell-phone], similar critique as \x[messaging-software-that-force-you-to-have-a-mobile-phone]{full} but a bit more aggravating, because, well, you would expect creators want people to see their stuff on a \x[browser] unlike private messages?

= Mark Zuckerberg
{c}
{parent=facebook}
{wiki}

= Zuckerberg
{c}
{synonym}

= Mastodon
{c}
{disambiguate=software}
{parent=list-of-social-media}
{wiki}

Of course those racist \x[nazi]{p} are a bunch of idiots, but how can you be surprised when freedom-of-speech focused tech gets used by them? https://www.theverge.com/2019/7/12/20691957/mastodon-decentralized-social-network-gab-migration-fediverse-app-blocking

Obviously, a few large instances dominate the user base for all practical purposes: https://kevq.uk/centralisation-and-mastodon/[]. And likely the network splits into hate-speech/non-hate-speech blacklist boundaries. And since the dominating closed networks will never lose user counts (???), the only instance that dominates will be the main hate speech one.

The flagship instance was https://mastodon.social[] and then in 2020 they closed signups for it and created a secondary https://mastodon.online[].

= LinkedIn
{c}
{parent=list-of-social-media}
{tag=microsoft-product}
{wiki}

\x[ciro-santilli]'s LinkedIn profile: https://www.linkedin.com/in/cirosantilli/ see also: \x[accounts].

LinkedIn fully complies with censorship imposed locally by the \x[chinese-government], and does so in a non-transparent way: https://cirosantilli.com/china-dictatorship/linkedin[].

It is hard to understand what the point of that website is, as it is basically just a more closed version of \x[facebook], but alas, it has flourished as the only place where people post more useful content compared to \x[twitter] and \x[facebook]. In any case, Ciro just applies the same unfollow policy to all of them: \x[aggressively-filter-your-social-media-follows].

Impossible to hide your current location?
* https://www.quora.com/How-can-I-hide-my-location-on-LinkedIn
* https://www.reddit.com/r/linkedin/comments/342uwu/hide_my_location/

= Twitter
{c}
{parent=list-of-social-media}
{wiki}

\x[ciro-santilli]'s accounts: \x[ciro-santilli-s-twitter-accounts]{full}.

https://twitter.com/zaikandongxi

= Money
{parent=social-technology}
{wiki}

= Asset
{parent=money}
{wiki}

= Tangible asset
{parent=asset}

= Intangible asset
{parent=asset}

= Cryptocurrency
{parent=money}
{wiki}

The key difficulties of cryptocurrencies are:
* how do transaction fees/guarantees/times compare to centralized systems such as credit cards:
  * https://bitcoin.stackexchange.com/questions/1261/is-it-possible-to-send-bitcoins-without-paying-a-fee "The Blockchain Scalability Problem & the Race for Visa-Like Transaction Speed" (2019)

    \Q[The battle for a scalable solution is the blockchain's moon race. Bitcoin processes 4.6 transactions per second. Visa does around 1,700 transactions per second on average (based on a calculation derived from the official claim of over 150 million transactions per day).]
  * https://towardsdatascience.com/the-blockchain-scalability-problem-the-race-for-visa-like-transaction-speed-5cce48f9d44
  Obviously, decentralized currencies cannot be cheaper to maintain than centralized ones, since with decentralization you still have to send network messages at all times, and instead of one party carrying out computations, multiple parties have to carry out computations.

  Crypto could however be close enough in price to centralized systems that it becomes viable, this can be considered.
* how can \x[government]{p} \x[tax] cryptocurrency. Notably, because:
  * taxation has to be \x[progressive-tax][progressive], e.g. \x[wealth-tax][we have to tax the rich more than the poor], and \x[anonymity] in transactions would weaken that
  * it would be even easier to move money into \x[fiscal-paradise]{p}, and then just say, oops, lost my passwords, those coins are actually gone
  See also \x[globalization-reduces-the-power-of-governments].
Until those problems are solved, the only real applications of cryptocurrency will by \x[illegal] activities, notably buying \x[drug]{p}, paying for \x[ransomware]. But also paying for anti-\x[censorship] services from inside \x[dictatorship]{p}. It is for this reason that \x[ciro-santilli] believes that \x[privacy-coin]{p} are the best investments until then. People concerned with their privacy are likely to more naturally make fewer larger payments to reduce exposure, and therefore transaction fees matter less, and can be seen as a reasonable privacy \x[tax]. Also drugs are expensive, just have a look at any \x[uncensored-onion-service-search-engine], so individual transactions tend to be large.

If crypto really takes off, 99.99% of people will only ever use it through some \x[cryptocurrency-exchange] (unless scalability problems are solved, and they replace \x[fiat-currency]{p} entirely), so the experience will be very similar to \x[paypal], and without "true" decentralization.

For those reasons, \x[ciro-santilli] instead believes that governments should issue \x[electronic-money], and maintain an open \x[api] that all can access instead. The centralized service will always be cheaper for \x[society] to maintain than any distributed service, and it will still allow for proper taxation.

Ciro believes that it is easy for people to be seduced by the \x[idealistic] promise that "cryptocurrency will make the world more fair and equal by giving everyone equal opportunities, away from the corruption of Governments". Such optimism that new \x[technology]{p} will solve certain key \x[social] problems without the need for constant \x[government] intervention and management is not new, as shown e.g. at \x[hypernormalisation-by-adam-curtis-2016] when he talks about the cyberspace (when the \x[internet] was just beginning): https://youtu.be/fh2cDKyFdyU?t=2375[]. Technologies can make our lives better. But in general, some of them also have to be managed.

In any case, cryptocurrencies are \x[bullshit], the true currency of the future is going to be \x[magic-the-gathering] cards. And \x[cirocoin].

One closely related thing that Ciro Santilli does think could be interesting exploring right now however, notably when having \x[monero]-like anonymity in mind, would be anonymous \x[electronic-voting].

TODO evaluate the possible application of cryptocurrency for international transfers:
* https://bitcoin.stackexchange.com/questions/25583/does-it-make-sense-to-use-bitcoin-to-transfer-money-to-yourself-internationally
Of course, the ideal solution would be for governments to just allow for people from other countries to create accounts in their country, and use the centralized API just like citizens. Having an account of some sort is of course fundamental to avoid money laundering/tax evasion, be it on the API, or when you are going to cash out the crypto into \x[fiat-currency][fiat]. So then the question becomes: suppose that governments are shit and never make such APIs, are international transfers just because traditional banks are inneficient/greedy? Or is it because of the inevitable cost of auditing transfers? E.g. how does Transferwise compare to Bitcoin these days? And if cryptocurrency is more desirable, why wouldn't Transferwise just use it as their backend, and reach very similar fees?

= Privacy coin
{parent=cryptocurrency}

Notable ones:
* \x[monero]

= Cryptocurrency mining
{parent=cryptocurrency}

= Mining pool
{parent=cryptocurrency-mining}
{wiki}

= Vanity address
{parent=cryptocurrency}

https://bitcoin.stackexchange.com/questions/20305/what-is-vanity-address

= List of cryptocurrencies
{parent=cryptocurrency}

= Bitcoin
{c}
{parent=list-of-cryptocurrencies}
{wiki}

= Bitcoin blockchain
{c}
{synonym}

How it works: \x[how-bitcoin-works]{full}.

Official website: https://bitcoin.org/en/

Reference implementation: \x[bitcoin-core].

= How Bitcoin works
{parent=bitcoin}

Here is a very direct description of the system:
* each transaction (transaction is often abbreviated "tx") has a list of inputs, and a list of outputs
* each input is the output of a previous transaction. You verify your identity as the indented receiver by producing a \x[digital-signature] for the \x[public-key] specified on the output
* each output specifies the \x[public-key] of the receiver and the value being sent
* the sum of output values cannot obvious exceed the sum of input values. If it is any less, the leftover is sent to the miner of the transaction as a transaction fee, which is an incentive for mining.
* once an output is used from an input, it becomes marked as spent, and cannot be reused again. Every input uses the selected output fully. Therefore, if you want to use an input of 1 BTC to pay 0.1 BTC, what you do is to send 0.1 BTC to the receiver, and 0.9 BTC back to yourself as change. This is why the vast majority of transactions has two outputs: one "real", and the other change back to self.
\x[code-sample-bitcoin-transaction-graph] illustrates these concepts:
* `tx0`: magic transaction without any inputs, i.e. either \x[genesis-block] or a coinbase mining reward. Since it is a magic transaction, it produces 3 Bitcoins from scratch: 1 in `out0` and 2 in `out1`
* `tx1`: regular transaction that takes:
  * a single input from `tx0 out0`, with value 1
  * produces two outputs:
    * `out0` for value 0.5
    * `out1` for value 0.3
  * this means that there was 0.2 left over from the input. This value will be given to the miner that mines this transaction.
  Since this is a regular transaction, no new coins are produced.
* `tx2`: regular transaction with a single input and a single output. It uses up the entire input, leading to 0 miner fees, so this greedy one might (will?) never get mined.
* `tx3`: regular transaction with two inputs and one output. The total input is 2.3, and the output is 1.8, so the miner fee will be 0.5

``
                   tx1                     tx3
  tx0            +---------------+       +---------------+
+----------+     | in0           |       | in0           |
| out0     |<------out: tx0 out0 |  +------out: tx1 out1 |
| value: 1 |     +---------------+  |    +---------------+
+----------+     | out0          |  |    | in1           |
| out1     |<-+  | value: 0.5    |  | +----out: tx2 out0 |
| value: 2 |  |  +---------------+  | |  +---------------+
+----------+  |  | out1          |<-+ |  | out1          |
              |  | value: 0.3    |    |  | value: 1.8    |
              |  +---------------+    |  +---------------+
              |                       |
              |                       |
              |                       |
              |    tx2                |
              |  +---------------+    |
              |  | in0           |    |
              +----out: tx0 out1 |    |
                 +---------------+    |
                 | out0          |<---+
                 | value: 2      |
                 +---------------+
``
{title=Sample \x[bitcoin] transaction \x[graph].}

Since every input must come from a previous output, there must be some magic way of generating new coins from scratch to bootstrap the system. This mechanism is that when the miner mines successfully, they get a mining fee, which is a magic transaction without any valid inputs and a pre-agreed value, and an incentive to use their power/compute resources to mine. This magic transaction is called a "https://en.bitcoin.it/wiki/Coinbase[coinbase transaction]".

The key innovation of Bitcoin is how to prevent double spending, i.e. use a single output as the input of two different transactions, via mining.

For example, what prevents me from very quickly using a single output to pay two different people in quick succession?

The solution are the blocks. Blocks \x[discretize] transactions into chunks in a way that prevents double spending.

A block contains:
* a list of transactions that are valid amongst themselves. Notably, there can't be double spending within a block.

  People making transactions send them to the network, and miners select which ones they want to add to their block. Miners prefer to pick transactions that are:
  * small, as less bytes means less hashing costs. Small generally means "doesn't have a gazillion inputs/outputs".
  * have higher transaction fees, for obvious reasons
* the ID of its parent block. Blocks therefore form a linear linked list of blocks, except for temporary ties that are soon resolved. The longest known list block is considered to be the valid one.
* a nonce, which is an integer chosen "arbitrarily by the miner"

For a block to be valid, besides not containing easy to check stuff like double spending, the miner must also select a nonce such that the hash of the block starts with N zeroes.

For example, considering the transactions from \x[code-sample-bitcoin-transaction-graph], the block structure shown at \x[code-sample-bitcoin-blockchain] would be valid. In it `block0` contains two transactions: `tx0` and `tx1`, and `block1` also contains two transactions: `tx2` and `tx3`.

``
 block0           block1             block2
+------------+   +--------------+   +--------------+
| prev:      |<----prev: block0 |<----prev: block1 |
+------------+   +--------------+   +--------------+
| txs:       |   | txs:         |   | txs:         |
| - tx0      |   | - tx2        |   | - tx4        |
| - tx1      |   | - tx3        |   | - tx5        |
+------------+   +--------------+   +--------------+
| nonce: 944 |   | nonce: 832   |   | nonce: 734   |
+------------+   +--------------+   +--------------+

``
{title=Sample \x[bitcoin] blockchain.}

The `nonce`s are on this example arbitrary chosen numbers that would lead to a desired hash for the block.

`block0` is the \x[genesis-block], which is magic and does not have a previous block, because we have to start from somewhere. The network is hardcoded to accept that as a valid starting point.

Now suppose that the person who created `tx2` had tried to double spend and also created another transaction `tx2'` at the same time that looks like this:
``
  tx2'
+---------------+
| in0           |
| out: tx0 out1 |
+---------------+
| out0          |
| value: 2      |
+---------------+
``
Clearly, this transaction would try to spend `tx0 out1` one more time in addition to `tx2`, and should not be allowed! If this were attempted, only the following outcomes are possible:
* `block1` contains `tx2`. Then when `block2` gets made, it cannot contain `tx2'`, because `tx0 out1` was already spent by `tx2`
* `block1` contains `tx2'`. `tx2` cannot be spent anymore
Notably, it is not possible that `block1` contains both `tx2` and `tx2'`, as that would make the block invalid, and the network would not accept that block even if a miner found a `nonce`.

Since hashes are basically random, miners just have to try a bunch of nonces randomly until they find one that works.

The more zeroes, the harder it is to find the hash. For example, on the extreme case where N is all the bits of the hash output, we are trying to find a hash of exactly 0, which is statistically impossible. But if e.g. N=1, you will in average have to try only two nonces, N=2 four nonces, and so on.

The value N is updated every 2 weeks, and aims to make blocks to take 10 minutes to mine on average. N has to be increased with time, as more advanced hashing hardware has become available.

Once a miner finds a nonce that works, they send their block to the network. Other miners then verify the block, and once they do, they are highly incentivized to stop their hashing attempts, and make the new valid block be the new parent, and start over. This is because the length of the chain has already increased: they would need to mine two blocks instead of one if they didn't update to the newest block!

Therefore if you try to double spend, some random miner is going to select only one of your transactions and add it to the block.

They can't pick both, otherwise their block would be invalid, and other miners wouldn't accept is as the new longest one.

Then sooner or later, the transaction will be mined and added to the longest chain. At this point, the network will move to that newer header, and your second transaction will not be valid for any miner at all anymore, since it uses a spent output from the first one that went in. All miners will therefore drop that transaction, and it will never go in.

The goal of having this mandatory 10 minutes block interval is to make it very unlikely that two miners will mine at the exact same time, and therefore possibly each one mine one of the two double spending transactions. When ties to happen, miners randomly choose one of the valid blocks and work on top of it. The first one that does, now has a block of length L + 2 rather than L + 1, and therefore when that is propagated, everyone drops what they are doing and move to that new longest one.

Bibliography:
* https://arstechnica.com/tech-policy/2020/12/how-bitcoin-works/

= Satoshi Nakamoto
{c}
{parent=bitcoin}
{wiki}

https://bitcoin.org domain registration: 2008-08-18 by https://www.namecheap.com[], an \x[american] company. But using a privacy oriented registrar: https://bitcoin.stackexchange.com/questions/89532/how-did-nakamoto-untraceably-pay-for-registering-bitcoin-org It is unknown how he could have paid anonymously, so it seems likely that the true identity could be obtained by \x[law-enforcement] if needed.

2008-08-22: private \x[wei-dai] email. Reproduced at https://www.gwern.net/docs/bitcoin/2008-nakamoto[] on \x[gwern-net] from address `satoshi@anonymousspeech.com`. Email provider shutting down entirely on 2021-09-30 as per https://archive.ph/wip/RRNKx[], homepage now juts contains useless Bitcoin stuff.

\x[bitcoin-whitepaper] announcement: 2008-10-31 https://www.metzdowd.com/pipermail/cryptography/2008-October/014810.html linking to http://www.bitcoin.org/bitcoin.pdf[], email sent from from satoshi@vistomail.com Claimed one year and a half development time. Provider apparently closed in 2014: https://www.reddit.com/r/Bitcoin/comments/3h80mi/vistomailcom_closed_and_domain_changed_owner_in/[], as of 2021 just reads:
\Q[Once upon a time a man paid me a visit in cyberspace, at this very domain. He planted a seed in our heads that would become the path we are walking today.]

Replies in November: https://www.metzdowd.com/pipermail/cryptography/2008-November/thread.html#14863 under satoshi@anonymousspeech.com claims source code shared privately by request at that point.

First open source release: 9 January 2009. Announcement: https://www.metzdowd.com/pipermail/cryptography/2009-January/014994.html "Windows only for now. Open source C++ code is included" Arghhhhhh how can those libertarians use \x[microsoft-windows]??? Had a \x[gui] already.

2011-04-23 Satoshi sent his last email ever, it was to Martti Malmi. https://www.nytimes.com/2015/05/17/business/decoding-the-enigma-of-satoshi-nakamoto-and-the-birth-of-bitcoin.html mentions:
\Q[May 2011 was also the last time Satoshi communicated privately with other Bitcoin contributors. In an email that month to Martti Malmi, one of the earliest participants, Satoshi wrote, "I've moved on to other things and probably won't be around in the future."]

How Satoshi hid his mining \x[ip-address]:
* https://bitcoin.stackexchange.com/questions/91187/was-the-first-full-node-ip-address-satoshis-and-how-did-shim-hide-it

Hal Finney:
* Jan 11, 2009 https://twitter.com/halfin/status/1110302988 "Running Bitcoin"

= Adam Back
{c}
{parent=satoshi-nakamoto}
{wiki}

= Hashcash
{c}
{parent=adam-back}
{wiki}

= David Chaum
{c}
{parent=satoshi-nakamoto}
{wiki}

= ecash
{c}
{parent=david-chaum}
{wiki}

= Hal Finney
{c}
{disambiguate=computer scientist}
{parent=satoshi-nakamoto}
{wiki}

= Nick Szabo
{c}
{parent=satoshi-nakamoto}
{wiki}

= bit gold
{c}
{parent=nick-szabo}

= Wei Dai
{c}
{parent=satoshi-nakamoto}
{title2=戴维}
{wiki}

= b-money
{c}
{parent=wei-dai}

= Bitcoin whitepaper
{c}
{parent=satoshi-nakamoto}

Released by \x[satoshi-nakamoto] on the early \x[mailing-list] discussions where \x[bitcoin] was announced.

Reuploaded into the blockchain itself: https://bitcoin.stackexchange.com/questions/35959/how-is-the-whitepaper-decoded-from-the-blockchain-tx-with-1000x-m-of-n-multisi/105574#105574 by using the \x[satoshi-uploader].

More conveniently available at: https://bitcoin.org/bitcoin.pdf nowadays.

= Bitcoin script
{c}
{parent=bitcoin}

= Bitcoin non-standard transaction
{c}
{parent=bitcoin-script}

Full list at: https://github.com/cirosantilli/bitcoin-strings-with-txids/blob/master/data/utxo_nonstandard

Bibliography:
* https://bitcoin.stackexchange.com/questions/5883/is-there-a-listing-of-strange-or-unusual-scripts-found-in-transactions/105392#105392
* https://bitcoin.stackexchange.com/questions/547/useful-alternative-bitcoin-transaction-scripts
* https://bitcoin.stackexchange.com/questions/35956/non-standard-tx-with-obscure-op-codes-examples/36037#36037 notably provides the amazing https://www.quantabytes.com/articles/a-survey-of-bitcoin-transaction-types

Interesting ones:

* 77822fd6663c665104119cb7635352756dfc50da76a92d417ec1a12c518fad69 0 `OP_IF OP_INVALIDOPCODE None None OP_ENDIF`. The second constant contains an ASCII patch `Remove (SINGLE|DOUBLE)BYTE` so presumably this is a proof of concept.
+
https://bitcointalk.org/index.php?topic=5231222.0 duscusses what happens if there is an invalid opcode in a branch that is not taken.
+
Discussed at: https://bitcoin.stackexchange.com/questions/35956/non-standard-tx-with-obscure-op-codes-examples
* 4373b97e4525be4c2f4b491be9f14ac2b106ba521587dad8f134040d16ff73af 0 `OP_ADD OP_ADD None OP_EQUAL OP_NOTIF OP_RETURN OP_ENDIF OP_FROMALTSTACK None OP_DROP` is provably unspendable because it always falls on `OP_FROMALTSTACK` but nothing is ever placed in the ALTSTACK

= Invalid Bitcoin script
{c}
{parent=bitcoin}

They appear to be included, with rationale that you can already include syntactically valid crap in an unprovable way: https://github.com/bitcoin/bitcoin/issues/320 Better then have syntactically invalid crap that is provable.

The outputs of this transaction seem to be the first syntactically incorrect scripts of the blockchain: https://blockchain.info/tx/ebc9fa1196a59e192352d76c0f6e73167046b9d37b8302b6bb6968dfd279b767?format=json[], found by parsing everything locally. The transaction was made in 2013 for 0.1 BTC, which then became unspendable.

The first invalid script is just e.g. "script":"01", which says will push one byte into the stack, but then ends prematurely.

= Bitcoin Core
{c}
{parent=bitcoin}

Reference implementation?

Links:
* https://github.com/bitcoin/bitcoin
* https://bitcoin.org

Executables provided:
* `bitcoin-qt`

= How to store data in the Bitcoin blockchain
{parent=bitcoin}

There are apparently two methods:
* in the script, e.g. as in the \x[genesis-block-message]
* in output addresses

Specific implementations:
* http://eternitywall.it/ Eternity Wall

  Launched 2015 https://www.newsbtc.com/news/bitcoin/eternity-wall-records-1150-documents-blockchain-first-year/

  TODO find sample transactions. Did it support images?

  Shutdown sometime after 2019, working archive: https://web.archive.org/web/20190417074034/https://eternitywall.it/ says "Sorry, the service is not properly working at the moment..." and last working message timestamped "April 16, 2019 8:02 PM GMT".

Bibliography:
* https://bitcoin.stackexchange.com/questions/32575/what-methods-are-currently-used-to-embed-additional-data-into-the-bitcoin-blockc
* https://bitcoin.stackexchange.com/questions/39347/how-to-store-data-on-the-blockchain

= How to extract data from the Bitcoin blockchain
{parent=bitcoin}

TODO: it would be cool to have something like https://bitcoinstrings.com[] but including the actual transactions:

Local methods:
* \x[bitcoin-strings-with-txids]
* https://bitcoin.stackexchange.com/questions/30295/how-can-i-search-for-transaction-text-on-the-blockchain
* https://bitcoin.stackexchange.com/questions/22500/is-there-a-lightweight-blockchain-parser-library-server/101472#101472
* https://github.com/alecalve/python-bitcoin-blockchain-parser
* https://bitcoin.stackexchange.com/questions/84266/wondering-how-to-use-bitcoin-parser
* https://github.com/bitcoinprivacy/Bitcoin-Graph-Explorer stores the blockchain in a database, and should allow more intelligent querying.

Further bibliography:
* https://bitcoin.stackexchange.com/questions/799/can-i-download-the-whole-block-chain-from-somewhere
* https://bitcoin.stackexchange.com/questions/68925/how-can-data-be-accessed-searched-for-in-a-blockchain
* https://bitcoin.stackexchange.com/questions/55188/download-single-and-specific-block-for-study-purposes
* https://www.fiverr.com/usefulshine/embed-your-logo-or-brand-art-on-blockchain user usefulshine from India embeds ASCII art for you into the blockchain starting at 260 dollars! XD

= Blockchain.info
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

TODO who owns it? Are they reliable?

* transaction hex data: https://blockchain.info/tx/930a2114cdaa86e1fac46d15c74e81c09eee1d4150ff9d48e76cb0697d8e1d72?format=hex
* disassembled transaction as JSON: https://blockchain.info/tx/930a2114cdaa86e1fac46d15c74e81c09eee1d4150ff9d48e76cb0697d8e1d72?format=json
* block by height:
  * https://blockchain.info/block/0?format=json
  * https://blockchain.info/block/0?format=hex

This helper dumps a transaction JSON to a binary:
``
bitcoin-tx-out-scripts() (
    # Dump data contained in out scripts. Remove first 3 last 2 bytes of
    # standard transaction boilerplate.
    h="$1"
    echo curl "https://blockchain.info/tx/${h}?format=json" |
    jq '.out[].script' tmp.json |
    sed 's/"76a914//;s/88ac"//' |
    xxd -r -p > "${h}.bin"
)
``

= bitcoin-strings-with-txids
{c}
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

https://github.com/cirosantilli/bitcoin-strings-with-txids

Set of scripts b \x[ciro-santilli], primarily created while researching \x[cool-data-embedded-in-the-bitcoin-blockchain].

= BitcoinStrings.com
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

https://bitcoinstrings.com has all `strings -n20` strings, we can obtain the whole thing and clean it up a bit with:
``
wget -O all.html https://bitcoinstrings.com/all
cp all.html all-recode.html
recode html..ascii all-recode.html
awk '!seen[$0]++' all-recode.html > all-uniq.html
``
`awk` to skip the gazillion "mined by message" repeats.

A lot of in that website stuff appears to be cut up at the 20 mark. As shown in \x[cool-data-embedded-in-the-bitcoin-blockchain/force-of-will], this is possibly because they didn't use `-w` in `strings -n20`, and the text after the newlines was less than 20 characters.

That website can be replicated by downloading the \x[bitcoin] blockchain locally, then:
``
cd .bitcoin/blocks
for f in blk*.dat; do strings -n20 -w $f | awk '!seen[$0]++' > ${f%.dat}.txt; done
tail +n1 *.txt
``

Remove most of the binary crap:
``
head -n-1 *.txt | grep -e '[. ]' | grep -iv 'mined by' | less
``

= Satoshi uploader
{c}
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

See also: https://bitcoin.stackexchange.com/questions/35959/how-is-the-whitepaper-decoded-from-the-blockchain-tx-with-1000x-m-of-n-multisi/105574#105574

By "Satoshi uploader" we mean the data upload script present in tx https://www.blockchain.com/btc/tx/4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17[4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17] of the \x[bitcoin-blockchain].

The uploader, and its accompanying downloader, are \x[python] programs stored in the blockchain itself. They are made to upload and download arbitrary data into the blockchain via RPC.

These scripts were notably used for: \x[cool-data-embedded-in-the-bitcoin-blockchain/illegal-content-of-block-229k]. The script did not maintain its popularity much after this initial surge up loads, likely all done by the same user: there are very very few uploads done after block 229k with the Satoshi uploader.

Our choice of name as "Satoshi uploader" is copied from \x[cool-data-embedded-in-the-bitcoin-blockchain/a-quantitative-analysis-of-the-impact-of-arbitrary-blockchain-content-on-bitcoin-by-matzutt-et-al-2018] because the scripts are Copyrighted Satoshi Nakamoto on the header comment, although as mentioned at \x[cool-data-embedded-in-the-bitcoin-blockchain/hidden-surprises-in-the-bitcoin-blockchain-by-ken-shirriff-2014] this feels very unlikely to be true.

A more convenient version of those scripts that can download directly from \x[blockchain-info] without the need for a full local node can be found at: https://github.com/cirosantilli/bitcoin-strings-with-txids/blob/master/download_tx_consts.py by using the `--satoshi` option. E.g. with it you can download the uploader script with:
``
./download_tx_consts.py --satoshi 4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17
mv 4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17.bin uploader.py
``

The scripts can be found in the blockchain at:
* uploader: tx 4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17 block 229991 reproduced at: https://gist.github.com/cirosantilli/ade4dde7c2f2f5020d792872681763e8

  The uploader https://gist.github.com/cirosantilli/ade4dde7c2f2f5020d792872681763e8#file-bitcoin-insertion-tool-py-L161[creates a standard Pay-to-PubkeyHash transaction] with a single output and data as a fake pubkey hash, and sends change to an address specified on the command line:
  ``
  ./bitcoinInsertionTool.py <data> <change-addr>
  ``
* downloader: tx 6c53cd987119ef797d5adccd76241247988a0a5ef783572a9972e7371c5fb0cc block 229991 reproduced at https://gist.github.com/cirosantilli/e90bd2e6c3fab25a20898e61e3ab3e90

  The downloader just https://gist.github.com/shirriff/64f48fa09a61b56ffcf9#file-bitcoin-file-downloader-py-L32[strips all operands], and keeps all data, notably where public key hashes would be normally put.

The uploader script uses its own cumbersome data encoding format, which we call the "Satoshi uploader format". The is as follows:
* ignore all script operands and constants less than 20 bytes (40 hex characters). And there are a lot of small operands, e.g. the uploader itself uses format https://www.blockchain.com/btc/tx/4b72a223007eab8a951d43edc171befeabc7b5dca4213770c88e09ba5b936e17 has a `OP_1`, data, `OP_3`, `OP_CHECKMULTISIG` pattern on every output script, so the `OP_1` and `OP_3` are ignored
* ignore the last output, which contains a real change transaction instead of arbitrary data. TODO why not just do what with the length instead?
* the first 4 bytes are the payload length, the next 4 bytes a \x[crc-32] signature. The payload length is in particular useful because of possible granularity of transactions. But it is hard to understand why a CRC-32 is needed in the middle of the largest \x[hash-tree] ever created by human kind!!! It does however have the adavantage that it allows us to more uniquely identify which transactions use the format or not.
This means that if we want to index certain file types encoded in this format, a good heuristic is to skip the first 9 bytes (4 size, 4 CRC, 1 `OP_1`) and look for file signatures.

Let's try out the downloader to download itself. First you have to be running a \x[bitcoin-core] server locally. Then, supposing `.bitcon/bitoin.conf` containing:
``
rpcuser=asdf
rpcpassword=qwer
server=1
txindex=1
``
we run:
``
git clone git://github.com/jgarzik/python-bitcoinrpc.git
git -C python-bitcoinrpc checkout cdf43b41f982b4f811cd4ebfbc787ab2abf5c94a
wget https://gist.githubusercontent.com/shirriff/64f48fa09a61b56ffcf9/raw/ad1d2e041edc0fb7ef23402e64eeb92c045b5ef7/bitcoin-file-downloader.py
pip install python-bitcoinrpc==1.0
BTCRPCURL=http://asdf:qwer@127.0.0.1:8332 \
  PYTHONPATH="$(pwd)/python-bitcoinrpc:$PYTHONPATH" \
  python3 bitcoin-file-downloader.py \
  6c53cd987119ef797d5adccd76241247988a0a5ef783572a9972e7371c5fb0cc
``
worked! The source of the downloader script is visible! Note that we had to wait for the sync of the entire blockchain to be fully finished for some reason for that to work.

Other known uploads in Satoshi format except from the first few:
* tx 89248ecadd51ada613cf8bdf46c174c57842e51de4f99f4bbd8b8b34d3cb7792 block 344068 see \x[ascii-art]
* tx 1ff17021495e4afb27f2f55cc1ef487c48e33bd5a472a4a68c56a84fc38871ec contains the ASCII text `e5a6f30ff7d43f96f61af05efaf96f869aa072b5a071f32a24b03702d1dcd2a6`. This number however is not a known transaction ID in the blockchain, and has no Google hits.

= Peter Todd's data upload scripts
{parent=satoshi-uploader}

https://github.com/cirosantilli/bitcoin-strings-with-txids/blob/master/data/in/0349.txt#L1930[tx 243dea31863e94dc2f293489db02452e9bde279df1ab7feb6e456a4af672156a] contains another upload script. The help reads:
\Q[Publish text in the blockchain, suitably padded for easy recovery with strings]

The script is: https://github.com/petertodd/python-bitcoinlib/blob/master/examples/publish-text.py

= Bitcoin blockchain `j(` upload system
{parent=how-to-extract-data-from-the-bitcoin-blockchain}

This is likely a system that uploads text to the blockchain.

One example can be seen on the \x[cool-data-embedded-in-the-bitcoin-blockchain/marijuana-plant].

Messages are uploaded one line per transaction, and thus may be cut up on the blk.txt, and possibly even out of order.

But because each line starts with `j(` you can generally piece things up regardless.

TODO identify. The first occurrence seems to be in tx e8c61e29c6b829e289f8d0fc95f9eb2eb00c89c85cfa3a9c700b15805451ae6a:
``
j(DOCPROOF@?pnvf=!;AG
``

= Services based on Bitcoin
{parent=bitcoin}

= Satoshi Dice
{c}
{parent=services-based-on-bitcoin}

https://en.bitcoin.it/wiki/Satoshi_Dice

Claims provably fair. https://satoshidice.com/fair clarifies what that means: they prove fairness by releasing a hash of the seed before the bets, and the actual seed after the bets.

As mentioned in bitcoin.it, it functions basically as \x[cryptocurrency-tumbler] in practice.

\Include[cool-data-embedded-in-the-bitcoin-blockchain]{parent=bitcoin}

= Genesis block
{c}
{parent=bitcoin}
{wiki}

https://blockchain.info/block-height/0?format=json

https://en.bitcoin.it/wiki/Genesis_block contains some comments on the data.

= Genesis block message
{c}
{parent=genesis-block}
{wiki}

https://blockchain.info/block-height/0?format=json

From that page we manually extract the hash `000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f` and then:
``
wget -O 0.hex https://blockchain.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f?format=hex
xxd -p -r 0.hex
``
and that does contain the famous genesis block string:
``
EThe Times 03/Jan/2009 Chancellor on brink of second bailout for banks
``
The JSON clarifies that the data is encoded in the `script` field of the transaction `input`:
``
{
      {
         "script":"04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73"
``

The extra `E` (0x45 in \x[ascii]) in `EThe Times` is just extra noise required by the script, we can break things up as:
``
04ffff001d0104 45 5468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73
``
where:
* `54` is `T`
* the `04ffff001d0104` part just doesn't show up on the terminal because it is not made of any printable characters.

The initial `04` is `OP_RETURN`

TODO what is actual the meaning of the `ffff001d010445` part?

TODO the `output` of the transaction has a jumbled script, likely just a regular output to get things going, can't be arbitrary like input.

The message proves a minimal starting date for the first mine.

And it hints that one of \x[bitcoin]'s motivation was the \x[financial-crisis-of-2007-2008], where banks were given bailouts by the government to not go under, which many people opposed as the crisis was their own fault in the first place.

A notable related stab is taken at \x[cool-data-embedded-in-the-bitcoin-blockchain/len-sassaman-tribute].

= Ethereum
{c}
{parent=list-of-cryptocurrencies}
{wiki}

= Monero
{c}
{parent=list-of-cryptocurrencies}
{tag=privacy-coin}
{wiki}

Cryptocurrency with focus on \x[anonymity].

As mentioned at \x[cryptocurrency]{full}, \x[ciro-santilli] believes that anonymity is the only feature that really matters on crypto coins, and therefore if he were to invest in crypto, he would invest in Monero or some other \x[privacy-coin].

https://localmonero.co/knowledge/monero-stealth-addresses?language=en gives an overview of the privacy mechanisms:
* \x[ring-signature]{p}, which hide the true output (sender)

  https://localmonero.co/knowledge/ring-signatures Gives an overview. Mentions that it is prone to heuristic attacks.

  Uses a system of decoys, that adds 10 fake possible previous outputs as inputs, in addition to the actual input.

  So the network only knows/verifies that one of those 11 previous outputs was used, but it does not know which one.

  It's a bit like having a built-in \x[cryptocurrency-tumbler] in every transaction.

  TODO so how do you know which previous outputs were spent or not?
* RingCT which hides the amounts.
* stealth addresses, which hides who you send to

  This forces receivers to scan try and unlock every single transaction in the chain to see if it is theirs or not.

  The sender therefore can know when the money is spent, but once again, not to whom it is being sent.

Based on https://en.wikipedia.org/wiki/CryptoNote and like \x[satoshi-nakamoto] created by under the pseudonym "Nicolas van Saberhagen" https://www.reddit.com/r/Monero/comments/7v2obe/offering_a_bounty_for_a_video_of_the_speech_by/

Developers tried to fight \x[application-specific-integrated-circuit] mining, but they failed it seems:
* https://www.coindesk.com/inside-moneros-last-ditch-effort-to-block-crypto-mining-asics
* https://news.bitcoin.com/report-claims-85-of-the-monero-network-dominated-by-asic-miners/
This can also be seen by the ridiculous hash rates on Ciro's test: \x[how-to-mine-monero].

\x[coinbase] has actually stayed away from trading it even as of 2019 when Monero was the third largest market capitalization crypto because of fear of regulatory slashback: https://decrypt.co/36731/heres-why-coinbase-still-hasnt-listed-monero[]. Although it must be said, the value of privacy crypto is greatly reduced when everyone is trading it on exchanges, which require a passport upload to work.

= How to mine Monero
{parent=monero}

\x[ubuntu] 20.10 as per https://xmrig.com/docs/miner/build/ubuntu[]:
``
sudo apt install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev
git clone https://github.com/xmrig/xmrig.git
mkdir xmrig/build && cd xmrig/build
cmake ..
make -j$(nproc)
``
At https://minexmr.com/#getting_started we see that all you then need is a single CLI command:
``
xmrig -o pool.minexmr.com:4444 -u <your-monero-address>
``
Seems simple, well done devs!

Benchmark on \x[ciro-santilli-s-hardware/lenovo-thinkpad-p51-2017] as per https://xmrig.com/docs/miner/benchmark[]:
``
./xmrig --bench=1M
``
gives:
``
948.1 h/s
``
which according to the https://minexmr.com \x[mining-pool] would generate 0.0005 XMR/day, which at the February 2021 rate of 140 USD/XMR is 0.07 USD/day. The minimum payout in that pool is 0.004 XMR so it would take 8 days to reach that.

So clearly, \x[application-specific-integrated-circuit] mining is the only viable way of doing this.

Some people considering \x[raspberry-pi]{p} also conclude obviously that it is useless at a 10H/s rate:
* https://monero.stackexchange.com/questions/6862/could-i-use-a-raspberry-pi-to-mine-monero
* https://raspberrypi.stackexchange.com/questions/49552/the-hashrate-of-the-raspberry-pi-2-and-3/87252#87252

= Cryptocurrency exchange
{parent=cryptocurrency}
{wiki}

= Off-chain transaction
{parent=cryptocurrency-exchange}

https://en.bitcoin.it/wiki/Off-Chain_Transactions

= List of cryptocurrency exchanges
{parent=cryptocurrency-exchange}

= Binance
{c}
{parent=list-of-cryptocurrency-exchanges}
{wiki}

= Coinbase
{c}
{parent=list-of-cryptocurrency-exchanges}
{wiki}

= Mt. Gox
{c}
{parent=list-of-cryptocurrency-exchanges}
{wiki}

= Cryptocurrency tumbler
{parent=cryptocurrency}
{wiki}

= Fiat currency
{parent=money}
{wiki}

A useless piece of paper (or \x[digital-currency][digital version] of it) that you can pay \x[tax]{p} with :)

As opposed to:
* 2020 \x[cryptocurrency]{p}, while \x[government]{p} still don't accept them for taxes, as well as other \x[asset]{p} that are also not accepted for taxes (i.e. most assets)
* physical currencies that have intrinsic material value, e.g. \x[gold] coins

= Digital currency
{parent=fiat-currency}
{wiki}

= Electronic money
{parent=digital-currency}

Our minimal definition of "electronic money" is the following.

Instead of creating \x[legal-tender] such as \x[dollar]{p} as banknotes or transactions in some complex obscure banking system, the \x[government] offers an official simple centralized API that represents it instead.

Each citizen or legal entity has an account there, and transfers between registered users are just simple API calls.

 So for example you would e able to put all your money in the government account instead of using useless banks. And then you would invest it as you want with the investment company of your choice, without tying the "my money is here" with "this is the best investment" aspects of banks.

= GNU Taler
{c}
{parent=electronic-money}

Centralized system that still attempts some level of privacy.

In it, a central bank issue tokens that are stored offline in your cell phone, a bit like cash bank notes.

When you take those tokens, a corresponding amount gets removed from your bank account, a bit like cash bank notes.

When a transaction is made, tokens are put into a spent token list via central API, and cannot be double spent thereafter. The corresponding ammount is then added to the bank account of the receiver. This also means that offline transactions are not possible.

When emitting, the bank signs the token with their private key. When spending, the bank checks that signature.

How do we prevent the bank from logging which token goes to which user besides trusting that they are running the software we whink they are running? Notably, couldn't timing be used to identify that?

= Dollar
{c}
{parent=fiat-currency}
{title2=\$}
{wiki}

= Euro
{c}
{parent=fiat-currency}
{wiki}

\Video[https://www.youtube.com/watch?v=rhSg9X3q2gc]
{title=The \x[euro] Has Never Been More Problematic by \x[yanis-varoufakis] (2018)}
{description=Talk given at the \x[oxford-union]. https://youtu.be/cCA68U3P_Z8?t=1288 describes the problem with the Uero a bit better.}

= Pound sterling
{c}
{parent=fiat-currency}
{title2=£}
{wiki}

= Pound
{synonym}

= Decimal day
{parent=pound-sterling}
{wiki}

\Video[https://www.youtube.com/watch?v=dip8eHw3guo]
{title=Predecimal Currency: The Nightmare in Your Pocket by BritMonkey (2021)}

= Payment system
{parent=money}
{wiki}

= PayPal
{c}
{parent=money}
{wiki}

You need separate accounts for different countries: https://money.stackexchange.com/questions/73361/two-banks-in-two-countries-is-it-possible-to-have-a-unique-paypal-account it's a pain.

= Organization
{parent=social-technology}
{wiki}

= Company
{parent=organization}
{wiki}

All companies with investors are \x[evil], make no mistake.

They may have nice looking save the world charity campaigns, but once you get even close to affecting their revenue stream, the axe falls.

Some level of \x[governments-have-lost-all-power-to-companies][Government intervention is needed].

It is just a question of business model: some business models are eviler than others. \x[microsoft-windows][Making people pay for operating systems] being possible the most evil of all.

One thing must be said however. You can learn a lot by working in a good company, because it ends up putting you in contact with practical real problems that you wouldn't otherwise see by just doing your own random low-tech startup. This is especially valuable if said company is also enlightened enough to use and contribute back to \x[open-source-software], thus improving the world and paying back the moral debt of using other people's work for free.

= Technology company
{parent=company}
{wiki}

= Tech company
{synonym}

= Big tech
{parent=technology-company}
{wiki}

= List of technology companies
{c}
{parent=technology-company}
{wiki}

= Red Hat
{c}
{parent=list-of-technology-companies}
{wiki}

= Truth Happens advertisement by Red Hat
{parent=red-hat}
{tag=the-best-advertisements-of-all-time}

\x[video-1984-macintosh-advertisement-by-apple-1984] comes to mind.

TODO year. This was a reply to \x[microsoft] anti-\x[linux] propaganda it seems: https://www.ubuntubuzz.com/2012/03/truth-happens-redhats-legendary-reply.html

TODO date.

Trascript from: https://www.dailymotion.com/video/xw3ws
\Q[
The world is flat. Earth is the centre of the universe. Fact - until proven otherwise.\br
Despite ignorance. Despite ridicule. Despite opposition. Truth happens.

Despite ignorance. \br
The telephone has too many shortcomings to be seriously considered as a means of communication. /Western Union 1876/\br
In 1899 the US Patent Commissioner stated, everything that can be invented has been invented.

Despite ridicule.\br
The phonograph has no commercial value at all. /Thomas Edison 1880/\br
The radio craze will die out in time. /Thomas Edison 1922/\br
The automobile has practically reached the limit of its development. /Scientific American 1909/

Despite it all truth happens.\br
Man will not fly for fifty years. /Orville Wright 1901/\br
The rocket will never leave the Earth's atomosphere. /New York Times 1936/\br
There is a world market for maybe five computers. /IBM's Thomas Watson 1943/\br
640K Ought to be enough for anybody. /Bill Gates 1981/

First they ignore you...\br
\x[linux] is the hype du jour. /Gartner Group 1999/

Then they laugh at you...\br
We think of linux as competitor in the student and hobbyist market. But I really don't think in the commercial market we'll see it in any significant way. /Bill Gates 2001/

Then they fight you...\br
Linux isn't going away. Linux is a serious competitor. We will rise to this challenge. /Steve Ballmer 2003/

Then you win... /Mohandas Gandhi/

You are here.\br
Red Hat Linux. IBM.
]

\Video[https://www.youtube.com/watch?v=IE00uo3o_MU]
{title=Truth Happens \x[advertisement] by \x[red-hat]}

= Siemens
{c}
{parent=list-of-technology-companies}
{wiki}

= Conglomerate
{disambiguate=company}
{parent=company}

= Lifestyle business
{parent=company}
{wiki}

= Startup company
{parent=company}
{wiki}

= Startup
{synonym}

= Unicorn
{disambiguate=startup}
{parent=startup-company}

= Venture capital
{parent=startup-company}

= List of companies
{parent=company}
{wiki}

= Apple Inc.
{c}
{parent=list-of-companies}
{wiki}

= Apple
{c}
{synonym}

* owns the entire stack and creates high quality highly optimized systems
* creates closed lock-in systems without inter-operability and actively fights users from owning their devices
* do they give back enough to \x[open-source], or do they leech mostly?
  * https://www.reddit.com/r/linux/comments/u6avq/does_apple_contribute_to_the_open_source_community/ on \x[reddit]
  * https://www.quora.com/Has-Apple-contributed-to-any-open-source-projects on \x[quora]

\Video[https://www.youtube.com/watch?v=G2GfKUi9ghM]
{title=The Mapple Store and Steve Mobs from \x[the-simpsons].}

= Think different
{c}
{parent=apple-inc}
{tag=it-s-popular-now-it-sucks}
{wiki}

Of course, this only made sense when Apple was more of an underdog to \x[ibm], and \x[ciro-santilli] greatly \x[ciro-santilli-s-self-perceived-creative-personality][admires their defiance of the norm].

As of 2020 however, \x[apple] is kind of on the top of the mobile world, and Think different simply makes no sense anymore, notably because it relies on \x[closed-source-offline-software-used-by-millions].

\x[it-s-popular-now-it-sucks] comes to mind.

This is a trap every company that prides itself on it's "alternative culture" sets for itself. If they succeed, they could become the norm.

\Image[https://raw.githubusercontent.com/cirosantilli/media/master/Think_different_with_Tux.png]
{title=Take on Apple's \x[think-different] logo with \x[tux-mascot] instead of the Apple logo.}
{description=In 2020, to think different, is to think \x[open-knowledge]. Work by \x[ciro-santilli], based on https://en.wikipedia.org/wiki/File:Tux.svg[].}

\Image[https://raw.githubusercontent.com/cirosantilli/media/master/Apple_Think_different_1976_Think_mainstream_2011.png]
{title=1976 Think different. 2011 Think mainstream.}
{description=Cropped from https://wallpapersafari.com/w/RqYUEj[].}

\Video[https://www.youtube.com/watch?v=VtvjbmoDx-I]
{title=1984 \x[macintosh] \x[advertisement] by \x[apple] (1984)}
{description=This ad suggests that Apple was the new thinker that would destroy \x[ibm], as \x[steve-jobs] said it himself when introducing the ad: https://www.youtube.com/watch?v=zlQvMp5rB6g[]. And then \x[apple] became \x[ibm] in the 2000's starting with the launch of the \x[ipod] and then leading up to the \x[iphone].}

= Here's to the crazy ones
{c}
{parent=think-different}
{tag=being-naughty-and-creative-are-correlated}

https://en.wikipedia.org/w/index.php?title=Think_different&oldid=990983100#Television

\Q[Because the people who are crazy enough to think they can change the world are the ones who do.]

\Video[https://www.youtube.com/watch?v=5sMBhDv4sik]

= Apple Inc product
{c}
{parent=apple-inc}

= iPod
{c}
{parent=apple-inc-product}
{title2=2001}
{wiki}

Was a direct tech predecessor to the \x[iphone].

= iPhone
{c}
{parent=apple-inc-product}
{wiki}

= Macintosh
{c}
{parent=apple-inc-product}
{title2=Mac, 1984-}
{wiki}

= MacOS
{c}
{parent=apple-inc-product}
{wiki}

Nice looking and expensive operating system by \x[apple]. \x[ciro-santilli] believes that:
* if you want to be ripped off, just use \x[microsoft-windows] which has more software available
* or if you want to attain \x[ourbigbook-com/motivation][Enlightenment], just use \x[linux], which is free and open source

The story of how OS X was ported to x86 from PowerPC with large initial work up to boot by a single man in the year 2000, John Kullmann, is really worth reading: https://www.quora.com/Apple-company/How-does-Apple-keep-secrets-so-well/answer/Kim-Scheinberg on \x[quora], see also:
* https://www.theregister.co.uk/2012/06/11/apple_project_marklar_secrets/
* https://en.wikipedia.org/wiki/Apple%27s_transition_to_Intel_processors

= Is the MacOS kernel open source?
{parent=macos}

Can you do anything with it? What's the license?
* https://github.com/apple/darwin-xnu
* https://en.wikipedia.org/wiki/XNU
* https://stackoverflow.com/questions/43136124/how-to-boot-xnu-kernel

= Steve Jobs
{c}
{parent=apple-inc}
{wiki}

Co-founder of \x[apple].

Is Jobs \x[evil]? Is he interesting? Undoubtedly.

https://www.folklore.org/ProjectView.py?project=Macintosh&characters=Steve%20Jobs[] has some good anecdotes about him.

\x[ciro-santilli] is especially fond of: \x[jobs-and-wozniak-s-blue-box].

Good quotes:
* "Try to have a nice family life, have fun, save a little money." quote at: \x[don-t-be-a-pussy]{full} and the related \x[jobs-and-wozniak-s-blue-box] attitude
* "Steve Jobs Insult Response" on \x[backward-design]
* Steve Jobs Pixar office design philosophy: great ideas happen from chance meetings on corridors, not in board rooms: https://officesnapshots.com/2012/07/16/pixar-headquarters-and-the-legacy-of-steve-jobs/
* \x[steve-jobs-2005-stanford-commencement-address]
* \x[here-s-to-the-crazy-ones]: Ciro would like to believe that this is mostly written by Jobs, but apparently it was just written by an advertisement agency. Good job though. 

You must watch this: \x[video-bill-gates-vs-steve-jobs-by-epic-rap-battles-of-history-2012].

Evil deeds:
* not recognizing own daughter for many years??? https://en.wikipedia.org/wiki/Lisa_Brennan-Jobs
* lying to \x[steve-wozniak] about the 5000 dollar Atari bonus: https://web.archive.org/web/20110612071502/http://www.woz.org/letters/general/91.html
* not giving stock to early garage employees: https://www.businessinsider.com/steve-wozniak-gave-early-apple-employees-10-million-in-stock-2014-9 OK, not a \x[legal] obligation. But... love?

= Steve Jobs quote on saving lives with a faster boot
{c}
{parent=steve-jobs}

https://www.folklore.org/StoryView.py?story=Saving_Lives.txt

This idea also comes up in other sources of course.

\Video[http://youtube.com/watch?v=m8Mc-38C88g]
{title=https://en.wikipedia.org/wiki/Margin_Call[Margin Call (2011)] bridge scene.}

= Steve Jobs customers don't know what they want quote
{parent=steve-jobs}
{c}

TODO clear attribution source:
\Q[Some people say, "Give the customers what they want." But that's not my approach. Our job is to figure out what they're going to want before they do. I think Henry Ford once said, "If I'd asked customers what they wanted, they would have told me, 'A faster horse!'" People don't know what they want until you show it to them. That's why I never rely on market research. Our task is to read things that are not yet on the page.]

= Steve Wozniak
{c}
{parent=steve-jobs}
{wiki}

= Steve Wozniak plays magic the gathering
{c}
{parent=steve-wozniak}

\x[ciro-santilli] likes \x[magic-the-gathering] and he was pleased when he learned that \x[steve-wozniak] does too, and has an expensive collection: https://redsunsoft.com/2019/03/how-a-post-to-play-magictg-turned-into-an-afternoon-with-the-woz/

= Jobs and Wozniak's blue box
{c}
{parent=steve-jobs}

https://en.wikipedia.org/wiki/Blue_box

\x[being-naughty-and-creative-are-correlated]{c}.

Some have actually been preserved: https://en.wikipedia.org/wiki/File:Blue_Box_in_museum.jpg

= Amazon
{c}
{disambiguate=company}
{parent=list-of-companies}
{wiki}

= Amazon
{c}
{synonym}

= Amazon Prime Video
{c}
{parent=amazon-company}
{wiki}

As of 2021, \x[ciro-santilli] feels strongly that Amazon originals are so much sillier compared to \x[netflix] ones in average.

Of course, everything pales in comparison to \x[the-criterion-collection].

= Amazon Web Services
{c}
{parent=amazon-company}
{wiki}

= AWS
{c}
{synonym}

\Include[google]{parent=list-of-companies}

= IBM
{c}
{parent=list-of-companies}
{wiki}

As of the 2020's, a slumbering giant.

But the pre-Internet impact of IBM was insane! Including notably:
* \x[sql]
* \x[ibm-generalized-markup-language], which is a predecessor to \x[xml] and \x[html]

= Nvidia
{c}
{parent=list-of-companies}
{wiki}

Open source \x[driver-software]{p}/hardware interface specification??? E.g. on \x[ubuntu], a large part of the nastiest UI breaking bugs \x[ciro-santilli] encountered over the years have been GPU related. Do you think that is a coincidence??? E.g. \x[ubuntu-21-10-does-not-wake-up-from-suspend].

\Video[https://www.youtube.com/watch?v=_36yNWw_07g]
{title=\x[linus-torvalds] saying "Nvidia Fuck You" (2012)}

= Netflix
{c}
{parent=list-of-companies}
{wiki}

= Oracle Corporation
{c}
{parent=list-of-companies}
{wiki}

= Oracle
{c}
{synonym}

\x[evil] company that desecrated the beauty created by \x[sun-microsystems], and was https://en.wikipedia.org/wiki/Google_v._Oracle_America[trying to bury Java once and or all in the 2010's].

Their database is already matched by \x[open-source] e.g. \x[postgresql], and https://en.wikipedia.org/wiki/Enterprise_resource_planning[ERP] and https://en.wikipedia.org/wiki/Customer_relationship_management[CRM] specific systems are boring.

Oracle basically grew out of selling one of the first \x[sql] implementations in the late 70's, and notably to the \x[united-states-government] and particularly the \x[cia]. They did deliver a lot of value in those early pre-internet days, but now \x[open-source] is and will supplant them entirely.

= Sun Microsystems
{c}
{parent=oracle-corporation}
{wiki}

Although \x[ciro-santilli] is a bit past their era, there's an aura of technical excellence about those people. It just seems that they sucked at business. Those open source hippies. Erm, wait.

= Business-to-business
{parent=company}
{title2=B2B}
{wiki}

= Entrepreneur
{parent=company}

= Elon Musk
{c}
{parent=entrepreneur}
{wiki}

\x[ciro-santilli][Respect on the technical side].

But the way he treated his first wife, is very very weird, incomprehensible: https://www.marieclaire.com/sex-love/a5380/millionaire-starter-wife/

\Video[https://www.youtube.com/watch?v=IcIzaqSnBdA]
{title=The REAL Reason Why Tesla Made All Patents Open-Source by The not so boring Man (2021)}
{description=Supercut from various interviews/presentations in which Elon saying that Tesla has \x[open-source] patents and pro open source stuff. Can we trust it? Maybe.}

= Xavier Niel
{c}
{parent=entrepreneur}
{wiki}

\Video[https://www.youtube.com/watch?v=oBPMFcURM_Y]
{title=Xavier Niel, Iliad - Free: Je suis un casseur de monopoles by DECIDEURSTV (2011)}
{description=Title translation: "I'm a hunter of monopolies".}

= Internal communications
{parent=organization}
{wiki}

= Need to know
{parent=internal-communications}
{wiki}

= Nonprofit organization
{parent=organization}
{wiki}

= Not-for-profit
{synonym}
{title2}

= Charitable organization
{parent=nonprofit-organization}
{wiki}

= Educational charitable organization
{parent=charitable-organization}
{wiki}

In this section we list charitable organizations that support \x[education] or research:
* https://elifesciences.org/labs by \x[elife]
* https://www.digital-science.com/investment/catalyst-grant/ by Shuttleworth foundation.
* https://en.wikipedia.org/wiki/PLOS
* https://www.chanzuckerberg.com/ Zuck has already invested in education previously:
  * https://www.forbes.com/sites/kathleenchaykowski/2018/02/14/zuckerberg-invests-in-on-demand-education-site-varsity-tutors-in-50-million-fundraise/#1c9b6b385dab
  * http://uk.businessinsider.com/mark-zuckerberg-schools-education-newark-mayor-ras-baraka-cory-booker-2018-5
* https://openuk.uk/
* https://bccampus.ca/ \x[cc-by], \x[the-missing-link-between-basic-and-advanced][lower undergrad stuff], but better than nothing.

  Hmm, some/all of it is a copy of \x[libretexts] but with URLs shorter than a million characters, e.g.:
  * https://opentextbc.ca/universityphysicsv3openstax/chapter/de-broglies-matter-waves/
  * https://phys.libretexts.org/Bookshelves/University_Physics/Book%3A_University_Physics_(OpenStax)/Book%3A_University_Physics_III_-_Optics_and_Modern_Physics_(OpenStax)/06%3A_Photons_and_Matter_Waves/6.06%3A_De_Broglies_Matter_Waves
* https://en.wikipedia.org/wiki/Peter_Lampl[Sir Peter Lampl], https://en.wikipedia.org/wiki/Education_Endowment_Foundation[Education Endowment Foundation] and https://en.wikipedia.org/wiki/Sutton_Trust[Sutton Trust]

= Crankstart Foundation
{c}
{parent=educational-charitable-organization}

https://crankstart.org

At https://crankstart.org/grants the organization's website describes mostly California activities, but they do at least also act in the \x[university-of-oxford], see: \x[university-of-oxford-study-costs]{full}.

Presumably the name refers to crank starting an old car, as in helping out those in difficulty like poor students get started in life. But is also an obscure slang for https://www.urbandictionary.com/define.php?term=Crank%20start[a type of handjob] according to \x[urban-dictionary].

= KIPP
{c}
{parent=educational-charitable-organization}
{wiki}

= IntoUniversity
{c}
{parent=educational-charitable-organization}
{wiki}

= LibreTexts
{c}
{parent=educational-charitable-organization}
{wiki}

https://libretexts.org

Appears to have mixed licenses? E.g.:
* https://phys.libretexts.org/Bookshelves/University_Physics/Book%3A_University_Physics_(OpenStax)/Book%3A_University_Physics_III_-_Optics_and_Modern_Physics_(OpenStax)/06%3A_Photons_and_Matter_Waves/6.06%3A_De_Broglies_Matter_Waves is \x[cc-by]
* but we had seen another one that was \x[cc-by-nc-sa]

Appears to be \x[uc-davies]-based mostly.

= Open Knowledge Foundation
{c}
{parent=educational-charitable-organization}
{wiki}

= Saylor Academy
{c}
{parent=educational-charitable-organization}
{wiki}

As of 2021, mostly useless business courses: https://learn.saylor.org

One redeeming factor however: they have a \x[github]: https://github.com/saylordotorgo

https://saylordotorg.github.io/text_introduction-to-economic-analysis/s00-license.html

They seem to favor the dreaded \x[cc-by-nc-sa].

The founder Sayler looks a bit crooked: https://en.wikipedia.org/wiki/Michael_J._Saylor#SEC_investigation[], \x[rich-people-who-create-charitable-prizes-are-often-crooked] comes to mind.

= Simons Foundation
{c}
{parent=educational-charitable-organization}
{wiki}

= Teach For All
{c}
{parent=educational-charitable-organization}
{wiki}

= Brazillian educational charitable organization
{parent=charitable-organization}
{wiki}

= Fundação Estudar
{parent=brazillian-educational-charitable-organization}

* https://pt.wikipedia.org/wiki/Fundação_Estudar
* https://www.estudar.org.br/

\Video[https://www.youtube.com/watch?v=rhaeYj7cln0]
{title=What I learned in \x[harvard] part 1 by Jorge Paulo Lemann (2012)}
{description=\x[portuguese-language] talk about his experiences. A bit bably, but has a few good comments:
* \Q[You don't learn the Harvard experience, you absorb it.]
* \Q[Being amongst excellent people makes you learn what excelent people are like, just like only by tasting many different types of wine can you know what good wine is like.]
  This one does have bias danger though. But detecting greatness, is as type of bias arguably.
}

= Jorge Paulo Lemann
{c}
{parent=fundacao-estudar}
{wiki}

= Lemann Center
{c}
{parent=fundacao-estudar}
{wiki}

https://lemanncenter.stanford.edu

= Nonprofit impact measurement
{parent=nonprofit-organization}

It is harder to measure the impact of nonprofits than of for-profits, since you can't just look at their bank balances.

This is one fundamental difficulty of nonprofit work, how to prove that you deserve the investments and not someone else.

= Public relations
{parent=organization}
{wiki}

= Secret society
{parent=organization}
{wiki}

= Prize
{parent=social-technology}
{wiki}

Generally, prizes that pay big lumps of money to well established individuals are a bit useless, it would be better to pay smaller sums to struggling beginners in the field, of which there are aplenty.

The most important part about prizes should not be the money, nor the recognition, but rather explaining better what the laureates did. In this, most prizes fail. Thus \x[ciro-santilli]'s project idea: \x[project-to-explain-each-nobel-prize-better].

= Breakthrough Prize
{c}
{parent=prize}
{wiki}

By \x[zuckerberg]. The selection seems decent. And \x[natural-science]{p} only, which is good. A bit more application oriented than the \x[nobel-prize] it seems, e.g. 2022 separates physics and fundamental physics.

Appears to explain award reasoning even worse than the \x[nobel-foundation].

= Oliver E. Buckley Condensed Matter Prize
{c}
{parent=prize}
{title2=1953-}
{wiki}

= Copley Medal
{c}
{parent=prize}
{title2=1731-}
{wiki}

The \x[royal-society]'s \x[nobel-prize].

https://royalsociety.org/grants-schemes-awards/awards/copley-medal/ says it is now open to international citizens, but having a quick look at the 2010 awards still suggests that it is very British centric, or at least anglophone centric, much like the society fellowship itself. That's likely the reason why the Nobel prize won, being much more international from the start.

Good background: https://www.theguardian.com/science/the-h-word/2016/oct/07/prize-science-medal-history-nobel

Kyoto Prize

= Fields Medal
{c}
{parent=prize}
{title2=1935-}
{wiki}

The \x[nobel-prize] of \x[mathematics]!

That 15,000 canadian dollar prize though, what a joke!!

= Kyoto medal
{c}
{parent=prize}
{title2=1985-}
{wiki}

\Include[nobel-prize]{parent=prize}

= Thiel Fellowship
{c}
{parent=prize}
{wiki}

\x[ciro-santilli] approves of this one, related: \x[free-gifted-education]{full}.

= Turing Award
{c}
{parent=prize}
{wiki}

The \x[nobel-prize] of \x[computer] \x[software] or \x[computer-hardware][hardware]!

More like a "lifetime achievement" though, rather than the Nobel Prize, which tends to be for more specific achievements.

= Knowledge olympiads
{parent=prize}

E.g. https://en.wikipedia.org/wiki/International_Mathematical_Olympiad[International Mathematical Olympiad], https://en.wikipedia.org/wiki/International_Physics_Olympiad[International Physics Olympiad], https://en.wikipedia.org/wiki/Competitive_programming[competitive programming], etc.

Events that trick young kids into thinking that they are making progress, but only serve to distract them from what really matters, which is to dominate a \x[state-of-the-art] as fast as possible, contact researches in the area, and publish truly \x[novel-result]{p}.

Financially backed by high schools trying to make ads showing how they will turn your kids into geniuses (but also passionate teachers who fell into this hellish system), or companies who hire machines rather than entrepreneurs.

The most triggering thing possible is when programming competitions don't release their benchmarks as \x[open-source-software] afterwards: at least like that they might help someone to solve their real world problems. Maybe.

On a related note, hackathons are also mostly useless. Instead of announcing a hackathon, just announce a web forum where people with similar interests can talk to one another instead, and let them code it out on \x[github] if they want to. Restricting intensive development to a few days tends to produce crappy code and not reach real goals.

Some https://en.wikipedia.org/wiki/Artur_Avila[irrelevant people] highlight https://youtu.be/jz-41LxrI_M?t=46[that knowledge Olympiads can have good effects], because they are "an opportunity to meet university teachers and their research organizations". Ciro's argument is just that there are much more efficient ways to achieve those goals.

= Competitive programming
{parent=knowledge-olympiads}
{wiki}

A waste of time like the rest of the \x[knowledge-olympiads].

= Competitive programming website
{parent=competitive-programming}

= LeetCode
{c}
{parent=competitive-programming-website}

https://leetcode.com

= Grinding for software interviews
{parent=knowledge-olympiads}

If your kids are about to starve, fine, do it.

But otherwise, \x[ciro-santilli] will not, ever, spend his time drilling programmer competition problems to join a \x[company], life is too short for that.

Life is too short for that. Companies must either notice that you can make amazing \x[open-source-software] projects or contributions, and hire you for that, or they must \x[fuck] off.

Companies must either notice that you can make amazing projects or contributions, and hire you for that, or they must \x[fuck] off.

= Weekend
{parent=social-technology}

Days of the week where you don't do what you set out to do. And yet, it is in those days that you save your sanity, and possibly the world. Wait, this sounds exactly like a week day?

\Image[https://web.archive.org/web/20200718073243if_/https://pbs.twimg.com/media/DWObYfMU0AAgJJP?format=jpg&name=small]
{title=Calvin and Hobbes "Oh No! I overslept! I gotta get up!" cartoon.}
{source=https://twitter.com/calvinn_hobbes/status/964785603467395072}

= Robotics
{parent=technology}
{wiki}

= Robot
{synonym}

= Robot Operating System
{c}
{parent=robotics}
{tag=open-source-software}
{wiki}

= Transport
{parent=technology}
{wiki}

= Bicycle
{parent=transport}
{wiki}

= Bicycle tire sizes
{parent=bicycle}
{wiki}

The images you have to have in mind are:
* https://en.wikipedia.org/wiki/File:Sezione_cerchione_bicicletta.svg
* https://cdn-0.sheldonbrown.com/images/bead-seat-diameter.jpg

Yes, Sheldon he has separate American and British English versions of pages!!!
* https://www.sheldonbrown.com/tyre-sizing.html
* https://www.sheldonbrown.com/tire-sizing.html

For example, \x[ciro-santilli-s-hardware/kross-bicycle-2017] had a Schwalbe tyre with markings:
\Q[42-622 (28 x 1.60, 700x40C)]
When inflated, the tires were about 3.5cm wide as measured with a ruler.

And the https://shop.mavic.com/en-gb/a-319-j24500.html#1028=3283&1035=3501[Mavic A319 rim] had markings:
\Q[622x19C]

In this:
* ISO (Etrto): 42-622. So:
  * 42 is the inner rim width. The actual inflated tire is going to be even wider.
  * 622 is the bead seat diameter. The actual inflated tire is going to be even wider.
* imperial: 28 x 1.60
* French: 700x40C:
  * meaning of the "C" asked at: https://bicycles.stackexchange.com/questions/16190/what-does-the-c-in-bicycle-tire-size-mean
    * https://www.sheldonbrown.com/tire-sizing.html#french says A is larger than B which is larger than C, and C means 622 mm

= Shimano
{c}
{parent=bicycle}
{wiki}

Manuals: https://si.shimano.com/

= Shimano product lines
{c}
{parent=shimano}

Overview of Shimano brands 2018: https://www.evanscycles.com/coffeestop/advice/the-complete-guide-to-shimanos-mountain-bike-groupsets-and-their-hierarchy

* Shimano Altus RD-M310: almost cheapest MTB
* Shimano Acera RD-M360: second cheapest MTB
* Shimano Alivio RD-M410: third cheapest MTB
* Shimano Claris: entry 8-speed road bike https://www.youtube.com/watch?v=6dFQDDg6Wt0
* Shimano Sora: 9-speed road bike https://bike.shimano.com/en-EU/product/component/sora-r3000.html
* Shimano Tiagra: 10-speed road bike https://bike.shimano.com/en-EU/product/component/tiagra-4700.html
* Shimano Deore: non-\x[shitty] MTB, in increasing performance: M610, M6000, M7000, ...)
* Shimano Tourney; commuter, likely the shittiest of all lines: https://bike.shimano.com/en-EU/product/component/tourney.html

= Balloon
{parent=transport}
{wiki}

= Car
{parent=transport}
{wiki}

= Public transport
{parent=transport}
{wiki}

= Train
{parent=transport}
{wiki}

= User interface
{parent=technology}
{wiki}

= UI
{c}
{synonym}
{title2}

For \x[computer] interfaces see: \x[computer-user-interface].

= Software with bad user interface
{parent=user-interface}

It is hard to pinpoint why, but the following useful software just feel bad for some reason:
* \x[inkscape]{child}
* \x[launchpad-website]{child}

= Brain-computer interface
{parent=user-interface}
{wiki=Brain–computer_interface}

The ultimate \x[computer-user-interface]{parent}.

\x[brain-computer-interfaces-could-be-the-next-big-thing]{c}.

And life extension? https://worldbuilding.stackexchange.com/questions/112022/would-an-invasive-spinal-cord-brain-computer-interface-allow-healthy-individuals

= Neuralink
{parent=brain-computer-interface}
{wiki}

\x[elon-musk]{parent}'s attempt.

\Video[https://www.youtube.com/watch?v=CLUWDLKAF1M]
{title=Neuralink: \x[elon-musk]'s entire brain chip presentation in 14 minutes (supercut) by CNET (2020)}
{description=
* https://youtu.be/CLUWDLKAF1M?t=380 Shows a pig with the implant, and live signals are shown when its nose touches something.
* https://youtu.be/CLUWDLKAF1M?t=536 shows a pre-recorded pig study correlating really the joint positions while walking with the neuralink signals
}


= Technology
{wiki}

= Technological
{synonym}

= Clothing
{parent=technology}
{wiki}

= Bra
{parent=clothing}
{wiki}

= Deep tech
{parent=technology}
{wiki}

\x[ciro-santilli] is a fan of this late 2010's buzzword.

It basically came about because of the endless stream of useless software startups made since the 2000's by one or two people with no investments with the continued increase in computers and Internet speeds \x[moore-s-law][until the great wall was reached].

Deep tech means not one of those. More specifically, it means technologies that require significant investment in expensive materials and laboratory equipment to progress, such as \x[molecular-biology-technologies] and \x[quantum-computing].

And it basically comes down to technologies that wrestle with the fundamental laws of \x[physics] rather than software data wrangling.

\x[computer]{c}{p} are of course limited by the laws of physics, but those are much hidden by several layers of indirection.

Full visibility, and full control, make computer tasks be tasks that eventually always work out more or less as expected.

The same does not hold true when real Physics is involved.

Physics is brutal.

To start with, you can't even see your system very clearly, and often doing so requires altering its behaviour.

For example, in molecular biology, most great discoveries are made after some new technique is made to be able to observe smaller things.

But you often have to kill your cells to make those observations, which makes it very hard to understand how they work dynamically.

What we would really want would be to track every single protein as it goes about inside the cell. But that is likely an impossible dream.

The same for the brain. If we had observations of every neuron, how long would it take to understand it? Not long, people are really good at \x[reverse-engineering] things when there is enough information available to do so, see also \x[science-is-the-reverse-engineering-of-nature].

Then, even when you start to see the system, you might have a very hard time controlling it, because it is so fragile. This is basically the case of quantum computing in 2020.

It is for those reasons that deep tech is so exciting.

The \x[the-next-big-thing][next big things] will come from deep tech. Failure is always a possibility, and you can't know before you try.

But that's also why its so fun to dare.

Stuff that \x[ciro-santilli] considers "deep tech" as of 2020:
* \x[brain-computer-interface]{child}
* \x[fusion-power]{child}. The question there is, when is "deep", "too deep"?

= Engineering
{parent=technology}
{wiki}

= Engineer
{parent=engineering}
{wiki}

= Computer engineer
{parent=engineer}
{wiki}

= Gordon Moore
{c}
{parent=computer-engineer}
{wiki}

= Robert Noyce
{c}
{parent=computer-engineer}
{wiki}

= Robert Noyce: The Man Behind the Microchip by Leslie Berlin (2006)
{c}
{parent=robert-noyce}
{tag=good-book}

Borrow from the \x[internet-archive] for free: https://archive.org/details/manbehindmicroc000berl/page/n445/mode/2up

= Seymour Cray
{c}
{parent=computer-engineer}
{wiki}

= Cray
{c}
{parent=seymour-cray}
{wiki}

= The Supermen: The Story of Seymour Cray by Charles J. Murray (1997)
{c}
{parent=seymour-cray}
{tag=good-book}

Borrow from the \x[internet-archive] for free: https://archive.org/details/supermenstory00murr

Initial chapters put good clarity on the formation of the \x[military-industrial-complex]. Being backed by the military, especially just after \x[world-war-ii], was in itself enough credibility to start and foster a company.

It is funny to see how the first computers were very artisanal, made on a one-off basis.

Amazing how Control Data Corporation raised capital IPO style as a startup without a product. The dude was selling shares at dinner parties in his home.

Very interesting mention on page 70 of how \x[israel] bought CDC's https://en.wikipedia.org/wiki/UNIVAC_1103[UNIVAC 1103] which Cray contributed greatly to design, and everyone knew that it was to make \x[thermonuclear-weapon]{p}, since that was what the big American labs like  this mention should be added to: https://en.wikipedia.org/wiki/Nuclear_weapons_and_Israel but that's Extended Protected... the horrors of \x[wikipedia].

Another interesting insight is how "unintegrated" computers were back then. They were literally building computers out of individual \x[vacuum-tube]{p}, then individual semiconducting transistors, a gate at a time. Then things got more and more integrated as time went. That is why the now outdated word "microprocessor" existed. When processors start to fit into a single \x[integrated-circuit], they were truly micro compared to the monstrosities that existed previously.

Also, because integration was so weak initially, it was important to more manually consider the length of wire signals had to travel, and try to put components closer together to reduce the \x[critical-path] to be able to increase clock speeds. These constraints are also of course present in modern computer design, but they were just so much more visible in those days.

The book does unfortunately not give much detail in Crays personal life as mentioned on this book review: https://www.goodreads.com/review/show/1277733185?book_show_action=true[]. His childhood section is brief, and his wedding is described in one paragraph, and divorce in one sentence. Part of this is because he was very private about his family most likely note how Wikipedia had missed his first wedding, and likely misattribute children to the second wedding; https://en.wikipedia.org/wiki/Talk:Seymour_Cray section "Weddings and Children".

Crays work philosophy is is highlighted many times in the book, and it is something worthy to have in mind:
* if a design is not working, start from scratch
* don't be the very first pioneer of a technology, let others work out the problems for you first, and then come second and win

Cray's final downfall was when he opted to try to use a promising but hard to work with material \x[gallium-arsenide] instead of \x[silicon] as his way to try and speed up computers, see also: \x[gallium-arsenide-vs-silicon]. Also, he went against the extremely current of the late 80's early 90's pointing rather towards using massively parallel systems based on \x[silicon] off-the-shelf \x[intel] processors, a current that had \x[darpa] support, and which by far the path that won very dramatically as of 2020, see: \x[intel-supercomputer-market-share].

= Industry
{parent=engineering}
{wiki}

= Industrial
{synonym}

= Industrialized
{synonym}

= Electricity generation
{parent=technology}
{wiki}

= Nuclear power
{parent=electricity-generation}
{wiki}

= Fusion power
{parent=nuclear-power}
{wiki}

= Fusion energy
{synonym}

\x[fusion-power-could-be-the-next-big-thing]{c}.

Most promising approaches as of 2020:
* \x[magnetic-confinement-fusion]
* \x[inertial-confinement-fusion]

= Magnetic confinement fusion
{parent=fusion-power}
{wiki}

Once again, relies on \x[superconductivity] to reach insane magnetic fields. Superconductivity is just so important.

\x[ciro-santilli] saw a good presentation about it once circa 2020, it seems that the main difficulty of the time was turbulence messing things up. They have some nice simulations with cross section pictures e.g. at: https://www.eurekalert.org/news-releases/937941[].

= List of magnetic confinement fusion reactors
{parent=magnetic-confinement-fusion}

= JT-60
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{title2=Japan, 1985-2010}
{wiki}

= Joint European Torus
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{title2=JET, Oxfordshire, United Kingdom, 1985-2010, 1991-}
{wiki}

\Video[https://www.youtube.com/watch?v=JrGeuIe17MA]
{title=Inside JET: The world's biggest nuclear fusion experiment by Wired UK (2020)}

= ITER
{c}
{parent=list-of-magnetic-confinement-fusion-reactors}
{wiki}

= Inertial confinement fusion
{parent=fusion-power}
{wiki}

= Fusion energy gain factor
{parent=fusion-power}
{wiki}

= Lawson criterion
{c}
{parent=fusion-energy-gain-factor}
{wiki}

= Fusion ignition
{parent=lawson-criterion}
{wiki}

= Electronics
{parent=technology}
{wiki}

= Electronic component
{parent=electronics}
{wiki}

= Amplifier
{parent=electronic-component}
{wiki}

Main implementations: the same as \x[electronic-switch]{p}: \x[vacuum-tube]{p} in the past, and \x[transistor]{p} in the second half of the 20th century.

= Diode
{parent=electronic-component}
{wiki}

= Resistor
{parent=electronic-component}
{wiki}

= Electrical resistance
{parent=resistor}
{wiki=Electrical_resistance_and_conductance}

= Transformer
{parent=electronic-component}
{wiki}

= Electronic switch
{parent=electronic-component}
{wiki}

= Vacuum tube
{parent=electronic-switch}
{wiki}

= Transistor
{parent=electronic-switch}
{wiki}

A \x[solid-state] \x[electronic-switch] and \x[amplifier].

Although transistors were revolutionary, it is fun to note that they were just "way cheaper and more reliable and smaller" versions of exactly the main functions that a \x[vacuum-tube] could achieve
* \x[amplifier]
* \x[electronic-switch]

= Point-contact transistor
{parent=transistor}
{title2=BJT, 1947}
{wiki}

The first working one in 1947 by \x[john-bardeen] and \x[walter-brattain] in \x[bell-labs-murray-hill].

People had already \x[patented] a lot of stuff before without being able to make them work. Nonsense.

As the name suggests, this is not very sturdy, and was quickly replaced by \x[bipolar-junction-transistor].

= Bipolar junction transistor
{parent=transistor}
{title2=BJT, 1948}
{wiki}

By \x[william-shockley] in 1948 also at \x[bell-labs-murray-hill].

As of 2020, not used anymore in \x[logic-gate]{p}, but still used in \x[amplifier]{p}.

= Field-effect transistor
{parent=transistor}
{title2=FET}
{wiki}

= MOSFET
{c}
{parent=field-effect-transistor}
{title2=1959}
{wiki}

= CMOS
{c}
{parent=mosfet}
{wiki}

= Electronic test equipment
{parent=electronics}
{wiki}

= Oscilloscope
{parent=electronic-test-equipment}
{wiki}

= Electronic circuit
{parent=electronics}
{wiki}

= Breadboard
{parent=electronic-circuit}
{wiki}

= Digital electronic circuit
{parent=electronic-circuit}

= Frequency divider
{parent=digital-electronic-circuit}
{wiki}

= Semiconductor package
{parent=electronics}
{wiki}

= Dual in-line package
{parent=semiconductor-package}
{wiki}

= Explosive
{parent=technology}
{wiki}

Types:
* \x[chemical-explosive]. Almost a synonym for explosive in most contexts.

= Information technology
{parent=technology}
{wiki}

\Include[computer]{parent=information-technology}

= Error correction code
{parent=information-technology}
{wiki}

= Cyclic redundancy check
{parent=error-correction-code}
{wiki}

= CRC-32
{c}
{parent=cyclic-redundancy-check}
{wiki=Cyclic_redundancy_check#CRC-32_algorithm}

= Telecommunication
{parent=information-technology}
{wiki}

= Television
{parent=telecommunication}
{wiki}

= Publishing
{parent=telecommunication}
{wiki}

= Self-publishing website
{parent=publishing}
{wiki}

= Leanpub
{parent=publishing}

https://leanpub.com

Founder: Peter Armstrong

The general idea is publishing entire books with usual copyright, but with gradual updates.

http://ruboss.com/ documents their stack, a somewhat similar choice to \x[ourbigbook-com] as of 2021, notably \x[next-js]. But backend in \x[ruby-on-rails]. They actually managed Apollo/\x[graphql], which \x[ciro-santilli] would have liked, but din't have the patience for.

The founder/CEO Peter Armstrong https://www.linkedin.com/in/peterburtonarmstrong/ He looks like a nice guy.

= Markua
{parent=leanpub}

In \x[leanpub] you write your book in a \x[markdown] variant they call Markua, marketed as "markdown for books".

TODO is there a reference implementation that runs locally for HTML output? Or the only reference implementation is closed under \x[leanpub]?

Spec: http://markua.com/

= Publishing company
{parent=publishing}
{wiki}

= O'Reilly Media
{c}
{parent=publishing-company}
{wiki}

= Lighter
{parent=technology}
{wiki}

= Barbequeue lighter
{parent=lighter}

\Include[microscopy]{parent=technology}

= Mechanical engineering
{parent=technology}
{wiki}

= Mechanical engineering company
{parent=mechanical-engineering}

= Park Tool
{c}
{parent=mechanical-engineering-company}
{tag=good}
{wiki}

= Nanotechnology
{parent=technology}
{wiki}

= Microelectromechanical systems
{parent=nanotechnology}
{wiki}

= MEMS
{c}
{synonym}
{title2}

\Video[https://www.youtube.com/watch?v=RiRyap-EVg0]
{title=<MEMS>: The Second Silicon Revolution? by <Asianometry> (2022)}

= Molecular machine
{parent=nanotechnology}
{wiki}

The most beautiful ones:
* \x[sodium-channel]
* basically anything that falls in the \x[dna-replication] and \x[transcription-biology]
see also \x[animations-of-molecular-biology-processes]{full}

= Sodium channel
{parent=molecular-machine}
{wiki}

Base machinery of the \x[nervous-system].

= Reverse engineering
{parent=technology}
{wiki}

This is what society gets for not using \x[open-knowledge]: some of its best minds will be bound to waste endless hours reversing some useless technology.

With that said, even when you do have the source code, reading run logs and using \x[debugger]{p} are a sort of reverse engineering at heart.

One of the most jaw dropping reverse engineering projects Ciro has ever seen is the \x[super-mario-64-reverse-engineering-project].

= Science is the reverse engineering of nature
{parent=reverse-engineering}
{wiki}

How \x[software-engineer][software engineers] view science:
\Q[Science is the \x[reverse-engineering] of nature.]

\x[ciro-santilli] had once assigned this as one of \x[ciro-santilli-s-best-random-thoughts], but he later found that \x[wikipedia] actually says exactly that: https://en.wikipedia.org/wiki/Reverse_engineering ("similar to scientific research, the only difference being that scientific research is about a natural phenomenon") so maybe that is where Ciro picked it up unconsciously in the first place.

\Include[social-technology]{parent=technology}

= Robotics
{parent=technology}
{wiki}

= Robot
{synonym}

= Robotics software
{parent=robotics}

= Drake
{c}
{disambiguate=robotics software}
{parent=robotics-software}
{tag=simulation-software}

Looks cool! \x[ciro-santilli] loves \x[simulation]{p}!
* https://github.com/RobotLocomotion/drake
* https://drake.mit.edu/gallery.html

TRI means \x[toyota-research-institute] BTW.

\Q[The Robotics team at TRI is working hard to close the gap between simulation and reality. For manipulation, one important piece is accurate simulation of rigid-body contact.]

= Robot Operating System
{c}
{parent=robotics-software}
{tag=open-source-software}
{wiki}

= Transport
{parent=technology}
{wiki}

= Bicycle
{parent=transport}
{wiki}

= Bicycle tire sizes
{parent=bicycle}
{wiki}

The images you have to have in mind are:
* https://en.wikipedia.org/wiki/File:Sezione_cerchione_bicicletta.svg
* https://cdn-0.sheldonbrown.com/images/bead-seat-diameter.jpg

Yes, Sheldon he has separate American and British English versions of pages!!!
* https://www.sheldonbrown.com/tyre-sizing.html
* https://www.sheldonbrown.com/tire-sizing.html

For example, \x[ciro-santilli-s-hardware/kross-bicycle-2017] had a Schwalbe tyre with markings:
\Q[42-622 (28 x 1.60, 700x40C)]
When inflated, the tires were about 3.5cm wide as measured with a ruler.

And the https://shop.mavic.com/en-gb/a-319-j24500.html#1028=3283&1035=3501[Mavic A319 rim] had markings:
\Q[622x19C]

In this:
* ISO (Etrto): 42-622. So:
  * 42 is the inner rim width. The actual inflated tire is going to be even wider.
  * 622 is the bead seat diameter. The actual inflated tire is going to be even wider.
* imperial: 28 x 1.60
* French: 700x40C:
  * meaning of the "C" asked at: https://bicycles.stackexchange.com/questions/16190/what-does-the-c-in-bicycle-tire-size-mean
    * https://www.sheldonbrown.com/tire-sizing.html#french says A is larger than B which is larger than C, and C means 622 mm

= Shimano
{c}
{parent=bicycle}
{wiki}

Manuals: https://si.shimano.com/

= Shimano product lines
{c}
{parent=shimano}

Overview of Shimano brands 2018: https://www.evanscycles.com/coffeestop/advice/the-complete-guide-to-shimanos-mountain-bike-groupsets-and-their-hierarchy

* Shimano Altus RD-M310: almost cheapest MTB
* Shimano Acera RD-M360: second cheapest MTB
* Shimano Alivio RD-M410: third cheapest MTB
* Shimano Claris: entry 8-speed road bike https://www.youtube.com/watch?v=6dFQDDg6Wt0
* Shimano Sora: 9-speed road bike https://bike.shimano.com/en-EU/product/component/sora-r3000.html
* Shimano Tiagra: 10-speed road bike https://bike.shimano.com/en-EU/product/component/tiagra-4700.html
* Shimano Deore: non-\x[shitty] MTB, in increasing performance: M610, M6000, M7000, ...)
* Shimano Tourney; commuter, likely the shittiest of all lines: https://bike.shimano.com/en-EU/product/component/tourney.html

= Balloon
{parent=transport}
{wiki}

= Motor vehicle
{parent=transport}
{wiki}

= Car
{parent=motor-vehicle}
{wiki}

= Automotive company
{parent=motor-vehicle}

= Toyota
{c}
{parent=automotive-company}
{wiki}

= Toyota Research Institute
{c}
{parent=toyota}
{title2=TRI}

= Public transport
{parent=transport}
{wiki}

= Train
{parent=transport}
{wiki}

= User interface
{parent=technology}
{wiki}

= UI
{c}
{synonym}
{title2}

For \x[computer] interfaces see: \x[computer-user-interface].

= Software with bad user interface
{parent=user-interface}

It is hard to pinpoint why, but the following useful software just feel bad for some reason:
* \x[inkscape]{child}
* \x[launchpad-website]{child}

= Brain-computer interface
{parent=user-interface}
{wiki=Brain–computer_interface}

The ultimate \x[computer-user-interface]{parent}.

\x[brain-computer-interfaces-could-be-the-next-big-thing]{c}.

And life extension? https://worldbuilding.stackexchange.com/questions/112022/would-an-invasive-spinal-cord-brain-computer-interface-allow-healthy-individuals

= Neuralink
{parent=brain-computer-interface}
{wiki}

\x[elon-musk]{parent}'s attempt.

\Video[https://www.youtube.com/watch?v=CLUWDLKAF1M]
{title=Neuralink: \x[elon-musk]'s entire brain chip presentation in 14 minutes (supercut) by CNET (2020)}
{description=
* https://youtu.be/CLUWDLKAF1M?t=380 Shows a pig with the implant, and live signals are shown when its nose touches something.
* https://youtu.be/CLUWDLKAF1M?t=536 shows a pre-recorded pig study correlating really the joint positions while walking with the neuralink signals
}

= Technology bibliography
{parent=technology}

= The best technology YouTube channels
{parent=technology-bibliography}
{tag=the-best-youtube-channels}

= Applied Science
{c}
{disambiguate=YouTube channel}
{parent=the-best-technology-youtube-channels}

https://www.youtube.com/channel/UCivA7_KLKWo43tFcCkFvydw

Host: Ben Krasnow.

Deals with materials, \x[chemistry], \x[microscopy], electronics.

Uber practical, well described setups deep science stuff, he is awesome and has been at \x[google] since 2014: https://www.linkedin.com/in/ben-krasnow-6796a94/

Ben studied at \x[university-of-california-santa-barbara].

= EngineerGuy
{c}
{parent=the-best-technology-youtube-channels}

https://www.youtube.com/c/engineerguyvideo

https://en.wikipedia.org/wiki/William_S._Hammack

Does deliver good concise ideas. Now we need something on the \x[the-missing-link-between-basic-and-advanced][less concise side of it].

= NileRed
{c}
{parent=the-best-technology-youtube-channels}

https://www.youtube.com/channel/UCFhXFikryT4aFcLkLw2LBLA

Great \x[chemistry] content. Well detailed setups, notably substance extraction from off-the-shelf products.

= Cody's lab
{c}
{parent=the-best-technology-youtube-channels}

https://www.youtube.com/channel/UCu6mSoMNzHQiBIOCkHUa2Aw

This dude is \x[mind-blowing]. Big respect.

Some of the most impressive videos are the ones in which he goes and extracts metals from minerals himself all the way.

\Video[https://www.youtube.com/watch?v=x1mv0vwb08Y]
{title=What's Been Going On With Cody'sLab? by \x[cody-s-lab] (2019)}
{description=Cody opening up about some issues he's having life. Notably: \x[being-naughty-and-creative-are-correlated].}

= Asianometry
{c}
{parent=the-best-technology-youtube-channels}

https://www.youtube.com/channel/UC1LpsuAUaKoMzzJSEt5WImw

Focuses mostly on the <semiconductor industry>.

= Ciro Santilli (三西猴)

$$
%% physics package
% Absolute value.
\newcommand{\abs}[1]{\left|#1\right|}
\newcommand{\curl}[1]{\nabla \times #1}
% Partial derivative.
% TODO maybe move to match the esdiff or physics packages:
% https://tex.stackexchange.com/questions/412439/is-there-a-short-hand-command-to-write-derivatives
\newcommand{\dv}[2]{\frac{\partial #1}{\partial #2}}
\newcommand{\divergence}[1]{\nabla \cdot #1}
% Vector Arrow.
\newcommand{\va}[1]{\overrightarrow{#1}}

%% Group theory
\newcommand{\isomorphic}[0]{\cong}
\newcommand{\alternatingGroup}[1]{A{#1}}
\newcommand{\cyclicGroup}[1]{\Z_{#1}}

%% Real and complex analysis
\newcommand{\C}[0]{\mathbb{C}}
\newcommand{\RFour}[0]{\mathbb{R}^{4}}
\newcommand{\RThree}[0]{\mathbb{R}^{3}}
\newcommand{\RTwo}[0]{\mathbb{R}^{2}}
\renewcommand{\R}[0]{\mathbb{R}}
\renewcommand{\Z}[0]{\mathbb{Z}}
\newcommand{\functionDomain}[3]{#1 : #2 \to #3}

%%% Lebesgue spaces.
\newcommand{\LP}[0]{L^p}
\newcommand{\LTwo}[0]{L^2}

%% Electromagnetism
% Magnetic field vector
\newcommand{\B}[0]{\va{\mathbf{B}}}
% Electric field vector
\newcommand{\E}[0]{\va{\mathbf{E}}}
% Electric current vector.
\newcommand{\J}[0]{\va{\mathbf{J}}}
\newcommand{\vacuumPermittivity}[0]{\varepsilon_0}
\newcommand{\vacuumPermeability}[0]{\mu_0}
$${show=0}

Software engineer. Passion for computers, natural sciences and education. Opinions are my own.

https://github.com/cirosantilli[GitHub] |
https://stackoverflow.com/users/895245[Stack Overflow] |
https://www.linkedin.com/in/cirosantilli[LinkedIn] |
https://www.youtube.com/c/CiroSantilli[YouTube] |
https://twitter.com/cirosantilli[Twitter] |
https://www.zhihu.com/people/cirosantilli/activities[Zhihu 知乎] |
https://www.weibo.com/p/1005055601627311[Weibo 微博] |
\x[accounts-controlled-by-ciro-santilli][Other accounts]

This website is written in \x[cirodown] and its source code is located at: https://github.com/cirosantilli/cirosantilli.github.io

\image[ID_photo_of_Ciro_Santilli_taken_in_2013.jpg]{height=300}
\image[Ciro_Santilli's_learn_teach_apply_logo.png]{height=300}

\Toc

== Ciro Santilli
{title2=三西猴}
{c}

Ciro Santilli is a https://en.wikipedia.org/wiki/Male[male] https://en.wikipedia.org/wiki/Human[human] \x[software-engineer][software engineer] and \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][activist] born \x[ciro-santilli-s-biography][in Brazil in 1989 AD].

Quick facts:
* Nationalities: \x[italy][Italian] and \x[brazil][Brazilian]
* Grew up in: \x[brazil][Brazil]
* Relationship status 2017-: \x[ciro-santilli-s-wife][married]
* Chinese name: 三西猴, means "three western monkeys". Phonetic approximation to SANtilli CIRO. Semi-unintentionally reminds Chinese people of \x[image-19th-century-illustration-of-the-journey-to-the-west-protagonist-sun-wukong][Sun Wukong (孙悟空)]. Given by \x[ciro-santilli-s-wife], then girlfriend, as a semi-joke, and he took it up because the best way to take a joke is to go with the joker.
* Laptop: high end \x[thinkpad][Lenovo ThinkPad]
* Distro: latest \x[ubuntu] release
* \x[vim][Vim] or Emacs: Vim. But for The Love, will someone please make an open source C++ \x[integrated-development-environment] that actually just works?
* Tabs or spaces: spaces
* \x[mailing-list]{c} or Git(Hub|Lab): Git(Hub|Lab), with passion: \x[mailing-list]{full}
* System or unit tests: system
* Default programming languages: Python and C++. \x[programming-languages][He'll learn Rust and Haskell once he's rich].
* Favorite musical instruments to listen: \x[the-best-chinese-traditional-instrumental-music-of-all-time][Chinese Guqin] and \x[the-best-music-of-all-time][electric Jazz-fusion guitar]

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Xiyou.PNG/337px-Xiyou.PNG]{height=400}
{title=19th century illustration of the https://en.wikipedia.org/wiki/Journey_to_the_West[Journey to the West] protagonist \a[https://en.wikipedia.org/wiki/Sun_Wukong][Sun Wukong].}
{description=Sun Wukong (孙悟空) is a playful and obscenely powerful monkey Journey to the West. He protects a \x[buddhism][Buddhist] monk, and likes \x[ciro-santilli-s-psychology-and-physiology][eating fruit, just like Ciro]. Oh, and https://en.wikipedia.org/wiki/Goku[Goku] from \x[children-cartoons-ciro-santilli-liked-to-watch][Dragon Ball] is based on him. His Japanese name \i[is] "Sun Wukong" (same Chinese characters with different Japanese pronunciation) for the love. His given name "Wukong" means literally "the one who mastered the void", which is \x[physics-and-the-illusion-of-life][fucking awesome].}

=== The most important projects done by Ciro Santilli

\x[ciro-santilli] has sometimes wasted time with low impact projects such as those listed at \x[ciro-santilli-s-minor-projects] instead of doing higher impact projects such as those mentioned at: \x[the-most-important-projects-ciro-santilli-wants-to-do]{full}.

But maybe "Everything you did brought you where you are now." applies, maybe it is during the "low impact activities" that one gets the inspiration and experience required for the "high impact ones".

==== Linux Kernel Module Cheat
{title2=LKMC}
{c}

https://github.com/cirosantilli/linux-kernel-module-cheat

This is the most important technical tutorial project that \x[ciro-santilli] has done in his life so far as of 2019.

The scope is insane and unprecedented, and goes beyond \x[linux][Linux]-kernel-land alone.

It ate up every system programming content he had previously written, including:
* C, C++, POSIX
* x86 and arm userland assembly
* arm baremetal assembly. x86 baremetal is at: https://github.com/cirosantilli/x86-bare-metal-examples and would in theory be migrated, but he's lazy
* \x[qemu] and gem5 emulation
so that that repo would better be called "System Programming Cheat". But "Linux Kernel Module Cheat" sounds more hardcore ;-)

Other major things that could be added there as well in the future are:
* https://github.com/cirosantilli/algorithm-cheat
* \a[https://en.wikipedia.org/wiki/Computer_architecture][computer architecture] tutorials with gem5

Due to this project, some have https://github.com/cirosantilli/linux-kernel-module-cheat/issues/105#issuecomment-553220982[considered Ciro to be] (\a[https://web.archive.org/web/20191113151131/https://github.com/cirosantilli/linux-kernel-module-cheat/issues/105#issuecomment-553220982][archive]):
\Q[some kind of Linux kernel god.]
which made Ciro smile, although "Linux kernel documenter God" would have been more precise.

``
[    1.451857] input: AT Translated Set 2 keyboard as /devices/platform/i8042/s1│loading @0xffffffffc0000000: ../kernel_modules-1.0//timer.ko
[    1.454310] ledtrig-cpu: registered to indicate activity on CPUs             │(gdb) b lkmc_timer_callback
[    1.455621] usbcore: registered new interface driver usbhid                  │Breakpoint 1 at 0xffffffffc0000000: file /home/ciro/bak/git/linux-kernel-module
[    1.455811] usbhid: USB HID core driver                                      │-cheat/out/x86_64/buildroot/build/kernel_modules-1.0/./timer.c, line 28.
[    1.462044] NET: Registered protocol family 10                               │(gdb) c
[    1.467911] Segment Routing with IPv6                                        │Continuing.
[    1.468407] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver              │
[    1.470859] NET: Registered protocol family 17                               │Breakpoint 1, lkmc_timer_callback (data=0xffffffffc0002000 <mytimer>)
[    1.472017] 9pnet: Installing 9P2000 support                                 │    at /linux-kernel-module-cheat//out/x86_64/buildroot/build/
[    1.475461] sched_clock: Marking stable (1473574872, 0)->(1554017593, -80442)│kernel_modules-1.0/./timer.c:28
[    1.479419] ALSA device list:                                                │28      {
[    1.479567]   No soundcards found.                                           │(gdb) c
[    1.619187] ata2.00: ATAPI: QEMU DVD-ROM, 2.5+, max UDMA/100                 │Continuing.
[    1.622954] ata2.00: configured for MWDMA2                                   │
[    1.644048] scsi 1:0:0:0: CD-ROM            QEMU     QEMU DVD-ROM     2.5+ P5│Breakpoint 1, lkmc_timer_callback (data=0xffffffffc0002000 <mytimer>)
[    1.741966] tsc: Refined TSC clocksource calibration: 2904.010 MHz           │    at /linux-kernel-module-cheat//out/x86_64/buildroot/build/
[    1.742796] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x29dc0f4s│kernel_modules-1.0/./timer.c:28
[    1.743648] clocksource: Switched to clocksource tsc                         │28      {
[    2.072945] input: ImExPS/2 Generic Explorer Mouse as /devices/platform/i8043│(gdb) bt
[    2.078641] EXT4-fs (vda): couldn't mount as ext3 due to feature incompatibis│#0  lkmc_timer_callback (data=0xffffffffc0002000 <mytimer>)
[    2.080350] EXT4-fs (vda): mounting ext2 file system using the ext4 subsystem│    at /linux-kernel-module-cheat//out/x86_64/buildroot/build/
[    2.088978] EXT4-fs (vda): mounted filesystem without journal. Opts: (null)  │kernel_modules-1.0/./timer.c:28
[    2.089872] VFS: Mounted root (ext2 filesystem) readonly on device 254:0.    │#1  0xffffffff810ab494 in call_timer_fn (timer=0xffffffffc0002000 <mytimer>,
[    2.097168] devtmpfs: mounted                                                │    fn=0xffffffffc0000000 <lkmc_timer_callback>) at kernel/time/timer.c:1326
[    2.126472] Freeing unused kernel memory: 1264K                              │#2  0xffffffff810ab71f in expire_timers (head=<optimized out>,
[    2.126706] Write protecting the kernel read-only data: 16384k               │    base=<optimized out>) at kernel/time/timer.c:1363
[    2.129388] Freeing unused kernel memory: 2024K                              │#3  __run_timers (base=<optimized out>) at kernel/time/timer.c:1666
[    2.139370] Freeing unused kernel memory: 1284K                              │#4  run_timer_softirq (h=<optimized out>) at kernel/time/timer.c:1692
[    2.246231] EXT4-fs (vda): warning: mounting unchecked fs, running e2fsck isd│#5  0xffffffff81a000cc in __do_softirq () at kernel/softirq.c:285
[    2.259574] EXT4-fs (vda): re-mounted. Opts: block_validity,barrier,user_xatr│#6  0xffffffff810577cc in invoke_softirq () at kernel/softirq.c:365
hello S98                                                                       │#7  irq_exit () at kernel/softirq.c:405
                                                                                │#8  0xffffffff818021ba in exiting_irq () at ./arch/x86/include/asm/apic.h:541
Apr 15 23:59:23 login[49]: root login on 'console'                              │#9  smp_apic_timer_interrupt (regs=<optimized out>)
hello /root/.profile                                                            │    at arch/x86/kernel/apic/apic.c:1052
# insmod /timer.ko                                                              │#10 0xffffffff8180190f in apic_timer_interrupt ()
[    6.791945] timer: loading out-of-tree module taints kernel.                 │    at arch/x86/entry/entry_64.S:857
# [    7.821621] 4294894248                                                     │#11 0xffffffff82003df8 in init_thread_union ()
[    8.851385] 4294894504                                                       │#12 0x0000000000000000 in ?? ()
                                                                                │(gdb)
``
{title=Terminal dump of a LKMC session with two \x[tmux][tmux] panes with QEMU on left and GDB on right showing a backtrace of the Linux kernel code currently being under QEMU.}

==== Ciro Santilli's Stack Overflow contributions
{c}

https://stackoverflow.com/users/895245

\Image[https://stackoverflow.com/users/flair/895245.png?theme=dark]
{title=Ciro Santilli's amazing Stack Overflow profile.}
{height=58}

\x[ciro-santilli]'s \x[stack-overflow] contributions have, unsurprisingly, centered around the subjects he has worked with: \x[systems-programming][systems programming] and web development, and necessary tooling to get those done, such a Git, Python, Bash and Ubuntu.

His best answers are listed at: \x[articles]{full}.

Stack Overflow has been the initial centerpiece of \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china].

In Stack Overflow Ciro likes to:
* answer important questions found through \x[google] which he needs to solve an actual problem he has right now, and for which none of the existing answers satisfied him, and close duplicates.
* monitor less known tags which very few people know a lot about and where the knowledge sharing desperately lacking, but in which Ciro specializes and therefore has some uncommon knowledge to share

In practice it It also happens that Ciro:
* Googles for his own answers to remember some detail he wrote down but with slightly different terms that were closer to mind at the time, and find other similar questions for which he has the perfect answer.
* learns something new by chance, e.g. https://stackoverflow.com/questions/39933567/deduce-stdarray-size/61371303#61371303[some new flashy feature of a new version of the C++ standard], thiks \x[the-machiavellian-stack-overflow-contributor]["this is awesome, there must be a Stack Overflow question for it"], and then there is a question and he answers it

When he gets an upvote on one of his more obscure answers, Ciro often re-reads it, and often finds improvements to be made and makes them.

He doesn't like to refresh the homepage looking for easy rep on widely known subjects.

For this reason, https://stackoverflow.com/help/badges/17/necromancer[Necromancer] is Ciro's favorite badge (get 5 upvotes on a question older than 60 days), and as of July 2019, https://data.stackexchange.com/stackoverflow/query/300735/users-with-most-necromancer-badges-at-a-given-date?Date=2019-07-15[he became the #1 user with the most of this badge]. Announcement \a[https://twitter.com/cirosantilli/status/1146157392343785474][on Twitter].

The number two at the time was \a[https://stackoverflow.com/users/6309][VonC], who had about 16 times more answers than Ciro in total! From this query: https://data.stackexchange.com/stackoverflow/query/1072396?&Date=2019-07-01&UserId=895245 it can be seen that as of July 2019, 1216 out of his 1329 answers were answered 60 days after the questions and constitute potential necromancers! Compare that to VonC's 1643 potential necromancers out of 21767 answers!

In terms of per year reputation ranks, Ciro was in the top 100 in of the 2018 ranking with 38,710 reputation gained in that year: https://stackexchange.com/leagues/1/year/stackoverflow/2018-01-01?sort=reputationchange&page=4 (\a[http://web.archive.org/web/20191013085259/https://stackexchange.com/leagues/1/year/stackoverflow/2018-01-01?sort=reputationchange&page=4][archive]). Note that daily reputation is mostly capped to 200 per day, leading to a maximum 73000 per year. It is possible to overcome this limit either with bounties or accepts, and Ciro finds it amazing that some people actually break the 73k limit by far with accepts, e.g. https://stackexchange.com/leagues/1/year/stackoverflow/2018-01-01?sort=reputationchange[Gordon Linoff reached 135k in 2018] (\a[https://web.archive.org/web/20191013090451/https://stackexchange.com/leagues/1/year/stackoverflow/2018-01-01?sort=reputationchange][archive])! However, this is something that Ciro will never do, because it implies answering thousands and thousands of useless semi duplicate questions as fast as possible to get the accept. Ciro's reputation comes purely from upvotes on important question, and is therefore sustainable without any extra effort once achieved. Interestingly, Ciro appeared on top of the quarter SE rankings around 2019-11: http://web.archive.org/web/20191112100606/https://stackexchange.com/leagues but it was https://meta.stackexchange.com/questions/337643/mismatch-between-the-top-users-in-the-stack-exchange-league-and-period-wise-repo[just a bug] ;-)

There is no joy like answering an old question, and watching your better answer go up little by little until it dominates all others.

Stack Overflow reputation is of course, in itself, meaningless. People who contribute to popular subjects like web development will always have infinitely more reputation than those that contribute to https://stackoverflow.com/questions/37879954/how-to-write-an-integer-to-stdout-as-hexadecimal-in-vhdl[low level subjects].

What happens on the specialized topics though is that you end up getting to know all the 5 users who contribute 95% of the content pretty soon as you study those subjects.

Like everything that man does, the majority of Ciro's answers are more or less superficial subjects that many people know but few have the patience to explain well, or they are updates to important questions \x[the-machiavellian-stack-overflow-contributor][reflecting upstream developments]. But as long as they save 15 minutes from someone's life, that's fine.

For example, Ciro's most upvoted answer as of July 2019 is https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies/22004559#22004559 was written when he spent his first week playing with NodeJS (he was having a look at \x[overleaf], later merged into https://www.overleaf.com/[Overleaf], for \x[write-free-books-to-get-famous-website][education]), which he didn't touch again for several years, and still hasn't "mastered" as of 2019! This did teach a concrete life lesson to Ciro however: it is impossible to know what is the most useful thing you can do right now very precisely. The best bet is to follow your instincts and do as much awesome stuff as you can, and then, with some luck, some of those attempts will cover an use case.

Ciro tends to take most pride on his systems programming answers, which is a subject that truly relatively few people know about.

Ciro also derives great joy from his "media related answers" (3D graphics, audio, video), which are immensely fun to write, and sometimes borderline \x[art], see answers such as those under "OpenGL" and "Media" under \x[articles] or even simpler answers such as:
* https://askubuntu.com/questions/648603/how-to-create-an-animated-gif-from-mp4-video-via-command-line/837574#837574[How to create an animated GIF from MP4 video via command line?]

  \Image[STS-132_Liftoff_Space_Shuttle_Atlantis_512x.gif]
  {title=Ciro knows https://askubuntu.com/questions/648603/how-to-create-an-animated-gif-from-mp4-video-via-command-line/837574#837574[how to convert videos to GIFs].}
* https://unix.stackexchange.com/questions/82112/stereo-tone-generator-for-linux/536860#536860[Stereo "tone-generator" for linux?]

Ciro's deep understanding of Stack Overflow mechanisms and its shortcomings also helped shape his ideas for: \x[write-free-books-to-get-famous-website]. So it is a bit funny to think that after all time Ciro spent on the website, he actually wants to destroy it and replace it with something better. There can be no innovation without some damage. It also led to Ciro's creation of \x[stack-overflow-vote-fraud-script].

After answering so many questions, he ended up converging to a more or less consistent style, which he formalized at: https://meta.stackexchange.com/questions/18614/style-guide-for-questions-and-answers/326746#326746 Like any other style guide, this answer style guide, once fully incorporated and memorized, allows Ciro to write answers faster, without thinking about formatting issues.

Ciro also made a question title style guide: https://meta.stackexchange.com/questions/10647/how-do-i-write-a-good-title/311903#311903 but for some reason the Stack Overflow community prefers their semi-defined title meta-language to proper English. Go figure.

Ciro started contributing to Stack Overflow in 2012 when he was at \x[ecole-polytechnique].

Like all things that end up shaping the course of one's life, Ciro started contributing without thinking too much about it.

His first answer was to the LaTeX question: https://stackoverflow.com/questions/2701902/standalone-diagrams-with-tikz/9177804#9177804[Standalone diagrams with TikZ?], which reflects the fact that this happened while Ciro was reaching his \x[write-free-books-to-get-famous-website-motivation][open source Enlightenment].

Ciro's first upvote was for his 2012 question: https://stackoverflow.com/questions/10002291/how-to-run-a-python-script-portably-without-specifying-its-full-path[How to run a Python script portably without specifying its full path?]

When he started contributing, Ciro was still a newbie. One early event he will never forget was when someone mentioned a "man page", and Ciro commented saying that there was a typo!

When Ciro reached 15 points and gained the ability to upvote, it felt like a major milestone, he even took a screenshot of the browser! 1k, 10k and 100k were also particularly exciting. When the https://meta.stackoverflow.com/questions/291791/what-do-i-get-with-100k-reputation[100k cup] (\a[https://web.archive.org/web/20160528230715/https://meta.stackoverflow.com/questions/291791/what-do-i-get-with-100k-reputation][archive]) arrived in 2018, Ciro made a https://www.facebook.com/photo.php?fbid=1879889632030375[show-off Facebook post] (\a[https://web.archive.org/web/20191020194239/https://www.facebook.com/photo.php?fbid=1879889632030375][archive]). At some point though, your brain stops caring, and automatically filters out any upvotes you get except on the answers that you are really proud of and which don't yet have lots of upvotes. The last remaining useless gamed achievement that Ciro looks forward to is https://stackoverflow.com/help/badges/146/legendary[legendary] (\a[https://web.archive.org/web/20191014113759/https://stackoverflow.com/help/badges/146/legendary][archive]).

\Image[Ciro_Santilli_with_his_Stack_Overflow_100k_reputation_cup.jpg]

From the start, Ciro's motivations for contributing to Stack Overflow have been a virtuous circle of:
* save the world through \x[write-free-books-to-get-famous-website-motivation][free education]
* \x[ciro-santilli-s-selfish-desires][become famous]

  It feels especially amazing when people in the real world start taking note of you, and either close friends tell you straight out that you're a Stack Overflow God, or as you slowly and indirectly find out that less close know or came to you due to your amazing contributions.

It is also amazing when you start having a repertoire of answers, and as you are writing a new answer, you remember: "hey, the knowledge of that answer would be so welcome here", and so you link to the other answer as well at the perfect point. This somewhat achieves does what \x[write-free-books-to-get-famous-website] aims to do: for each small section of a tutorial, gather the best answers by multiple people.

Ciro feels that his Stack Overflow https://stackoverflow.com/users/55075/kenorb[alter ego] is the user https://stackoverflow.com/users/55075/kenorb[kenorb], which has a surprisingly similar contribution pattern (one of the top necromancers) and subjects (Python, Bash). Ciro tried to contact him to say hi, but it was hard to find a contact. kenorb, feel free to send Ciro a hi one of those days.

Another one is https://stackoverflow.com/users/541136/aaron-hall[Aaron Hall], who is also very high on the necromancer list, answers in Python which is a topic Ciro cares about, and https://web.archive.org/web/20200120043703/https://stackoverflow.com/users/541136/aaron-hall[states on his profile]:
\Q[Follow me on Twitter and tell me what canonical questions you would like me to respond to!]

Way to go.

Ciro also https://stackoverflow.com/users/895245/?tab=questions[asks some questions] on a ratio of about 1 question per 10 answers. But Ciro's questions tend to be about extremely niche that no one knows/cares about, and a high percentage of them ends up getting self answered either at asking time or after later research.

==== Ciro Santilli's campaign for freedom of speech in China
{c}

https://github.com/cirosantilli/china-dictatorship

Since 2015 \x[ciro-santilli] has carried out a campaign to promote freedom of speech in \x[china].

The campaign has centered around https://github.com/cirosantilli/china-dictatorship/tree/714d8104549ea19714787f148ff93c7403fd120c#why-keyword-attack[publishing censored keywords] on his \x[stack-overflow] username, thus using his \x[ciro-santilli-s-stack-overflow-contributions][considerable Stack Overflow presence] to sabotage the website in China. Here is an early http://web.archive.org/web/20150602004401/https://stackoverflow.com/users/895245/ciro-santilli-%e5%85%ad%e5%9b%9b%e4%ba%8b%e4%bb%b6-%e6%b3%95%e8%bd%ae%e5%8a%9f-%e7%ba%b3%e7%b1%b3%e6%af%94%e4%ba%9a%e8%83%a1%e6%b5%b7%e5%b3%b0[web archive].

\Image[Chrysanthemum_Xi_Jinping_with_black_red_liusi_added_by_Ciro_Santilli.jpg]
{title=https://www.independent.co.uk/news/world/asia/chinese-artist-who-posted-funny-image-of-president-xi-jinping-facing-five-years-in-prison-as-10282630.html[Chrysanthemum Xi Jinping] with https://en.wikipedia.org/wiki/1989_Tiananmen_Square_protests[六四] spice added by Ciro Santilli.}
{height=230}
{id=image-xi-jinping-chrysanthemum-230-liusi}

Like most people in the West, Ciro has always been for political freedom of speech, and therefore against the Chinese government's policies.

However, the seriousness of the matter only fully dawned on him in 2015 when, his mother-in-law, a then a 63-year-old lady, https://github.com/cirosantilli/china-dictatorship/https://github.com/cirosantilli/china-dictatorship/tree/f2ba65accdfb51c8028aa9d4e37e9fe26400f0dc#jail-post[was put into jail for 15 days for doing Falun Gong].

And all of this was made 100 times worse because Ciro deeply loves several aspects of China, such as food, language, art and culture, and saw it all being destroyed by the Communists.

The rationale of this is to force the Chinese Government to either:
* leave things as they are, and let censored keywords appear on Stack Overflow (most likely scenario)
* block Stack Overflow, and lose billions of dollars with worse IT technology
* disable the Great Firewall

In the beginning, this https://github.com/cirosantilli/china-dictatorship/tree/236407528ab6424504e442e070d632496c110087#backlinks-to-this-repository[generated some commotion], but activity reduced as novelty wore off, and as he collected the reply to all possible comments at: https://github.com/cirosantilli/china-dictatorship.

This campaign has led him to have an insane profile view/reputation ratio, since many people pause to look at his profile. He is point "A" at the top right corner of \x[image-scatter-plot-of-stack-overflow-user-reputation-vs-profile-views-in-march-2019-with-ciro-santilli-marked-as-a]{full}:
\Image[Scatter_plot_of_Stack_Overflow_user_reputation_vs_profile_views_in_March_2019_with_Ciro_Santilli_marked_as_A.png]
{height=500}

Ciro feels that the view count started increasing more slowly since 2020 compared to his reputation, likely every single Chinese user has already viewed the profile.

Further analysis has been done at: https://stats.stackexchange.com/questions/376361/how-to-find-the-sample-points-that-have-statistically-meaningful-large-outlier-r

\Image[Ciro_Santilli_with_a_stone_carved_Budai_in_the_Feilai_Feng_caves_near_the_Lingyin_Temple_in_Hangzhou_in_2012.jpg]
{title=Ciro Santilli with a stone carved https://en.wikipedia.org/wiki/Budai[Budai] in the https://en.wikipedia.org/wiki/File:Maitreya_and_disciples_carving_in_Feilai_Feng_Caves.jpg[Feilai Feng caves] near the https://en.wikipedia.org/wiki/Lingyin_Temple[Lingyin Temple] in Hangzhou taken during his legendary 2012 touristic trip to China.}
{description=Will he ever be able to go to China again to re-experience such marvelous locations?}

==== Ciro Santilli's minor projects
{c}

Major projects can be seen at: \x[the-most-important-projects-done-by-ciro-santilli]{full}.

These are some smaller projects that \x[ciro-santilli] carried out. They are all either for fun, or misguided use of his time done by an younger self:
* Naughty stuff. Ciro likes being naughty:
  * \x[stack-overflow-vote-fraud-script]
  * \x[github] makes Ciro feel especially naughty:

    * \x[all-github-commit-emails]: he extracted (almost) all Git commit emails from GitHub with \x[google] BigQuery
    * https://github.com/cirosantilli/test-many-commits-1m/[A repository with 1 million commits]: likely the https://www.quora.com/Which-GitHub-repo-has-the-most-commits/answer/Ciro-SantilliI[live repo with the most commits as of 1017]
    * https://stackoverflow.com/questions/20099235/who-is-the-user-with-the-longest-streak-on-github/27742165#27742165[An 100 year GitHub streak], likely longest ever when that existed. It was consuming too much server resources however, which led to GitHub admins manually https://web.archive.org/web/20151021135921/https://github.com/cirosantilli/[turning off his contribution history].
    * https://github.com/cirosantilli/test-octopus-100k[A repository with a 100k commit Git octopus merge]. Now that is a true https://softwareengineering.stackexchange.com/questions/314215/can-a-git-commit-have-more-than-2-parents/377903#377903[Cthulhu merge].
    * https://github.com/isaacs/github/issues/1718[500 on adoc infinite header xref recursion]: that was fu
* Because Ciro \x[write-free-books-to-get-famous-website][cares about education], around 2014 he looked into markup languages and version control for books, before he noticed that this approach was useless and that ranking algorithms are all that matter:
  * \x[gitlab]: very important to Ciro because he wanted to base https://github.com/booktree/booktree[Booktree] on it.

    He was https://github.com/gitlabhq/gitlabhq/graphs/contributors?from=2013-01-01&to=2015-01-01&type=a[the number 2 contributor from 2013 to 2015].

    He implemented some large features and several smaller improvements.

    For this reason, Ciro was made a moderator of https://www.reddit.com/r/gitlab[/r/gitlab] in https://web.archive.org/web/20160524164714/https://www.reddit.com/r/gitlab/about/moderators[2016-05].

    GitLab sent Ciro a free swag bottle later after they got funding on to thank him for his contributions: \x[image-ciro-santilli-in-a-dune-lake-in-jericoacoara-brazil-with-his-gitlab-bottle]{full}. He had to pay for the beach trip though.

    \Image[Ciro_Santilli_in_a_dune_lake_in_Jericoacoara,_Brazil_with_his_GitLab_bottle.jpg]
    {height=300}
  * \a[markdown-style-guide][Markdown Style Guide]
  * \x[karlcow-markdown-testsuite] improvements: Ciro has implemented the test runner a few months before CommonMark left stealth mode and killed it instantaneously.

    At least MacFarlane was able to https://github.com/jgm/CommonMark/blob/2528c87c0cf08e02eb3e201c149cb3acf521e0c8/test/normalize.py#L8[reuse] part of the HTML normalizer https://github.com/karlcow/markdown-testsuite/blame/639cd234d71ca81956b61ff7876f37c3cdc5c043/run-tests.py[he wrote], and he extracted the multi-engine comparison to: https://github.com/cirosantilli/commonmark-implementation-compare[CommonMark Implementation Compare].

    Playing with this project has led him to find and report many Markdown bugs / bad behavior on other software, e.g. https://github.com/isaacs/github/issues/297[GitHub] and https://github.com/fletcher/MultiMarkdown-4/issues/68[MultiMarkdown-4].
  * https://github.com/isaacs/github[isaacs/github public unofficial GitHub issue tracker]: he has commented there so often that he https://github.com/isaacs/github/issues/430#issuecomment-123851480[was made a collaborator]
* \x[vim][Vim]: sometimes Ciro want crazy and wasted his time with Vimscript:
  * https://github.com/plasticboy/vim-markdown[Vim Markdown]: the owner `plasticboy` was really nice and made Ciro a collaborator for his contributions, notably a live ToC outline and the header mappings
  * https://github.com/cirosantilli/vundle-plugin-tester[Vundle Plugin Tester], which he used to start the testing system of Vim Markdown
* https://github.com/cirosantilli/breakthrough-message[Breakthrough Message]: aliens!!! Creative / media project, powered by some Python scripts.
* making Google Maps reviews of places he's visited to help other people. Ciro's photos reached 1 million views in 2019: https://www.google.com/maps/contrib/106598607405640635523/photos (\a[http://web.archive.org/web/20190905081800/https://www.google.com/maps/contrib/106598607405640635523/photos][archive])

=== The most important projects Ciro Santilli wants to do

These are projects which Ciro seriously considering doing, and which he believe could have a considerable impact in the world, given a few months of work.

They are sorted in order of "most likely to get done first".

==== Write free books to get famous website

https://github.com/cirosantilli/write-free-science-books-to-get-famous-website

In this project, \x[ciro-santilli] wants to explore if it is possible to create a sustainable website that will make people write \x[open-knowledge][free] university-level natural science books for free.

The initial incentive for those people is to make them famous and allow them to get more fulfilling jobs more easily, although Ciro also wants to add money transfer mechanisms to it later on.

The key intended technical innovation of the website is a PageRank-like algorithm that answers the key questions:
* who knows the most about subject X
* what is the best content for subject X

where any user can create any new subject X.

Ciro envisioned a Wikipedia-like page, where you can fork a version of any subject or header to improve it, suggest changes via a "GitHub-pull-request-like" mechanism, and create bug reports under any given header.

Then, while reading an article about a subject, say, "The Fundamental Theorem of Calculus", you would be able to click a button, and easily view the other best articles about that subject.

Many subjects have changed very little in the last hundred years, and so it is mind-blowing that people have to pay for books that teach them!

More than that however, if such project succeeds, it could fundamentally change the way \x[university] is organized, enormously improving its efficiency.

It could destroy the current educational system and replace it by one that lets people \x[students-must-have-a-flexible-choice-of-what-to-learn][choose what they want to learn].

Ciro decided to start with a decent markup language with a decent implementation: \x[cirodown]. Once that gets reasonable, he will move on to another attempt at the website itself.

===== Write free books to get famous website motivation

Since \x[ciro-santilli] was young, he has been bewildered by the natural sciences and mathematics \x[ciro-santilli-s-bad-old-event-memory][due to his bad memory].

The beauty of those subjects has always felt like intense sunlight in a fresh morning to Ciro. Sometimes it gets covered by clouds and obscured by less important things, but it always comes back again and again, weaker or stronger with its warmth, guiding Ciro's life path.

As a result, he has always suffered a lot at school: his grades were good, but he wasn't really learning those beautiful things that he wanted to learn!

School, instead of helping him, was just wasting his time with superficial knowledge.

First, before \x[university], school organization had only one goal: put you into the best universities, to make a poster out of you and get publicity, so that more parents will be willing to pay them money to put their kids into good university.

Ciro once asked a chemistry teacher some "deeper question" after course was over, related to the superficial vision of the topic they were learning to get grades in university entry exams. The teacher replied something like:
\Q[You remind me of a friend of mine. He always wanted to understand the deeper reason for things. He now works at NASA.]

Ciro feels that this was one of the greatest compliments he has ever received in his life. This teacher, understood him. Funny how some things stick, \x[ciro-santilli-s-bad-old-event-memory][while all the rest fades].

Another interesting anecdote is how Ciro's mother recalls that she always found out about exams in the same way: when the phone started ringing as Ciro's friends started asking for help with the subjects just before the exam. Sometimes it was already too hopelessly late, but Ciro almost always tried. Nothing shows how much better you are than someone than teaching them.

Then, after entering university, although things got way better because were are able to learn things that are borderline useful, teachers were still to a large extent researchers who didn't want to, know how to and above all have enough time and institutional freedom to teach things properly and make you see their beauty.

The very fact that you had very little choice of what to learn so that a large group can get a "Diploma", makes it impossible for people to deeply learn what the really want.

This is especially true because Ciro was in \x[brazil], a third world country, where the opportunities are comparatively extremely limited to the \x[what-poor-countries-have-to-do-to-get-richer][first world].

And all of this is considering that he was very lucky to not be in a poor family, and was already in some of the best educational institutions locally available already, and had comparatively awesome teachers, without which he wouldn't be where he is today if he hadn't had such advantages in the first place.

But no matter how awesome one teacher is, no single person can overcome a system so large and broken. Without technological innovation that is.

The key problem all along the way is the Society's / Government's belief that everyone has to learn the same things, and that grades in exams mean anything.

Ciro believes however, that exams are useless, and that there are only two meaningful metrics:
* reputation points for doing useful work for society
* how much money you make

Even if you wanted to really learn natural sciences and had the time available, it is just too hard to find good resources to properly learn it. Even attending university courses are hit and miss between amazing and mediocre teachers.

If you go into a large book shop, the science section is tiny, and useless popular science books dominate it without \x[videos-of-all-key-physics-experiments][precise experiment descriptions]. And then, the only few "serious" books are a huge list of formulas without any experimental motivation.

And if you are lucky to have access to an university library that has open doors, most books are likely to be old and boring as well. Googling for PDFs from university courses is the best bet.

Around 2012 however, he finally saw the light, and started his path to \x[open-source-software] Enlightenment.

Firstly, he was introduced to LaTeX, and his mind was blown. "Ha, so I can write my own books, and so can anyone, for free?" he though. Why isn't everyone doing that!

Then he found two websites that changed his life forever, and made be believe that there was an alternative: \x[ciro-santilli-s-stack-overflow-contributions][Stack Overflow] and https://github.com/cirosantilli[GitHub].

The brutal openness of it all. The raw high quality content. Ugliness and uselessness too no doubt. But definitely spark in a sea of darkness.

University was not needed anymore. He could learn whatever he wanted. A vision was born.

To make things worse, for a long time he was tired of seeing poor people begging on the streets every day and not doing anything about it. He thought:
\Q[He who teaches one thousand, saves one million.]

which like everything else is likely derived subconsciously from something else, here https://en.wikiquote.org/wiki/Talmud[Schindler's list possibly adapted quote from the Talmud]: "He who saves the life of one man saves the entire world.".

So, by the time he left University, instead of pursuing a PhD in theoretical Mathematics or Physics just for the beauty of it as he had once considered, he had new plans.

We needed a new educational system. One that would allow people to fulfill their potential and desires, and truly \x[unconditional-basic-income][improve society as a result], both in rich and poor countries.

And he found out that programming and applied mathematics could also be fun, so he might as well have some fun while doing this! ;-)

So he started https://github.com/booktree/booktree[Booktree] in 2014, worked on it for an year, noticed the idea https://github.com/booktree/booktree/blob/master/blog/2015-01-why-ciro-stopped-working-on-booktree.md[was dumb], and then started building this new idea and the courage to do it.

Ciro is basically a librarian at heart, and wants to be the next https://en.wikipedia.org/wiki/Jimmy_Wales[Jimmy Wales] or https://en.wikipedia.org/wiki/Brewster_Kahle[Brewster Kahle].

\Video[https://youtube.com/watch?v=WQR0gx0QBZ4]
{title="Jimmy Wales: How a ragtag band created Wikipedia" 2005 TED talk.}
{description=Original source: https://www.ted.com/talks/jimmy_wales_the_birth_of_wikipedia[].}

\Video[https://youtube.com/watch?v=pXoHC2D15hM]
{title="Brewster Kahle: A digital library, free to the world." 2007 TED Talk}
{description=Talks about the Internet Archive which he created.}

\Video[https://www.youtube.com/watch?v=-MTRxRO5SRA]
{title=https://en.wikipedia.org/wiki/Sal_Khan[Sal Kahn] from https://en.wikipedia.org/wiki/Khan_Academy[Khan Academy] 2016 TED talk.}
{description=Ciro is not a big fan of the "basis on top of basis focus" because of his obsession with \x[backward-design], but "learn to mastery at your own pace" and "everyone can be a world class innovator" are obviously good.}

==== Large cohesive game world for robotic-like artificial intelligence development

Prototype: https://github.com/cirosantilli/Urho3D-cheat

Prior art research: https://github.com/cirosantilli/awesome-reinforcement-learning-games

\Video[https://youtube.com/watch?v=j_fl4xoGTKU]
{title="Top Down 2D Continuous Game with Urho3D C++ SDL and Box2D for Reinforcement Learning" published by \x[ciro-santilli][Ciro Santilli] on 2018-05-13.}

\Image[Basketball_stage_of_Ciro_Santilli's_2D_continuous_AI_game.png]
{title=Screenshot of the basketball stage of Ciro's 2D continuous game.}
{description=Big kudos to \x[game-icons-net] for the sprites.}

Less good discrete prototype: https://github.com/cirosantilli/rl-game-2d-grid \x[youtube] demo: \x[video-top-down-2d-continuous-game-with-urho3d-c-sdl-and-box2d-for-reinforcement-learning-published-by-ciro-santilli-on-2018-05-13].

\Video[https://youtube.com/watch?v=TQ5k2u25eI8]
{title="Top Down 2D Discrete Tile Based Game with C++ SDL and Boost R-Tree for Reinforcement Learning" published by \x[ciro-santilli][Ciro Santilli] on 2017-01-22.}

The goal of this project is to reach \x[artificial-general-intelligence][artificial general intelligence].

A few initiatives have created reasonable sets of robotics-like games for the purposes of AI development, most notably: \a[https://en.wikipedia.org/wiki/OpenAI][OpenAI] and \a[https://en.wikipedia.org/wiki/DeepMind][Google DeepMind].

However, all projects so far have only created sets of unrelated games, or worse: focused on closed games designed for humans!

What is really needed is to create a single cohesive game world, designed specifically for this purpose, and with a very large number of game mechanics.

Notably, by "game mechanic" is meant "a magic aspect of the game world, which cannot be explained by object's location and inertia alone". For example:
* when you press a button here, a door opens somewhere far away
* when you touch certain types of objects, a chemical reaction may happen, but not other types of objects

Much in the spirit of http://www.gvgai.net/[], we have to do the following loop:
* create an initial game
* find an AI that beats it well
* study the AI, and add a new mechanic that breaks the AI, but does not break a human!

The question then becomes: do we have enough computational power to simulation a game worlds that is analogous enough to the real world, so that our AI algorithms will also apply to the real world?

To reduce computation requirements, it is better to focus on a 2D world at first. Such world with the right mechanics can break any AI, while still being faster to simulate than a 3D world.

The initial prototype uses the Urho3D open source game engine, and that is a reasonable project, but a raw \x[simple-directmedia-layer] + Box2D + \x[opengl] solution from scratch would be faster to develop for this use case, since Urho3D has a lot of human-gaming features that are not needed, and because 2019 Urho3D lead developpers https://github.com/cirosantilli/china-dictatorship/blob/23c5bd936361f78a8dd6bd1f412286808714d2da/communities-that-censor-politics.md[disagree with the China censored keyword attack].

Simulations such as these can be viewed as a form of https://en.wikipedia.org/wiki/Synthetic_data#Synthetic_data_in_machine_learning[synthetic data generation procedure], where the goal is to use computer worlds to reduce the costs of experiments and to improve reproducibility.

Related projects:

\Video[https://youtube.com/watch?v=MvFABFWPBrw]
{title="DeepMind Has A Superhuman Level Quake 3 AI Team" published by Two Minute Papers on 2018-08-05.}
{description=Commentary of https://en.wikipedia.org/wiki/DeepMind[Google DeepMind]'s 2019 https://deepmind.com/blog/article/capture-the-flag-science[Capture the Flag paper]. DeepMind does some similar simulations to what Ciro wants, but TODO do they publish source code for all of them? If not Ciro calls bullshit on non-reproducible research. Does https://github.com/deepmind/lab[this repo] contain everything?}

\Video[https://youtube.com/watch?v=Lu56xVlZ40M]
{title="OpenAI Plays Hide and Seek... and Breaks The Game!" published by Two Minute Papers on 2019-10-22.}
{description=Commentary of \x[openai][OpenAi]'s 2019 https://openai.com/blog/emergent-tool-use/[hide and seek] paper. OpenAI does some similar simulations to what Ciro wants, but TODO do they publish source code for all of them? If not Ciro calls bullshit on non-reproducible research, and even worse due to the fake "Open" in the name. Does https://github.com/openai/multi-agent-emergence-environments[this repo] contain everything?}

\Video[https://youtube.com/watch?v=nsVD8VPh96w]
{title="Simulating Foraging Decisions" published by the https://www.youtube.com/watch?v=YNMkADpvO4w[Primer YouTube channel] on 2020-03-14.}
{description=This channel contains several 2D continuous simulations and explains AI techniques used. Notably, they have several interesting multiagent game ideas. TODO once again, are https://github.com/Helpsypoo/primer[all sources published]? Claims Unity based, so another downside, relying on non-FOSS engine. Ciro became mildly jealous of this channel when he found out about it, because at 800k subscribers at the time, the creator is likely able to make a living off of it, something which Ciro thought impossible. It hinges a large part of the amazing 3D game presentation, well done.}

==== Videos of all key physics experiments

It is unbelievable that you can't find easily on YouTube recreations of many of the key \x[physics]/\x[chemistry] experiments and of common laboratory techniques.

Experiments, the techniques required to to them, and the history of how they were first achieved, are the heart of the natural sciences. Without them, there is no motivation, no beauty, no nothing.

School gives too much emphasis on the formulas. This is bad. Much more important is to understand how the experiments are done in greater detail.

The videos must be completely reproducible, indicating the exact model of every experimental element used, and how the experiment is setup.

A bit like what \x[ciro-santilli] does in his \x[ciro-santilli-s-stack-overflow-contributions][Stack Overflow contributions] but with computers, by indicating precise versions of his operating system, software stack, and hardware whenever they may matter.

It is understandable that some experiments are just to complex and expensive to re-create. As an extreme example, say, a precise description of the https://en.wikipedia.org/wiki/Large_Hadron_Collider[LHC] anyone? But experiments up to the mid-20th century before "\a[https://en.wikipedia.org/wiki/Big_Science][big science]"? We should have all of those nailed down.

We should strive to achieve the cheapest most reproducible setup possible with currently available materials: recreating the original historic setup is \x[art][cute], but not a priority.

Furthermore, it is also desirable to reproduce the original setups whenever possible in addition to having the most convenient modern setup.

Lists of good experiments to cover be found at: \x[the-most-important-physics-experiments].

This project is to a large extent a political endeavour.

Someone with enough access to labs has to step up and make a name for themselves through the huge effort of creating a baseline of amazing content without yet being famous.

Until it reaches a point that this person is actively sought to create new material for others, and things snowball out of control. Maybe, if the Gods allow it, that person could be Ciro.

Tutorials with a gazillion photos and short videos are also equally good or even better than videos, see for example Ciro's \x[oxford-nanopore-river-bacteria]{c} for an example that goes toward that level of perfection.

The https://www.youtube.com/channel/UCivA7_KLKWo43tFcCkFvydw["Applied Science" YouTube channel] by Ben Krasnow does well in that direction: it deals with materials, chemistry, microscopy, electronics. Uber practical, well described setups deep science stuff, he is awesome and has been at Google since 2016: https://www.linkedin.com/in/ben-krasnow-6796a94/

TODO:
* \x[quantum-hall-effect]

==== Website front-end for a mathematical formal proof system

When \x[ciro-santilli] first learnt the old \a[https://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory][Zermelo–Fraenkel set theory] and the idea of \x[formal-proof]{p}, his mind was completely blown.

Formalization of mathematics

Finally, there it was: a proper and precise definition of \x[mathematics], including https://en.wikipedia.org/wiki/Set-theoretic_definition_of_natural_numbers[a definition of integers], reals and limits!

Theorems are strings, proofs are string manipulations, and axioms are the initial strings that you can use.

Once proved, press a button on your computer, and the proof is automatically verified. No messy complicated "group of savants" reading it for 4 years and looking for flaws!

There are a few formal proof systems with several theorems in their Git tracked standard library. The hottest ones are:
* https://github.com/HOL-Theorem-Prover/HOL[]
* https://github.com/seL4/isabelle[]. Rumours have it that this is "uncompilable" from source without \x[evil][blobs]. It does however offer a very rich IDE.
* https://github.com/coq/coq[]
* http://metamath.org/ this one is likely an older and less powerful system, but the web presentation and tutorial are very good! Source: https://github.com/metamath/metamath-exe Here is a proof that 2 + 2 equals 4: http://us.metamath.org/mpeuni/2p2e4.html

And here are some more interesting links:
* https://github.com/awesomo4000/awesome-provable an awesome list of formal stuff
* https://devel.isa-afp.org/ Isabelle Archive of Formal Proofs. A curated list of Isabelle proofs, with minimal web UI. This is almost what we need, but without the manual curation, and with a better web UI.
* http://www.cs.ru.nl/~freek/100/ list of how many of the http://web.archive.org/web/20080105074243/http://personal.stevens.edu/~nkahl/Top100Theorems.html["Top 100 theorems"] had been proved in several formal systems.

However, it is unbelievable mind, that there isn't one awesome and dominating website, that hosts all those proofs, possibly an on the browser editor, and which all mathematicians in the world use as the one golden reference of mathematics to rule them all!

Just imagine the impact.

Standard library maintainers don't have to deal with the impossible question of what is "beautiful" or "useful" enough mathematics to deserve merged: users just push content to the online database, and star what they like!

Interested in a conjecture? No problem: just subscribe to its formal statement + all known equivalents, and get an email on your inbox when it gets proved!

Are you a garage mathematician and have managed to prove a hard theorem, but no will will read your proof? Fuck that, just publish it on the system and let it get auto verified. Overnight fame awaits.

Notation incompatibility hell? A thing of the past, just automatically convert to your preferred representation.

Such a system would be the perfect companion to \x[write-free-books-to-get-famous-website]. Just like computer code offers the backbone of \x[linux-kernel-module-cheat] Linux kernel tutorials, a formal proof system website would be the backbone of mathematics tutorials!

Furthermore, it would not be too hard to achieve this system!

All we would need would be something analogous to a package registry like https://pypi.org/[Python's PyPI] or https://www.npmjs.com/[NodeJS' registry].

Then, each person can publish packages containing proofs.

Packages can rely on other packages that contain pre-requisites definition or theorem.

Packages are just regular git repos, with some metadata. One notable metadata would be a human readable description of the theorems the package provides.

The package registry would then in addition to most package registries have a CI server in it, that checks the correctness of all proofs, generates a web-page showing each theorem.

All proofs can be conditional: the package registry simply shows clearly what axiom set a theorem is based on.

Bibliography:
* https://math.stackexchange.com/questions/1767070/what-is-the-current-state-of-formalized-mathematics/3297536#3297536
* https://stackoverflow.com/questions/19421234/how-do-i-generate-latex-from-isabelle-hol
* https://stackoverflow.com/questions/30152139/what-are-the-strengths-and-weaknesses-of-the-isabelle-proof-assistant-compared-t

=== The next big thing

If you are going to live, you might as well chase one of them.

You might not achieve them in your lifetime, but you never know. At some point, the pieces just "fall into place", and they happen.

And they will all come from \x[deep-tech].

\x[ciro-santilli] would like to contribute to them. but this is a bit less realistic \x[the-most-important-projects-ciro-santilli-wants-to-do][than software projects].

But who knows? Maybe he can code some stuff in those areas.

And one can at least have some fun by learning deeply about those subjects.

==== Molecular biology technologies

https://github.com/cirosantilli/awesome-whole-cell-simulation

As of 2019, \x[moore-s-law][the silicon industry is ending], and molecular biology technology is one of the most promising and growing \x[deep-tech][field of engineering].

\Image[https://web.archive.org/web/20191008120152im_/https://www.karlrupp.net/wp-content/uploads/2018/02/42-years-processor-trend-625x396.png]
{title=42 years of Microprocessor trend data by Karl Rupp.}
{description=Only transistor count increases, which also pushes core counts up. But what you gonna do when atomic limits are reached? The separation between two silicon atoms is https://www1.columbia.edu/sec/itc/ee/test2/pdf%20files/silicon%20basics.pdf[0.23nm] and 2019 technology https://en.wikipedia.org/wiki/5_nanometer[is at 5nm] scale.}
{source=https://www.karlrupp.net/2018/02/42-years-of-microprocessor-trend-data/}

Such advances could one day lead to both \x[unconditional-basic-income][biological super-AGI and immortality].

\x[ciro-santilli] is especially excited about \x[dna]-related technologies, because DNA is the centerpiece of biology, and it is programmable.

First, during the 2000's, the cost of \x[dna-sequencing] fell to about 1000 USD per genome in the end of the 2010's: \x[image-cost-per-genome-vs-moore-s-law-from-2000-to-2019]{full}, largely due to \x[illumina]["Illumina's" technology].

The medical consequences of this revolution are still trickling down towards medical applications of 2019, inevitably, but somewhat slowly due to tight privacy control of medical records.

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Cost_per_Genome.png/1024px-Cost_per_Genome.png]
{title=Cost per genome vs Moore's law from 2000 to 2019.}

\x[ciro-santilli] predicts that when the 100 dollar mark is reached, \i[every] person of the https://en.wikipedia.org/wiki/First_World[First world] will have their genome sequenced, and then medical applications will be closer at hand than ever.

But even 100 dollars is not enough. Sequencing power is like computing power: humankind can \i[never] have enough. Sequencing is not a one per person thing. For example, as of 2019 tumors are already being sequenced to help understand and treat them, and scientists/doctors will sequence as many tumor cells as budget allows.

Then, in the 2010's, https://en.wikipedia.org/wiki/CRISPR_gene_editing[CRISPR/Cas9 gene editing] started opening up the way to actually modifying the genome that we could now see through sequencing.

What's next?

Ciro believes that the next step in the revolution could be could be: \x[de-novo-dna-synthesis] .

Other cool topic include: simulations of cell metabolism, protein and small molecule, microscopy (crystallography, \x[cryogenic-electron-microscopy][cryoEM]), analytical chemistry (mass spectroscopy), single cell techniques (Single-cell RNA sequencing), ...

It's weird, cells feel a lot like \x[linux-kernel-module-cheat][embedded systems]: small, complex, hard to observe, and profound.

Ciro is sad that by the time he dies, humanity won't have understood the \x[brain], maybe not even a measly E. Coli... Heck, even key molecular biology events are not yet fully understood, see e.g. \a[https://en.wikipedia.org/wiki/Transcription_(biology)][transcription regulation].

==== Quantum computing could be the next big thing

As of 2020, \x[ciro-santilli] is getting excited about \x[quantum-computing], which is a \x[deep-tech] field.

He's a bit lazy to explain why here, but Googling will be more than enough.

There is a risk it will fizzle and the bubble pop, like any revolution.

But recent developments are making it too exciting to ignore.

==== Brain computer interfaces

https://en.wikipedia.org/wiki/Brain–computer_interface

This is one of the \x[deep-tech] bets that \x[ciro-santilli] would put his money in as of 2020.

How hard could it be? You just have to learn the encoding of the neural spine/eyes/ear, add an invasive device that multiplexes it, and then \x[the-matrix-1999][the benefits could be mind blowing].

https://en.wikipedia.org/wiki/Neuralink[Musk approves].

Interestingly and obviously, the initial advances in the area are happening for people that have hearing or vision difficulties. Since they already have a deficient sense, you don't lose that much by a failed attempt.

Hearing is likely to be the first since it feels the simplest. Ciro heard there are even already clinical applications there. TODO source.

==== Fusion power could be the next big thing

Main section: \x[fusion-power].

This is a long haul. But we have to give it a shot.

=== The best articles by Ciro Santilli
{id=articles}

These are the articles ever authored by \x[ciro-santilli], most of them in the format of \x[stack-overflow] answers.

Ciro posts updates on Twitter when new considerably cool ones are published: https://twitter.com/cirosantilli[].

Some random in-tree essays will be present at: \x[essays-by-ciro-santilli]{full}.

* Trended on https://news.ycombinator.com/[Hacker News]
  * https://github.com/cirosantilli/x86-bare-metal-examples[x86 Bare Metal Examples] on https://news.ycombinator.com/item?id=19428700[2019-03-19]. The third time something related to that repo trends. Hacker news people really like that repo!
  * \x[elf-hello-world] on https://web.archive.org/web/20170517174951/https://news.ycombinator.com/news[2017-05-17]
  * \x[x86-paging] on https://news.ycombinator.com/item?id=13773219[2017-03-02]. Number 1 \x[google] search result for "x86 Paging" https://archive.is/VUSNt[in 2017-08].
  * https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545[How to run a program without an operating system?] on https://web.archive.org/web/20181126123625/https://news.ycombinator.com[2018-11-26]. Covers x86 and ARM

    \Image[BIOS_bare_metal_hello_world_running_on_a_Lenovo_ThinkPad_T430.jpg]
    {source=https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545}
* x86 Assembly
  * https://stackoverflow.com/questions/980999/what-does-multicore-assembly-language-look-like/33651438#33651438[What does “multicore” assembly language look like?]
  * https://stackoverflow.com/questions/4584089/what-is-the-function-of-the-push-pop-instructions-used-on-registers-in-x86-ass/33583134#33583134[What is the function of the push / pop instructions used on registers in x86 assembly?] Going down to memory spills, register allocation and graph coloring.
* \x[linux-kernel-module-cheat][Linux kernel]
  * https://unix.stackexchange.com/a/219674/32558[What do the flags in /proc/cpuinfo mean?]
  * https://stackoverflow.com/a/31394861/895245[How does kernel get an executable binary file running under linux?]
  * https://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu/33203642#33203642[How to debug the Linux kernel with GDB and QEMU?]
  * https://stackoverflow.com/questions/33852690/can-the-sys-execve-system-call-in-the-linux-kernel-receive-both-absolute-or-re/42290593#42290593[Can the sys_execve() system call in the Linux kernel receive both absolute or relative paths?]
  * https://stackoverflow.com/questions/5957570/what-is-the-difference-between-the-kernel-space-and-the-user-space/44285809#44285809[What is the difference between the kernel space and the user space?]
  * https://stackoverflow.com/questions/5748492/is-there-any-api-for-determining-the-physical-address-from-virtual-address-in-li/45128487#45128487[Is there any API for determining the physical address from virtual address in Linux?]
  * https://stackoverflow.com/questions/2429511/why-do-people-write-the-usr-bin-env-python-shebang-on-the-first-line-of-a-pyt/40938801#40938801[Why do people write the `#!/usr/bin/env` python shebang on the first line of a Python script?]
  * https://unix.stackexchange.com/questions/5518/what-is-the-difference-between-the-following-kernel-makefile-terms-vmlinux-vml/482978#482978[What is the difference between the following kernel Makefile terms: vmLinux, vmlinuz, vmlinux.bin, zimage & bzimage?]

    \Image[Path_from_init_main.c_until_bzImage_in_the_Linux_kernel_4.19.jpg]
    {title=Path from init/main.c until bzImage in the Linux kernel 4.19.}
    {source=https://unix.stackexchange.com/questions/5518/what-is-the-difference-between-the-following-kernel-makefile-terms-vmlinux-vml/482978#482978}
    {height=600}
  * Single program Linux distro
    * https://unix.stackexchange.com/questions/17122/is-it-possible-to-install-the-linux-kernel-alone/200572#200572[Is it possible to install the linux kernel alone?]
    * https://unix.stackexchange.com/questions/122717/how-to-create-a-custom-linux-distro-that-runs-just-one-program-and-nothing-else/238579#238579[How to create a custom Linux distro that runs just one program and nothing else?]

      \Image[End_of_Linux_boot_log_with_minimal_init_that_prints_FOOBAR.png]
      {source=https://unix.stackexchange.com/questions/122717/how-to-create-a-custom-linux-distro-that-runs-just-one-program-and-nothing-else/238579#238579}
* \x[qemu]
  * https://stackoverflow.com/questions/28315265/how-to-add-a-new-device-in-qemu-source-code/44612957#44612957[How to add a new device in QEMU source code?]
  * https://askubuntu.com/questions/281763/is-there-any-prebuilt-qemu-ubuntu-image32bit-online/1081171#1081171[How to generate Ubuntu `debootstrap` disk images for QEMU?]
  * https://stackoverflow.com/questions/10949169/how-to-create-a-multi-partition-sd-image-without-root-privileges/52850819#52850819[How to create a multi partition SD disk image without root privileges?]
  * https://askubuntu.com/questions/884534/how-to-run-ubuntu-desktop-on-qemu/1046792#1046792[How to run Ubuntu desktop on QEMU?]

    \Image[https://i.stack.imgur.com/IPUkA.png]{height=400}
    {title=Ubuntu running inside QEMU.}
    {source=https://askubuntu.com/questions/884534/how-to-run-ubuntu-desktop-on-qemu/1046792#1046792}
* GCC
  * https://stackoverflow.com/questions/3322911/what-do-linkers-do/33690144#33690144[How do linkers and address relocation works?]
  * https://stackoverflow.com/a/30308151/895245[How many GCC optimization levels are there?]
  * https://stackoverflow.com/questions/29391965/what-is-partial-linking-in-gnu-linker/53959624#53959624[What is incremental linking or partial linking?]
  * https://stackoverflow.com/questions/3476093/replacing-ld-with-gold-any-experience/53921263#53921263[GOLD (`-fuse-ld=gold`) linker vs the traditional GNU ld]
  * https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld/51308031#51308031[What is the -fPIE option for position-independent executables in GCC and ld?] Concrete examples by running program through GDB twice, and an assembly hello world with absolute vs PC relative load.
* C / C++: almost all of those fall into "disassemble https://knowyourmeme.com/memes/all-the-things[all the things]" category. Ciro also does "standards dissection" and "a new version of the standard is out" answers, but those are boring.
  * https://stackoverflow.com/questions/572547/what-does-static-mean-in-a-c-program/14339047#14339047[What does "static" mean in a C program?]
  * https://stackoverflow.com/questions/1041866/in-c-source-what-is-the-effect-of-extern-c/30526795#30526795[In C++ source, what is the effect of `extern "C"`?]
  * https://stackoverflow.com/questions/10186765/char-array-vs-char-pointer-in-c/30661089#30661089[Char array vs Char Pointer in C]
  * https://stackoverflow.com/questions/847179/multiple-glibc-libraries-on-a-single-host/52454603#52454603[How to compile glibc from source and use it?]
  * https://stackoverflow.com/questions/332030/when-should-static-cast-dynamic-cast-const-cast-and-reinterpret-cast-be-used/60414256#60414256[When should `static_cast`, `dynamic_cast`, `const_cast` and `reinterpret_cast` be used?]
  * https://stackoverflow.com/questions/31978324/what-exactly-is-stdatomic/58904448#58904448[What exactly is `std::atomic` in C++?]. This answer was originally more appropriately entitled "Let's disassemble some stuff", and got three downvotes, so Ciro changed it to a more professional title, and it started getting upvotes. People judge books by their covers.
* IEEE 754
  * https://stackoverflow.com/questions/18118408/what-is-difference-between-quiet-nan-and-signaling-nan/55648118#55648118[What is difference between quiet NaN and signaling NaN?]
  * https://stackoverflow.com/questions/2618059/in-java-what-does-nan-mean/55673220#55673220[In Java, what does NaN mean?]
  * https://stackoverflow.com/questions/8341395/what-is-a-subnormal-floating-point-number/53203428#53203428[What is a subnormal floating point number?]

    ``
              +---+---+-------+---------------+-------------------------------+
    exponent  | ? | 0 |   1   |       2       |               3               |
              +---+---+-------+---------------+-------------------------------+
              |   |   |       |               |                               |
              v   v   v       v               v                               v
              -----------------------------------------------------------------
    floats    *    **** * * * *   *   *   *   *       *       *       *       *
              -----------------------------------------------------------------
              ^   ^   ^       ^               ^                               ^
              |   |   |       |               |                               |
              0   |   2^-126  2^-125          2^-124                          2^-123
                  |
                  2^-127


              +-------+-------+---------------+-------------------------------+
    exponent  |   0   |   1   |       2       |               3               |
              +-------+-------+---------------+-------------------------------+
              |       |       |               |                               |
              v       v       v               v                               v
              -----------------------------------------------------------------
    floats    * * * * * * * * *   *   *   *   *       *       *       *       *
              -----------------------------------------------------------------
              ^   ^   ^       ^               ^                               ^
              |   |   |       |               |                               |
              0   |   2^-126  2^-125          2^-124                          2^-123
                  |
                  2^-127
    ``
    {title=Visualization of subnormal floating point numbers vs what IEEE 754 would look like without them.}
* Algorithms
  * https://stackoverflow.com/questions/6147242/heap-vs-binary-search-tree-bst/29548834#29548834[Heap vs Binary Search Tree (BST)]. Compared Heap vs BST vs Hash Maps.

    \Image[C++_Heap_vs_BST_vs_hash_map_insert_time.png]
    {source=https://stackoverflow.com/questions/6147242/heap-vs-binary-search-tree-bst/29548834#29548834}
    {height=800}
* Git internals
  * https://stackoverflow.com/a/25806452/895245[What does the git index contain EXACTLY?]

    ``
      | 0           | 4            | 8           | C              |
      |-------------|--------------|-------------|----------------|
    0 | DIRC        | Version      | File count  | ctime       ...| 0
      | ...         | mtime                      | device         |
    2 | inode       | mode         | UID         | GID            | 2
      | File size   | Entry SHA-1                              ...|
    4 | ...                        | Flags       | Index SHA-1 ...| 4
      | ...                                                       |
    ``
  * https://stackoverflow.com/questions/22968856/what-is-the-file-format-of-a-git-commit-object-data-structure/37438460#37438460[What is the file format of a git commit object data structure?]

    ``
    tree {tree_sha}
    {parents}
    author {author_name} <{author_email}> {author_date_seconds} {author_date_timezone}
    committer {committer_name} <{committer_email}> {committer_date_seconds} {committer_date_timezone}

    {commit message}
    ``
* Python
  * https://stackoverflow.com/a/19950198/895245[What is the difference between old style and new style classes in Python?]
  * https://stackoverflow.com/a/20022860/895245[What is a mixin in Python, and why are they useful?]
  * https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python/55319297#55319297[What are the differences between threads and processes in Python?]

    \Image[https://web.archive.org/web/20190607051221if_/https://i.stack.imgur.com/2x04m.png]
    {title=Python Threads vs Processes with 8 hyperthreads.}
    {source=https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python/55319297#55319297}
    {height=600}
* Web
  * https://stackoverflow.com/a/28380690/895245[What does enctype='multipart/form-data' mean?]
  * https://stackoverflow.com/a/23877420/895245[How does JavaScript .prototype work?]
  * https://stackoverflow.com/a/24595458/895245[.prop() vs .attr()]
* OpenGL
  * https://stackoverflow.com/questions/3191978/how-to-use-glut-opengl-to-render-to-a-file/14324292#14324292[How to use GLUT/OpenGL to render to a file?]

    \Image[opengl-rotating-triangle-image-magick.gif]
    {title=OpenGL image dumped to a file.}
    {source=https://stackoverflow.com/questions/3191978/how-to-use-glut-opengl-to-render-to-a-file/14324292#14324292}
  * https://stackoverflow.com/questions/8847899/opengl-how-to-draw-text-using-only-opengl-methods/36065835#36065835[How to draw text using only OpenGL methods?]

    \Image[https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/Texture_Atlas.png/600px-Texture_Atlas.png]
    {title=Example of a texture atlas containing glyphs.}

  * https://stackoverflow.com/questions/2571402/how-to-use-glortho-in-opengl/36046924#36046924[How to use `glOrtho()` in OpenGL?]

    \Image[OpenGL_glFrustrum_on_left_vs_glOrtho_on_right.png]
    {source=https://stackoverflow.com/questions/2571402/how-to-use-glortho-in-opengl/36046924#36046924}
  * https://stackoverflow.com/questions/17789575/what-are-shaders-in-opengl-and-what-do-we-need-them-for/36211337#36211337[What are shaders in OpenGL?]
  * https://gamedev.stackexchange.com/questions/72044/why-do-we-use-4x4-matrices-to-transform-things-in-3d/118848#118848[Why do we use 4x4 matrices to transform things in 3D?]
  * https://stackoverflow.com/questions/30864752/is-it-possible-to-build-a-heatmap-from-point-data-at-60-times-per-second/39839788#39839788[Is it possible to build a heatmap from point data at 60 times per second?] Compared CPU vs GPU shaders.

    \Image[Sinusoidal_circular_wave_heatmap_generated_with_OpenGL_shader_at_60fps.gif]
    {source=https://stackoverflow.com/questions/30864752/is-it-possible-to-build-a-heatmap-from-point-data-at-60-times-per-second/39839788#39839788}
  * https://stackoverflow.com/questions/13693946/image-processing-with-glsl-shaders/40641014#40641014[Image Processing with GLSL shaders?] Compared the CPU and GPU for a simple blur algorithm.

    \Image[Visualization_of_OpenGL_blur_algorithm_from_webcam_with_Ciro_Santilli_waving.gif]
    {source=https://stackoverflow.com/questions/13693946/image-processing-with-glsl-shaders/40641014#40641014}

    \Video[http://youtube.com/watch?v=MRhAljmHq-o]
    {title=OpenGL GPU GLSL fragment shader real time v4l2 Linux webcam computer vision box blur vs CPU}
* Node.js
  * https://stackoverflow.com/a/22004559/895245[What's the difference between dependencies, devDependencies and peerDependencies in npm package.json file?]
* Rails
  * https://stackoverflow.com/a/25626629/895245[What is the difference between +<%+, +<%=+, +<%#+ and +-%>+ in ERB in Rails?]
* \x[posix]
  * https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755[What is POSIX?] Huge classified overview of the most important things that POSIX specifies.
* \x[systems-programming]{c}
  * https://stackoverflow.com/questions/868568/what-do-the-terms-cpu-bound-and-i-o-bound-mean/33510470#33510470[What do the terms “CPU bound” and “I/O bound” mean?]
  * https://stackoverflow.com/questions/556405/what-do-real-user-and-sys-mean-in-the-output-of-time1/53937376#53937376[What do 'real', 'user' and 'sys' mean in the output of time?]

    \Image[wall,_user,_and_sys_for_CPU-bound_work_with_8_hyperthreads.png]
    {source=https://stackoverflow.com/questions/556405/what-do-real-user-and-sys-mean-in-the-output-of-time1/53937376#53937376}
    {height=600}
  * https://stackoverflow.com/questions/7880784/what-is-rss-and-vsz-in-linux-memory-management/57453334#57453334[What are RSS and VSZ in Linux memory management?]
* Security
  * https://security.stackexchange.com/a/72569/53321[Why is the same origin policy so important?]
* Media
  * https://stackoverflow.com/questions/2205070/programmatically-synthesizing-programming-music/52126471#52126471[How to programmatically synthesize music?] Question deleted, lol... so answer moved to: https://stackoverflow.com/questions/732699/how-is-audio-represented-with-numbers-in-computers/36510894#36510894[How is audio represented with numbers in computers?]

    \Video[http://youtube.com/watch?v=JISozfHATms]
    {title=Canon in D in C}
  * https://stackoverflow.com/questions/12831761/how-to-resize-a-picture-using-ffmpegs-sws-scale/36487785#36487785[How to resize a picture using ffmpeg's sws_scale()?]
* Non technical
  * \x[how-to-teach]{c}
* Eclipse
  * https://stackoverflow.com/questions/4038760/how-to-set-up-the-eclipse-for-remote-c-debugging-with-gdbserver/45608937#45608937[How to set up the Eclipse for remote C debugging with gdbserver?]
* Hardware
  * https://www.quora.com/Are-there-good-open-source-standard-cell-libraries-to-learn-IC-synthesis-with-EDA-tools/answer/Ciro-Santilli[Are there good open source standard cell libraries to learn IC synthesis with EDA tools?]
* \x[scientific-visualization-software]
  * \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]

    \Image[VisIt_zoom_in_10_million_straight_line_plot_with_some_marked_points.png]
    {source=https://stackoverflow.com/questions/5854515/large-plot-20-million-samples-gigabytes-of-data/55967461#55967461}
    {id=image-visit-zoom-in-10-million-straight-line-plot-with-some-marked-points-2}
* \x[numerical-analysis]{c}
  * \Video[http://youtube.com/watch?v=FOwYDlay8rI]
    {title="Real-time \x[heat-equation][heat equation] OpenGL visualization with interactive mouse cursor using relaxation method" by Ciro Santilli published on 2016-12-10.}
* \x[computational-physics]{c}
  * https://stackoverflow.com/questions/11175694/bullet-physics-simplest-collision-example/36987063#36987063[What is the simplest collision example possible in a Bullet Physics simulation?]

    \Image[https://i.stack.imgur.com/9eVe9.png]
    {title=gnuplot plot of the y position of a sphere bouncing on a plane simulated in Bullet Physics.}
    {source=https://stackoverflow.com/questions/11175694/bullet-physics-simplest-collision-example/36987063#36987063}
* \x[register-transfer-level] languages like \x[verilog] and \x[vhdl]
  * https://stackoverflow.com/questions/38108243/is-it-possible-to-do-interactive-user-input-and-output-simulation-in-vhdl-or-ver/38174654#38174654[Is it possible to do interactive user input and output simulation in VHDL or Verilog?]
* \x[android]
  * https://stackoverflow.com/questions/1809774/how-to-compile-the-android-aosp-kernel-and-test-it-with-the-android-emulator/48310014#48310014[How to compile the Android AOSP kernel and test it with the Android Emulator?]

    \Image[Android_AOSP_8.1.0_built_from_source_running_in_QEMU.png]
    {source=https://stackoverflow.com/questions/1809774/how-to-compile-the-android-aosp-kernel-and-test-it-with-the-android-emulator/48310014#48310014}
* Debugging
  * https://stackoverflow.com/questions/1345670/stack-smashing-detected/51897264#51897264[What is the "Stack smashing detected" error in GCC and how to solve it?]
  * https://stackoverflow.com/questions/7880784/what-is-rss-and-vsz-in-linux-memory-management/57453334#57453334[What is RSS and VSZ in Linux memory management?]
  * https://stackoverflow.com/questions/3899870/print-call-stack-in-c-or-c/54365144#54365144[How to print the call stack in C or C++?]
  * https://stackoverflow.com/questions/6261201/how-to-find-memory-leak-in-a-c-code-project/57877190#57877190[How to find memory leaks in C++ code?]
* Optimization
  * https://stackoverflow.com/questions/310974/what-is-tail-call-optimization/55230417#55230417[What is tail call optimization?]
  * https://stackoverflow.com/questions/375913/how-can-i-profile-c-code-running-on-linux/60265409#60265409[How can I profile C++ code running on Linux?] Compares gprof, valgrind callgrind, perf and gperftools on a simple executable.

    \Image[http://web.archive.org/web/20200229164327if_/https://i.stack.imgur.com/mM8NQ.png]
    {title=gprof2dot image generated from the gprof data of a simple test program.}
    {source=https://stackoverflow.com/questions/375913/how-can-i-profile-c-code-running-on-linux/60265409#60265409}
* Mathematics
  * https://math.stackexchange.com/questions/776039/intuition-behind-normal-subgroups/3732426#3732426[What is the intuition behind normal subgroups?]

    \Image[Diagram_of_the_fundamental_theorem_on_homomorphisms.svg]
* Physics
  * \x[uranium-vs-plutonium-quora-answer-by-ciro-santilli][What is the difference between plutonium and uranium?]
* Biology
  * \x[oxford-nanopore-river-bacteria]{c}

    \Image[https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Oxford_Nanopore_MinION_top_cropped.jpg/392px-Oxford_Nanopore_MinION_top_cropped.jpg]
* Home DIY
  * \x[window-blackout]{c}

    \Image[https://upload.wikimedia.org/wikipedia/commons/a/a6/Total_Blackout_Cassette_Roller_Blind_With_Curtains.jpg]

=== How to contact Ciro Santilli

To contact \x[ciro-santilli] publicly about any general subject that is not covered in a more specif repository, including saying hi or suggestions about his website, create a \x[github] issue at: https://github.com/cirosantilli/cirosantilli.github.io/issues/new

For comments about China first read:
* https://github.com/cirosantilli/china-dictatorship#faq
* https://github.com/cirosantilli/china-dictatorship/blob/master/CONTRIBUTING.md
and then create a GitHub issue at: https://github.com/cirosantilli/china-dictatorship/issues/new

If you need private contact, extract his email from on of his GitHub repos or use LinkedIn.

\a[https://en.wikipedia.org/wiki/Disqus][Disqus comments] were removed from his website in 2019-05-04, a manual dump is \a[disqus-archive/][available here], removal rationale at: \x[why-ciro-santilli-removed-disqus-comments-from-his-website-in-2019-05-04].

=== Accounts controlled by Ciro Santilli

\x[ciro-santilli] controls the following accounts.

With non-trivial activity:
* https://archive.org/details/@cirosantilli
* https://commons.wikimedia.org/wiki/User:Cirosantilli2
* https://www.facebook.com/cirosantilli/ Ciro accepts all friend requests there, but expect a few non-technical posts
* https://www.quora.com/profile/Ciro-Santilli
* https://www.reddit.com/user/cirosantilli/ Proof: https://www.reddit.com/r/CirosantilliTest0/comments/5ek3di/i_own_this_website/

Other accounts:
* http://seqanswers.com/forums/member.php?u=90053
* http://answers.gazebosim.org/users/2289/cirosantilli/
* https://4programmers.net/Profile/86786
* https://9gag.com/u/cirosantilli
* https://addons.mozilla.org/en-US/firefox/user/cirosantilli/
* https://androidforums.com/members/ciro-santilli.1918307
* https://ask.libreoffice.org/en/users/2352/cirosantilli/
* https://bbs.archlinux.org/profile.php?id=116270
* https://brilliant.org/profile/ciro-il1uxz/
* https://bugzilla.gnome.org/page.cgi?id=describeuser.html&login=ciro.santilli@gmail.com
* https://cirosantilli.blogspot.com/
* https://cirosantilli.imgur.com Proof: https://imgur.com/gallery/mexv1Bk/comment/1734086983
* https://community.arm.com/people/cirosantilli
* https://community.atlassian.com/t5/user/viewprofilepage/user-id/680821
* https://community.plos.org/people/cirosantilli
* https://community.skype.com/t5/user/viewprofilepage/user-id/2646858
* https://community.zimbra.com/members/cirosantilli
* https://del.icio.us/cirosantilli
* https://dev.to/cirosantilli
* https://developer.mbed.org/users/cirosantilli/
* https://devtalk.nvidia.com/member/2118846/
* https://droit-finances.commentcamarche.net/profile/user/cirosantilli
* https://en.wikipedia.org/wiki/User:Ciro.santilli also belongs to Ciro, but he lost the password
* https://en.wikipedia.org/wiki/User:Cirosantilli2
* https://eternagame.org/web/player/260828/
* https://figshare.com/authors/Ciro_Santilli/656781
* https://forum.osdev.org/memberlist.php?mode=viewprofile&u=16372
* https://forum.pine64.org/member.php?action=profile&uid=17386
* https://forum.videolan.org/memberlist.php?mode=viewprofile&u=173503
* https://forum.xda-developers.com/member.php?u=7116837
* https://forums.androidcentral.com/members/cirosantilli-2734491
* https://forums.lenovo.com/user/viewprofilepage/user-id/1561639
* https://framasphere.org/people/78a975c0b6c40133a3032a0000053625 https://framasphere.org/posts/1519871
* https://gitlab.com/u/cirosantilli
* https://hackaday.io/cirosantilli
* https://hinative.com/en-US/profiles/5276462
* https://identity.kde.org/index.php?r=people/view&uid=cirosantilli
* https://jsfiddle.net/user/cirosantilli/
* https://launchpad.net/~cirosantilli
* https://nanohub.org/members/146301/
* https://next-episode.net/user/cirosantilli/
* https://opencollective.com/ciro-santilli
* https://orcid.org/0000-0003-2895-7763
* https://peerj.com/cirosantilli/
* https://profile.edx.org/u/ciro_santilli
* https://profiles.3dgames.com.ar/profiles/1002278
* https://pypi.org/user/cirosantilli/
* https://raidforums.com/User-cirosantilli
* https://rubygems.org/profiles/cirosantilli
* https://software.intel.com/en-us/user/1090688
* https://soundcloud.com/cirosantilli
* https://steamcommunity.com/id/cirosantilli/
* https://support.mozilla.org/en-US/user/cirosantilli
* https://tabmixplus.org/forum/memberlist.php?mode=viewprofile&u=59846
* https://talk.commonmark.org/users/cirosantilli
* https://talk.jekyllrb.com/users/cirosantilli
* https://talks.cam.ac.uk/user/show/81142
* https://tatoeba.org/eng/user/profile/cirosantilli
* https://telegram.me/cirosantilli
* https://tuleap.net/users/cirosantilli
* https://tuleap.ring.cx/users/cirosantilli
* https://twitter.com/cirosantilli2
* https://twittercommunity.com/users/cirosantilli/activity
* https://vk.com/id595305194
* https://wiki.qemu.org/User:Cirosantilli
* https://www.airbnb.com/users/show/45794827
* https://www.bibsonomy.org/user/cirosantilli
* https://www.biostars.org/u/50170/
* https://www.bulletphysics.org/Bullet/phpBB3/memberlist.php?mode=viewprofile&u=11704
* https://www.codingame.com/profile/cddd0a711c22d97e8264361f7c8205567563841
* https://www.dailymotion.com/ciro-santilli
* https://www.digitalocean.com/community/users/cirosantilli
* https://www.ebay.com/usr/cirosantilli
* https://www.edaboard.com/member587087.html
* https://www.flickr.com/photos/cirosantilli/ Ugly ID: https://www.flickr.com/photos/141515492@N02/
* https://www.freecodecamp.org/fcc8f660b91-167c-4b04-a8da-5d50cdb46def
* https://www.gitbook.com/@cirosantilli
* https://www.hackerrank.com/cirosantilli
* https://www.hackster.io/cirosantilli
* https://www.html5gamedevs.com/profile/30103-cirosantilli/
* https://www.imdb.com/user/ur59802249
* https://www.instagram.com/cirosantilli/
* https://www.kaggle.com/cirosantilli
* https://www.linux.org/members/ciro-santilli.62540/
* https://www.linuxquestions.org/questions/user/cirosantilli-688439/
* https://www.meetup.com/members/252568305/
* https://www.mentebinaria.com.br/profile/1987-ciro-santilli/
* https://www.metacritic.com/user/cirosantilli
* https://www.mohu.rocks/people/cirosantilli
* https://www.mudhut.com/user/1995000
* https://www.myopportunity.com/en/profile/ciro-santilli
* https://www.npmjs.com/~cirosantilli
* https://www.opengl.org/discussion_boards/member.php/40269-cirosantilli
* https://www.patreon.com/cirosantilli
* https://www.plurk.com/cirosantilli
* https://www.raspberrypi.org/forums/memberlist.php?mode=viewprofile&u=273389
* https://www.shadertoy.com/user/cirosantilli
* https://www.strava.com/athletes/47913768
* https://www.tastekid.com/ciro.santilli
* https://www.ted.com/profiles/5822760
* https://www.transifex.com/user/profile/cirosantilli
* https://www.tripadvisor.com/members/cirosantilli

Accounts in Chinese websites. These accounts might be banned or altered or offer other limitations, so Ciro only communicates briefly through them:
* http://bbs.nibaedu.com/index.php?m=space&uid=70
* http://www.renren.com/338003848/profile
* http://www.tianya.cn/109285544 (can't post, no cell phone)
* https://hacpai.com/member/cirosantilli unable to login as of 2019-10-12, reason unclear, either ban or website too crappy.
* https://pincong.rocks/people/cirosantilli
* https://tieba.baidu.com/home/main?id=5cd56369726f73616e74696c6c69c944
* https://v2ex.com/member/cirosantilli
* https://www.zhihu.com/people/cirosantilli. Ciro was https://github.com/cirosantilli/china-dictatorship/tree/746d7e851097bfacfb03149138f0e16c8da9d8db#zhihu-ban[prevented from posting in 2018-06-25], and https://github.com/cirosantilli/china-dictatorship/tree/55e0ab569884e261119fd7683d677644df5c7ca1#zhihu-purge[the account and all content mentioning him were taken down in 2019-11-03].

Dead websites:
* http://www.citeulike.org/user/cirosantilli (2019-05)

=== Ciro Santilli's ideology
{c}

Welcome to the wonderful world of Cirism!

==== Unconditional basic income

https://en.wikipedia.org/wiki/Basic_income[Unconditional basic income] is \x[ciro-santilli]'s ultimate https://en.wikipedia.org/wiki/Transhumanism[non-transhumanist] technological dream: to reach a state of technological advancement and distribution of resources so high that everyone gets money for doing nothing, enough for:
* basic survival needs: food, housing, clothes, hygiene, etc.
* two children to keep the world going. Or immortality tech, but is harder and borderline transhumanist :-)
* high speed computer and Internet

Once a person has that, they can \x[write-free-books-to-get-famous-website]["learn, teach"] and create whatever they want. Or play \x[video-game]{p} all day long if they wish.

https://en.wikipedia.org/wiki/Basic_income_pilots[Ciro santilli will not live to see this], and is content with helping it happen faster by increasing the efficiency of the world as. And having at least two well educated kids to carry on the project after he dies :-)

Technologies which would help a lot towards unconditional basic income, and might be strictly required required are:
* \x[artificial-general-intelligence]
* affordable https://en.wikipedia.org/wiki/Humanoid_robot[humanoid robots] with human-like energy efficiency and https://en.wikipedia.org/wiki/Power-to-weight_ratio[power-to-weight ratio].

  This is even less likely than AGI due to the \x[moore-s-law][end of silicon Moore's Law] and at the start of the Genome's Moore's law: information doubles, small sizes halve, but macroscopic mechanical artifacts stay the same.

  \x[brain-computer-interfaces][brain computer interfaces] are pretty certain to happen however after \x[ciro-santilli] dies.

So in the worst case we can just grow brainless bodies and replace the cavity hole with a computer that controls the body, possibly with high level decisions coming from a remote building-sized genetically engineered biological AGI brain.

Of course, it is all about costs. A human costs about http://content.time.com/time/health/article/0,8599,1808049,00.html[130k 2010 USD / year]. So how cheap can we make the AGI / robot human equivalent / year for a given task?

AGI + humanoid robots likely implies https://en.wikipedia.org/wiki/AI_takeover[AI takeover] though. It would then come down to human loving bots vs human hating bots fighting it out. It will be both terrifying and fun to watch.

AGI alone would be very dangerous, in case it can get control of our nuclear arsenals through software zero days or https://en.wikipedia.org/wiki/Social_engineering_%28security%29[social engineering]. Although some https://www.quora.com/Could-a-group-of-hackers-break-into-military-networks-and-launch-or-detonate-nuclear-missiles[claim that is unlikely].

Humanity's best bet to achieve silicon AGI today is to work on: \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development].

==== Having more than one natural language is bad for the world

Natural language diversity is \x[art][beautiful, but useless].

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/5/50/Pieter_Bruegel_the_Elder_-_The_Tower_of_Babel_%28Vienna%29_-_Google_Art_Project.jpg/800px-Pieter_Bruegel_the_Elder_-_The_Tower_of_Babel_%28Vienna%29_-_Google_Art_Project.jpg]
{title=Even the Bible writers already know that multiple languages suck as seen from the https://en.wikipedia.org/wiki/Tower_of_Babel[Tower of Babel] parable.}

The fact that in poor countries a huge number of people do not speak the economically dominating language of the world (currently English), is a major obstacle to the development of those countries.

Despite us being in the information age, the people in those countries cannot fully benefit from it at all!

Teaching its people English should be the number one priority of any country. Without that, there can be no technological development. Everything else is secondary and can be learnt off the Internet once you know English.

And the most efficient way to do that, is that every country should create amazing free open source English learning material for their own language.

Also consider the \x[europe][European] countries.

What big companies have been created in Europe in the past 50 years, that have not been bought out by \x[united-states-of-america][American] or Japanese companies? \x[illumina][Solexa] (600M USD in 2007)? https://en.wikipedia.org/wiki/CSR_(company)[CSR] (2.5B USD in 2015)? https://en.wikipedia.org/wiki/Arm_Holdings[Arm Holdings] (32B USD in 2016)?

The key problem is that there are so many small countries in Europe, that any startup has to deal with too many incompatible legislation and cannot easily sell to the hole of Europe.

So then a larger company from a more uniform country comes and eats it up!

So why can't Europe unify its laws?

Because the countries are still essentially walled off by languages.

There isn't true mobility of people between countries.

You just can't go study or work in any other country (except for the UK, when it was still in the EU) without putting a huge effort into learning its language first.

Without this, there isn't enough mixing to truly make cultures more uniform, and therefore allow the laws to be more uniform.

Europe can't even unify basic things like a marriage registry, or the posting of parcels, which often get lost and require you to contact people who may not speak English.

Equally so, it can't force little fiscal paradises like Ireland, Luxembourg and Switzerland to not offer ridiculously low taxes and incentives which make them entry points for foreign companies to rape Europe.

For this reason, Europe will only continue to go downhill with the years, and the \x[united-kingdom] will continue to try and https://en.wikipedia.org/wiki/Mitochondrion[endosymbiose] into a state of the \x[united-states-of-america][USA] (although https://github.com/cirosantilli/china-dictatorship/tree/1d69f2605e7c2602867344a70c6eed838b930105#the-west-must-ban-the-import-telecommunications-devices-from-china[at times it seems that it would rather endosymbiose with China instead]).

The https://en.wikipedia.org/wiki/Linguistic_relativity[Sapir–Whorf hypothesis] is bullshit outside of poetry, and the ending of https://en.wikipedia.org/wiki/Arrival_(film)[Arrival (2016)] makes one want to puke, where learning a language changes not only your brain, but also Ciro's precious \x[physics]["laws" of Physics]!

Much more likely are https://en.wikipedia.org/wiki/To_Serve_Man_(The_Twilight_Zone)[To Serve Man] / https://en.wikipedia.org/wiki/A_Small_Talent_for_War[A Small Talent for War] events!

Remember that those ideas come from a person who \x[ciro-santilli-s-natural-languages-skills][speaks 3.5 languages in 2019], and see absolutely no practical difference between them.

Ciro does however believe that spoken Chinese is a better language than English overall from a purely "ease of learning from scratch point of view" as mentioned at: https://github.com/cirosantilli/china-dictatorship/tree/6fdeb5aa3826c69f7c058de4e6f652a6924bc08a#does-ciro-santilli-speak-chinese[]. But as mentioned before, Ciro just doesn't think that the different is that great to justify replacing English. Chinese writing is completely insane of course, completely out of the question.

One interesting anecdote is that Ciro met his \x[ciro-santilli-s-wife][wife] in French, and talking to her primarily in English feels really weird, so language does matter in love.

People with similar ideas:
* https://wiki.dandascalescu.com/essays/english-universal-language

==== Don't be a pussy

https://quoteinvestigator.com/2018/05/07/overcome/

\Q[If you want to do something, but you are afraid to do it, then that is likely what you should do.]

https://quoteinvestigator.com/2013/11/08/not-bend/

\Q[Don't bend; don't water it down; don't try to make it logical; don't edit your own soul according to the fashion. Rather, follow your most intense obsessions mercilessly.]

For example, when \x[ciro-santilli] was deciding what to do in university, he wanted mostly to do pure \x[physics].

But because he was afraid he was going to die poor and unemployed because of that, he picked engineering instead.

That was a mistake.

His family was not even poor. He was young and did not have a family to support. His father even told him: "do whatever the fuck you want, we support your decision".

But he was a coward.

It was also in part because a physicist uncle which he respected suggested that as an engineer Ciro might be able to make useful contributions to tooling required by physics. When https://en.wikipedia.org/wiki/Roberto_Salmeron[Roberto Salmeron] died in 2020, Ciro's friends shared https://www.youtube.com/watch?v=DtqDLN3qT2w[this 2013 video interview] with the late professor, where he explains he first went to the \x[university-of-sao-paulo-brazil] to study engineering (like Ciro), but then fell for his passion for physics (like Ciro?), his first task being to build a \x[geiger-counter], thus explaining the likely origin of the uncle's theory. But who knows, maybe he was right. Maybe Ciro's \x[write-free-books-to-get-famous-website] will become huge and help a lot of people, and it might not have had Ciro not done engineering and learnt programming. Destiny operates in weird ways sometimes.

Furthermore, while in University, Ciro learnt about a fantastic full time course that any student could transfer to called https://pt.wikipedia.org/wiki/Curso_de_Ciências_Moleculares[Molecular Science Course (Curso de Ciêncisa Moleculares, CCM)] (good http://www.scielo.br/scielo.php?script=sci_arttext&pid=S1806-11172017000300301&lng=pt&tlng=pt[Portuguese overview])that teaches various \x[write-free-books-to-get-famous-website-motivation][natural sciences topics which Ciro loves (Mathematics, Physics, Chemistry, Biology)] and which students from the entire university can apply to transfer to only after joining the university, with the guarantee that they can go back to their original courses if they didn't adapt to the new course.

But did Ciro do it? Nope, he remained an even larger coward.

Had he studied more sciences, he might have been happier, and might have had greater achievements later in life, in particular when he went to \x[ecole-polytechnique].

Maybe not, but now this doubt will never leave his mind until the final day.

Similar thoughts crossed his mind when he started his \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][campaign for freedom of speech in China], but this time he had learnt the lesson, and went for it, and it felt very good.

If you have a day job, but also have a dream, and want to keep the day job for a reason, try to reserve the time of the day that your brain works best before or after work for your dream.

Work a little less well for you boss, and a little better for yourself. \x[silk-road-website][Ross agrees]: "I hated working for someone else and trading my time for money with no investment in myself". Selling drugs online is not advisable however.

Maybe you will be fired, but long term, having tried, or even succeeded your dream, or a \x[the-side-effects-of-ambitious-goals-are-often-the-most-valuable-thing-achieved][one of its side effects], will be infinitely more satisfying.

The same goes for school, and maybe even more so because your parents can still support you there, some Gods who followed this advice:
* https://en.wikipedia.org/wiki/George_M._Church[George M. Church] "\[We\] hope that whatever problems… contributed to your lack of success... at Duke will not keep you from a successful pursuit of a productive career." Lol, as of 2019 the dude is https://bioengineeringcommunity.nature.com/users/20939-laura-defrancesco/posts/57342-a-conversation-with-george-church[the most famous biotechnologist in the world], those "problems" certainly didn't keep him back.
* https://en.wikipedia.org/wiki/Freeman_Dyson[Freeman Dyson] proved the equivalence of the three existing versions of \x[quantum-electrodynamics] theories that were around at his time, and he has always been proud of not having a PhD!

  \Video[http://youtube.com/watch?v=DzC1IRYN_Ps]
  {title="Freeman Dyson - Why I don't like the PhD system (95/157)" published by by \x[web-of-stories][Web of Stories] on Sep 6, 2016.}
* Person that Ciro met personally and shall remain anonymous for now for his privacy: once Ciro was at a bar with work colleagues casually, it was cramped, and an older dude sat next to his group.

  The dude then started a conversation with Ciro, and soon he explained that he was a mathematician and software engineer.

  As a Mathematician, he had contributed to the \x[classification-of-simple-finite-groups], and had a short Wiki page because of that.

  He never did a PhD, and said that academia was a waste of time, and that you can get as much done by working part time a decent job and doing your research part time, since you skip all the bullshit of academia like this.

  Yet, he was still invited by collaborating professors to give classes on his research subject in one of the most prestigious universities in the world. Students would call him Doctor X., and he would correct them: Mister X.

  As a software engineer, he had done a lot of hardcore assembly level optimizations for x86 for some mathematical libraries related to his mathematics interests. He started talking microarchitecture with Ciro's colleagues.

  And he currently worked on an awesome open source project backed by a company.

  At last but not least, he said he also fathered 17 children by donating his sperm to lesbian mothers found on a local gay magazine, and that he had met most/all of those children after they were born.

  A God. Possibly the most remarkable person Ciro ever met, and his jaw was truly dropped.

Companies can help you grow because you see real problems from within them, but their end goal is to consume you as much as possible. Don't let that happen. Invest part of what you gain, in yourself.

Don't be a pussy. Be a http://archive.is/W1ocv[based God].

\Image[https://web.archive.org/web/20190619194434im_/http://assets.amuniversal.com/d871a9c06d6401301d80001dd8b71c47]
{title=Dilbert "A small brain irrationally puts more weight on a small loss than on a huge opportunity" cartoon published on 2000-02-03.}
{id=image-dilbert-small-loss}
{height=300}
{source=https://dilbert.com/strip/2000-02-03}

\Image[https://web.archive.org/web/20200303102830/https://pbs.twimg.com/media/DXtGN6tU0AAGnHk?format=jpg&name=large]
{title=Jake Likes Onions "Slowly" cartoon.}
{description=This is what trying to reach a dream part time feels like. The cartoon reads: "The tiger pursues its prey. Slowly. The human pursues its life goals. Slowly. Very slowly.".}
{height=500}
{source=https://twitter.com/jakelikesonions/status/971447358771941376}

\Video[http://youtube.com/watch?v=kYfNvmF0Bqw]
{title=Excerpt from the documentary film "\x[steve-jobs][Steve Jobs]: Secrets of Life" (1994) by "Silicon Valley Historical Association" published on 2011-10-06.}

\Q[When you grow up you tend to get told that the world is the way it is and your life is just to live your life inside the world. Try not to bash into the walls too much. Try to have a nice family life, have fun, save a little money. That's a very limited life. Life can be much broader once you discover one simple fact: Everything around you that you call life was made up by people that were no smarter than you. And you can change it, you can influence it… Once you learn that, you'll never be the same again.]

Of course, https://en.wikipedia.org/wiki/Survivorship_bias[survivorship bias] applies.

\Video[http://youtube.com/watch?v=XTv50ELCBr4]
{title=\x[alan-watts][Alan Watts] "If Money Were No Object What Would You Do" talk.}

===== Steve Jobs 2005 Stanford Commencement Address
{c}

Ciro feels that this resonates a lot with his \x[write-free-books-to-get-famous-website].

Supercut:
\Q[
The minute I dropped out I could stop taking the required classes that didn't interest me, and begin dropping in on the ones that looked far more interesting.

And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on.

Because I had dropped out and didn't have to take the normal classes, I decided to take a calligraphy class to learn how to do this.

None of this had even a hope of any practical application in my life.

If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts.

Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backward 10 years later.

Again, you can't connect the dots looking forward; you can only connect them looking backward. So you have to trust that the dots will somehow connect in your future. You have to trust in something — your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.
]

Then:
\Q[
You've got to find what you love.

And that is as true for your work as it is for your lovers.

Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work.

And the only way to do great work is to love what you do. If you haven't found it yet, keep looking.

Don't settle. As with all matters of the heart, you'll know when you find it.

And, like any great relationship, it just gets better and better as the years roll on.

So keep looking until you find it.

Don't settle.
]

And:
\Q[
When I was 17, I read a quote that went something like: "If you live each day as if it was your last, someday you'll most certainly be right."

It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: "If today were the last day of my life, would I want to do what I am about to do today?"

And whenever the answer has been "No" for too many days in a row, I know I need to change something.
]

And then he quotes form the https://en.wikipedia.org/wiki/Whole_Earth_Catalog[Whole Earth Catalog], a paper Atlas from the '70s he admired:
\Q[Stay Hungry. Stay Foolish]

\Video[http://youtube.com/watch?v=UF8uR6Z6KLc]

==== Backward design

https://en.wikipedia.org/wiki/Backward_design

This is one of \x[ciro-santilli][Ciro Santilli's] most important principles.

\x[steve-jobs][Steve Jobs] has a great quote about this. He's totally right on this one!

\Q[You've got to start with the customer experience and work backwards to the technology. You can't start with the technology and try to figure out where you're going to sell it.]

\Video[http://youtube.com/watch?v=FF-tKLISfPE]
{title="Steve Jobs Insult Response" excerpt from the https://en.wikipedia.org/wiki/Apple_Worldwide_Developers_Conference[1997 WWDC].}

Decide your goal first, and then do whatever is needed to how to reach it.

Don't start randomly learning tech, because that means you \x[how-to-teach/help-students-achieve-their-goal][will waste a lot of time learning useless stuff].

There is of course some level chicken-and-egg paradox in this, as \x[image-dilbert-nuclear-power-user-requirements][highlighted by Dilbert], since choosing an achievable goal in the first place requires some level of technical understanding.

\Image[http://web.archive.org/web/20200331090146im_/https://assets.amuniversal.com/1af002106d5c01301d80001dd8b71c47]
{title=Dilbert cartoon about designing a nuclear power plant from user requirements published on 2002-02-20.}
{height=300}
{id=image-dilbert-nuclear-power-user-requirements}
{source=https://dilbert.com/strip/2002-02-20}

However, it is much more common that people will get way too involved in learning useless stuff and lose sight of the \x[art][useful end goals].

Rather, take an iterative approach:
* start with an ambitious end goal
* learn a bit of tech to try and reach it
* realize that you can't reach your end goal and pivot a bit to a related end goal that seems more realistic: \x[the-side-effects-of-ambitious-goals-are-often-the-most-valuable-thing-achieved]
* loop

There is some truth to the counter argument that "but if you don't spend a lot of time learning the basics, you can never find solutions".

However, these people underestimate your \x[brain][brain]. The brain is beautiful, and human intuition is capable of generating interest towards the things that are actually useful to reach your goal. When you feel like learning something related to your goal, by all means, give yourself the time to do so. But this still be \x[write-free-books-to-get-famous-website-motivation][much more efficient than just learning random things that other people tell you to learn].

A Coding Horror \x[software-engineer][software specific] take on this issue: https://blog.codinghorror.com/please-dont-learn-to-code/

===== How to become a good programmer?

Or: how to learn X.

This pops up on Reddit every week.

That is the wrong question.

The right question is: what is the most awesome project I can do to improve the world?

Then, once you decide to try one, if that involves programming, learn to program to achieve that goal.

And if doesn't involve programming, then don't learn to program, and learn whatever you actually need to reach that goal instead.

Having that goal is the only way to be motivated to do something.

==== The side effects of ambitious goals are often the most valuable thing achieved

A quote by \x[university-of-sao-paulo-brazil][Ciro's Teacher R.]:
\Q[Sometimes, even if our end goals are too far from reality, the side effects of trying to reach them can have meaningful impact.]

If the goals are not ambitious enough, you risk not even having useful side effects so show in the end!

By doing the prerequisites of the impossible goal you desire, maybe the next generation will be able to achieve it.

This is basically why \x[ciro-santilli-s-stack-overflow-contributions][Ciro Santilli has contributed to Stack Overflow], which has happened while was doing his overly ambitious projects and notice that all kinds of basic pre-requisites were not well explained anywhere.

This is especially effective when you use \x[backward-design], because then you will go "down the dependency graph of prerequisites" and smoothen out any particularly inneficient points that you come across.

Ciro often has the following metaphor in his mind:
\Q[
New discoveries are like very rough trails where you have to cut through heavy bushes (an original research paper).

After a brave explorer goes through this rough path for the first time and charts it, it does become much easier for others to follow it later on, but it still requires a lot of effort to go through them, because there are still a lot of rush bushes and some parts of the map are not very clear (reading and reproducing the research paper to further advance the art).

As enough people start going through, the probability that \x[ciro-santilli-s-bad-old-event-memory][someone with a bad memory] ends up walking it increases, and that person ends up pounding the earth into a https://dictionary.cambridge.org/dictionary/english/off-the-beaten-track[beaten track] and increasing the trail clearance of the beginning of the trail at least (\a[https://en.wikipedia.org/wiki/Review_article][review paper]).

There finally comes a point when even the local government starts to notice this trail is important, and pays someone to add some stone pavement and rails on the most exposed parts of the trail (post and undergrad education).

And at last, Ciro Santilli \x[ciro-santilli-s-stack-overflow-contributions][comes with a bulldozer] and creates \x[write-free-books-to-get-famous-website-motivation][an autoroute that thousands of people can cruise at high speed without any effort] (Q&A, \x[open-knowledge] HTML websites).
]

==== Ciro Santilli's best random thoughts
{c}

These are "original" thoughts that Ciro had which at some point in the past amused him. Some would call them pieces of wisdom, others self delusion. All have likely been thought by others in the past, and some of them Ciro thinks to himself after a few years: "why did I like this back then??".

After Ciro's colleague was doing that in a project:
\Q[https://en.wikipedia.org/wiki/Chuck_Norris_facts[Chuck Norris] can parse pseudocode.]

On the theory vs practice of computer science:
\Q[Whereas \x[turing-complete][Turing completeness] is enough for \x[mathematician]{p}, humans need "run-on-Debian-complete".]

On how human perception of media is completely unrelated to the computer's transmission mechanism:
\Q[Media for humans is not byte streams. It is magic.]

This is of course just another version of https://en.wikipedia.org/wiki/A_picture_is_worth_a_thousand_words[one picture is worth a thousand words].

Others:
* \x[science-is-the-reverse-engineering-of-nature]

==== Animal rights

\x[ciro-santilli] has mixed feelings about animal rights.

On one hand, his irrational side wants of course all animals to be happy.

On the other, he does not care about this enough to not kill and eat them, even though he believes that you could live off plants relatively well.

His more rational side says: humans are sacred. Either because you believe in the \x[religion][soul], or because your \x[brain][built-in empathy behaviours]. If it is not a human, do whatever you want to it. Killing is already undoubtedly the greatest sin. It is not OK to kill a human painlessly is it? So if torturing it brings humans good, then do it.

Of course, this does get use close and closer to "the what is a human" question, which is more relevant than ever in the \x[molecular-biology-technologies][awakening of genetics]: all species are after all a continuum right?

And Ciro does not have a simple solution to this problem, besides that in 99.9999% the answer is obvious to 99.9999% of the people, and for the others cases, we have to do it like the law and make flawed rules to cover the remaining 0.000099999% cases and let juries decide the rest.

The only other sensible sacredness barrier is the common vegetarian "nervous systems are sacred" one. But how can you believe that if you also follow the religion of \x[physics], where \x[physics-and-the-illusion-of-life][everything is just made of atoms]?

Is it evil to take one neuron and torture it? What does that even mean? It will be fun when \x[brain][pain and pleasure] are fully understood.

And you are going to have a really hard time when https://en.wikipedia.org/wiki/Ahimsa_in_Jainism[mosquitoes start transmitting deadly diseases that kill your family].

Laws in most 2020 Western modern societies have converged to a hypocritical balance between not offending people too much by hiding the killing and minimizing the pain when possible at low cost. Killing animals painlessly is basically always fine if it brings any "non sadistic" pleasure to humans. And torturing animals is fine with approval e.g. to make medicines.

This has the downside of increasing costs for society. Maybe there are practical benefits besides people feeling bad about animals? Maybe we would have more serial killers if people were free to torture animals? Maybe people in butcher shops would become depressive if their bosses weren't forced to use more expensive painless killing methods? Neither of those seems like huge arguments though.

It eventually comes down to: "how much more is a human life worth than that of an animal" which brings \x[jesus]'s https://www.biblegateway.com/passage/?search=Matthew+6%3A25-34&version=NIV[Matthew 6:25-34 "Do Not Worry"] (\a[https://web.archive.org/web/20190801221835/https://www.biblegateway.com/passage/?search=Matthew+6%3A25-34&version=NIV][archive]) quote to mind:
\Q[Therefore I tell you, do not worry about your life, what you will eat or drink; or about your body, what you will wear. Is not life more than food, and the body more than clothes? Look at the birds of the air; they do not sow or reap or store away in barns, and yet your heavenly Father feeds them. Are you not much more valuable than they?]

Non-vegetarian pets owners also baffle Ciro, as most of them basically extend the sacred human line further arbitrarily to certain other cute looking animals like dogs, cats or rabbits, but will gladly kill a cow indirectly by paying someone to pay someone to pay someone to cut it into small pieces. Or they believe that certain specific individuals are sacred. Admittedly, the latter is more rational, and looks a lot of how we treat our own families well, and can accept that other families are not doing so well.

Ciro's even more rational evil side says: the real reason why humans are sacred is a practical one: people have families that love them, and they come to kill you if you kill them, and https://en.wikipedia.org/wiki/Characters_in_Romeo_and_Juliet#Prince_Escalus[this starts endless chains of violence] that make society unbearable.

While animals feel pain when their children are killed, their memory and logic is just not good enough to fully understand that humans in general have an evil plot to it, and they don't have a method to communicate between themselves and fight back.

For similar reasons, Ciro is pro-abortion.

Futurama's S02E15 \x[the-best-television-series-of-all-time]["The Problem With Popplers" episode] blew Ciro's mind so much.

Ciro should stop discussing topics in which infinite argument has already been had. Sometimes he writes things down so he can stop caring the next time the subject comes up, as there's no need to say it again once it is written.

==== University entry quotas

\x[ciro-santilli] is against https://en.wikipedia.org/wiki/Affirmative_action[affirmative action] university entry quotas that reserve spaces e.g. for students from discriminated races or poor families. Instead, he believes that affirmative action should take place on earlier stages of education.

Notably, \x[brazil] has implemented a very heavy university entry quota system \x[ciro-santilli-s-formal-education][after Ciro had left university there]: https://www.bbc.co.uk/news/business-23862676

This is of course easy for a white male from a privileged background to say, and infinite debate has already been had on this matter, but here goes again.

First, in defense to the personal attack, Ciro raises the fact that he has dedicated large chunks (all?) of his life to open source \x[open-source-software][software] and knowledge in general, which Ciro believes is the only way to actually make the world fairer to poor countries. His money (time) is where his mouth is.

One good argument in favor of the Brazilian quota system, is that the kids who enter university because of quotas http://www.scielo.br/scielo.php?script=sci_arttext&pid=S0100-15742009000200014[do just as well as those who don't].

Ciro has actually believes that this is possible, and offers the following possible explanation: \x[write-free-books-to-get-famous-website-motivation][most of pre-university knowledge is useless, and university selection system is crap, and Ciro wants to destroy it with a system in which anyone can learn university stuff from home].

Both the top end of the quota and non-quota kids are basically equally capable of doing useful stuff therefore.

Only a tiny fraction of what you learn in high school is useful for university or your career.

And possibly more importantly than knowledge, Ciro saw many of his colleagues (basically all of which were from relatively privileged backgrounds) "do badly" in university, because of lack of motivation, because they had chosen a course only to find that they were not interested in it because the existing \x[how-to-teach/help-students-achieve-their-goal][high school educational system is crap and does not help them find what they love] and because it costs you \x[students-must-have-a-flexible-choice-of-what-to-learn][several years of your life to change your choice in most universities] (long live \x[ecole-polytechnique]).

Maybe the fact that poor kids know that they are fucked if they fail, and so they have to succeed at any cost, might also help with motivation. Which is a terrible terrible thing, because only those who have to leeway to take risks end up taking them and making the \x[the-next-big-thing].

Ciro believes instead that only once kids have learnt university level stuff in their area of interest \x[write-free-books-to-get-famous-website-motivation][for free on the Internet] should they go through selection based on that specific and much more concentrated useful knowledge.

And this competition must only be used to distribute resources which you can't learn from fucking computers:
* laboratories. Actually, one of Ciro's most important advices to kids nowadays is that if you are in doubt about what course to choose, \x[deep-tech][make the choice that includes laboratories], because you can learn already learn \x[computer][computer] stuff for free whenever you want, but if you don't take it now, that will likely be your last opportunity to set foot on a laboratory
* \x[how-to-teach/talk-with-individuals-not-to-groups][one to one mentorship] on advanced master thesis/PhD level projects

Once this point knowledge is reached however, it starts to become unclear if a single "everyone takes the same test to avoid discrimination" test is feasible anymore, and we start entering the much more relevant (and potentially discriminatory) "I am a teacher trying to advance the state of the art, and I need https://en.wikipedia.org/wiki/Person_having_ordinary_skill_in_the_art[a person mildly skilled in the art] to do some slave labor for me", which is PhDs selection work.

If quota are in place, what will happen is that parents of the rich kids will start investing less in education, and possibly just put their kids in high schools, and do home schooling instead. This would therefore reduce the total investments the country makes in education!

Outside of the obvious technical evolution proposed, Ciro recommends the following:
* create a few select high quality free K-12 schools in densely populated areas with many unprivileged students living in them, and give \i[huge] quotas there to poor/discriminated kids such that only exceptional kids can get in without those quotas.
* \i[pay] the teachers of those select excellence schools as much as the good private schools so you actually get comparably good teachers
* implement an early selection based on quotas and entry examinations for those schools
* allow kids from outside of the local region to come to those schools by giving them free accommodation

Then let those kids pass exactly the same university entry exams, and watch them crush the average privileged kids.

This advice is similar to what is mentioned at: \x[what-poor-countries-have-to-do-to-get-richer]. When you don't have money to do everything, you must select a few good bets and focus on them. You can't pay a lot to every public school teacher, so you must select a few select places that need it the most. As those smart bets pay off, you start to have more and more money to expand the system further.

==== Students must have a flexible choice of what to learn

This is one of the main reasons why \x[ciro-santilli] invested in \x[write-free-books-to-get-famous-website].

Ciro believes that the only thing students must be forced to learn \x[having-more-than-one-natural-language-is-bad-for-the-world][is to speak read and write English] and that \x[how-to-teach/help-students-achieve-their-goal][a teacher's main job after that is to help students find their next big goals] and also ties into the \x[backward-design][backward design philosophy].

Everything else, the student must choose.

This is most notable in \x[university-entry-quotas][University entry examinations of poor countries], where students often have to wast one extra year of their lives to go through preparation for the useless university entry exams. And then, surprise surprise, if they actually get in, they find that this is not what they really wanted to do, and they just go through to the end miserably because they understandably they don't want to risk another year of their lives.

Ciro saw this first hand \x[ecole-polytechnique] which was way freer than his \x[university-of-sao-paulo-brazil][university in Brazil].

\x[steve-jobs]'s university dropout stories from \x[steve-jobs-2005-stanford-commencement-address] also come to mind.

Brown University's Open Curriculum concept sounds exemplary:
* https://www.youtube.com/watch?v=Cq_6qBnjZTA
* https://www.brown.edu/academics/undergraduate/open-curriculum

==== Rooting for sport teams

Since \x[ciro-santilli] is \x[brazil][Brazilian], this is understandably a common conversation opener.

And rightly so, since soccer in particular is truly ridiculously popular in Brazil, where "what is your local soccer team?" is just a valid a question as "which city are you from?".

So here goes Ciro's current ironic answer:
\Q[I currently root actively against Brazil.]

The ironic reason is simple: maybe is Brazil loses more on this \x[art][useless art], then maybe people will get tired of it, and instead \x[physics][invest on more useful and beautiful arts].

Notably, what Ciro really wants people to root for are:
* the number of Brazilian \x[nobel-prize]{p}, which is zero, yes, zero, as of 2020, despite a population of 210 million people. But thank God for our one https://en.wikipedia.org/wiki/Artur_Avila[Field Medal], what an epic start, even though \x[art][Mathematics is useless].
* the number of high tech companies that have a global impact, which is likely very low, and must contain only a few mammoths that dominate some local market and therefore got enough money from that to expand a bit of technology worldwide. But they were mostly not classic tech startups that did world innovation from the start.
* how low your country's https://en.wikipedia.org/wiki/Gini_coefficient[Gini coefficient is]

Don't get Ciro wrong.

\x[ciro-santilli-s-sport-practice][Playing sports yourself is amazing].

Observing professionals who do it amazingly can be beautiful.

But why the F do you have to root for a team unless your wife or children are playing in it (and even then..., how will that help?)?

What will you get from that?

Even if it is your national team, why does it matter if they win or lose?

https://en.wikipedia.org/wiki/Football_hooliganism[Hooliganism] just takes that uselessness to a hole new level.

Now some confessions.

A five year old Ciro will never forget when the feeling of Brazil won the https://en.wikipedia.org/wiki/1994_FIFA_World_Cup[1994 World Cup] on the penalties and everyone went mad.

A nine year old Ciro stopped watching the https://en.wikipedia.org/wiki/1998_FIFA_World_Cup[1998 World Cup Final] of Brazil vs France half way during the 3-0 massacre and went to his front garden to kick his soccer ball on the metallic fence gate which represented a goal.

After that, Ciro went through puberty he guesses, and noticed that the natural sciences are just cooler.

=== Ciro Santilli's website
{c}

==== Unmigrated sections of the old version of Ciro Santilli's website

It is interesting to see how your own ideas shift with time, and \x[ciro-santilli] doesn't think the following are very important anymore, so he was lazy to migrate them:
* \a[interests]
* \a[projects]
* \a[skills]

When he did the original website Ciro was in a "I must show off my skills to get a job mindset", but then after he landed a few jobs he moved to a "CV websites are useless, just do amazing projects and showcase them on your website to help them succeed" mindset.

==== Why Ciro Santilli removed Disqus comments from his website in 2019-05-04

Commit: https://github.com/cirosantilli/cirosantilli.github.io/commit/794705a201a79b5128934e69df85e3511655c03f

As Ciro started getting a lot of comments on his home page \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][about China], he decided that Disqus does not scale, and that it would be more productive long term to remove it and point people to GitHub issues instead.

Upsides of removal:
* Disqus discoverability is bad:
  * there is no decent way to search existing issues, you have to do JavaScript infinite loading + Ctrl + F. So every reply that he wrote is a waste of time, as it will never be seen again.
  * comments don't have: decent URLs, titles, metadata like tags or open / close
* Disqus archival is bad: http://web.archive.org/ does not work, and no one knows how to export the issues: https://www.archiveteam.org/index.php?title=Disqus
* before, there were two places where people could comment, Disqus and GitHub issues. Now there is just one.
* Disqus has ads if you ever reach enough traffic, which unacceptable, especially if the website owner don't get paid for them! It also makes page loads slower, although that likely does not matter much.

Downsides:
* people are more likely to comment on Disqus than to create an issue on GitHub, especially because most people use GitHub professionally. But this has the upside that there will be less shitposts as well.
* with Disqus you can see all issues attached to a page automatically, which is nice. But for as long as Ciro is alive, he intends to just solve the issues, cross link between content and issues and tag things appropriately.

Ciro's stance towards China hasn't changed, and China comments and corrections about his website are still welcome as always.

Related issue: https://github.com/cirosantilli/cirosantilli.github.io/issues/37

==== DNS configuration of Ciro Santilli's website

AKA how this https://github.com/cirosantilli/cirosantilli.github.io[GitHub page] gets served under the domain: https://cirosantilli.com

Ciro only touches this very rarely, and always forgets and go into great pain whenever a change needs to done, so it is important to document it.

The last change was of 2019-07-07, when Ciro moved from the www subdomain https://www.cirosantilli.com to the APEX https://cirosantilli.com[]. A redirect is setup from the www subdomain to APEX.

https://en.wikipedia.org/wiki/GoDaddy[GoDaddy] DNS entries:

``
Type    Name    Value                   TTL
A       @       185.199.108.153         1 Hour
A       @       185.199.109.153         1 Hour
A       @       185.199.110.153         1 Hour
A       @       185.199.111.153         1 Hour
CNAME   www     cirosantilli.github.io  1 Hour
``

where the IPs are obtained from: https://help.github.com/en/articles/setting-up-an-apex-domain#configuring-a-records-with-your-dns-provider (\a[http://web.archive.org/web/20190707085154/https://help.github.com/en/articles/setting-up-an-apex-domain#configuring-a-records-with-your-dns-provider][archive]).

Under https://github.com/cirosantilli/cirosantilli.github.io/settings

* Custom domain: `cirosantilli.com`
* Enforce HTTPS: checked

And the CNAME file is tracked in this repository: \a[CNAME].

==== The CSS of Ciro Santilli's website looks broken

That which does not exist, cannot be broken.

And of course:
* \x[one-page-to-rule-them-all]
* https://motherfuckingwebsite.com

==== Ciro Santilli's website is not mobile friendly
{c}

True \x[art] cannot be consumed in mobile format.

==== Mathematics typesetting setup of Ciro Santilli's website

\x[katex] is automatically used in \x[cirodown].

==== Media rationale of Ciro Santilli's website

===== One page to rule them all

It is true that one image is worth a thousand words, but unfortunately it is also true that one image takes up at least as much bytes as a thousand words!

Having one single page to rule them all is of course the ideal setup for a website, as you can Ctrl + F one ToC and quickly find what you want.

And, with \x[linux-kernel-module-cheat] Ciro noticed that it is very hard to write so much intelligent prose that becomes larger than reasonable to load on a single webpage.

He then started using this technique for everything he writes, including this page and \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][Chinese government].

However, if there are too many images on the page, the loading of the last images would take forever in case users want to view the last sections.

There are two solutions to that:
* be traditional and create separate web pages
* be bold and load images as they appear on the viewport: https://stackoverflow.com/questions/2321907/how-do-you-make-images-load-only-when-they-are-in-the-viewport/57389607#57389607

  Edit: OK, it was standardized with `loading=lazy`, without need JavaScript!

  Now the last awesome thing would be a method that loads first images in viewport, then those below, and then those above, that would be the ultimate solution.

  This question comes close: https://stackoverflow.com/questions/7906348/change-loading-order-of-images-already-on-page

Ciro is still deciding between those two. The traditional approach works for sure but loses the one page to rule them all benefits.

The innovative approach will work for interactive viewing, but archive.org will fail to load the images for example, and there may be other unforseen consequences.

Wikimedia Commons is awesome and automatically converts and serves smaller versions of images, so always choose the smallest images size needed by the output document. Readers can then find the higher resolution versions by following the page source.

This also comes to mind: https://motherfuckingwebsite.com

===== Where to store images
{id=media-rationale-of-ciro-santilli-s-website/where-to-store-images}

Since images are large, they bring the following challenges:
* keeping images in the main Git repository with text content makes the repository huge and slow to clone, and should not be done
* storing and serving images could cost us, which we want to avoid

To solve those problems, the following alternatives appear to be stable enough and should be used decreasing preference:
* for all images, use the separate GitHub repository: https://github.com/cirosantilli/media

  This way, the entire website is relies on a single third party: GitHub, so we have a simple https://en.wikipedia.org/wiki/Single_point_of_failure[single point of failure].

  We are at the mercy of GitHub's 1GB size policy: https://help.github.com/en/articles/what-is-my-disk-quota[], but it will take a while to hit that.

  GitLab however has a 10Gb maximum size: https://about.gitlab.com/2015/04/08/gitlab-dot-com-storage-limit-raised-to-10gb-per-repo/ so we could move there is we ever blow up 1Gb on GitHub.

  Both GitLab and GitHub allow uploading files through the web UI, so downloading a large repo is never needed to contribute.

  GitHub does not serve videos like it does images however as of 2019.
* https://commons.wikimedia.org/wiki/Main_Page[Wikimedia Commons] for videos if the following conditions are met:

  * https://commons.wikimedia.org/wiki/Commons:Project_scope[in scope]: "educational material in a broad sense", but not e.g. "Private image collections, e.g. private party photos, photos of yourself and your friends, your collection of holiday snaps and so on.". I don't think they will be too picky even with low quality photos.
  * allowed format, e.g. images or videos, but not ZIPs
  * allowed license: CC BY SA, but no fair use

  Since Wikimedia Commons has a higher level of curation and is an educational not-for-profit, it is the method most likely to remain available for the longest time.

  For this reason, we highly recommend uploading any acceptable files there as well as an additional backup.

  The downside is that its tooling is not as good, e.g. https://webapps.stackexchange.com/questions/135251/how-to-download-all-files-from-an-uploader-on-wikimedia-commons[there are a bunch of messy unofficial tools for batch operations], and upload takes more effort.

  Another downside of Wikimedia Commons is that while we can choose the basename of files, it also adds some extra SHA crap to the beginning of URLs, making them harder to predict.
* https://archive.org for anything else, e.g. videos that Wikimedia commons does not accept.

  All content will be tracked under the `cirosantilli` collection: https://archive.org/details/cirosantilli

  archive.org has a very convenient upload and lax requirements. The generated URLs are predictable (single SHA prefix for the entire collection).

  Never trust a website that is not on \x[github-pages], for-profit companies will take down everything immediately as soon as it stops making them money.

  Every external link to non-GitHub pages must be archived. And GitHub links must be forked.

  We should also backup images that Wikimedia Commons does not accept here in addition to the https://github.com/cirosantilli/media repository.

The following alternatives seem impossible because Ciro could not find if they expose direct links to the images:
* Google Photos https://webapps.stackexchange.com/questions/92777/how-to-get-the-direct-link-to-an-image-in-my-google-photos
* Imgur https://webapps.stackexchange.com/questions/84535/has-imgur-stopped-giving-direct-links

The following do have direct links:
* https://www.flickr.com e.g. https://live.staticflickr.com/7437/27402357162_7d91b73cd5_z.jpg documented at https://help.flickr.com/en_us/get-the-url-of-a-flickr-photo-S1Hnnmjym Also does automatic image size conversion. But only provides ugly autogenerated URLs.
* https://www.instagram.com does not support upload from computer? Lol?

For videos, \x[youtube] does not allow download, even of Creative Commons videos so uploading only there is not acceptable as it prevents reuse:
* https://law.stackexchange.com/questions/8033/is-it-legal-to-download-and-modify-videos-from-youtube-licensed-under-creative-c
* https://www.quora.com/Can-I-download-Creative-Commons-licensed-YouTube-videos-to-edit-them-and-use-them

==== Download Ciro's website for offline viewing

First install \x[nvm]/NPM as shown at and then:
``
git clone https://github.com/cirosantilli/cirosantilli.github.io
cd cirosantilli.github.io
npm install
cirodown .
xdg-open index.html
``

==== Why Ciro Santilli refers to himself in the third person

Because when this gets converted to a \x[write-free-books-to-get-famous-website] page, it will be easier for people to copy paragraphs/fork and write a canonical page about Ciro.

Also, what do you do when creating a pull request? Do you say I, which is not true because Ciro did not say that, or do you say "John Doe thinks" bla bla?

And because \x[ciro-santilli-s-selfish-desires][his name is awesome]! :-) Just kidding.

==== How to develop Ciro Santilli's website before the cirodown migration

The website moved from Asciidoctor to Cirodown in 2020, making this section mostly useless. But hey, history!

Ciro's website is powered by \x[github-pages] and https://github.com/asciidoctor/jekyll-asciidoc[Jekyll Asciidoc].

The source code is located at: https://github.com/cirosantilli/cirosantilli.github.io

Build locally, watch for changes and rebuild automatically, and start a local server with:

``
git clone --recursive https://github.com/cirosantilli/cirosantilli.github.io
cd cirosantilli.github.io
bundle install
npm install
./run
``

Source: \a[run]

The website will be visible at: http://localhost:4000[].

Tested on the latest Ubuntu.

Publish changes to \x[github-pages]:

``
git add -u
git commit -m 'make yourself look sillier'
./publish
``

Source: \a[publish]

GitHub forces us to use the master branch for the build output... so the actual source is in the branch `dev`.

Update the gems with:

``
bundle update
git add Gemfile.lock
git commit -m 'update gems'
``

His website was originally written in Markdown, however those were deprecated in favour of Asciidoctor when Ciro saw the light, rationale shown at: \a[markdown-style-guide#use-asciidoc]

GitHub pages is chosen instead of a single page GitHub README.adoc for the following reasons:
* Ciro will want some unsupported extensions, notably mathematics, likely with \x[mathematics-typesetting-setup-of-ciro-santilli-s-website][KaTeX server side]:
  * https://github.com/asciidoctor/asciidoctor/pull/3338
  * https://stackoverflow.com/questions/11256433/how-to-show-math-equations-in-general-githubs-markdownnot-githubs-blog
  * https://g14n.info/2014/09/math-on-github-pages/
  * https://stackoverflow.com/questions/11256433/how-to-show-math-equations-in-general-githubs-markdownnot-githubs-blog
  * https://www.quora.com/How-can-I-combine-latex-and-markdown-in-GitHub
* when GitHub dies, Ciro's website URL still lives and retains the PageRank!

=== Ciro Santilli's skills
{c}

==== Ciro Santilli's documentation superpowers
{c}

\x[ciro-santilli] has the power to document stuff in a way that makes using them awesome, as evidenced by his his \x[ciro-santilli-s-stack-overflow-contributions][Stack Overflow contributions] and other web presences.

If your project does something awesome, hiring Ciro means that more people will be able to notice that it is actually awesome, and use it.

He likes to do this in parallel to contributing new features, quickly switching between his "developer" and "technical documentor" hats.

This means of course that he will develop new features a bit slower than others, but he feel it is more valuable if end users can actually use your project in the first place.

His technique is to provide upfront extremely interactive and reproducible getting started setups that immediately show the key value of the project to users.

He backs those setups with:
* scripts that automate the setup much as possible to make things enjoyable and reproducible
* a detailed description of the environment in which he tested: which OS, version of key software, etc.
* a detailed description of what is expected to happen when you take an action, including known bugs with links to bug reports
* theory and rationale on the sections after the initial getting started, but always finely interspersed with concrete examples
* all docs contained in a Git-tracked repo, with the ability to render to a single HTML with one TOC
* short sentences and paragraphs, interspersed with many headers, lists and code blocks
A prime example of kind of setup is Ciro's \x[linux-kernel-module-cheat].

While he create this setup, he inevitably start to notice and fix:
* bugs
* annoyances on the public interface of the project
* the devs were using 50 different local scripts to do similar things, all of them semi-broken and limited. Every new hire was copying one of those local scripts, and hacking it up further.
* your crappy build / test / version control setup

Exploiting this skill, however, requires you to trust him.

When he tells to managers that he's good at documenting, they always say: great, we need better documentation! But then, one of the following may happen:
* managers forget that they wanted good documentation and just tell him to code new features as fast as possible
* they don't let him own the getting started page, but rather and expect him to try and fix the existing crappy unfixable existing getting started, without stepping on anyone's pride in the process >:-)

  This makes him tired, and less likely to do a good job.

  Good documentation requires a large number of small iterative reviews, and detailed review of every line is not always feasible.

  Too many cooks.

Ciro's passion for documentation and tooling has the effect that if you have crappy documentation and tooling and don't want them to be fixed, Ciro will end up trying to fix those tools instead of doing what you tell him to do anyways, which might lead to him quitting because he can't stand the tools, or you firing him because he's not doing the job you think I should be doing. So please, don't bother hiring Ciro if you have crappy documentation and tooling.

See also: \x[articles].

==== Ciro Santilli's natural languages skills
{c}

* English: Cambridge CPE grade B in 2004. Proficient, with minor defects in collocation/pronunciation. Learned from formal courses and from \x[ciro-santilli-s-biography][living in the UK for a few months when he was 10].
* French: TCF grade C2 in 2011. Proficient, with a bit more defects than English. \x[ciro-santilli-s-formal-education][Studied and lived in France].
* Brazilian Portuguese: \x[brazil][Native speaker]
* Chinese: see https://github.com/cirosantilli/china-dictatorship/tree/df0852b22e585785d734ec69719eddf63f9676a5#do-you-speak-chinese

When asked, Ciro likes to say that he speaks something between 1.5 and 3.5 languages in total, depending on how you count, because Portuguese, French and English are 99.99% the same, and Chinese is completely different but Ciro only knows about 50% of it if counted optimistically.

=== Ciro Santilli's psychology and physiology
{c}

Ciro Santilli's energy throughout the day varies as follows:
* morning: highest
* 11AM: peak exercise performance
* after lunch: brain death. Possibly due to Ciro's partial https://en.wikipedia.org/wiki/Siesta[Spanish descent]?
* late afternoon and evening: can do some stuff

Ciro has low tolerance to https://en.wikipedia.org/wiki/Sleep_deprivation[sleep deprivation] which makes him very irritable, and \x[window-blackout][low ability to sleep if there is any light]. It must have to do with those damned https://en.wikipedia.org/wiki/Photoreceptor_cell#Ganglion_cell_(non-rod_non-cone)_photoreceptors[ganglion cell photoreceptors].

Ciro has https://en.wikipedia.org/wiki/Synesthesia[olfactory synesthesia] for https://en.wikipedia.org/wiki/Illicium_verum[star anise (八角, bajiao)], which is widely used in \x[chinese-cuisine] and makes Ciro think uncontrollably of the color blue. Ciro does not have any other known synesthesias.

Ciro is a reptilian-like being with cold hands and feet and low blood pressure. For this reason he believes that he will die of cancer or some respiratory problem. If the \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][Chinese government] doesn't get him first that is. This also partly explains why Ciro is not a big fan of swimming.

Besides \x[chinese-cuisine][Chinese food], Ciro really likes eating fruits and nuts, maybe partly because he was \x[ciro-santilli-s-biography][born in Brazil], and partly because of monkey nature, see \x[ciro-santilli][his Chinese name]. At home he is known as "水果大王" (the big king of the fruits). Ciro is also a sucker for yoghurt (natural without added sugars and full fat, fat-tree yoghurt is terrible, often eaten with fruits). Ciro's "favorite drink" could be tonic water with freshly squeezed lemon. Tied with fresh fruit juices. Chocolate-wise, although not a huge fanatic, a Lindt dark chocolate whole hazelnut pieces bar will do the job.

Like https://en.wikipedia.org/wiki/Word_of_Wisdom[LDS believers], Ciro does not drink coffee or smoke, and only drinks alcohol and tea sparingly, because they are all addictive drugs and bring no overall benefit to energy and concentration. Ciro prefers to only enjoy a glass of tea when going out \x[ciro-santilli-s-sport-practice][cycling], and one half pint of beer when going out with friends to a pub.

Ciro does not like receiving or giving gifts on expected social situations like birthdays or Christmas. Ciro believes that every day is equally precious, and can be a day to give, be it through awesome \x[open-source-software] contributions, or if you find something that your friend will like

When Ciro was a teenager, he was extremely cheap e.g. for clothes, food and video games, even tough his family didn't have bad financial conditions. This was mostly to save the world by not wasting resources that other people in need could use, and to save money so he could have more money to do \x[unconditional-basic-income][more of whatever he wanted without the obligation to work]. But Ciro admits that shocking people with the incredible level of low quality goods was also fun. Ciro changed \x[ciro-santilli-s-formal-education][after he came to Europe], especially in regards to food, perhaps corrupted by the fact that now the best chocolates, cheeses and breads in the world were not much more expensive than the cheapest brand you could buy. He still hates clothes that are just to look good like costumes though.

Living close to a small favela \x[university-of-sao-paulo-brazil][in Sao Paulo] helped Ciro get frighteningly cheap goods on the shop frequented by the favela neighbours. One legendary story is that of when his flatmate dropped some past on the kitchen floor, and the bowl broke, but Ciro prevented the flatmate from throwing it away and ate some of it nevertheless. What spooked them out the most was Ciro's statement that the pasta now had a crunchy glass shard texture to it.

Ciro has some respiratory allergies. When he was around 5, he had relatively serious https://en.wikipedia.org/wiki/Asthma[asthma] crisis which scared parents were scared to death. Throughout his life, he appears to be allergic at an intermediate level to: mold or dust mites (or whatever it is that old books / pillows have), cats (itching on touch), hay fever (in May in the UK, likely grass pollen). Ciro believes however that this also gives him higher resistance to viral infections, since it has been many many years since he had a cold/flu, and when everyone in the office is going down with it, he's just fine. Ciro wonders if his active immune system will actually kill off cancers early, which he ranks as his most likely causes of death, along with respiratory and gastro-intestinal problems. Ciro has low blood pressure and cannot get fat, so cardio vascular problems seem much less likely.

Ciro is generally https://en.wikipedia.org/wiki/Democrat[Democrat] due to his high compassion level. He believes that politics is highly genetically determined, and that just like you enter a room full of people and immediately like some and dislike others, the same goes for politics. People just vote for whoever they want to see more of because their way of speaking makes them feel good. There is not rationality involved in it at all.

In the field of Love and Friendship, Ciro is a big believer in the merciless application of https://en.wikipedia.org/wiki/Tit_for_tat[tit for tat]. Never desire someone's love, if you give and what comes back is not proportional. Cut your attempts to reach out immediately in such cases.

Good employers must allow employees to do whichever the fuck "crazy projects", "needed refactorings or other efficiency gains" and "learn things deeply" at least 20% of their time if employees want that: https://en.wikipedia.org/wiki/20%25_Project[]. Employees must choose if they want to do it one day a week or two hours per day. One day per month initiatives are bullshit. Another related name: https://en.wikipedia.org/wiki/Genius_hour[genius hour].

==== Ciro Santilli's self perceived creative personality
{c}

Ciro like to interpret this as him having "a creative personality" with the tradeoff of generally \x[don-t-be-a-pussy][not being amazing at his well defined jobs].

Ciro is a \x[high-flying-bird-vs-gophers][high flying bird scientist].

Ciro's natural fight-or-flight response is to hide in a little corner, and try to solve the problem out. Then get distracted and start procrastinating. And then he tries to solve the unsolvable. Someone once told him quite correctly:
\Q[In the event of war, you would be the type that hides away and makes the bombs.]

There are of course infinitely many videos on the "entrepreneurial mindset" online, and it is impossible to know if they are bullshit, or if everyone just feels like that, but OK, just let Ciro feels that he is specially creative will you?

\Video[http://youtube.com/watch?v=3A0pMX2r2LE]
{title="What Predicts Academic Ability? Jordan B Peterson" published on Aug 3, 2017.}

Some quotes from the above:
\Q[Creative people continuously step outside of the domain of evaluation structures]

and:
\Q[
If you are creative and you go off on tangents all the time, there's some probability that one of those tangents is going to be exactly what is needed at the time, and you are going to become hyper-successful as a consequence

\[but the probability of that being the right time and place for the idea is extraordinarily low\]

The sensible thing to tell anybody is "you shouldn't do it, your probability of success is so low, that its better to just to something sensible".

But the problem with that, is that creative people can't do that, because they are creative. A creative person who isn't being creative, they just wither and die.
]

Which brings \x[steve-jobs]'s quote to mind:
\Q[Because the people who are crazy enough to think they can change the world are the ones who do.]

\Video[https://www.youtube.com/watch?v=5sMBhDv4sik]
{title=Apple's https://en.wikipedia.org/wiki/Think_different["Think Different"] commercial "Here's to the Crazy Ones".}

Ciro also one heard a story, likely apocryphal, but still nonetheless resonated with him, that went something like this (TODO find source, Google wasn't helping, stuff that happened before website as usual):
\Q[
The newly hired manager of some subsection of DuPont (or some other gigantic chemical company) came into the office, and found a chemical engineer, completely drunk in the middle of the day.

Outraged, the manager searched for this colleagues who explained.

Ah, don't mind John (or some other name), the guy invented https://en.wikipedia.org/wiki/Polytetrafluoroethylene[Teflon] (or some other substance) which accounted for 20% of our revenue last year. Even if he does not do anything else in his entire career, his salary won't make any difference compared to those gains, and we take the chance that he might invent something else later.
]

Ciro likes this story because although he does not drink, he feels his work mind works in a related way. Often, when there is something really hard he knows needs doing he hides, and distracts himself with less important tasks, or by \x[the-best-youtube-channels][watching crap on YouTube], because he knows that the hard task will hurt his mind. Then one day he wakes up and says: OK, fuck it, let's do it, and does it.

Once Ciro got a performance review from a colleague that said:
\Q[If Ciro spent as much effort on his job as he does on side projects, he'd be the most amazing worker.]

Yes, low conscientiousness, give it to me.

==== Effortless effort
{title2=無爲, wuwei}

https://en.wikipedia.org/wiki/Wu_wei | https://zh.wikipedia.org/wiki/无为_(道家)

Ciro feels that all really important and productive activities come spontaneously, without being internally forced upon people.

You may say that this is because Ciro is lazy, but \x[bill-gates][Bill] https://quoteinvestigator.com/2014/02/26/lazy-job/[says] (\a[http://archive.is/kcXuQ][archive]) this isn't necessarily bad:
\Q[I will always choose a lazy person to do a difficult job because a lazy person will find an easy way to do it.]

You may also say that Ciro is an idealist, because what to do when the food will run out and you have to hunt? To which \x[jesus] replies at https://www.biblegateway.com/passage/?search=Matthew+6%3A25-34&version=NIV[Matthew 6:25-34 "Do Not Worry"] (\a[https://web.archive.org/web/20190801221835/https://www.biblegateway.com/passage/?search=Matthew+6%3A25-34&version=NIV][archive]):
\Q[
Therefore I tell you, do not worry about your life, what you will eat or drink; or about your body, what you will wear. Is not life more than food, and the body more than clothes? Look at the birds of the air; they do not sow or reap or store away in barns, and yet your heavenly Father feeds them. Are you not much more valuable than they? Can any one of you by worrying add a single hour to your life?

And why do you worry about clothes? See how the flowers of the field grow. They do not labor or spin. Yet I tell you that not even Solomon in all his splendor was dressed like one of these. If that is how God clothes the grass of the field, which is here today and tomorrow is thrown into the fire, will he not much more clothe you - you of little faith? So do not worry, saying, "What shall we eat?" or "What shall we drink?" or "What shall we wear?" For the pagans run after all these things, and your heavenly Father knows that you need them. But seek first his kingdom and his righteousness, and all these things will be given to you as well. Therefore do not worry about tomorrow, for tomorrow will worry about itself. Each day has enough trouble of its own.
]

Ciro is also fond of the description of the work method of some writer that his father told him about, possibly https://en.wikipedia.org/wiki/Haruki_Murakami[Haruki Murakami 村上 春樹]. Could not find sources, to treat as apocryphal for now. Basically something like:
\Q[Don't rush the work. Just let it happen. Every day at midnight, I would boil a teapot of tea. I would watch the steam rise, and with it feel my consciousness deepen. Everything was pure silence. When the hand was ready, it would, by itself, pick up the brush, and writing would start, by itself.]

Another good one is Hemingway's work method:
\Q[Always stop while you are going good and dont think about it or worry about it until you start to write the next day. That way your subconscious will work on it all the time. But if you think about it consciously or worry about it you will kill it and your brain will be tired before you start.]

\Video[http://youtube.com/watch?v=ZzaUGhhnlQ8]
{title=\x[alan-watts][Alan Watts]' wuwei talk.}
{description=During this talk, Alan quotes \x[jesus]: https://biblehub.com/matthew/18-3.htm[Matthew 18:3] "Truly I tell you, unless you change and become like little children, you will never enter the kingdom of heaven.".}

\Video[http://youtube.com/watch?v=2yWx7cqiSJI]
{title=\x[alan-watts][Alan Watts]' "How to turn work into play" talk.}

==== Ciro Santilli's bad old event memory
{c}

\x[ciro-santilli] has a bad memory for events that happened a medium time ago, for example in order of months / years. Especially if they are one-off things that have no relation to anything else.

For example, Ciro never remembers which places he travelled to just once, and who was in each trip! He has images of several places he travelled to in his head, and would recognize them, but he just doesn't know where they were!

The same goes for scenes from movies and passages from music, which explains why Ciro's \x[art] consumption focuses on innovative discrete "what happened" and "general gist" ideas, rather than, analog details such as colors and shapes.

Going back even further in time, Ciro starts to forget the less close friends he had, because the events start to fade away.

Paradoxically however, Ciro believes that this bad memory is one of his greatest strengths and key defining characteristics, because it leads Ciro to want to write down every interesting thing he learns, which motivated \x[write-free-books-to-get-famous-website] and his \x[ciro-santilli-s-stack-overflow-contributions][Stack Overflow contributions].

It also somewhat leads Ciro to like \x[physics] and \x[mathematics], because in these fields you \x[formalization-of-mathematics]["can deduce everything"] from very few base principles, so if you forget them, it does not matter that much as you can re-deduce stuff over and over.

Ciro believes that there are two types of people, and most notably \x[software-engineer][software engineers], which are basically data wranglers: those with bad memory and those with good memory.

Those with bad memory, tend to focus on automating and improving their processes a lot. They take much longer to do one-off specific deep knowledge tasks however.

The downside of the good memory ones is that sooner or later they will find tasks that no matter how much memory they have, they cannot solve without automation, and they will fail at those.

Also, good memory people don't enable others to join the project efficiently as much.

This dichotomy also explains why Ciro sucks at code reviews, but is rather the person who runs the interesting patches by himself and finds some critical problems that the more theoretical code reviewers missed.

If Ciro \x[write-free-books-to-get-famous-website-motivation][had become a scientist], he would without doubt be an experimentalist, just like in this reality he is a GDB/runtime person rather than a "static source analysis" person. Those who have bad memory prefer to just run experiments over and over and observe system state at runtime.

A Quora answer! https://www.quora.com/Are-there-any-benefits-of-having-a-poor-memory/answer/Ciro-Santilli

==== Ciro Santilli's selfish desires
{c}

Just enough money to raise 3 kids in a rich country without having to work (so he can focus on whatever project he wants) and no more. Then maximize fame.

Fame is slightly convertible into money with generally little liquidity, but is more valuable if money becomes useless in a https://en.wiktionary.org/wiki/TEOTWAWKI[TEOTWAWKI].

Of course, in the end, one just does whatever seems cool and useful, and the Gods decide what proportion of fame/money/power they will get. Due to Ciro's love of \x[open-source-software] however, a higher fame percentage seems more likely than money.

Ciro Santilli's \x[ciro-santilli-s-homonyms][full name is quite unique] and already dominated by this \x[ciro-santilli].

Searching just for just https://www.google.com/search?q=%22santilli%22["Santilli"] on Google does not give any Ciro Santilli hits. The name appears to be a minor variation of the much more common "Santini". Since the name is not that common, it is possible to go over all noteworthy hits. Some relevant ones are shown at: \x[interesting-members-of-the-santilli-family].

Searching just for just https://www.google.com/search?q=%22ciro%22["Ciro"] on Google does not give any Ciro Santilli hits, mostly some smaller brands that could be beaten, this is Ciro's main initial fame metric goal. Reaching it would require doing things known much beyond the programming community however, as Ciro has done until of 2019. http://ciro.com is from an electromechanics consultancy https://web.archive.org/web/20190610202635/http://ciro.com/[as of 2019], so it's not bad, let them be.

At the next useless gamified level, an honorary https://en.wikipedia.org/wiki/Order_of_the_British_Empire[OBE] and more ambitiously https://en.wikipedia.org/wiki/Fellow_of_the_Royal_Society[ForMemRS] from the \x[the-royal-society] post nominal letters would be nice.

The ultimate dream however would be to beat https://en.wikipedia.org/wiki/Cyrus_the_Great[Cyrus the Great] himself on Google searches ("Ciro" == "Cyrus" in Portuguese), maybe becoming "Cyrus the Greater"? That one will be a bit harder though. Maybe if https://github.com/cirosantilli/china-dictatorship/tree/4e5ad752ffe70c26fa0ff6a78e6eb64913153e33#falun-gong[Falung Gong] becomes the dominant religion in 2000 years like Christianism did, catapulting the Judaism benefactor Cyrus into greater fame, then there is some hope for Ciro as well.

==== Ciro Santilli's ideal city to live in
{c}

Ciro's ideal city to live in contains the following in order of decreasing importance:
* high tech
* beach and warm weather, influenced by Ciro's love for the \x[ciro-santilli-s-biography][City of Santos where he once lived]
* enough recent Chinese immigrants to sustain \x[chinese-cuisine]

Could https://en.wikipedia.org/wiki/California[California] be Ciro's https://en.wikipedia.org/wiki/Mecca[Mecca]?

==== Cirodance
{c}

During his teenage years, Ciro created an innovative new dance style combining elements of the various corporal practices that he studied a bit of across the years:
* Kung Fu/Taichi
* https://en.wikipedia.org/wiki/Samba_(Brazilian_dance)#Samba_Ax%C3%A9[Brazillian Axé] and Capoeira
* Breakdance
* Yoga
* Modern dance

Ciro later called this style Cirodance.

Ciro's legendary dance style was famous during his university years, when Ciro would go to parties and dance like made while mostly unsuccessfully trying to woo girls.

Ciro has always been critical of dancing conditions in University parties, where people would \x[enter-through-the-narrow-gate][always be cramped up doing boring non-creative moves]. Rather, Ciro would go to to the edges of the dance floor to have enough space for his amazing moves. There is a perhaps a parallel between such tendencies and Ciro's \x[high-flying-bird-vs-gophers][highly innovative personality]. Also perhaps being cramped would have helped wooing said girls.

Ciro later quit dancing, to a large extent because it is too hard to find suitable dancing locations outside: Europe is too cold, also ground conditions have to be perfect, and no patience to book a dance room somewhere. Kid's playgrounds are ideal, but Ciro is afraid of dancing there because kids parent's would freak out.

Therefore, all evidence of Cirodance seems to have disappeared into the depths of the Internet. There used to be a notorious video on YouTube entitled "A Piriguete da Poli" ("\x[university-of-sao-paulo-brazil][Poli's] bitch" in Portuguese) but Ciro lost the link/it was deleted? But in any case, the title gives an idea of the amazing style of Ciro's furor poeticus Axé performance on that day.

One legendary episode linked to Cirodance was when Ciro was living in \x[paris] and jobless around 2014 (but not destitute as he leached from his girlfriend). Cirodance was his main physical activity at the time, and https://en.wikipedia.org/wiki/Place_de_la_République[Place de la République], where the skateboarders hung out due to the perfect wide concrete floor and relatively close to https://en.wikipedia.org/wiki/Place_de_la_Bastille[Bastille] where Ciro lived, was the perfect place for it. One cold dark winter evening, Ciro was practicing Cirodance with his headphones and crappy clothes (dirty public square floor, remember), when someone took him for a homeless person and offered him a bowl of soup! It must be said that Place de la République had many events of giving food to the poor. Ciro was a bit stunned, declined, and continued dancing. And so that was the day when a prestigious \x[ecole-polytechnique][Polytechnicien] was mistaken for a homeless person. And Ciro \x[ciro-santilli-s-psychology-and-physiology][liked that].

==== Ciro Santilli's knee
{c}

If https://en.wikipedia.org/wiki/Achilles%27_heel[Achilles' had his heel], Ciro had his knee.

First \x[ciro-santilli-s-formal-education][during University in Brazil] while trying https://www.youtube.com/watch?v=HWXD0JbwT-w[a kick up] during the development of \x[cirodance] his knee went a bit weird for a few weeks.

Then, just after arriving in France for \x[ecole-polytechnique], the boys were playing indoor soccer, and to impress the girls Ciro was playing really hard, even took off his shirt, and suddenly when he was running by himself his knee snapped, he fell and it hurt like hell.

Ciro was on crutches for a few weeks, but the inflammation went away, but then he tried to play more soccer, but the knee was not as stable as before, and so he gave up. And for some reason it was not visible on the tomography.

So from this day on Ciro gave up on all interesting sports, and confined himself to more repetitive stuff like gym weights and cycling: \x[ciro-santilli-s-sport-practice]{full}.

This defect is likely genetic since a close relative had similar problems.

But oh well, his then not-even girlfriend was impressed enough by the soccer or sorry enough for the sucker to marry him, so it worked out.

==== Ciro Santilli's sport practice
{c}

As a \x[brazil][Brazilian], \x[ciro-santilli] used to really love playing soccer (\x[rooting-for-sport-teams][but not watching it]), until \x[ciro-santilli-s-knee][he hurt his knee].

Playing soccer just feels amazing, because you are constantly running around, but with a more specific goal in mind: to get that ball into that goal!

Playing soccer was specially amazing in \x[santos-sao-paulo-brazil][the flat wet sand beach of Santos]. \x[weekend], the sea, feet touching the sand, the sun going down, and your school mates next to you. Nirvana.

It is also true that under those conditions, the skin of your feet will get ripped off due to running on the slightly wet and flat sand no matter how thick it has become. But it is worth it.

Ciro became however disillusioned with soccer after his injury. It is a shame.

And so after that, Ciro decided to dedicate himself to sports where you can't hurt your knee.

Ciro \x[ciro-santilli-s-psychology-and-physiology][hates water], so swimming is out of the question. What could be more boring than going back and forth on a fixed location a million times to gain some milliseconds?

Also, Ciro has an unidentified condition where his upper legs and lower torso often start to itch when he runs, to the point of being extremely annoying. If some doctor knows why this could be, please tell him.

And so Ciro has been left with the gym as the only main option for a while.

This is until he ended up living in a place with decent roads for cycling in the late 2010's.

===== Ciro Santilli's cycling

First he was just cycling to work. But then he started to adventure out of town, and it just felt so good.

Like other drugs, https://en.wikipedia.org/wiki/Bad_trip[you will have some bad trips], e.g. went the wrong way on a highway and are afraid you are going to die crushed by fast cars, got flat tire on 1 hour ride and have no repair kit, destination cafe is closed and you are hungry, wind got so strong you can barely ride, half an hour in you find out that it is way colder than what you expected.

But for every such experience you survive, you learn something to reduce the chances it will happen.

Cycling just gives you an amazing sense of freedom!

The prospect of being able to reach nice new places keeps the experience fresh for a very long time.

Each time you try to find a new cool location, and sometimes you just stumble into amazing stuff without knowing about it.

It is funny, but sometimes this gives Ciro the same feeling that he had as a child playing 2D exploration RPGs such \x[pokemon] and \x[games-young-ciro-santilli-played][Final Fantasy VI] as you explore the wild. Except that the world of cycling is much much more detailed and diverse, and the freedom is much more real. And if you die on a car crash there are no continues.

Also, as you start cycling, you can feel the endorphins rise little by little, until you reach a point where you fell like you are part of the road.

It is amazing how you feel much less cold and hunger when cycling, to the point of being dangerous: always carry some chocolate bars in case https://www.youtube.com/watch?v=zFZ0aYz71Tw[you hit the wall]!

As a friend of Ciro once said: you start to become like a wolf, who knows every cyclable little road in a 30km radius around your home.

As of 2020, Ciro is at that "should I buy a more reasonable road bike" moment. Let's see how it goes. If he does, cycling trips with the bike on a plane are likely.

As a software engineer, trying to repair a mechanical system like his bike reminds Ciro very strongly of how the \x[deep-tech][physical engineering is brutal]. Millimetric changes can make huge differences, it is mind blowing! Good lesson to have in mind.

Another thought that often comes to Ciro's mind is that bicycles are not regular possessions because they break a lot. Rather, they must be seen as a kind of transportation tax that you have to pay to feel amazing riding them rather than feel crappy riding a bus or train.

One interesting feeling that Ciro gets from cycling is that it is an intermediate between walking and riding a car. Ciro felt this especially strongly when he lived near work, at a distance that you could either walk or cycle. When you walk, you can just see so much more of the surroundings, it is astonishing. When you cycle, you just go much faster, and you attention is much more towards the front, so you feel surroundings much less. On the other side, cycling allows you to feel different things. E.g. in wider open areas, there isn't much detail to see anyway, so you can better feel those areas on the faster speed of the bike. A similar feeling applies to how pedestrians feel like flies when you are on a bike, just like you must feel like a fly to car drivers. Ciro later learnt that a person of similar literary ability to his, Ernest Hemingway, https://en.wikiquote.org/wiki/Cycling[had a famous related similar quote]:
\Q[
It is by riding a bicycle that you learn the contours of a country best, since you have to sweat up the hills and can coast down them.... Thus you remember them as they actually are, while in a motorcar only a high hill impresses you, and you have no such accurate remembrance of country you have driven through as you gain by riding a bicycle.
]

Although Ciro does not run because of his itchy legs issue, he finds it interest to contrast cycling with running, notably:
* cycling has a much higher setup time or wearing appropriate clothes, unlocking your bike, and of course, \x[ciro-santilli-s-bicycle-wisdom][bike maintenance]
* running allows you to go into many more small paths that are not accessible by bike, thus offering a different sense of freedom. You can't go as far however. So maybe the ultimate sport would be to cycle to a good cross-country running location and then run over there?

\Video[http://youtube.com/watch?v=fWYaClbNPYw]
{title="Running Vs. Cycling | Who Is Faster - GCN Or GTN?" published by GCN on 2017-12-06.}
{description=Talks about the interesting http://www.bingleyharriers.co.uk/events/harriers-vs-cyclists/[Bingley Harriers & AC "harriers vs cyclists"] race held annually in the UK, in which you can either run or cycle! The course attempts to balance rough uphill terrain where runners get an advantage, with less rough downhill where cyclists have an advantage.}

====== Ciro Santilli's bicycle wisdom
{c}

Sometimes, these are more than just mechanics, but also have deeper life analogues. The title of https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance[Zen and the Art of Motorcycle Maintenance] comes to mind. Sometimes they are just mechanics.

With more philosophical metaphors:
* when your bike breaks, that provides an unique opportunity to learn how to fix it: \x[try-to-fix-your-own-bike-before-taking-it-to-the-shop]
* if the wind is blowing against you on the way out, it will likely blow behind you on the way back. But remember that the other way around also applies.
* always take one extra clothing layer than what you think you will need in your back pocket or sport bag, especially when time is changing fast in Sprint and Autumn. The weather on the road outside of town can change very quickly!
* if you took a turn, and it feels wrong, stop to check the map, and possibly backtrack to safety. When it feels wrong, it usually is a bad idea, e.g. roads where cars are too fast/too many. But if you take a wrong turn and it feels right, then follow it without fear and see what it leads to!
* don't carry a speedometer on your bike. Analysis can be done afterwards on Strava. The only measurement that matters is "how awesome am I feeling right now?". \x[buddhism][Live in the moment] instead of checking your speedometer every 10 seconds.

With less philosophical metaphors:
* learn how much water and food you need to take for a trip. Otherwise, you \i[will] bonk at some time, when you least expect, it happens very suddenly.

  And then you better hope to God that you can find a food shop nearby. luckily this was the case for Ciro's first and only bonk so far.

  You will also learn that, surprise surprise, carbohidrates that you ate one or two days before a ride stay stored in your liver and muscles, and also greatly affect how quickly you will bonk, thus the concept of https://en.wikipedia.org/wiki/Carbohydrate_loading[carbohydrate loading].

  \Video[https://www.youtube.com/watch?v=zFZ0aYz71Tw]
  {title="How Not To 'Hit The Wall' Or 'Bonk' – GCN's Guide To Fuelling While Cycling" published by Global Cycling Network on 2016-03-02.}

  And surprise surprise: heat can also make you bonk! Who would have thought!
* correct saddle hight is fundamental, your legs must be almost fully stretched at the bottom position
* it is impossible to reach the correct tire pressure with (cheap?) hand pumps, their only purpose is to fill up a flat tire so you can get home after a long ride. But a track pump.
* clean and lube your chain. The speed benefit is instantaneous and mind blowing. It also greatly improves gear shifting.

  This also prevents the chain from rusting, because the lube takes up the place where water would stay, and the muck makes it harder for water to evaporate.

  This is the most common bike maintenance mistake you see on the streets: people with that high pitched overly dry chain noise.

  \Video[http://youtube.com/watch?v=KM6mzE5lQ0w]
  {title="How To Get A Perfectly Clean Chain - GCN's Top Tips For Cleaning Your Drivetrain".}
* when a piece on your bike breaks and has no clear name written on it, you can try to identify it Google images
* the more you watch \x[youtube] maintenance videos without haste, the more you end up learn random new stuff that unexpectedly saves you later
* if you took a turn, and it feels wrong, stop to check the map, and possibly backtrack to safety. When it feels wrong, it usually is a bad idea, e.g. roads where cars are too fast/too many
* public place with lots of people are bicycle parking Hell, because due to anonymity and the large number of distractions, it becomes exponentially more likely that someone will fuck you bike somehow, e.g. by dropping it on the ground. Always search a bit for a reasonable place to park, and avoid overcrowded parking spaces at all costs.
* gear change matters
  * when you get on your bike to start riding, start riding slowly and gradually switch up pedal forces and gears. Things may have shifted in a weird position as it gets kicked around in parking. Ciro managed to bend his derailleur like that!
  * https://www.youtube.com/watch?v=43ci68I23hA[spin to win], AKA learn to user your gears
  * it is not shameful to ride on your lower gears on a hill. You can actually go surprisingly fast with them, and conserve energy for later. Learn when to use each gear ratio.
* learn to identify your suppliers:
  * https://www.wiggle.co.uk/[]: in Europe, this is best place to buy clothing from, and also good for some bike parts. It is the most organized website, and contains non-generic shit which Amazon is full of.

    For bike parts Amazon is also worth looking into however. Bike parts a bit different from clothing because you have to make sure that stuff fits, so you hopefully know exactly the part name before before buying it, and therefore website organization is not as crucial.

    Wiggle is however guilty of shameless: \x[discounts-that-happen-more-often-than-not]

======= Try to fix your own bike before taking it to the shop

Sometimes you get annoyed to death with your bike not breaking or changing gears perfectly as you would like, and the people at the bike shop never do the job well enough.

The problem with bike shops is that the employees are already swamped with work, and they don't get paid any extra for doing more work.

As a result, paradoxically, they are often happier, and respect you more if you are trying to get them to help you to fix your own bike!

Also, for the same reason, they don't have the time to go for a quick test ride after a fix to ensure that the \x[software-engineer][bug] was actually fixed.

So they ignore things that would obviously be huge ridability benefits (although they might not be obvious to newbie customers), for which customers would gladly pay more money for.

But you start to learn how to do stuff yourself and it feel amazing when you finally get there (after infinite trial and error).

Ciro dreams of a bike shop that actually calls you for the appointment and then teaches you how to fix the thing.

So the best strategy is to have a backup bicycle, and when your main one breaks, you just try to to the fix yourself. That means: identifying the broken piece, watching YouTube videos of how to do the job, buying a replacement on Amazon, and giving it a shot.

Then, if you fail to do the fix, that is OK, just take it to the bike shop, with the piece you've bought, and ask them to do it for you. At least this way you did not waste a golden opportunity to learn!

=== Ciro Santilli's biography
{c}

Ciro Santilli was born in \x[brazil] in a small / medium city in the https://en.wikipedia.org/wiki/São_Paulo_(state)[State of São Paulo] in https://en.wikipedia.org/wiki/Anno_Domini[1989 AD].

When Ciro was very young, about 6, he was fatty, and other evil boys picked on him. Ciro was a bit stupid, and continued to try and hang out with those evil kids, and continued to get hurt. Advice to his children: stay away from evil people. If you come across evil people, smile a fake smile to them, and walk away, but never give your back to them, and always be ready to fight. If they laugh at you, know that you https://en.wikipedia.org/wiki/Ecclesiastes_3#Verse_20[are shit] like everyone else, pretend to laugh with them, and get out. Never show any weakness. If a fight is likely, always be ready, always have your friends and never be outnumbered. On the Internet, never care about e-bully posts, either block them immediately, and anyone that likes their posts, or follow https://github.com/cirosantilli/china-dictatorship/tree/56f678e776fabf738142bbc3d8e10c6f1c49bd5e#reply-policy[Ciro's reply policy]. Call parents or other authorities as soon as the situation becomes seriously bad, better a living free \x[don-t-be-a-pussy][pussy] than dead or youth detention for murder. Similar advice applies if you are going to jail I guess. If a physical fight is inevitable however, https://biblehub.com/luke/6-29.htm[ignore Jesus this once and don't give the other face], but rather follow the Talmud and https://en.wikipedia.org/wiki/We_shall_fight_on_the_beaches[fight all out on the beaches]:
\Q[If someone comes to kill you, rise and kill first.]

References:
* https://openlettersreview.com/posts/rise-and-kill-first-by-ronen-bergman
* https://www.sefaria.org/Sanhedrin.72a.4?lang=bi&with=all&lang2=en

The Sikh knife https://en.wikipedia.org/wiki/Kirpan[Kirpan] also comes to mind.

Non-violence only works when you have https://en.wikipedia.org/wiki/Nonviolence[bodies to spare from your followers].

In the year 2000, Ciro lived with his parents for 10 months in the https://en.wikipedia.org/wiki/Coventry[Coventry, United Kingdom] because his father took some courses at the https://en.wikipedia.org/wiki/University_of_Warwick[University of Warwick]. This was Ciro's most important educational experience, because it taught him the Holy Language of English, which infinitely expanded Ciro's Internet horizons, and shaped Ciro's \x[having-more-than-one-natural-language-is-bad-for-the-world] philosophy. When he came back to Brazil, Ciro skipped dozens of levels in his English school, and was put to study with much older teenagers who marveled at Ciro's incredibly cute, but since lost, British accent.

Another huge advantage of Coventry is that the https://hearsallacademy.org/[Hearsall Community Primary School] had two classes dedicated to foreign students to learn English before integrating with the British students. There were a lof of kids from Kosovo there due to the https://en.wikipedia.org/wiki/Kosovo_War[Kosovo war] which was just ending, and it was there that Ciro made his first \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][Chinese] friend, yet unaware of course of the role the country would later play in his life. One particularly fun memory was that of playing soccer on the school playground with a sponge ball to avoid breaking the windows. Then one day it was raining, but Ciro still went for a https://en.wikipedia.org/wiki/Header_(association_football)[header], and the soaked sponge ball was soaked and splashed Ciro with dirty water. Good days.

Nothing summarizes that period of Ciro's life better than anything: https://en.wikipedia.org/wiki/Ali_G[Ali G] interview with https://en.wikipedia.org/wiki/David_Beckham[David] and https://en.wikipedia.org/wiki/Victoria_Beckham[Victoria] Beckham https://www.youtube.com/watch?v=jIic9_ZhyC8

\Video[http://youtube.com/watch?v=jIic9_ZhyC8]

After Coventry, Ciro's family lived in the city of \x[santos-sao-paulo-brazil][Santos, São Paulo, Brazil, which made a deep impression on Ciro], until he left to go to the \x[university-of-sao-paulo-brazil] in 2007.

==== Ciro Santilli's formal education
{c}

\x[ciro-santilli] did a double degree program, and obtained degrees in both:

Ciro participated in a double degree program, so he obtained have engineering degrees in both:
* 2010 - 2014: \x[ecole-polytechnique]["École Polytechnique (Palaiseau, France)"]

  Master 2 degree in Applied Mathematics.

  Best French engineering schools in https://www.timeshighereducation.co.uk/world-university-rankings/2013-14/subject-ranking/subject/engineering-and-IT[the Times Ranking 2013] (\a[http://web.archive.org/web/20190828083945/https://www.timeshighereducation.com/world-university-rankings/2014/subject-ranking/engineering-and-IT#!/page/2/length/25/sort_by/rank/sort_order/asc/cols/undefined][archive])
* 2007 - 2010: \x[university-of-sao-paulo-brazil]

  Automation and Control Engineer.

  The best South American university https://www.timeshighereducation.co.uk/world-university-rankings/2013-14/world-ranking/region/south-america[in the Times Ranking 2013] (\a[http://web.archive.org/web/20190828083945/https://www.timeshighereducation.com/world-university-rankings/2014/subject-ranking/engineering-and-IT#!/page/2/length/25/sort_by/rank/sort_order/asc/cols/undefined][archive]) in all subjects.

  Ciro finished the course with honors of "The Best Student in Automation and Control of the year 2013".

Despite studying in great institutions with great teachers, Ciro feels that:
* \x[ciro-santilli-s-skills][most of what he knows] came from the Internet, man pages, books and his parents
* \x[the-most-important-projects-done-by-ciro-santilli][actual projects] matter much more than those pieces of paper called Diplomas. You should not do like Ciro who basically did nothing but school mandated work, but \x[don-t-be-a-pussy][instead grow some balls and focus much more or entirely on your projects]

This motivated Ciro to work on \x[write-free-books-to-get-famous-website].

==== Ciro Santilli's musical education
{c}

Ciro's parents put him to play the piano. This is partly influenced by Ciro's paternal grandfather, an energetic Italian descendant who liked music

\Image[Six_year_old_Ciro_Santilli_when_his_grandfather_offered_him_an_electronic_keyboard.jpg]

The piano was fine, but a bit boring due to how it was taught.

The teachers were nice old ladies who followed a very traditional and methodic approach which was just like \x[write-free-books-to-get-famous-website-motivation][regular school], instead of doing what actually needed to be done: inspire kids into becoming creative musical geniuses that can compose their own stuff.

While in \x[santos-sao-paulo-brazil][Santos], before going to university, Ciro somehow got into acoustic and electric guitar.

The electric guitar environment was much less formalized in general, and he took courses with http://www.maurohector.com.br/[an awesome teacher] (\a[https://web.archive.org/web/20190107231749/http://www.maurohector.com.br/][archive]), who actually tried to inspire his students to create their own music and improvisation.

And so a young teenage Ciro once seriously considered becoming a professional \x[the-best-music-of-all-time][guitar player].

In his early teens, Ciro listened to the usual canned music his friends listened to: \x[music-teenager-ciro-santilli-liked-to-listen-to], until he started to stumble upon Jazz.

Ciro remembers clearly rainy \x[weekend][weekend] days where he would go to a run down second hand shop near his home in someone's garage (Sebo do Alfaiate, R. Frei Francisco de Sampaio, 183 - Embaré, Santos - SP, 11040-220, Brazil :-)), and buy amazing second hand Jazz CDs. It was just a matter of time until he would start scouring the web for "the best jazz albums of all time" and start listening to all of them, see e.g. \x[the-best-modern-instrumental-western-music-of-all-time].

Ciro ultimately decided \x[ciro-santilli-s-bad-old-event-memory][his bad memory] and overwhelming \x[write-free-books-to-get-famous-website-motivation][passion for the natural sciences] would better suit a scientific carrier.

He also learnt that the \x[computer] is also an extremely satisfying artistic instrument.

Also, with a computer, boring dexterity limitations are no more: you can just record perfect played segments or program things note by note to achieve whatever music or action you want!

Although Ciro quit playing musical instruments, his \x[the-best-music-of-all-time][passion for the music has remained], and who knows how it has influenced his life.

==== Ciro Santilli's wife

See: https://github.com/cirosantilli/china-dictatorship/tree/6fdeb5aa3826c69f7c058de4e6f652a6924bc08a#wife

=== Interesting members of the Santilli family

Found through Google with no direct relation known to \x[ciro-santilli]

* https://en.wikipedia.org/wiki/Santilli[]: wiki page for the glorious family:
  * https://en.wikipedia.org/wiki/Ruggero_Santilli[Ruggero Santilli]: "fringe science guy", by far dominates Google as of 2019. Created the respectable http://www.santilli-galilei.com/[R.M. Santilli Foundation]
  * https://en.wikipedia.org/wiki/Ray_Santilli[Ray Santilli] made a fake https://en.wikipedia.org/wiki/Alien_autopsy[1995 alien autopsy movie], YouTube sample: https://www.youtube.com/watch?v=sVcaT2QnoDs
  * http://en.wikipedia.org/wiki/Ivana_Santilli[Ivana Santilli]: Canadian singer, pop-electric-chill: https://www.youtube.com/watch?v=hQRuVN0H8dM
* accounts on important websites
  * https://github.com/santilli anonymous GitHub https://web.archive.org/web/20191220222515/https://github.com/santilli[as of 2019]
  * http://santilli.com/ for rent by https://realnames.com/ (\a[https://en.wikipedia.org/wiki/RealNames][wiki page]) as https://web.archive.org/web/20190526003433/http://santilli.com/[of 2019]
  * https://twitter.com/santilli is Marcel Santilli the guy who took the Twitter handle of the family

    https://www.linkedin.com/in/marcelsantilli

    Also Brazilian and tech related like Ciro Santilli.
  * https://www.youtube.com/user/TheOverthrowShow https://thepetesantillishow.com/ Pete Santilli, American Conservative news commentator show, makes Ciro cringe of boredom. At least he has a passion.
* honorable mention to the similar name Santillo variant under http://en.wikipedia.org/wiki/Will_Santillo[Will Santillo] who makes erotic artistic photos

==== Ciro Santilli's homonyms
{c}

If any of you ever read this, do send me an email to \x[ciro-santilli] saying hi and we can agree on a clear separation of usernames.

Although if you are just starting out, maybe you should just go from scratch with a unique Internet alias.

A younger unrelated Argentinian homonym who likes soccer that can be found through \x[google]:
* https://twitter.com/ciro_santilli
* https://www.facebook.com/profile.php?id=100009065024069

Ciro used to \x[ciro-santilli-s-sport-practice][like playing soccer too] :-)

Unknown:
* https://twitter.com/cirosantilli7
* https://www.youtube.com/channel/UCY44wYp2nEuhMRBU1kHkdCA

=== Questions for Ciro Santilli's future self

Future self, answer these.

10 years:
* 2017-2027: did self-driving cars become big?
* 2017-2027: did virtual reality become big?

20 years

* 2018-2038: are \x[molecular-biology-technologies][companies offering free full genome decoding] just to get your genomic data and sell it to pharma companies?

  Someone like Ciro then creates an open source genomic database funded by health organizations that publishes genomes + phenotypes anonymously. Genome to phenotype analytics go crazy big.

40 years:
* 2017-2057: was \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development][human level AI reached] (by non-bio devices :-)), even if very slow?
* 2017-2057: \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][did China become democratic]?
* 2018-2058: did impressive \x[brain-computer-interfaces] show up?

=== Ciro Santilli's projects

Major projects can be seen at: \x[the-most-important-projects-done-by-ciro-santilli]{full}.

A summary of minor projects is given at: \x[ciro-santilli-s-minor-projects].

This section is a dump for anything else, to keep those sacred first sections clean.

==== All GitHub Commit Emails
{c}

https://github.com/cirosantilli/all-github-commit-emails

==== Always out-of-date and rarely update list of open source contributions by Ciro Santilli
{scope}

This is mostly stuff from before 2016 when Ciro was anxious to document his contributions to \x[ciro-santilli-s-biography][get a job].

Most of the projects here are also minor contributions, or Ciro later noticed that the projects were not useful enough to work on and that he was actually wasting his time.

===== Size scale

Some of the contributions are subjectively self evaluated based on:
* How many significant lines changed (no indentation changes, moves, mass refactoring, trivial tests, etc.):

  | 0
  | only trivial changes

  | 1
  | < 20

  | 2
  | < 150

  | 3
  | > 150

* How hard it was to make it. 4 algorithmic lines are harder than 100 web development/documentation lines.

===== Patches

====== Merged by others

Only patches which were reviewed by at least one person with push permission will be listed here.

This may also include patches which were rejected in favor of another patch, but strongly influenced the merged patch.

|| Date
|| Project
|| Size
|| Description

| 2019-09
| \x[katex]
| 1
| https://github.com/KaTeX/KaTeX/pull/2091[Create globalGroup option to place definitions in global scope]

| 2018-06
| raspi3-tutorial
| 0
| https://github.com/bztsrc/raspi3-tutorial/pull/34[Explain how to see UART1]

| 2018-05
| \x[buildroot]
| 1
| https://github.com/buildroot/buildroot/commit/45719594d08024df97db55333f8ab3ba2b4fc23e[ltp-testsuite: add --with-open-posix-testsuite]

| 2018-03
| \x[buildroot]
| 1
| https://github.com/buildroot/buildroot/commit/8a6e30efdeb9f31d51a92ed465373f4128f55e8a[qemu_x86_64_defconfig: fix kernel header version after bump to 4.15]

| 2017-11
| \c[cocos2d]
| 1
| https://github.com/cocos2d/cocos2d-x-3rd-party-libs-bin/pull/304[Recreate libfmod.so.6 symlinks]

| 2017-10
| \c[cocos2d]
| 1
| https://github.com/cocos2d/cocos2d-x-3rd-party-libs-src/pull/155#issuecomment-336760545[Make bullet use -fPIC]

| 2017-07
| https://github.com/KhronosGroup/OpenCL-Headers[OPenCL Headers]
| 0
| https://github.com/KhronosGroup/OpenCL-Headers/issues/18[C11 anonymous structs / unions should allow xyz notation for vector types]

| 2017-06
| \x[linux-insides]
| 0
| https://github.com/0xAX/linux-insides/pull/489[Mention Buildroot in addition to ivandaviov/minimal]

| 2017-06
| \x[opengl-tutorial-org]
| 0
| https://github.com/opengl-tutorials/ogl/pull/17[Use existing empty layout on feed.xml]

| 2017-04
| https://github.com/ssloy/tinyrenderer[Tiny Renderer]
| 0
| https://github.com/ssloy/tinyrenderer/pull/10[Add gitignore]

| 2017-02
| https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers[Vulkan Loader]
| 0
| https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/pull/1536[Use nproc instead of ncpu]

| 2017-01
| https://github.com/boostorg/geometry[Boost Geometry]
| 1
| https://github.com/boostorg/geometry/issues/376[What is "QPoint::double" in doc/example_adapting_a_legacy_geometry_object_model.qbk ?]

| 2016-12
| \x[freetype-gl]
| 1
| https://github.com/rougier/freetype-gl/pull/144#event-905730810[GLFW Ubuntu package works on 16.10]

| 2016-11
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/816[Add C variable printf debug snippets]

| 2016-09
| https://bitbucket.org/osrf/gazebo[Gazebo]
| 1
| https://bitbucket.org/osrf/gazebo/pull-requests/2460/add-a-world-to-the-gui_overlay_plugin_time/diff[Add a world to the gui_overlay_plugin_time example]

| 2016-07
| https://github.com/googlesamples/android-vulkan-tutorials[Android Vulkan Tutorials]
| 1
| https://github.com/googlesamples/android-vulkan-tutorials/pull/12[Use android API 24]

| 2016-07
| https://github.com/ivandavidov/minimal[minimal linux live]
| 0
| https://github.com/ivandavidov/minimal/pull/30[Fix time sh instead of sh time]

| 2016-06
| \x[ghdl]
| 0
| https://github.com/tgingold/ghdl/pull/81[Typo severals -> several in Invoking doc]

| 2016-06
| \x[ghdl]
| 1
| https://github.com/tgingold/ghdl/pull/80[Document GCC backend needed to generate executables]

| 2016-06
| \x[ghdl]
| 0
| https://github.com/tgingold/ghdl/pull/79[Typo debugger -> debugged in BUILD.txt]

| 2016-06
| \x[ghdl]
| 0
| https://github.com/tgingold/ghdl/pull/77[Typo carray -> carry in full adder example]

| 2016-05
| https://github.com/wavexx/facedetect[facedetect]
| 1
| https://github.com/wavexx/facedetect/pull/7#event-675223551[Add example to extract faces with imagemagick]

| 2016-05
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1940[Create data science section and add Kaggle to it]

| 2016-05
| \x[opengl-tutorial-org]
| 0
| https://github.com/opengl-tutorials/ogl/pull/18[Add empty line before triple quotes]

| 2016-05
| https://github.com/bulletphysics/bullet3[Bullet Physics]
| 1
| https://github.com/bulletphysics/bullet3/pull/612[Improve HelloWorld]

| 2016-04
| \x[freetype-gl]
| 1
| https://github.com/rougier/freetype-gl/pull/114[Find out how to compile on Ubuntu and document it]

| 2016-03
| \x[ranger-file-manager]
| 0
| https://github.com/hut/ranger/pull/506[gitignore install_log.txt generated by make install]

| 2016-03
| \x[ranger-file-manager]
| 1
| https://github.com/hut/ranger/pull/511[Add %confdir macro]

| 2016-03
| \x[ranger-file-manager]
| 1
| https://github.com/hut/ranger/pull/507[set_bookmark for directories other than the current]

| 2016-02
| \x[jami-software]
| 2
| https://tuleap.ring.cx/plugins/tracker/?aid=446[Create working Android video hardware decoding prototype]

| 2016-02
| \x[jami-software]
| 1
| https://github.com/savoirfairelinux/ring-project[Started the one command build which was later made official]

| 2016-01
| https://github.com/haoel/leetcode[leetcode]
| 1
| https://github.com/haoel/leetcode/pull/90[Java LRUCache with LinkedHashMap]

| 2015-12
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1727[Add InterviewBit to problem sets]

| 2015-10
| \x[linux-insides]
| 0
| https://github.com/0xAX/linux-insides/pull/227[Recommend ivandaviov/minimal to generate initrd]

| 2015-08
| https://github.com/programble/bare-metal-tetris[bare-metal-tetris]
| 0
| https://github.com/programble/bare-metal-tetris/pull/2[make clean also removes tetris.iso]

| 2015-08
| https://github.com/RWTH-OS/eduOS[eduOS]
| 0
| https://github.com/RWTH-OS/eduOS/pull/7[README typos Binutils and NASM]

| 2015-08
| \x[gdb]
| 0
| https://sourceware.org/ml/gdb-patches/2015-07/msg00744.html[python: fix Linetable case to LineTable in docstrings and comments]

| 2015-07
| \x[gdb]
| 0
| https://sourceware.org/ml/gdb-patches/2015-08/msg00013.html[Remove outdated comment from call-rt-st.exp]

| 2015-07
| \x[gdb]
| 0
| https://sourceware.org/ml/gdb-patches/2015-08/msg00015.html[Fix broken CONTRIBUTE link to GNU insignificant changes]

| 2015-07
| \x[gdb]
| 1
| https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=commit;h=7b849db4f213d6734b4121ca5e5cab3341a5140c[py-linetable.c: Fix doc of LineTable.source_lines' return type]

| 2015-07
| https://en.wikipedia.org/wiki/GNU_Binutils[Binutils]
| 1
| https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=commit;h=7e3023528162de7760a0e7e487aa81bbf44cb6a9[Clarify case requirements for gas pseudo-ops]

| 2015-07
| https://github.com/aquynh/capstone[Capstone]
| 0
| https://github.com/aquynh/capstone/issues/419[Website typos at beyond_llvm]

| 2015-07
| https://github.com/xolox/vim-session[Vim Session]
| 1
| https://github.com/xolox/vim-session/pull/81[auto_save_to option added]

| 2015-05
| https://en.wikipedia.org/wiki/Netwide_Assembler[NASM]
| 0
| https://bugzilla.nasm.us/show_bug.cgi?id=3392310[doc: typo occationally]

| 2015-05
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1468[Computer Science from the Bottom Up]

| 2015-05
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1461[problem-sets: leetcode]

| 2015-05
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1459[Papers we love]

| 2015-04
| https://en.wikipedia.org/wiki/AlternativeTo[alternativeTo]
| 0
| https://alternativeto.net/user/cirosantilli/added/[icanprove.com]

| 2015-04
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1443[Knapsack Problems]

| 2015-04
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1442[LSB]

| 2015-04
| \x[honza-vim-snippets]
| 0
| https://github.com/honza/vim-snippets/pull/561[java: prinlna to print array]

| 2015-04
| \x[ebookfoundation-free-programming-books]
| 0
| https://wcipeg.com[PEG Judge]

| 2015-03
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7912[Convert many JavaScript # links to buttons]

| 2015-03
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8092[Factor permission check in issuable finder]

| 2015-03
| https://github.com/spring-projects/spring-integration-samples[Spring]
| 0
| https://github.com/spring-projects/spring-integration-samples/pull/130[Typo Gardle -> Gradle]

| 2015-02
| \x[linux-insides]
| 0
| https://github.com/0xAX/linux-insides[Make x86 paging reference title clearer]

| 2015-02
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlab-shell/pull/184[Ignore .bundle]

| 2015-02
| \x[ebookfoundation-free-programming-books]
| 0
| https://github.com/vhf/free-programming-books/pull/1329[Problem sets: CareerCup]

| 2015-01
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/511[Fix false positive hyphen list item expansion]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7999[Append in place for strings and arrays]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7878[Remove unneeded password_confirmation from seed]

| 2015-01
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8307[Typo in project API events comment]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7987[Replace match via get with get on routes]

| 2015-01
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7925[Remove or prepend underscore _ to unused method arguments]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7905[Change always passing visible false tests]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7951[Make blob new and edit file editors more uniform]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8096[Replace regex methods by string ones]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8430[Simplify SSH fingerprint regexp extraction]

| 2015-01
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8520[Add tests for disabled blob edit button cases v2]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8504[permission.md align table, rm double empty line]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8324[Remove commit indicator from path on Commits tab]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8230[Make protected branch perms explicit in doc]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8497[doc workflow markdown style]

| 2014-12
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7989[Disallow POST to compare as it does not create objects]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7782[Sort .gitignore]

| 2014-12
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7957[Remove unused Project#code function]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8256[Remove unused has_gitlab_shell3? method]

| 2014-12
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7978[Add tests for tree edit routes]

| 2014-12
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7886[Disable / hide MR edit blob button if cannot edit]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7882[Use blob local instead of instance]

| 2014-12
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7894[Fix dev user seed: ID was used twice]

| 2014-12
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8466[Fix Rake tasks doc README: add top level h1]

| 2014-12
| https://github.com/ruby/ruby[Ruby]
| 0
| https://github.com/ruby/ruby/commit/512705e62d4929753845e449397cedeff0433f05[Typo close -> closes.]

| 2014-12
| \x[commonmark]
| 1
| https://github.com/jgm/CommonMark/pull/246[Add tests for normalize outer whitespace removal]

| 2014-12
| \x[commonmark]
| 1
| https://github.com/jgm/CommonMark/pull/249[spec_tests make --pattern affect --dump-tests]

| 2014-12
| \x[commonmark]
| 1
| https://github.com/jgm/CommonMark/pull/247[Add --number option to run a single test by its id]

| 2014-12
| \x[commonmark]
| 1
| https://github.com/jgm/CommonMark/pull/250[Don't raise exception on invalid UTF-8 output]

| 2014-12
| \x[commonmark]
| 1
| https://github.com/jgm/CommonMark/pull/248[spec_tests add short options for common parameters]

| 2014-12
| \x[commonmark]
| 0
| https://github.com/jgm/CommonMark/pull/240[Ignore pyc files]

| 2014-12
| \x[commonmark]
| 1
| https://github.com/jgm/CommonMark/pull/240[Expose failure to normalize whitespaces]

| 2014-11
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/488[Markdown bold and italic]

| 2014-11
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/484[Markdown links URLs from the clipboard]

| 2014-11
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/483[Markdown autolinks]

| 2014-11
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/486[Let the short version of links not have title.]

| 2014-11
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/487[Fix markdown fenced code blocks.]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlab-shell/pull/193[Delete tags and branches that start with hyphen]

| 2014-11
| \x[gitlab]
| 3
| https://github.com/gitlabhq/gitlab-shell/pull/186[Restore hooks PATH before calling ruby]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8251[Factor regex error messages with spec API tests]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7944[Move new blob commit message textarea below editor]

| 2014-11
| https://github.com/bradfitz/gitbrute[gitbrute]
| 0
| https://github.com/bradfitz/gitbrute/pull/4[Usage]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8254[Factor GITLAB_SHELL_VERSION get method]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8168[Create dev fixture projects with fixed visibility]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8258[Factor using Repository#path_to_repo]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8094[Remove unused authenticate_user from project#show]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8233[Remove dead Event#new_branch? method]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8236[Don't output to stdout from lib non-interactive methods]

| 2014-11
| \x[gitlab]
| 2
| https://github.com/gitlabhq/gitlabhq/pull/7903[Fix version of test seed branches to specific revisions]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8234[Factor '0' * 40 blank ref constants]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7863[Transform remove blob link into button]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7516[Update default regex message to match regex]

| 2014-11
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8222[Continue strings with backslash instead of append]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8182[Factor behaviors.scss constants]

| 2014-11
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8241[Remove unneeded backslash: "/" == "/"]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8231[Fix push not allowed to protected branch if commit starts with 7 zeros]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8223[Use require spec_helper instead of relative path]

| 2014-11
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8211[Fix doc rake import md style]

| 2014-11
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8213[Factor lib backend gitlab shell path]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8127[Run user select Js only where needed]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7866[Use button type=submit instead of input]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8120[Only run profile js on pages that need it]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8123[Better js -> URL projects map to reduce unneeded execution]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8005[Use Gitlab.config instead of Settings everywhere]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8155[Show nothing instead of unassigned on issues]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8125[Only run namespace select js when needed]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8158[Merge File basename and dirname into split]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8159[Fix import.rake failed import if project name is also an existing namespace]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8150[Remove unused variable user at lib/gitlab/markdown]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8088[Use argument list for sh instead of string]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8114[Only run avatar chooser Js on pages that need it]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8118[Remove whitespace link between user group avatars]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8139[Fix doc raketasts import md style]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7994[Remove unneeded app/finders config.autoload path]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/8117[Improve grack auth hooks comment.]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8093[Remove unused admin/projects#repository method]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7961[Factor admin logs]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8029[Remove unused filter from ProjectsController]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8028[Remove unused dev_tools helper.]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8030[Factor authorize_push! and authorize_code_access!]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8087[Replace match with end_with: more readable, faster]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8102[Use @project on controllers, don't call method]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8101[Remove `param[:project_id]` at admin controller]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8097[DRY mentioned in magic note constant]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8113[Factor group forms]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8109[State on CONTRIBUTING that people should fix line style of touched lines]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/8110[Export all coffee classes with @]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7856[Fix missing flash on file edit error from web UI.]

| 2014-10
| https://github.com/jnicklas/capybara[Capybara]
| 0
| https://github.com/jnicklas/capybara/pull/1424[Fix History typo.]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7942[Make new and edit file submit more uniform]

| 2014-10
| \x[libgit2]
| 1
| https://github.com/libgit2/libgit2[Join typedef and struct definitions in single file]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7938[Factor dashboard helper methods]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7983[Factor issue and merge request services]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7981[Replace www.gitlab.com with about.gitlab.com]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7991[Improve formatting of app/finders/README.md]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7985[Remove outdated comment from commits_controller]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7963[Factor markup? gitlab_markdown? into new method]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7379[Remove unused title parameter]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7940[Make Spinach test names consistent]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlab-shell/pull/184[Ignore .bundle]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlab-shell/pull/183[Ignore tags file]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlab-shell/pull/182[Split one instance variable per line]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7919[Factor commit message textareas]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7948[Remove outdated comment on the project test seed]

| 2014-10
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7947[Remove assignment without effect.]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7858[Add parenthesis to function def with arguments.]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7834[Remove test line without effect because no should.]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7922[Improve remove file commit message textarea placeholder]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7880[Replace :erb filter with plain HAML]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7881[Remove blame lines added leading whitespace]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7921[Improve new file commit message textarea placeholder.]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7920[Simplify custom MR good commit message hint]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7930[Move group feature step to match test location]

| 2014-10
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7904[Titleize blob action buttons.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7914[Remove statement without effect.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7913[Fix dev merge seed: update testme to gitlab-test.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7911[Remove trailing whitespace from views.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7889[Remove def project from tests that inherit it.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7873[Replace testme with gitlab-test.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7897[Add predictable merge requests on dev seed.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7895[Prevent email sending on admin dev seed.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7898[Only show text wrap and diff notes for text in merge requests.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7862[Add web UI file CRUD tests.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7864[Remove type submit from button_tag since default.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7877[Replace empty? nil? with blank?.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7875[Typo indiciated -> indicated.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7835[Remove unnecessary page. from tests.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7803[Remove ununsed CONTRIBUTING link on edit MR form.]

| 2014-09
| \x[gitlab]
| 1
| https://gitlab.com/gitlab-org/gitlab-development-kit/merge_requests/22[Add g++ dependency to ubuntu install.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlab_git/pull/44[Hound prefer single quotes.]

| 2014-09
| \x[libgit2]
| 0
| https://github.com/libgit2/libgit2/pull/2570[Remove unused buf variable from path/core test.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7823[Only clone GitLab Shell on tests if necessary.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7816[Factor fork button view.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7838[evaluate -> execute_script when return not needed.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7837[evaluate_script history -> go_back and go_forward.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7833[Factor current_url + URI.path into current_path.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7793[Replace javascript:; links with buttons.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7795[Factor .add-diff-note active state.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7792[Fix link_to_reply_diff.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7804[Factor issue and MR edit form error list.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7807[Factor error and success methods from services.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7772[Set textarea resize:vertical by default.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7657[Factor out commit list from compare and new MR.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7821[Prefix Spinach features with Spinach::Features::.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7814[Typo it -> its.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7801[Factor zen mode.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7771[Ignore tags file.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7797[Improve zen mode internals.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7791[CONTRIBUTING typos.]

| 2014-09
| https://github.com/chjj/marked[Marked]
| 1
| https://github.com/chjj/marked/pull/414[Add browser usage to README]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlab_git/pull/43[Typo herlper -> helper.]

| 2014-09
| \x[libgit2]
| 1
| https://github.com/libgit2/libgit2/pull/2567[Factor 40 and 41 constants from source.]

| 2014-09
| \x[libgit2]
| 1
| https://github.com/libgit2/libgit2/pull/2572[Replace void casts with GIT_UNUSED.]

| 2014-09
| \x[libgit2-rugged]
| 0
| https://github.com/libgit2/rugged/pull/419[Typo "di ff" -> diff.]

| 2014-09
| \x[libgit2-rugged]
| 0
| https://github.com/libgit2/rugged/pull/417[Remove trailing whitespace.]

| 2014-09
| \x[libgit2-rugged]
| 0
| https://github.com/libgit2/rugged/pull/416[Gitignore rdoc/.]

| 2014-09
| \x[libgit2-rugged]
| 0
| https://github.com/libgit2/rugged/pull/415[Factor File.join in test sandbox_init.]

| 2014-09
| \x[ruby-on-rails]
| 1
| https://github.com/rails/rails/pull/16790[Explain ERB space removal.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlab_git/pull/39[Update README to match Md style in CONTRIBUTING.]

| 2014-09
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7726[Typo localy -> locally]

| 2014-09
| \x[vader-vim]
| 1
| https://github.com/junegunn/vader.vim/pull/16[Add run-tests script.]

| 2014-09
| \x[vader-vim]
| 2
| https://github.com/junegunn/vader.vim/pull/22[Add SyntaxAt and SyntaxOf helpers.]

| 2014-09
| \x[libgit2-rugged]
| 0
| https://github.com/libgit2/rugged/pull/417[Remove trailing whitespace.]

| 2014-09
| \x[libgit2-rugged]
| 0
| https://github.com/libgit2/rugged/pull/416[Gitignore rdoc/.]

| 2014-09
| \x[libgit2-rugged]
| 0
| https://github.com/libgit2/rugged/pull/415[Factor File.join in test sandbox_init.]

| 2014-09
| \x[pro-git-book]
| 1
| https://github.com/progit/progit/pull/878[Mention packed-refs.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7472[Add link to fixed SHA version on blob.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7678[Factor new issue and edit MR forms.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7677[Fix missing to on reassign Merge Request text email to unassigned.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7661[Fix missing to on reassign Merge Request email to unassigned.]

| 2014-09
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/60[Run multimarkdown in compatibility mode.]

| 2014-09
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/69[Link to stmd.]

| 2014-09
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7211[Add users with deterministic username and password to development seed.]

| 2014-09
| \x[ruby-on-rails]
| 0
| https://github.com/rails/rails/pull/16774[Shorten ActionView::Base doc summary line.]

| 2014-09
| \x[ruby-on-rails]
| 1
| https://github.com/rails/rails/pull/16773[Clarify Rails uses erubis not stdlin ERB.]

| 2014-08
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/432[Rename node p to pipe]

| 2014-08
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7641[Typo.]

| 2014-08
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/431[README improvements: md style, typos, fix links.]

| 2014-08
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/429[Add tex hyperlink snippets.]

| 2014-08
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7609[Remove HAML eval for const strings.]

| 2014-08
| \x[softcover-latex]
| 1
| https://github.com/softcover/softcover/pull/116[Ignore template top level tex file.]

| 2014-08
| \x[softcover-latex]
| 1
| https://github.com/softcover/softcover/pull/103[Fix failing PDF fontsize verbatim test.]

| 2014-08
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/422[Add tex listings snippets.]

| 2014-08
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7509[Fix Md style for API docs.]

| 2014-08
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7508[Fix Md style for projects API doc.]

| 2014-08
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7483[Restrict commit area resize to vertical.]

| 2014-08
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlab-shell/pull/169[Update README Markdown style to match CONTRIBUTING]

| 2014-07
| \x[pro-git-book]
| 1
| https://github.com/progit/progit/pull/751[Set dummy merge driver merge ours .gitattributes.]

| 2014-07
| \x[gitlab]
| 2
| https://github.com/gitlabhq/gitlabhq/pull/7233[Add project stars.]

| 2014-07
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7340[Increase diff byte highlight contrast.]

| 2014-07
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7257[Clarify squash comes after review.]

| 2014-07
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7196[Enforce Markdown style.]

| 2014-07
| \x[octokat-js]
| 1
| https://github.com/philschatz/octokat.js/pull/7/files[Gitignore fixtures and dist/commonjs.]

| 2014-07
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7204[Fix username validation message to match regexp.]

| 2014-06
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7170[Add trailing newline to all text files.]

| 2014-06
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/7195[Typo.]

| 2014-06
| \x[markdownlint-markdownlint]
| 0
| https://github.com/mivok/markdownlint/pull/1[Typo.]

| 2014-06
| \x[ruby-on-rails]
| 0
| https://github.com/rails/rails/pull/15997[Typo.]

| 2014-06
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7169[Replace HTML5 obsolete center element with CSS.]

| 2014-06
| https://github.com/github/developer.github.com[developper.github.com]
| 1
| https://github.com/github/developer.github.com/pull/543[Explain :user is username not ID.]

| 2014-06
| https://github.com/prose/prose[Prose]
| 0
| https://github.com/prose/prose/pull/724[Correct CONTRIBUTING typos.]

| 2014-06
| \x[octokat-js]
| 1
| https://github.com/philschatz/octokat.js/pull/5[Fix `repo` to `repos` in README examples.]

| 2014-06
| \x[octokat-js]
| 1
| https://github.com/philschatz/octokat.js/pull/6[Fix typos and style on README.]

| 2014-06
| \x[octokit-js]
| 0
| https://github.com/philschatz/octokit.js/pull/57[Remove trailing whitespace.]

| 2014-06
| \x[octokit-js]
| 1
| https://github.com/philschatz/octokit.js/pull/56[Add grunt watch.]

| 2014-06
| \x[octokat-js]
| 0
| https://github.com/philschatz/octokat.js/pull/3[Remove unneeded semicolon.]

| 2014-06
| \x[octokat-js]
| 1
| https://github.com/philschatz/octokat.js/pull/2[Add grunt watch.]

| 2014-06
| \x[karlcow-markdown-testsuite]
| 2
| https://github.com/karlcow/markdown-testsuite/pull/55[Add Vagrantfile.]

| 2014-06
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/54[Remove hoedown options.]

| 2014-06
| \x[honza-vim-snippets]
| 1
| https://github.com/honza/vim-snippets/pull/386[Add HTML `ac` Anchor from Clipboard.]

| 2014-06
| https://github.com/wayneeseguin/rvm[RVM]
| 0
| https://github.com/wayneeseguin/rvm/pull/2900[Correct some doc typos.]

| 2014-06
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/7107[Clarify that bbastov is the style of Hound CI.]

| 2014-06
| \x[gitlab]
| 2
| https://github.com/gitlabhq/gitlabhq/pull/6863[Update docs to match new markdown style guide.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/51[Add blackfriday, lunamark, maruku and rdiscount.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/44[Add autolink-no-bracket extension test.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/45[Add showdown engine.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/47[Title attribute is significant at normalization.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/48[Add design goals.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/49[Add Python Markdown 2 engine.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/50[Add peg-markdown engine.]

| 2014-05
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6385[Commit message textareas have 72 char mark line.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/44[Add autolink-no-bracket extension test.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/43[Add link-idref-implicit-no-bracket test.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/42[Minor fixes to addition of hoedown.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/41[Remove no-auto-id argument for kramdown.]

| 2014-05
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/36[Add markdown_pl Markdown.pl engine.]

| 2014-04
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/6892[Remove redundant signin link from signin page.]

| 2014-04
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6897[Add help link to header.]

| 2014-04
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/31[Improve output normalization with custom parser.]

| 2014-04
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/40[Add ordered-list-inner-par-list test.]

| 2014-04
| \x[gitlab-ci]
| 1
| https://github.com/gitlabhq/gitlab-ci/pull/422[Add application.yml.example.development.]

| 2014-04
| https://github.com/boostorg/graph[Boost Graph]
| 1
| https://github.com/boostorg/graph/pull/8[Explicitly use vertex type on quick tour example.]

| 2014-04
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/34[Add list-code-1-space test.]

| 2014-04
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/33[Add md2html engine.]

| 2014-04
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/32[Remove email tests because output is random.]

| 2014-04
| \x[karlcow-markdown-testsuite]
| 2
| https://github.com/karlcow/markdown-testsuite/pull/30[Run only tests that contain string in title.]

| 2014-04
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/29[Add marked engine.]

| 2014-04
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6795[Add markdown styleguide.]

| 2014-04
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6775[Include SASS in subdirectories with glob.]

| 2014-04
| \x[tig-git-ui]
| 1
| https://github.com/jonas/tig/pull/270[Add refs bind `!` to delete branch.]

| 2014-04
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6774[Rename issue form tags to match MR and params.]

| 2014-04
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6749[Say issues are accepted at both GitLab and GitHub.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/23[Document config_local.py on README.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/24[Factor out engines that are commands on PATH.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/25[Add sample run-tests.py output to README.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/26[Check if are no engines enabled to avoid exception.]

| 2014-03
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/71[Add Toc commands.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/21[One disable per line commented out on conf.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/20[Add multimarkdown support.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/18[Typo conten -> content.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 2
| https://github.com/karlcow/markdown-testsuite/pull/15[Automated tests.]

| 2014-03
| \x[gitlab-ci]
| 0
| https://github.com/gitlabhq/gitlab-ci/pull/405[Remove config/puma.rb from gitignore.]

| 2014-03
| \x[gitlab-ci]
| 0
| https://github.com/gitlabhq/gitlab-ci/pull/404[Ignore config/unicorn.rb.]

| 2014-03
| \x[gitlab-ci]
| 0
| https://github.com/gitlabhq/gitlab-ci-runner/pull/79[Tell users to install bundle locally without sudo.]

| 2014-03
| \x[gitlab-ci]
| 0
| https://github.com/gitlabhq/gitlab-ci-runner/pull/78[Document where to find the registration token.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/14[Remove space from simple list, specify asterisk.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/13[Add script to cat all input files.]

| 2014-03
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/12[Remove newline from empty files.]

| 2014-03
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6601[Start development Key seed id from 1.]

| 2014-03
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6544[Show link to public projects for new users.]

| 2014-03
| \x[gitlab-cookbook]
| 1
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/57/diffs[Correct bindfs metal dev init script.]

| 2014-03
| \x[gitlab-ci]
| 0
| https://github.com/gitlabhq/gitlab-ci/pull/391[Organize gitignore.]

| 2014-03
| \x[gitlab-cookbook]
| 1
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/55[Correct metal install home share technique.]

| 2014-03
| \x[gitlab-cookbook]
| 0
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/53[Uniform markdown headers]

| 2014-03
| \x[gitlab-cookbook]
| 0
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/54[Typo ommited -> omitted.]

| 2014-03
| \x[gitlab]
| 0
| https://github.com/gitlabhq/gitlabhq/pull/6489[Documentation Typos]

| 2014-02
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/60[Add contributing guidelines and started tests as required by them.]

| 2014-02
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/61[Add Vundle install to README, updated pathogen URL to GitHub.]

| 2014-02
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/62[Create credits section, remove link to old homepage.]

| 2014-02
| \x[gitlab]
| 1
| https://github.com/gitlabhq/gitlabhq/pull/6386[Remove dir prefix from filename of tests under dir.]

| 2014-02
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/10[Make title more readable.]

| 2014-02
| \x[karlcow-markdown-testsuite]
| 0
| https://github.com/karlcow/markdown-testsuite/pull/9[Make readme intro more direct.]

| 2014-02
| \x[karlcow-markdown-testsuite]
| 1
| https://github.com/karlcow/markdown-testsuite/pull/8[Add extensions.]

| 2014-02
| \x[gitlab]
| 2
| https://github.com/gitlabhq/gitlabhq/pull/6375[Blob and tree markdown links to anchors work.]

| 2014-02
| https://github.com/motemen/git-browse-remote[git-browse-remote]
| 0
| https://github.com/motemen/git-browse-remote/pull/10[Add install instructions.]

| 2014-02
| \x[overleaf]
| 1
| https://github.com/sharelatex/sharelatex/pull/57[Remove latexmk install instructions from README.]

| 2014-02
| \x[overleaf]
| 1
| https://github.com/sharelatex/sharelatex/pull/56[Remove dollars from readme bash code.]

| 2014-02
| \x[overleaf]
| 1
| https://github.com/sharelatex/sharelatex/pull/53[Add dummy version to package.json to fix install.]

| 2014-02
| \x[overleaf]
| 1
| https://github.com/sharelatex/sharelatex/pull/52[Add .nvmrc]

| 2014-02
| \x[gitlab]
| 2
| https://github.com/gitlabhq/gitlabhq/pull/6274[User can leave group from group page.]

| 2014-02
| \x[gitlab]
| 2
| https://github.com/gitlabhq/gitlabhq/pull/6219[Add anchors to markdown rendered headers.]

| 2014-02
| \x[gitlab]
| 2
| https://github.com/gitlabhq/gitlabhq/pull/6177[User profile pages are publicly visible.]

| 2014-01
| \x[gitlab-cookbook]
| 1
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/33[Development install documentation correction.]

| 2014-01
| \x[gitlab-cookbook]
| 2
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/29[Create metal development install documentation.]

| 2014-01
| \x[gitlab-cookbook]
| 0
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/30[Improve docs.]

| 2014-01
| \x[gitlab-cookbook]
| 1
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/23[Add option to control the SSH port used.]

| 2013-12
| \x[gitlab-cookbook]
| 1
| https://gitlab.com/gitlab-org/cookbook-gitlab/merge_requests/11[Improve production install docs.]

| 2013-11
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/52[Header navigation mappings work for Setext headers.]

| 2013-10
| \x[okular]
| 1
| https://git.reviewboard.kde.org/r/113434/[Add shortcut to Change Colors on a page.]

| 2013-09
| \x[plasticboy-vim-markdown]
| 2
| https://github.com/plasticboy/vim-markdown/pull/37[Add mappings to navigate across headers.]

| 2013-02
| https://github.com/scipy/scipy[SciPy]
| 1
| https://github.com/scipy/scipy/pull/365[Improve documentation.]

| 2013-01
| https://github.com/bread-and-pepper/django-userena[Django Userena]
| 1
| https://github.com/bread-and-pepper/django-userena/commit/6a0bc1575a1816a130644efde411fbed131720be[Add new configuration option.]

| 2012-11
| https://github.com/DataTables/DataTables[DataTables]
| 1
| https://github.com/DataTables/DataTables/commits?author=cirosantilli[Improved a doc example.]

====== Merged by Ciro

Patches which were merged by Ciro himself on repositories which eh feels have large public visibility, e.g. those to which he has been given push permission.

Repositories to which Ciro gained push permission because of his contributions:
* https://github.com/plasticboy/vim-markdown

|| Date
|| Project
|| Size
|| Description

| 2017-07
| \x[busybox]
| 1
| https://bugs.busybox.net/show_bug.cgi?id=10066[dd status=none does nothing and still prints status]

| 2016-04
| \x[ranger-file-manager]
| 0
| https://github.com/hut/ranger/issues/510[Make the :source command from actions.py part of the public API and document it in the man pages]

| 2015-05
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/205[Document `<Plug>Markdown_OpenUrlUnderCursor`]

| 2015-05
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/193[Add TOC to README]

| 2015-05
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/207[Allow users to disable individual maps with hasmapto checks]

| 2015-04
| \x[plasticboy-vim-markdown]
| 2
| https://github.com/plasticboy/vim-markdown/pull/183[gx works from anywhere inside Markdown links]

| 2015-04
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/177[Change the README h1 to "Vim Markdown"]

| 2015-04
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/178[Improve README formatting]

| 2014-10
| \x[plasticboy-vim-markdown]
| 2
| https://github.com/plasticboy/vim-markdown/pull/121[Highlight angle braced hyperlinks]

| 2014-10
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/134[Use a single code block style on README]

| 2014-10
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/133[Improve bold and italic tests]

| 2014-10
| \x[plasticboy-vim-markdown]
| 0
| https://github.com/plasticboy/vim-markdown/pull/132[Remove outdated fields from syntax header]

| 2014-09
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/124[Support YAML frontmatter headers v2.]

| 2014-09
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/123[Add LaTeX `$` and `$$` math support.]

| 2014-09
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/128[Add unit tests and travis support.]

| 2014-09
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/122[Fix parenthesis and square brackets that were rendered as links when not in link.]

| 2014-06
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/88[Add commands to increase and decrease header levels.]

| 2014-03
| \x[plasticboy-vim-markdown]
| 1
| https://github.com/plasticboy/vim-markdown/pull/69[Use Markdown Test Suite for the tests wherever possible.]

===== Bug reports and feature requests

* I opened and was confirmed or generated considerable interest
* I wrote comments pointing out a non obvious cause/fix/duplicate.
* I reviewed the patch

This shall not list bugs solved by my accepted pull requests.

====== Closed source

Disclaimer: closed source vendors tend to be highly secretive, solving small issues without any reply, so I use my best judgement given the lack of feedback.

|| Date
|| Project
|| Type
|| Description

| 2019-07
| https://zenodo.org/
| Security bug
| http://web.archive.org/web/20190715192018/http://blog.zenodo.org/2019/07/15/2019-07-15-xss-vulnerability/[Cross-Site Scripting vulnerability]. Also mentioned at: https://invenio-software.org/blog/security-advisor-20190715/

| 2015-09
| \x[github]
| Support
| https://github.com/isaacs/github/issues/460[Add ability to fork and edit files from external URL]

| 2015-05
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/398[500 when listing GCC mirror branches]

| 2015-04
| https://www.fsf.org[Free Software Foundation]
| Bug
| https://github.com/cirosantilli/issues/issues/3[Duplicated paragraph at Octave at description of high priority projects]

| 2015-03
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/375[@about and @pricing generate at mentions even though they are reserved]

| 2015-03
| http://tutorials.jenkov.com[Jenkov tutorials]
| Typo
| http://tutorials.jenkov.com/java-util-concurrent/atomiclong.html[typo boolean -> long]

| 2015-03
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/370[502 on homepage on long streak]

| 2015-02
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/348[If a CONTRIBUTING.md that is a symlink is present, the link to it should not show on new issue forms]

| 2015-02
| \x[github]
| Feature
| https://github.com/isaacs/github/issues/361[Allow to reopen pull requests after a force push]

| 2015-02
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/348[If a CONTRIBUTING.md that is a symlink is present, the link to it should not show on new issue forms]

| 2014-12
| https://www.mysciencework.com[My Science Work]
| Typo
| Typos on settings page

| 2014-12
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/321[Merge pull request window appears after rebase even if I don't have permission]

| 2014-12
| \x[github]
| Feature
| https://github.com/isaacs/github/issues/320[Repository Traffic Analytics API]

| 2014-12
| \x[github]
| Support
| https://github.com/isaacs/github/issues/315[Pin issues or add header text to issues page]

| 2014-12
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/319[Tree show links blobs to the last commit that contained the blob instead of commit that introduced the file]

| 2014-12
| \x[github]
| Duplicate
| https://github.com/isaacs/github/issues/318[Deal properly with uppercase .GIT file basenames on web editor like for lowercase .git]

| 2014-12
| \x[github]
| Duplicate
| https://github.com/isaacs/github/issues/314[Add a "I have this issue too" button]

| 2014-11
| \x[gitbook]
| Bug
| https://support.gitbook.com/hc/communities/public/questions/200628582-500-on-edit-without-access[500 on /edit without access]

| 2014-11
| \x[github]
| Feature
| https://github.com/isaacs/github/issues/297[View non-rendered markdown source with line numbers on blob show]

| 2014-11
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/303[500 on branch index for long branch name pushed together with other branch]

| 2014-11
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/181#issuecomment-43488854[GFM ordered list with inner unordered paragraph list generates two ordered lists]

| 2014-11
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/286[Glitches for filenames that contain only spaces]

| 2014-11
| \x[github]
| Bug
| https://github.com/isaacs/github/issues/290[500 on raw and 414 on blob show of long file name with 1024 characters]

| 2014-11
| \x[github]
| Feature
| https://github.com/isaacs/github/issues/235[Highlight bytes / words in diffs on adjacent multi-line modifications]

| 2014-11
| \x[github]
| Duplicate
| https://github.com/isaacs/github/issues/218#issuecomment-47030350[Allow following of groups similar to following users]

====== Open source

|| Date
|| Project
|| Size
|| Description

| 2019-04
| \x[gnuplot]
|
| https://groups.google.com/forum/#!topic/comp.graphics.apps.gnuplot/qpL8aJIi9ZE[Why does plotting with point labels make plot generation extremely slow?]

| 2019-04
| \x[gdb-dashboard]
|
| https://github.com/cyrus-and/gdb-dashboard/issues/142[Limit the size of shown arguments in the Stack display]

| 2018-03
| \x[qemu]
| 2
| https://lists.nongnu.org/archive/html/qemu-devel/2018-02/msg01681.html[Test record and replay feature]. Also https://bugs.launchpad.net/qemu/+bug/1762179[here]

| 2018-02
| \x[pandoc]
|
| https://github.com/jgm/pandoc/issues/4363[Add option to produce asciidoc output without explicit heading ids]

| 2017-10
| \x[android]
|
| https://issuetracker.google.com/issues/68496715[GLES3 content gles3jni from ndk examples fails with "java.lang.RuntimeException: createContext failed: EGL_BAD_CONFIG"]

| 2017-09
| \x[mozilla-rr]
|
| https://github.com/mozilla/rr/issues/2098[How to automatically start replay and go directly to main instead of `_start`?]

| 2017-09
| \x[mozilla-rr]
|
| https://github.com/mozilla/rr/issues/2088[Reverse step over time(NULL) enters rr/src/preload/syscall_hook.S and leads to "Cannot find bounds of current function"]

| 2017-08
| https://github.com/kfish/xsel[xsel]
|
| https://github.com/kfish/xsel/issues/13[Why maximum 4000 characters output with xsel -b ?]

| 2017-06
| \x[buildroot]
|
| https://github.com/cyrus-and/gdb-dashboard/issues/65[Don't print mutiline struct function arguments on stack when set pretty print on]

| 2017-04
| \x[gdb-dashboard]
|
| https://github.com/cyrus-and/gdb-dashboard/issues/60[Add style option to print stack arguments on a single line]

| 2017-05
| \x[buildroot]
|
| https://bugs.busybox.net/show_bug.cgi?id=9886[Build fails with "unexpected EOF while looking for matching "'" if PATH contains a newline]

| 2017-04
| \x[gdb-dashboard]
|
| https://github.com/cyrus-and/gdb-dashboard/issues/60[Add style option to print stack arguments on a single line]

| 2017-03
| https://github.com/clMathLibraries/clBLAS[clBLAS]
|
| https://github.com/clMathLibraries/clBLAS/pull/313[`.s[0]` + CL_DEVICE_TYPE_ALL]

| 2017-01
| \x[game-icons-net]
|
| https://github.com/game-icons/icons/issues/301[Use multiple separate paths, allow customizing the color of each component, and give a default color]

| 2017-01
| \x[game-icons-net]
|
| https://github.com/game-icons/icons/issues/302[delapouite/originals/svg/brick-wall.svg has some whitespace on top]

| 2017-01
| \x[openai-gym]
|
| https://github.com/openai/gym/issues/483[examples/agents/keyboard_agent.py fails with "AttributeError: 'TimeLimit' object has no attribute 'viewer'"]

| 2016-12
| \x[simple-directmedia-layer]
|
| https://hg.libsdl.org/SDL/rev/a458fc3377dc[Add C variable printf debug snippets]

| 2015-03
| \x[tig-git-ui]
|
| https://github.com/jonas/tig/issues/273[Accepted feature.]

| 2014-11
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8293#issuecomment-62858344[Duplicate]

| 2014-11
| \x[gitlab]
|
| https://gitlab.com/gitlab-com/www-gitlab-com/issues/180[Bug.]

| 2014-11
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8384[Support.]

| 2014-11
| https://github.com/CWSpear/bootstrap-hover-dropdown[Bootstrap Hover Dropdown]
|
| https://github.com/CWSpear/bootstrap-hover-dropdown/issues/92[Bug confirmed.]

| 2014-11
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8267[Bug confirmed.]

| 2014-11
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8357[Triaging.]

| 2014-11
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8302[Problem with the display icons in the left block]

| 2014-11
| \x[sass-stylesheet-language]
|
| https://github.com/sass/sass/issues/1493[Bug confirmed.]

| 2014-10
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8206[Point duplicate.]

| 2014-10
| \x[gitlab]
|
| https://gitlab.com/gitlab-com/www-gitlab-com/issues/170[Bug confirmed.]

| 2014-10
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8090[Bug confirmed.]

| 2014-10
| https://github.com/gitlabhq/gitlabhq[Semaphore CI]
|
| https://github.com/gitlabhq/gitlabhq/pull/8081[Bug confirmed.]

| 2014-10
| \x[libgit2]
|
| https://github.com/libgit2/libgit2/issues/2562[Bug confirmed.]

| 2014-10
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/8038[Support.]

| 2014-10
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/3922228-opt-into-and-out-of-notifications-for-specific-iss[Point duplicate.]

| 2014-09
| \x[vader-vim]
|
| https://github.com/junegunn/vader.vim/issues/15[Accepted feature.]

| 2014-09
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5004385-wrap-lines-option-in-the-merge-request[Point already fixed.]

| 2014-09
| \x[vader-vim]
|
| https://github.com/junegunn/vader.vim/issues/14[Accepted feature.]

| 2014-09
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/pull/7242[Bug confirmed.]

| 2014-09
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/6351[Bug confirmed.]

| 2014-09
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/4077791-login-gitlab-as-another-user-impersonate-functio[Point duplicate.]

| 2014-09
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5567051-delete-branch-after-accepting-or-closing-a-merge-r[Point already fixed.]

| 2014-08
| \x[markdownlint-markdownlint]
|
| https://github.com/mivok/markdownlint/issues/47[Accepted feature.]

| 2014-08
| \x[softcover-latex]
|
| https://groups.google.com/forum/?hl=en#!topic/softcover-publishing/zFrDngqlYbY[Accepted feature.]

| 2014-08
| \x[markdownlint-markdownlint]
|
| https://github.com/mivok/markdownlint/issues/49[Accepted feature.]

| 2014-07
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/pull/7257[Bug confirmed.]

| 2014-07
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5863024-ability-to-dismiss-a-broadcast-messages[Accepted feature.]

| 2014-07
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5590496-resolve-any-merge-request-conflict-from-the-web-in[Accepted feature.]

| 2014-06
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5578188-use-something-more-meaningful-than-www-to-differen[Accepted feature.]

| 2014-06
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/issues/6655#issuecomment-47034956[Point duplicate.]

| 2014-06
| \x[karlcow-markdown-testsuite]
|
| https://github.com/karlcow/markdown-testsuite/issues/37[Bug confirmed.]

| 2014-06
| \x[plasticboy-vim-markdown]
|
| https://github.com/plasticboy/vim-markdown/issues/74#issuecomment-46292801[Close issue.]

| 2014-06
| \x[plasticboy-vim-markdown]
|
| https://github.com/plasticboy/vim-markdown/pull/92[Review patch.]

| 2014-06
| \x[plasticboy-vim-markdown]
|
| https://github.com/plasticboy/vim-markdown/pull/80[Review and patch patch.]

| 2014-05
| \x[softcover-latex]
|
| https://github.com/softcover/softcover/pull/94[Accepted feature.]

| 2014-04
| \x[karlcow-markdown-testsuite]
|
| https://github.com/karlcow/markdown-testsuite/issues/3[Close issue with better issues.]

| 2014-03
| \x[tig-git-ui]
|
| https://github.com/jonas/tig/issues/275[Accepted feature.]

| 2014-03
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5518180-smarter-merge-request-target-repo-and-branch-form-[Accepted feature.]

| 2014-03
| \x[softcover-latex]
|
| https://github.com/softcover/polytexnic/issues/100#issuecomment-37228903[Accepted feature.]

| 2014-03
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5603753-gitlab-markdown-should-display-username-s-correct[Add useful information.]

| 2014-03
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5628857-administratively-create-issues-on-behalf-of-other[Point duplicate.]

| 2014-03
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/3957367-allowing-the-build-pages-to-be-viewed-publicly[Point duplicate.]

| 2014-03
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/5607934-view-diff-on-submit-merge-request-form[Accepted feature.]

| 2014-02
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/4255282-task-lists-like-github-done-or-some-other-implemen[Point duplicate.]

| 2014-02
| \x[gitlab]
|
| https://github.com/gitlabhq/gitlabhq/pull/6389[Accepted feature.]

| 2014-02
| \x[overleaf]
|
| https://github.com/sharelatex/sharelatex/issues/51[Feature generated considerable interest.]

| 2014-02
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/3941049-allow-public-read-only-wikis[Point already fixed.]

| 2014-02
| \x[gitlab]
|
| https://feedback.gitlab.com/forums/176466-general/suggestions/4000912-add-a-diff-view-when-editing-a-file-via-the-web-in[Link feature request to patch.]

| 2013-10
| \x[yakuake]
|
| https://bugs.kde.org/show_bug.cgi?id=319172#c2[Bug confirmed.]

| 2013-10
| \x[okular]
|
| https://bugs.kde.org/show_bug.cgi?id=327641[Bug confirmed.]

| 2013-06
| \x[krusader]
|
| https://bugs.launchpad.net/ubuntu/+source/krusader/+bug/1197679[Bug confirmed.]

| 2013-05
| \x[numpy]
|
| https://github.com/matplotlib/matplotlib/pull/1967[Bug confirmed + inner cause.]

| 2012-05
| \x[krusader]
|
| https://bugs.kde.org/show_bug.cgi?id=300068[Accepted feature.]

| 2012-05
| \x[krusader]
|
| https://bugs.launchpad.net/ubuntu/+source/krusader/+bug/999695[Bug confirmed.]

| 2012-05
| https://code.google.com/p/autokey[AutoKey]
|
| https://code.google.com/p/autokey/issues/detail?id=197[Bug confirmed.]

====== Not verified

The following contributions where not immediately verified by others, but they were not reverted either and I think they are good.

|| Date
|| Project
|| Type
|| Description

| 2014-12
| \x[plasticboy-vim-markdown]
| Review patch
| https://github.com/plasticboy/vim-markdown/pull/158[Add tilde-fenced code blocks]

===== Security

|| Date
|| Project
|| Size
|| Description

| 2016-05
| \x[all-github-commit-emails]
| 1
| Password disclosure `grep password` on email data. Gmail password worked and user confirmed.

=== Essays by Ciro Santilli

In other sections:

\x[how-computers-work]

\Include[window-blackout]

==== How to teach
{scope}

Off-the-shelf techniques to become a teaching superhero.

Customized website idea at: \x[write-free-books-to-get-famous-website].

===== Help students achieve their goal

This is the \x[students-must-have-a-flexible-choice-of-what-to-learn][most important of all points].

Don't set goals for your students.

Ask students what they want to do, and help them achieve that goal.

If they don't know what to do, give suggestions of interesting things they could do.

Once they have a goal, just help them learn everything that is needed to achieve that goal

If they don't have a goal, any attempt to learn is a total and complete waste of time.

This is because the universe of potentially useful things that can be learnt is infinite, and no human can ever learn everything.

The only solution, is to try and learn only what seems necessary to reach your goal, and just try to reach your goal instead.

This approach is called \x[backward-design][backward design].

Also, setting overly ambitious goals, is a good idea: \x[the-side-effects-of-ambitious-goals-are-often-the-most-valuable-thing-achieved].

"Graduating" and "getting a diploma" are not valid goals, because they are useless. A goal has to be eiter an amazing specific \x[deep-tech][technological] or \x[art][artistic] development.

===== Let students learn by teaching

Tell students to:
* make suggestions to the course material themselves, since you have \x[how-to-teach/text-is-cheaper-than-video][used text] and \x[how-to-teach/publish-your-source][published your source].Review their suggestions, and accept the best ones.
* answer the questions of other students on your \x[how-to-teach/publish-somewhere-people-can-comment][online forum]. Let them work instead of you.

Praise those that do this very highly, and give them better grades if you have that superpower.

This is part of a larger concept \x[ciro-santilli] holds dear: don't just consume, but also produce.

Whatever you do, even if it is playing \x[video-game]{p}: if you manage to produce related content that will interest other people, and possibly allow you to get paid, it will much much fun to do that thing.

===== Use the Internet

If you give a course in a classroom, you reach 10 people (the others were sleeping).

If you make a perfect course online, and answer questions online, you reach 10 thousand.

Not doing things online is a waste of time.

You are a highly trained professional, and your time is extremely valuable.

Even if it takes twice as long to create the material than giving course, you are still more efficient by a factor of 500.

It is as if there were 500 little copies of you working full time. It is a superpower.

===== Give answers

Give students answers to all questions.

Explain in extreme detail how each result was reached.

Students have the amazing capacity of not looking at answers if they don't want to.

And when they've had enough, then can read answers and understand while the problem is fresh in their minds.

If you don't give answers, no one will be able to use your online material without you being there to hold their hands.

====== Give examples

Keep the example/theory ratio high, very, very high.

For natural sciences, add as many reproducible experiment \x[how-to-teach/text-is-cheaper-than-video][images/videos]/descriptions as you can.

===== Use English

By writing in English you reach more people.

Writing in any other language is a waste of time.

The reason is simple: English speakers control a huge proportion of the world's GDP.

English is the de-facto Lingua Franca of the second half of the 20th Century, it is the new https://en.wikipedia.org/wiki/Lingua_franca[lingua franca], the new Latin, and there is no escaping it.

Students who don't know English will never do anything truly useful in science and technology. So it is pointless to teach them anything (besides English itself).

See also: \x[having-more-than-one-natural-language-is-bad-for-the-world].

===== Text is cheaper than video

Text materials are generally superior to video because they:
* are faster to create and edit
* uses less disk space and network bandwidth
* is easier to search: Ctrl + F on the browser and off you go. And then `grep` if you have superpowers.

Only produce video material if:
* it shows an experiment, physical technique, natural phenomena or location that is of interest. See also: \x[videos-of-all-key-physics-experiments]{full}
* it gives fundamental geometric insight on the subject
* you are filming a human transmitting their passion about the subject, and the speaker is amazing, and does not speak for too long

Never create videos of people just speaking hardcore content for long amounts of time.

If you have to use videos, make them as short as possible, and index them with a textual table of contents.

Also consider using sequences of images or GIFs instead of videos, since those are cheaper.

===== Search before creating

Search a lot first, and only create your own when you can't find something that suits you.

Someone else has already written everything you can come up with.

And if you do find something useful that you want to modify, propose your modifications to the author: they can also be useful to them and others.

===== Advertise your material

Once you have crated something awesome, you have to advertise it, otherwise no one will ever find it.

This means:
* whenever you walk into a classroom, give students a link to the material

  Then ask them if they want to talk about anything.

  Then leave the classroom and go produce more good material instead of wasting your time there :-)
* whenever someone asks as question on an online forum, answer it, and link to the section of your material that also answers that question.

  The material will answer many of their future questions.
* after you've done something awesome, \x[google] possible relevant keywords that should hit it.

  This will lead you to other websites that talk about the same content.

  Then, leave comments on those pages linking to your stuff, or email the authors of those pages.

  It is borderline spam, but if the subject is closely related, it is a win for everyone.

Eventually, people will find you on the front page of Google searches, and then you will know that you've truly made something useful.

===== Publish somewhere people can comment

Then, if people find errors, or have questions, they will write a comment near the content itself.

Then, next person that comes along and has the same problem, will also find that comment, and your answer will solve their problems too.

The perfect way to do this is to use https://github.com/cirosantilli/how-to-teach-efficiently/issues[GitHub issues]

===== Publish your source

For example, if you write LaTeX files for you PDFs, give both PDFs and the LaTeX.

This allows other people to:
* modify and reuse your material
* make improvement suggestions that you can accept by clicking a button

  The perfect way to do this is to use https://help.github.com/articles/about-pull-requests/[GitHub pull requests]

====== Version your material

Whenever you make a change to your material, people should still be able to access the previous version.

Maybe there was something in the previous version that they needed, and you just removed.

Git + \x[github] is the perfect way to do versioning.

===== Explain how to make money with the lesson

People will be more interested if they see how the stuff they are learning is useful.

Useful 99% of the time means you can make money with it.

And if it can't money, there is only one other thing people crave: beauty. Show them the beauty of the subject.

===== Use the CC Attribution-ShareAlike license

https://creativecommons.org/licenses/by-sa/2.5/

This way people have to link back to you, which makes you more famous.

And they can't steal your material without giving anything back.

This is what Wikipedia and Stack Exchange use.

===== Talk with individuals, not to groups

When you do get face to face time with students, don't teach a large group.

Everything you want to teach is already online.

And if it is not, then you are \x[how-to-teach/use-the-internet][wasting your time saying it face-to-face instead of creating such online resource].

The only goal of meeting students is talking to them individually or in small groups to:
* understand what they feel
* transmit your passion for the subject

and letting them do the same amongst themselves.

If you talk to a large group, you will only reach / understand a very small percentage of the group, so your time is wasted.

It is better to deeply understand what 25% of the students feel and adapt the course material, than to talk to everyone at once, and have only 5% understand anything.

===== Become famous through teaching

There is only one thing that can truly motivate you to make good materials: becoming famous.

Strive for that. Make good materials. Publish them. Get good reviews. Loop.

This generates a virtuous loop, which makes you produce better and better material.

===== Publish your material even if it is nor perfect

Just make it very clear what you've tried, what you observed, and what you don't understand.

This will already open up room for others to come and expand on your attempt, and you are more likely to learn the answers to your questions as they do.

Perfect is the enemy of good.

===== Examinations and homework are useless unless the student is creating new information

If the answer to something can be found on the Internet, then there is no point in preventing students from looking it up on the Internet.

The only thing that matters is that students publish new information that has never been published before.

This can be either tutorials that explain things in a new better wy, or original research.

Any "homework that the student cannot use existing resources available online" is a waste of time.

We should teach students to use.

===== Bibliography

Other people with similar philosophies:
* https://web.archive.org/web/20191223214225/http://settheory.net/academic-system

==== How to write technical help requests and bug reports

\x[ciro-santilli] often sees all those genius who are much smarter than him making shitty forum/mailing list posts, they need to learn this:

1. The apparently most important one liner error message must appear in the title, and fuller apparently relevant logs must appear on the body
2. You must always give the version of the software that you are using as either a tag or git SHA
3. For build errors, you must give your OS and compiler version and version of any relevant external library

==== What poor countries have to do to get richer

Like all poor countries, \x[brazil] does not have enough money or scientific culture to make technological or scientific advances.

While this sounds obvious, \x[ciro-santilli] has felt it first hand since he moved from Brazil to Europe, and it is just shocking.

In \x[santos-sao-paulo-brazil][Santos] for example, despite being a dream place from the natural point of view, it would be completely impossible to achieve any \x[deep-tech] technical advance that impacts the world.

In Europe however, there are several several places where this can happen.

In order to get richer, poor countries should first \x[having-more-than-one-natural-language-is-bad-for-the-world][teach its people English very well] and invest on projects that make education cheaper such as \x[write-free-books-to-get-famous-website].

Then, Governments of poor countries must pick a few key next big thing \x[deep-tech] bets, and invest on those to try take a byte of them. These have to be few, because the countries are poor, and well selected. For example, as of 2020, Ciro believes that \x[molecular-biology-technologies] and \x[quantum-computing] would be good bets. Focusing on the previous next big things, e.g. classic computers, is always a losing bet.

The student exchange programs Ciro witnessed in the 2010's were inefficient because they were requiring students to come back immediately after university or PhD in fear that those students will never come back.

This is useless, because you don't learn anything unique during university: the truly valuable knowledge is obtained when you work for several years as a postdoc in a world class research laboratory or as an engineer in a world class company.

Therefore, Brazil should learn from the Chinese exchange system, which lets students go do whatever they want, and once they are Gods of the domain, https://github.com/cirosantilli/china-dictatorship/tree/b3539b4a45a4a7891229c10d3d5ec63a21e13af0#thousand-talents-program[entices them back with great positions and pay as heads of laboratory back in China]. Just https://www.sciencemag.org/news/2020/06/fifty-four-scientists-have-lost-their-jobs-result-nih-probe-foreign-ties[don't do fraudulent stuff like this] like China did, or else you will get a bad rep.

Ciro actually had to return for just six months, to finish a course he had only done the generic Maths/Physics introduction to. Students from other Brazilian universities were forced to return for up to 3 years even to get their Brazilian diplomas! Ciro was lucky that his teachers understood the situation, and allowed him to develop online learning projects instead of his supposed control engineering projects, which hopefully will have led to changing the world with \x[write-free-books-to-get-famous-website-motivation] one day. And for this, Ciro is eternally thankful.

Ciro was once talking about why so few Brazilians go study abroad compared to the Chinese. Besides the likely true "there are a lot of Chinese" argument, his \x[ciro-santilli-s-wife][wife] made another: good point Brazil is not so bad to live in, because you have good food and freedom, while China only has good food.

But Ciro still fells bad that so few of his \x[university-of-sao-paulo-brazil] colleagues, who learnt automation and control engineering, are doing \x[deep-tech]. Nor physical engineering. They have all basically become computer people like Ciro.

This is not their fault. They basically don't have a choice: all physical science and technology is done in rich countries.

Yes, someone has to implement the newest tech to improve local country efficiency in projects that will never spread abroad.

But who will be left then for \x[the-next-big-thing] problems that would really make Brazil richer? 6 out of 30 person class ended up working on a gaming company at one point, even though they were not crazy passionate about the field! What could possibly be a \x[art][worst investment for society]?

== Physics

https://en.wikipedia.org/wiki/Physics

\x[ciro-santilli] doesn't know physics. He writes about it partly to start playing with some scientific content for: \x[write-free-books-to-get-famous-website], partly because this stuff is just amazingly beautiful.

Ciro's main intellectual Physics fetishes are to learn \x[quantum-electrodynamics] and condensed matter.

Physics is the \x[art] of predicting the future by modelling the world with \x[mathematics].

Every science is Physics in disguise, but the number of objects in the real world is so large that we can't solve the real equations in practice.

Luckily, due to https://en.wikipedia.org/wiki/Emergence[emergence], we can use uglier higher level approximations of the world to solve many problems, with the complex limits of applicability of those approximations.

Therefore, such higher level approximations are highly specialized, and given different names such as:
* \x[chemistry]
* \x[biology]

\Image[https://web.archive.org/web/20190925220347if_/https://imgs.xkcd.com/comics/purity.png]
{title=xkcd 435: Fields arranged by purity.}
{source=https://xkcd.com/435/}

As of 2019, all known physics can be described by two theories:
* the \x[standard-model]
* the \x[general-relativity]

Unifying those two into the \x[theory-of-everything] one of the major goals of modern physics.

=== How to teach and learn physics

The approach many courses take to physics, specially "modern Physics" is really bad, this is how it should be taught:
* start by describing experiments that the previous best theory did not explain
* then, give the final formula for the next best theory
* then, give all the important final implications of that formula, and how it amazingly describes the experiments
* then, give some mathematical intuition on the formulas, and how the main equation could have been derived
* finally, then and only then, start deriving the outcomes of the main formula in detail

This is likely because at some point, experiments get more and more complicated, and so people are tempted to say "this is the truth" instead of "this is why we think this is the truth", which is much harder.

But we can't be lazy, there is no replacement to the why.

=== The most important physics experiments

Videos should be found/made for all of those: \x[videos-of-all-key-physics-experiments]

* \x[speed-of-light-experiments]
* basically all experiments listed under \x[quantum-mechanics-experiments] such as:
  * \x[black-body-radiation-experiment]

==== Michelson-Morley experiment

https://en.wikipedia.org/wiki/Michelson–Morley_experiment

\Video[http://youtube.com/watch?v=lzBKlY4f1XA]
{title="Michelson Interferometer - Amrita University" Published on Jan 30, 2013.}

===== Davisson-Germer experiment

https://en.wikipedia.org/wiki/Davisson–Germer_experiment

Shows electron interference patterns using a crystal as slit, thus confirming that not just light, but also matter, is wave-like.

==== Compton scattering

https://en.wikipedia.org/wiki/Compton_scattering

\Video[http://youtube.com/watch?v=uICnnfYHYJ4]
{title="Compton Scattering" published by Compton Scattering on 2017-12-20.}
{description=Experiment with a Cesium-137 source.}

Classic theory predicts that the output frequency must be the same as the input one since the electromagnetic wave makes the electron vibrate with same frequency as itself, which then irradiates further waves.

But the output waves are longer because \x[planck-einstein-relation][photons are discrete and energy is proportional to frequency]:
\Video[http://youtube.com/watch?v=WR88_Vzfcx4]
{title="L3.3 Compton Scattering" published by MIT OpenCourseWare on 2017-07-05.}

The formula is exactly that of two \x[special-relativity][relativistic] billiard balls colliding.

Therefore this is evidence that \x[photon][photons exist] and have momentum.

==== Photoelectric effect

https://en.wikipedia.org/wiki/Photoelectric_effect

No matter how hight the wave intensity, if it the frequency is small, no photons are removed from the material.

This is different from classic waves where energy is proportional to intensity, and coherent with the \x[photon][existence of photons] and the \x[planck-einstein-relation].

==== Lamb shift
{c}

https://en.wikipedia.org/wiki/Lamb_shift

2s/2p energy split, not predicted by the \x[dirac-equation], but explained by \x[quantum-electrodynamics], which is one of the first great triumphs of that theory.

=== International System of Units
{title2=SI}
{c}

https://en.wikipedia.org/wiki/International_System_of_Units

The key is to define only the minimum number of measures: if you define more definitions become over constrained and could be inconsistent.

Learning the modern SI is also a great way to learn some interesting Physics.

==== "Origins of Precision" YouTube video by Machine Thinking
{c}

Great overview of the earlier history of unit standardization.

Gives particular emphasis to the invention of \x[gauge-block]{p}.

Published on 2017-11-22.

\Video[https://www.youtube.com/watch?v=gNRnrn5DE58]

==== Versions of the international System of Units

===== 2019 redefinition of the SI base units

https://en.wikipedia.org/wiki/2019_redefinition_of_the_SI_base_units

==== Kilogram

https://en.wikipedia.org/wiki/Kilogram

Defined in the \x[2019-redefinition-of-the-si-base-units] via the \x[planck-constant].

This was possible due to the development of the \x[kibble-balance].

===== Kibble balance

https://en.wikipedia.org/wiki/Kibble_balance

Measures weight from a voltage.

==== Meter

https://en.wikipedia.org/wiki/Metre

===== Gauge block

https://en.wikipedia.org/wiki/Gauge_block

Highlighted at the \x[origins-of-precision-youtube-video-by-machine-thinking].

==== Geiger counter
{c}

https://en.wikipedia.org/wiki/Geiger_counter

=== Particle physics

https://en.wikipedia.org/wiki/Particle_physics

Currently an informal name for the \x[standard-model]

Chronological outline of the key theories:
* \x[maxwell-s-equations]
* \x[schrodinger-equation]
  * Date: 1926
  * Numerical predictions:
    * \x[spectral-lines-of-atoms-and-molecules][Hydrogen spectra energies], excluding finer structure such as 2p up and down split: https://en.wikipedia.org/wiki/Fine-structure_constant
* \x[dirac-equation]
  * Date: 1928
  * Numerical predictions:
    * \x[spectral-lines-of-atoms-and-molecules][Hydrogen spectra] including 2p split, but excluding even finer structure such as \x[lamb-shift]
  * Qualitative predictions:
    * Antimatter
    * Spin as part of the equation
* \x[quantum-electrodynamics]
  * Date: 1947 onwards
  * Numerical predictions:
    * \x[lamb-shift]
  * Qualitative predictions:
    * Antimatter
    * \x[spin] as part of the equation

==== Standard Model
{c}

https://en.wikipedia.org/wiki/Standard_Model

As of 2019, the more formal name for \x[particle-physics], which is notably missing \x[general-relativity] to achieve the \x[theory-of-everything].

= Theory of everything
{parent=standard-model}
{title2=TOE}

https://en.wikipedia.org/wiki/Theory_of_everything

As of 2019, the \x[standard-model] and \x[general-relativity] are incompatible. Once those are unified, we will have one equation to describe the entirety of \x[physics].

There are also however also unsolved problems in \x[electroweak-interaction] + \x[strong-interaction], which if achieved is referred to as a \x[grand-unified-theory]. Reaching a GUT is considered a sensible intermediate step before TOE.

The current state of Physics has been the result of several previous unifications as shown at: https://en.wikipedia.org/wiki/Theory_of_everything#Conventional_sequence_of_theories so it is expected that this last missing unification is likely to happen one day, potentially conditional on humanity having enough energy to observe new phenomena.

= Grand Unified Theory
{parent=theory-of-everything}
{title2=GUT}
{c}

https://en.wikipedia.org/wiki/Grand_Unified_Theory

\x[electroweak-interaction] + \x[strong-interaction].

Appears to be an \x[unsolved-problems-in-physics][unsoved problem in Physics]. TODO why? Don't they all fit into the \x[standard-model] already? So why is strong force less unified with electroweak, than electromagnetic + weak is unified in electroeak?

= The standard model and general relativity are incompatible
{parent=standard-model}

TODO arguments, proofs

= Are there more than 3 generations of particles in the Standard Model?
{parent=standard-model}

* https://physics.stackexchange.com/questions/2051/why-do-we-think-there-are-only-three-generations-of-fundamental-particles

\Video[https://www.youtube/watch?v=AKtN6ajjSQo]
{title="PHYS 485 Lecture 5: Standard Model and Feynman Diagrams" published by \x[2011-phys-485-lecture-videos-by-roger-moore-from-the-university-of-alberta][Roger Moore] on 2016-04-06.}
{description=t=1474 gives an argument why there might only be 3 generations of particles.}

= Why do symmetries such as SU(3)×SU(2)×U(1) matter in particle physics?
{parent=standard-model}

TODO.

Physicists love to talk about that stuff, but no one ever has the guts to explain it into enough detail to show its beauty.

\Video[https://www.youtube.com/watch?v=AuqKsBQnE2A]
{title="The Biggest Ideas in the Universe | 15. Gauge Theory" published by Sean Carroll on 2020-06-30.}
{description=This attempts a one hour hand wave explanation of it. It is a noble attempt and gives some key ideas, but it falls a bit short of Ciro's desires (as would anything that fit into one hour?)}

==== Maxwell's equations
{c}

https://en.wikipedia.org/wiki/Maxwell%27s_equations

Unified all previous electro-magnetism theories into one equation.

Explains the propagation of light as a wave, and matches the previously known relationship between the \x[speed-of-light] and electromagnetic constants.

The equations are a limit case of the more complete \x[quantum-electrodynamics], and unlike that more general theory account for the quantization of \x[photon].

TODO: what does it mean that it is coherent with \x[special-relativity]?

The equations are a system of \x[partial-differential-equation].

The system consists of 6 unknown functions that map 4 variables: time t and the x, y and z positions in space, to a real number:
* $E_x(t, x,y,z)$, $E_y(t, x,y,z)$, $E_z(t, x,y,z)$: directions of the electric field $\functionDomain{\E}{\RFour}{\RThree}$
* $B_x(t, x,y,z)$, $B_y(t, x,y,z)$, $B_z(t, x,y,z)$: directions of the magnetic field $\functionDomain{\B}{\RFour}{\RThree}$
and two known input functions:
* $\functionDomain{\rho}{\RThree}{\R}$: density of charges in space
* $\functionDomain{\J}{\RThree}{\RThree}$: current vector in space. This represents the strength of moving charges in space.

Due to the https://en.wikipedia.org/wiki/Charge_conservation[conservation of charge] however, those input functions have the following restriction:
$$
\dv{\rho}{t} + \divergence{\mathbf{\J}} = 0
$$
{id=equation-charge-conservation}
{title=Charge conservation.}

Also consider the following cases:
* if a spherical charge is moving, then this of course means that $\rho$ is changing with time, and at the same time that a current exists
* in an ideal infinite cylindrical wire however, we can have constant $\rho$ in the wire, but there can still be a current because those charges are moving

  Such infinite cylindrical wire is of course an ideal case, but one which is a good approximation to the huge number of electrons that travel in a actual wire.

The goal of finding $\E$ and $\B$ is that those fields allow us to determine the force that gets applied to a charge via the https://en.wikipedia.org/wiki/Lorentz_force[Lorentz force equation]:
$$
\text{force\_density} = \rho \E + \J \times \B
$$
{id=equation-lorentz-force}
{title=Lorentz force equation.}

and then to find the force we just need to integrate over the entire body.

Finally, now that we have defined all terms involved in the Maxwell equations, let's see the equations:
$$
\divergence{\E} = \frac{\rho}{\vacuumPermittivity}
$$
{id=equation-gauss-law}
{title=Gauss' law.}

$$
\divergence{\B} = 0
$$
{id=equation-gauss-law-for-magnetism}
{title=Gauss's law for magnetism.}

$$
\curl{\E} = -\dv{\B}{t}
$$
{id=equation-faradays-law}
{title=Faraday's law of induction.}

$$
\curl{\B} = \vacuumPermeability \left(\J + \vacuumPermittivity \dv{E}{t} \right)
$$
{id=equation-amperes-circuital-law}
{title=Ampère's circuital law.}

and you should review the interpretation of divergence $\divergence{}$ and curl $\curl{}$:
* divergence: how much fluid goes out or into a point
* curl: points in the direction in which a wind spinner spins fastest

===== Explicit scalar form of the Maxwell's equations

For numerical algorithms and to get a more low level understanding of the equations, we can expand all terms to the simpler and more explicit form:
$$
\dv{E_x}{x} + \dv{E_y}{x} +
\dv{E_z}{x} =
\frac{\rho}{\vacuumPermittivity}
\\

\dv{B_x}{x} +
\dv{B_y}{x} +
\dv{B_z}{x} =
0
\\

\dv{E_z}{y} - \dv{E_y}{z} = -\dv{B_x}{t} \\
\dv{E_x}{z} - \dv{E_z}{x} = -\dv{B_y}{t} \\
\dv{E_y}{x} - \dv{E_x}{y} = -\dv{B_z}{t} \\

\dv{B_z}{y} - \dv{B_y}{z} = \vacuumPermeability \left(J_x + \vacuumPermittivity \dv{E_x}{t} \right) \\
\dv{B_x}{z} - \dv{B_z}{x} = \vacuumPermeability \left(J_y + \vacuumPermittivity \dv{E_y}{t} \right) \\
\dv{B_y}{x} - \dv{B_x}{y} = \vacuumPermeability \left(J_z + \vacuumPermittivity \dv{E_z}{t} \right) \\
$$
{id=equation-maxwells-equation-explicit}

====== Overdetermination of Maxwell's equations

https://en.wikipedia.org/wiki/Maxwell%27s_equations#Overdetermination_of_Maxwell's_equations

As seen from \x[explicit-scalar-form-of-the-maxwell-s-equations], this expands to 8 equations, so the question arises if the system is over-determined because it only has 6 functions to be determined.

As explained on the Wikipedia page  however, this is not the case, because if the first two equations hold for the initial condition, then the othe six equations imply that they also hold for all time, so they can be essentially omitted.

It is also worth noting that the first two equations don't involve time derivatives. Therefore, they can be seen as spacial constraints.

===== Coulomb's law
{c}

https://en.wikipedia.org/wiki/Coulomb%27s_law

Static case of Maxwell's law for electricity only.

Is implied by Gauss' law if \x[maxwell-s-equations]: https://physics.stackexchange.com/questions/44418/are-the-maxwells-equations-enough-to-derive-the-law-of-coulomb

\Video[https://www.youtube.com/watch?v=B5LVoU_a08c]
{title=Coulomb's Law experiment with torsion balance with a mirror on the balance to amplify rotations published by uclaphysics on Sep 30, 2010.}

===== Solutions of Maxwell's equations

\Video[https://www.youtube.com/watch?v=FWCN_uI5ygY]
{title="Understanding Electromagnetic Radiation! | ICT #5" by Learn Engineering published on 2019-09-22.}
{description=Shows animations of a \x[dipole-antenna][dipole antenna] which illustrates well how radiation is emitted from moving charges and travels at the \x[speed-of-light].}

====== Dipole antenna

https://en.wikipedia.org/wiki/Dipole_antenna

===== Maxwell's equations in 2D
{c}

TODO it would be awesome if we could de-generalize the equations in 2D and do a JavaScript demo of it!

Not sure it is possible though because the curl appears in the equations:
* https://physics.stackexchange.com/questions/104008/maxwells-equations-of-electromagnetism-in-21-spacetime-dimensions
* https://www.reed.edu/physics/faculty/wheeler/documents/Electrodynamics/Miscellaneous%20Essays/E&M%20in%202%20Dimensions.pdf

===== Existence and uniqueness of solutions to Maxwell's equations

TODO: I'm surprised that the Wiki page barely talks about it, and there are few \x[google] hits too! A sample one: https://www.researchgate.net/publication/228928756_On_the_existence_and_uniqueness_of_Maxwell's_equations_in_bounded_domains_with_application_to_magnetotellurics

===== Magnetometer

https://en.wikipedia.org/wiki/Magnetometer

Implementations:
* \x[hall-effect] based
* \x[squid-device]

===== Magnetic field

https://en.wikipedia.org/wiki/Magnetic_field

===== Hall effect
{c}

* https://en.wikipedia.org/wiki/Hall_effect
* http://hyperphysics.phy-astr.gsu.edu/hbase/magnetic/Hall.html

The voltage changes perpendicular to the current when magnetic field is applied, Just watch this:
\Video[https://upload.wikimedia.org/wikipedia/commons/transcoded/7/77/Hall_Sensor.webm/Hall_Sensor.webm.480p.vp9.webm]

Applications:
* the direction of the effect proves that electric currents in common electrical conductors are made up of negative charged particles
* \x[magnetometer][measure magnetic fields], TODO vs other methods

Other more precise non-classical versions:
* \x[quantum-hall-effect]

===== Electromagnetism

https://en.wikipedia.org/wiki/Electromagnetism

The phenomena described by \x[maxwell-s-equations].

==== Theory of relativity

https://en.wikipedia.org/wiki/Theory_of_relativity

===== Special relativity

https://en.wikipedia.org/wiki/Special_relativity

Explains how it is possible that everyone observes the same \x[speed-of-light], even if they are moving towards or opposite to the light!

This was observed in in the \x[michelson-morley-experiment] which uses the movement of the Earth to try and detect differences in the speed of light.

This leads leads to the following conclusions:
* to space contraction and time dilation
* the speed of light is the maximum speed anything can reach

All of this goes of course completely against our daily Physics intuition.

The "special" in the name refers to the fact that it is a superset of \x[general-relativity], which also explains gravity in a single framework.

Since time and space get all messed up together, you have to be very careful to understand what it means to say "I observed this to happen over there at that time", otherwise you will go crazy. A good way to think about is this:
* use \x[einstein-synchronization] to setup a bunch of clocks for every position in your frame of reference
* on every point of space, you put a little detector which records events and the time of the event
* each detector can only detect events locally, i.e. events that happen very close to the detector
* then, after the event, the detectors can send a signal to you, who is sitting at the origin, telling you what they detected

====== Einstein synchronization
{c}

https://en.wikipedia.org/wiki/Einstein_synchronisation

====== Lorentz transformation
{c}

https://en.wikipedia.org/wiki/Lorentz_transformation

The equation that allows us to calculate stuff.

Take two observers with identical rules and stopwatch, and aligned axes, but one is on a car moving at towards the $+x$ direction at speed $v$.

TODO image.

When both observe an event, if we denote:
* $(t, x, y, z)$ the observation of the standing observer
* $(t', x', y', z')$ the observation of the ending observer on a car
It is of course arbitrary who is standing and who is moving, we will just use the term "standing" for the one without primes.

Then the coordinates of the event observed by the observer on the car are:
$$
\begin{aligned}
t' & = \gamma \left( t - \frac{v x}{c^2} \right) \\
x' & = \gamma \left( x - v t \right) \\
y' & = y \\
z' & = z
\end{aligned}
$$
where:
$$
\gamma = \frac{1}{\sqrt{1 - \frac{v^2}{c^2}}}
$$

Note that if $\frac{v}{c}$ tends towards zero, then this reduces to the usual https://en.wikipedia.org/wiki/Galilean_transformation[Gallilean transforms] which our intuition expects:
$$
\begin{aligned}
t' & = t
x' & = x - v t \\
y' & = y \\
z' & = z
\end{aligned}
$$

This explains why we don't observe special relativity in our daily lives: macroscopic objects move too slowly compared to light, and $\frac{v}{c}$ is almost zero.

======= Lorentz transform consequence: everyone sees the same speed of light
{c}

OK, so let's verify the main desired consequence of the \x[lorentz-transformation]: that everyone observes the same \x[speed-of-light].

Observers will measure the speed of light by calculating how long it takes the light going towards $+x$ cross a rod of length $L = x_2 - x_1$ laid in the x axis at position $X1$.

TODO image.

Each observer will observe two events:
* $(t_1, x_1, y_1, z_1)$: the light touches the left side of the rod
* $(t_2, x_2, y_2, z_2)$: the light touches the right side of the rod

Supposing that the standing observer measures the speed of light as $c$ and that light hits the left side of the rod at time $T1$, then he observes the coordinates:
$$
\begin{aligned}
t_1 & = T1 \\
x_1 & = X1 \\
t_2 & = \frac{L}{c} \\
x_2 & = X1 + L \\
\end{aligned}
$$

Now, if we transform for the moving observer:
$$
\begin{aligned}
t_1' & = \gamma \left( t_1 - \frac{v x_1}{c^2} \right) \\
x_1' & = \gamma \left( x_1 - v t_1             \right) \\
t_2' & = \gamma \left( t_2 - \frac{v x_2}{c^2} \right) \\
x_2' & = \gamma \left( x_2 - v t_2             \right) \\
\end{aligned}
$$
and so the moving observer measures the speed of light as:
$$
\begin{aligned}
c' & = \frac{x_2' - x_1'}{t_2' - t_1'} \\
   & = \frac{(x_2 - v t_2) - (x_1 - v t_1)}{(t_2 - \frac{v x_2}{c^2}) - (t_1 - \frac{v x_1}{c^2})} \\
   & = \frac{(x_2 - x_1) - v (t_2 - t_1)}{(t_2 - t_1) - \frac{v}{c^2} (x_2 - x_1)} \\
   & = \frac{\frac{x_2 - x_1}{t_2 - t_1} - v}{1 - \frac{v}{c^2} \frac{x_2 -x_1}{t_2 - t_1}} \\
   & = \frac{c - v}{1 - \frac{v}{c^2} c} \\
   & = \frac{c - v}{\frac{c - v}{c}} \\
   & = c \\
\end{aligned}
$$

======= Length contraction

https://en.wikipedia.org/wiki/Length_contraction

Suppose that a rod has is length $L$ measured on a rest frame $S$ (or maybe even better: two identical rulers were manufactured, and one is taken on a spaceship, a bit like the \x[twin-paradox]).

Question: what is the length $L'$ than an observer in frame $S'$ moving relative to $S$ as speed $v$ observe the rod to be?

The key idea is that there are two events to consider in each frame, which we call 1 and 2:
* the left end of the rod is an observation event at a given position at a given time: $x_1$ and $t_1$ for $S$ or $x'_1$ and $t'_1$ for $S'$
* the right end of the rod is an observation event at a given position at a given time : $x_2$ and $t_2$ for $S$ or $x'_2$ and $t'_2$ for $S'$
Note that what you visually observe on a photograph is a different measurement to the more precise/easy to calculate two event measurement. On a photograph, it seems you might not even see the contraction in some cases as mentioned at https://en.wikipedia.org/wiki/Terrell_rotation

Measuring a length means to measure the $x_2 - x_1$ difference for a single point in time in your frame ($t2 = t1$).

So what we want to obtain is $x'_2 - x'_1$ for any given time $t'2 = t'1$.

In summary, we have:
$$
\begin{aligned}
L  &= x_2  &- x_1 \\
L' &= x'_2 &- x'_1
t'_2 = t'_1
\end{aligned}
$$

By plugging those values into the \x[lorentz-transformation], we can eliminate $t_2 and t_1$, and conclude that for any $t'_2 = t'_1$, the length contraction relation holds:
$$
L' = \frac{L}{\gamma}
$$

The key question that needs intuitive clarification then is: but how can this be symmetric? How can both observers see each other's rulers shrink?

And the key answer is: because to the second observer, the measurements made by the first observer are not simultaneous. Notably, the two measurement events are obviously \x[spacelike-separated-events] by looking at the \x[light-cone], and therefore can be measured even in different orders by different observers.

======== Terrell rotation

https://en.wikipedia.org/wiki/Terrell_rotation

What you would see the moving rod look like on a photo of a \x[length-contraction] experiment, as opposed as using two separate spacetime events to measure its length.

======= Twin paradox

https://en.wikipedia.org/wiki/Twin_paradox

The key question is: why is this not symmetrical?

One answer is: because one of the twin accelerates, and therefore changes inertial frames.

But the better answer is: understand what happens when the stationary twin sends light signals at constant time intervals to each other. When does the travelling twin receives them?

By doing that, we see that "all the extra aging happens immediately when the twin turns around":
* on the out trip, both twins receive signals at constant intervals
* when the moving twin turns around and starts to accelerate through different inertial frames, shit happens:
  * the moving twin suddenly notices that the rate of signals from the stationary twin increased. They are getting older faster than us!
  * the stationary twin suddenly notices that the rate of signals from the moving twin decreased. They are getting older slower than us!
* then when the moving twin reaches the return velocity, both see constant signal rates once again

\Image[https://upload.wikimedia.org/wikipedia/commons/7/73/TwinParadoxProperAcceleration.svg]
{height=600}
{title=Twin paradox illustration with twins sending light signals at regular intervals.}

Another way of understanding it is: you have to make all calculations on a \i[single] inertial frame for the entire trip.

Supposing the sibling quickly accelerates out (or magically starts moving at constant speed), travels at constant speed, and quickly accelerates back, and travels at constant speed setup, there are three frames that seem reasonable:
* the frame of the non-accelerating sibling
* the outgoing trip of the accelerating sibling
* the return trip of the accelerating sibling

If you do that, all three calculations give the exact same result, which is reassuring.

Another way to understand it is to do explicit integrations of the acceleration: https://physics.stackexchange.com/questions/242043/what-is-the-proper-way-to-explain-the-twin-paradox/242044#242044 This is the least insightful however :-)

Bibliography:

* https://physics.stackexchange.com/questions/98708/twin-paradox-calculating-spacetime-intervals-from-both-perspectives
* https://physics.stackexchange.com/questions/29921/why-isnt-the-symmetric-twin-paradox-a-paradox

======= Maxwell's equations are consistent with the Lorentz transformation
{c}

Several random sources say that \x[maxwell-s-equations] are consistent with the \x[lorentz-transformation] of \x[special-relativity], so let's try to understand what that means.

https://en.wikipedia.org/w/index.php?title=Lorentz_transformation&oldid=909991141#Transformation_of_the_electromagnetic_field

Note that two observers moving relative to each other see different electromagnetic fields.

For example, suppose that there is a stationary charge for the stationary observer. Because the charge is not moving, the magnetic field is zero for that observer according to \x[maxwell-s-equations].

However, the moving observer sees that charge moving, and therefore a current, and therefore a magnetic field.

TODO mathematical detail. Is all we need to prove that if a given $E(t, x, y, z)$ and $B(t, x, y, z)$ are a solution to the maxwell equations in one frame, then $E'(t', x', y', z')$ and $B'(t', x', y', z')$ are also a solution in the other frame?

This appears awesome: http://www.damtp.cam.ac.uk/user/tong/em/el4.pdf (\a[https://web.archive.org/web/20180920161243/http://www.damtp.cam.ac.uk/user/tong/em/el4.pdf][archive]) "David Tong: Lectures on Electromagnetism - 5. Electromagnetism and Relativity"

* "5.2.1 Magnetism and Relativity" shows how space contraction makes the charges of a wire unbalanced, and that directly causes magnetic force!!!

  The same document mentions further on more explicitly that observers in different frames mix up the Electric and Magnetic fields, but that the same Maxwell laws are still valid in that frame.

  It appears that Maxwell's equations can be derived directly from Coulomb's law + special relativity: https://physics.stackexchange.com/questions/3618/can-maxwells-equations-be-derived-from-coulombs-law-and-special-relativity

  This is linked in a comment and also appears to be of interest: http://richardhaskell.com/files/Special%20Relativity%20and%20Maxwells%20Equations.pdf

This page also talks about it, but does not explain anything properly, although it does give closed source references: https://en.wikipedia.org/wiki/Classical_electromagnetism_and_special_relativity

======== Covariant formulation of classical electromagnetism

https://en.wikipedia.org/wiki/Covariant_formulation_of_classical_electromagnetism

========= Maxwell lagrangian

* https://www.youtube.com/watch?v=nrBiDRZRK5g by \x[dietterich-labs-youtube-channel]
* https://www.youtube.com/watch?v=yo-Z3RO-eeY by Pretty Much Physics

====== Minkowski space
{c}

https://en.wikipedia.org/wiki/Minkowski_space

TODO why should I care when I can calculate new x and new time with \x[lorentz-transformation]?

======= Minkowski diagram
{c}

https://en.wikipedia.org/wiki/Minkowski_diagram

======== Light cone

https://en.wikipedia.org/wiki/Light_cone

A subset of \x[minkowski-diagram].

The key insights that it gives are:
* future and past are well defined: every reference frame sees your future in your future cone, and your past in your past cone
+
Otherwise causality could be violated, and then things would go really bad, you could tell your past self to tell your past self to tell your past self to do something.
+
You can only affect the outcome of events in your future cone, and you can only be affected by events in your past cone. You can't travel fast enough to affect.
+
Two spacetime events with such fixed causality are called \x[timelike-separated-events].
* every other event (to right and left, known as \x[spacelike-separated-events]) can be measured to happen before or after your current spacetime event by different observers.
+
But that does not violate causality, because you just can't reach those spacetime points anyways to affect them.

\Image[https://upload.wikimedia.org/wikipedia/commons/7/78/Relativity_of_Simultaneity_Animation.gif]
{title=Animation showing how space-separated events can be observed to happen in different orders by observers in different frames of reference.}

========= Timelike-separated events

The opposite of \x[spacelike-separated-events].

========= Spacelike-separated events

On the \x[light-cone], these are events on the left/right part of the cone.

Different observers might not agree on the order of two spacelike-separated events.

Further discussion at \x[light-cone]{full}.

The opposite of those events are \x[timelike-separated-events].

====== Mass-energy equivalence
{title2=$E=mc^2$}

https://en.wikipedia.org/wiki/Mass–energy_equivalence

===== General relativity

https://en.wikipedia.org/wiki/General_relativity

Unifies both \x[special-relativity] and \x[gravity].

Not compatible with the \x[standard-model], and the 2020 unification attempts are called \x[theory-of-everything].

====== Gravity

https://en.wikipedia.org/wiki/Gravity

In 2020 physics, best explained by \x[general-relativity].

TODO: does old Newtonian gravity give different force results than general relativity?

======= Experiments that measure the gravitational constant

======== Cavendish experiment

https://en.wikipedia.org/wiki/Cavendish_experiment

==== Applications of particle physics

There aren't any, it's \x[art][useless]:
* \x[applications-of-quantum-electrodynamics]
* https://www.quora.com/What-if-any-are-the-widespread-applications-of-quantum-field-theory-today
* https://www.quora.com/What-commercial-applications-in-high-energy-particle-physics-and-the-results-coming-out-of-the-LHC-do-we-expect-to-see-in-the-next-5-10-years

= Quantum mechanics
{parent=particle-physics}

https://en.wikipedia.org/wiki/Quantum_mechanics

Quantum mechanics is quite a broad term. Perhaps it is best to start approaching it from the division into:
* \x[non-relativistic-quantum-mechanics]: obviously the simpler one, and where you should start
* \x[relativistic-quantum-mechanics]: more advanced, and arguably "less useful"

Key experiments that could not work without quantum mechanics: \x[quantum-mechanics-experiments].

Mathematics: there are a few models of increasing precision which could all be called "quantum mechanics":
* \x[schrodinger-equation]
* \x[dirac-equation]
* \x[quantum-electrodynamics]

\x[ciro-santilli] feels that the \x[deep-tech][largest technological revolutions since the 1950's have been quantum related], and will continue to be for a while, from deeper understanding of chemistry and materials to \x[quantum-computing], understanding and controlling quantum systems is where the most interesting frontier of technology lies.

= Quantum mechanics experiments
{parent=quantum-mechanics}

Atoms exist and last for a long time, while in \x[maxwell-s-equations][classical electromagnetic theory punctual] orbiting electrons should emit radiation quickly and fall into the nucleus: https://physics.stackexchange.com/questions/20003/why-dont-electrons-crash-into-the-nuclei-they-orbit

= Spectral lines of atoms and molecules
{parent=quantum-mechanics-experiments}

* https://en.wikipedia.org/wiki/Spectral_line
* https://en.wikipedia.org/wiki/Hydrogen_spectral_series

So precise, so discrete, which makes no sense in classical mechanics.

Has been the leading motivation of the development of Quantum Mechanics, all the way from the:
* \x[schrodinger-equation]: major lines predicted, including https://en.wikipedia.org/wiki/Zeeman_effect[Zeeman effect], but not finer line splits like \x[fine-structure]
* \x[dirac-equation]: explains \x[fine-structure] 2p spin split due to electron spin/orbit interactions, but not \x[lamb-shift]
* \x[quantum-electrodynamics]: explains \x[lamb-shift]
* \x[hyperfine-structure]: due to electron/nucleus spin interactions, offers a window into \x[nuclear-spin]

= Fine structure
{parent=spectral-lines-of-atoms-and-molecules}

https://en.wikipedia.org/wiki/Fine_structure

Split in energy levels due to interaction between electron up or down \x[spin] and the electron orbitals.

Numerically explained by the \x[dirac-equation], which on of the main triumphs of the theory.

= Hyperfine structure
{parent=spectral-lines-of-atoms-and-molecules}

https://en.wikipedia.org/wiki/Hyperfine_structure

Small splits present in all levels due to interaction between the electron spin and the nuclear spin if it is present, i.e. the nucleus has an even number of nucleons.

Appears to be explained by \x[quantum-electrodynamics] but not the \x[dirac-equation]. TODO confirm.

TODO how it differs from \x[lamb-shift]?

= Zeeman effect
{parent=spectral-lines-of-atoms-and-molecules}
{c}

https://en.wikipedia.org/wiki/Zeeman_effect

Split in the \x[spectral-lines-of-atoms-and-molecules] when a \x[magnetic-field] is applied.

Non-anomalous: number of splits matches predictions of the \x[schrodinger-equation] about the number of possible states with a given angular momentum. TODO does it make numerical predictions?

Explanation:
\Video[http://youtube.com/watch?v=NwbvTa2xV9k]
{title="Quantum Mechanics 7a - Angular Momentum I" published by \x[viascience] on 2013-08-04.}

Anomalous: evidence of \x[spin].

= Double slit experiment
{parent=quantum-mechanics-experiments}

https://en.wikipedia.org/wiki/Double-slit_experiment

When done with individual electrons it amazingly confirms the wave particle duality of \x[quantum-mechanics].

Here are a few non well specified demonstrations. TODO how do they know that there is just a single photon though? \x[single-photon-production-and-detection-experiments].

* https://www.youtube.com/watch?v=GzbKb59my3U "Single Photon Interference" published by Veritasium
* "Quantum Mechanics - Double Slit Experiment. Is anything real? (Prof. Anton Zeilinger)" published by D

= Black-body radiation experiment
{parent=quantum-mechanics-experiments}

https://en.wikipedia.org/wiki/Black-body_radiation

\Video[http://youtube.com/watch?v=HnBZf1RfB-w]
{title="Black-body Radiation Experiment" published by sciencesolution" on 2008-02-07.}
{description=A modern version of the experiment with a PASCO scientific EX-9920 setup.}

TODO original setups.

Led to: \x[planck-s-law]

= Planck's law
{c}
{parent=black-body-radiation-experiment}

https://en.wikipedia.org/wiki/Planck%27s_law

Used to explain the \x[black-body-radiation-experiment].

TODO how can it be derived from theoretical principles alone? There is one derivation at; https://en.wikipedia.org/wiki/Planck%27s_law#Derivation but it does not seem to mention the \x[schrodinger-equation] at all.
* https-physics-stackexchange-com-questions-22075-deriving-plancks-radiation-law-from-microscopic-considerations
* https-physics-stackexchange-com-questions-4816-is-there-a-fully-quantum-field-theoretic-treatise-of-plancks-law-for-black-body

\Video[https://youtube.com/watch?v=KabPQLIXLw4]
{title="Quantum Mechanics 2 - Photons" published by \x[viascience] on 2012-10-18.}
{description=Contains a good explanation of how discretization + energy increases with frequency explains the \x[black-body-radiation-experiment] curve: you need more and more energy for small wavelengths, each time higher above the average energy available.}

= Planck-Einstein relation
{c}
{parent=planck-s-law}

https://en.wikipedia.org/wiki/Planck–Einstein_relation

Photon energy is proportional to its frequency:
$$
energy = (plancks \space constant) * (frequency)
$$
or with common weird variables:
$$
E = h * \nu
$$

This only makes sense if the \x[photon] exists, there is no classical analogue, because the energy of classical waves depends only on their amplitude, not frequency.

Experiments that suggest this:
* \x[photoelectric-effect]
* \x[compton-scattering]

= Planck constant
{c}
{parent=planck-s-law}

https://en.wikipedia.org/wiki/Planck_constant

Proportionality factor in the \x[planck-einstein-relation].

Because defined exactly in the 2019 revision of the \x[international-system-of-units].

= Quantum Hall effect
{parent=quantum-mechanics-experiments}

https://en.wikipedia.org/wiki/Quantum_Hall_effect

Quantum version of the \x[hall-effect].

Gotta understand this because the name sounds cool. Maybe also because it is used to define the fucking \x[kilogram].

TODO \x[videos-of-all-key-physics-experiments][experiment video].

= Quantum mechanics bibliography
{parent=quantum-mechanics}

Free material from university courses:
* https://physics.weber.edu/schroeder/quantum/QuantumBook.pdf  (\a[https://web.archive.org/web/20191230193450/https://physics.weber.edu/schroeder/quantum/QuantumBook.pdf][archive]) "Notes on Quantum Mechanics" pusbliehd by Daniel V. Schroeder published on 2019-01-06. The author is from from Weber State University 

= Quantum Mechanics for Engineers by Leon van Dommelen
{parent=quantum-mechanics-bibliography}

http://www.eng.fsu.edu/~dommelen/quantum/style_a/index.html

Looks very impressive! Last update marked 2011 as of 2020.

Goes up to "A.15 \x[quantum-field-theory] in a Nanoshell", Ciro have to review it to see if there's anything worthwhile in that section.

Personal page says he retired as of 2020: http://www.eng.fsu.edu/~dommelen/ But hopefully he has more time for these notes!

And he appears to have his own lightweight markup language that transpiles to LaTeX called l2h: http://www.eng.fsu.edu/~dommelen/l2h/

= Quantum physics lecture notes by Jim Branson
{parent=quantum-mechanics-bibliography}

https://quantummechanics.ucsd.edu/ph130a/130_notes/130_notes.html

For the UCSD Physics 130 course.

Last updated: 2013.

Very good! Goes up to the \x[dirac-equation].

= UCSD Physics 130 quantum physics lecture notes Jim Branson
{parent=quantum-mechanics-bibliography}

https://quantummechanics.ucsd.edu/ph130a/130_notes/130_notes.html

= Mathematical formulation of quantum mechanics
{parent=quantum-mechanics}

https://en.wikipedia.org/wiki/Mathematical_formulation_of_quantum_mechanics

These are the key mathematical ideas to understand!!

The state of a quantum system is a vector of unit length in a \x[hilbert-space]. TODO why Hilbert Space.

"Making a measurement" means applying a \x[self-adjoint-operator] to the state, and after a measurement is done
* the state collapses to an \x[eigenvalue] of the self adjoint operator
* the result of the measurement is the eigenvalue of the self adjoint operator

Self adjoint operators are chosen because they have the following key properties:
* their eigenvalues form an orthonormal basis
* they are diagonalizable

See also: https://en.wikipedia.org/wiki/Measurement_in_quantum_mechanics

Perhaps the easiest case to understand this for is that of \x[spin], which has only a finite number of eigenvalues. Although it is a shame that fully understanding that requires a \x[special-relativity][relativistic] quantum theory such as the \x[dirac-equation].

The next steps are to look at simple 1D bound states such as \x[particle-in-a-box] and \x[quantum-harmonic-oscillator].

This naturally generalizes to \x[schrodinger-equation-solution-for-the-hydrogen-atom].

\x[schrodinger-equation-solution-for-a-free-particle] is a bit harder since the possible energies do not make up a \x[countable-set].

= Non-relativistic quantum mechanics
{c}
{parent=quantum-mechanics}

The first \x[quantum-mechanics] theories developed.

Their most popular formulation has been the \x[schrodinger-equation].

= Schrodinger equation
{c}
{parent=non-relativistic-quantum-mechanics}

https://en.wikipedia.org/wiki/Schrödinger_equation

The \x[partial-differential-equation] of \x[special-relativity][non-relativistic] \x[quantum-mechanics].

Experiments explained:
* via the \x[schrodinger-equation-solution-for-the-hydrogen-atom] it predicts:
  * \x[spectral-lines-of-atoms-and-molecules] basic lines, plus \x[zeeman-effect]
* \x[schrodinger-equation-solution-for-the-helium-atom]: perturbative solutions give good approximations to the energy levels
* \x[double-slit-experiment]: I think we have a closed solution for the max and min probabilities on the measurement wall, and they match experiments

Experiments not explained: those that the \x[dirac-equation] explains like:
* \x[fine-structure]
* \x[spontaneous-emission] coefficients

To get some intuition on the equation on the consequences of the equation, have a look at:
* \x[schrodinger-equation-simulations]
* \x[solutions-of-the-schrodinger-equation]

Existence and uniqueness: https://mathoverflow.net/questions/212913/existence-and-uniqueness-for-two-dimensional-time-dependent-schr%C3%B6dinger-equation

= Time-independent Schrodinger equation
{parent=schrodinger-equation}

https://en.wikipedia.org/wiki/Schrödinger_equation#Time-independent_equation

As shown at https://quantummechanics.ucsd.edu/ph130a/130_notes/node124.html[] from \x[quantum-physics-lecture-notes-by-jim-branson], we can break up the general \x[schrodinger-equation] into a time and space part via \x[separation-of-variables].

Then, the time part o the equation can be solved explicitly in the general case, as it does not depend on the potential $V(x)$, and it is just an exponential.

Therefore, all we need to do to solve the general Schrodinger equation is to solve the time-independent version, and then decompose the initial condition in terms of it like as done in \x[solving-partial-differential-equations-with-the-fourier-series]{full}.

Furthermore, we immediately see from the equation that the time-independent solutions are states of deterministic energy because the energy is an \x[eigenvalue] of the energy operator, .

= Derivation of the Schrodinger equation
{parent=schrodinger-equation}

Where derivation == "intuitive routes", since a "law of physics" cannot be derived, only observed right or wrong.

TODO also comment on \x[why-are-complex-numbers-used-in-the-schrodinger-equation].

= Why are complex numbers used in the Schrodinger equation?
{parent=derivation-of-the-schrodinger-equation}

\x[ciro-santilli][Ciro]'s 10 cents: https://physics.stackexchange.com/questions/32422/qm-without-complex-numbers/557600#557600

Why is there a \x[complex-number] in the equation? Intuitively and mathematically:
* https://physics.stackexchange.com/questions/8062/about-the-complex-nature-of-the-wave-function
* https://physics.stackexchange.com/questions/32422/qm-without-complex-numbers
* https://physics.stackexchange.com/questions/292947/is-it-possible-to-formulate-the-schr%C3%B6dinger-equation-in-a-manner-that-excludes-i

Some ideas:
* \x[explicit-scalar-form-of-the-maxwell-s-equations]

= Solutions of the Schrodinger equation
{parent=schrodinger-equation}

As always, the best way to get some intuition about an equation is to solve it for some simple cases, so let's give that a try with different fixed potentials.

= Schrodinger equation simulations
{parent=solutions-of-the-schrodinger-equation}
{c}

* https://www.youtube.com/watch?v=1Z9wo2CzJO8 "Schrodinger equation solved numerically in 3D" by Tetsuya Matsuno. 3D hydrogen atom, code may be hidden in some paper, maybe
* https://www.youtube.com/playlist?list=PLdCdV2GBGyXM0j66zrpDy2aMXr6cgrBJA "Computational Quantum Mechanics" published by Let's Code Physics. Uses a 1D trinket.io.

\Video[http://youtube.com/watch?v=g4wuSgwLT9I]
{title="Simulation of the time-dependent Schrödinger equation (JavaScript Animation)" published by Coding Physics on 2019-02-17.}
{description=Source code: https://github. One dimensional potentials, non-interacting particles.}

\Video[http://youtube.com/watch?v=ee4LqXRlQmE]
{title="Quantum Mechanics 5b - Schrödinger Equation II" by \x[viascience] published on 2013-02-09.}
{description=2D non-interacting particle in a box, description says using \x[scilab][Scilab] and points to source. Has a double slit simulation.}

\Video[https://www.youtube.com/watch?v=p7bzE1E5PMY]
{title="Visualization of Quantum Physics (Quantum Mechanics)" published by udiprod on 2017-01-31.}
{description=Closed source, but good visualization of a 1D free wave packet, including how measurement snaps it to a position.}

= Schrodinger equation solution for a free particle
{c}
{parent=solutions-of-the-schrodinger-equation}

https://en.wikipedia.org/wiki/Free_particle#Quantum_free_particle

This case is surprisingly not necessarily as trivial as non-free particles because you end up getting into \x[dirac-delta]{p} for the \x[position-operator].

= Particle in a box
{parent=solutions-of-the-schrodinger-equation}

https://en.wikipedia.org/wiki/Particle_in_a_box

= Quantum harmonic oscillator
{parent=solutions-of-the-schrodinger-equation}

https://en.wikipedia.org/wiki/Quantum_harmonic_oscillator

= Solutions of the Schrodinger equation for two electrons
{parent=solutions-of-the-schrodinger-equation}

TODO. Can't find it easily. Anyone?

This is closely linked to the \x[pauli-exclusion-principle].

What does a particle even mean, right? Especially in \x[quantum-field-theory], where two electrons are just vibrations of a single electron field.

= Quantum tunnelling
{parent=solutions-of-the-schrodinger-equation}

https://en.wikipedia.org/wiki/Quantum_tunnelling

= Schrodinger equation solution for the hydrogen atom
{c}
{parent=solutions-of-the-schrodinger-equation}

Is the only atom that has a closed form solution, which allows for very good predictions, and gives awesome intuition about the orbitals in general.

It is arguably the most important solution of the Schrodinger equation.

In particular, it predicts:
* the major \x[spectral-lines-of-atoms-and-molecules][spectral lines] of the \x[hydrogen] atom by taking the difference between energy levels

The explicit solution can be written in terms of \x[spherical-harmonic]{p}.

= Schrodinger equation solution for the helium atom
{c}
{parent=solutions-of-the-schrodinger-equation}

No closed form solution, but good approximation that can be calculated by hand with the \x[hartree-fock-method], see \x[hartree-fock-method-for-the-helium-atom].

Bibliography:
* https://www.quora.com/Why-do-electrons-not-repel-each-other-on-their-orbits
* https://physics.stackexchange.com/questions/224108/what-does-an-orbital-mean-in-atoms-with-multiple-electrons-what-do-the-orbitals

\Video[https://www.youtube.com/watch?v=tcfNNGGjS2o]
{title="Quantum Chemistry 9.2 - Helium Atom Energy Approximations" published by TMP Chem on 2016-08-14.}
{description=Video gives the actual numerical value of various methods, second order perturbation theory being very close. But it the says that in the following videos will only do \x[hartree-fock-method][Hartree-Fock method].}

= Hartree-Fock method
{c}
{parent=schrodinger-equation-solution-for-the-helium-atom}

https://en.wikipedia.org/wiki/Hartree–Fock_method

= Hartree-Fock method for the helium atom
{parent=hartree-fock-method}

https://en.wikipedia.org/wiki/Helium_atom#Hartree–Fock_method

= Why do multiple electrons occupy the same orbital if electrons repel each other?
{parent=hartree-fock-method}

As shown at \x[schrodinger-equation-solution-for-the-helium-atom], they do repel each other, and that affects their measurable energy.

However, this energy is still lower than going up to the next orbital. TODO numbers.

Bibliography:
* https://physics.stackexchange.com/questions/505263/do-electrons-in-the-same-orbital-but-different-spin-feel-each-others-coulomb-re

This changes however at higher orbitals, notably as approximately described by the \x[aufbau-principle].

= Aufbau principle
{parent=hartree-fock-method}

https://en.wikipedia.org/wiki/Aufbau_principle

Orbitals energies for large atoms don't increase in energy like those of hydrogen due to electron interactions.

Notably, 4s fills before 3d as we increase the atomic numbers.

Bibliography:
* https://chemistry.stackexchange.com/questions/8357/why-does-the-3rd-electron-shell-start-filling-up-with-scandium
* https://www.quora.com/If-4s-orbitals-are-higher-in-energy-than-3d-orbitals-then-why-do-electrons-fill-up-in-4s-before-filling-up-in-3d

= Schrodinger equation solution for the hydrogen molecule
{c}
{parent=solutions-of-the-schrodinger-equation}

Can we make any ab-initio predictions about it all?

A 2016 paper: https://aip.scitation.org/doi/abs/10.1063/1.4948309

\Video[https://www.youtube.com/watch?v=BBoE6NRRZ8k]
{title="Quantum Chemistry 10.1 - Hydrogen Molecule Hamiltonian" by TMP Chem published on 2016-08-14.}
{description=Continued in the following videos, uses the \x[born-oppenheimer-approximation][Born–Oppenheimer approximation]. Does not give predictions vs experiment?}

= Born-Oppenheimer approximation
{parent=schrodinger-equation}

https://en.wikipedia.org/wiki/Born–Oppenheimer_approximation

= Uncertainty principle
{parent=schrodinger-equation}

https://en.wikipedia.org/wiki/Uncertainty_principle

The wave equation contains the entire state of a particle, including not only its position, but also momentum.

This is well shown at: \x[video-visualization-of-quantum-physics-quantum-mechanics-published-by-udiprod-on-2017-01-31].

Furthermore, the position and momentum representations are equivalent: one is the \x[fourier-transform] of the other: \x[how-are-position-and-momentum-space-related-in-quantum-mechanics].

Then the uncertainty principle follows immediately from a general property of the Fourier transform: https://en.wikipedia.org/w/index.php?title=Fourier_transform&oldid=961707157#Uncertainty_principle

= How are position and momentum space related in quantum mechanics?
{parent=uncertainty-principle}

* https://physics.stackexchange.com/questions/39442/intuitive-explanation-of-why-momentum-is-the-fourier-transform-variable-of-posit
* https://en.wikipedia.org/wiki/Position_and_momentum_space

= Position operator
{parent=how-are-position-and-momentum-space-related-in-quantum-mechanics}

https://en.wikipedia.org/wiki/Position_operator

TODO

= Energy operator
{parent=uncertainty-principle}

https://en.wikipedia.org/wiki/Energy_operator

Appears directly on \x[schrodinger-equation]! And in particular in the \x[time-independent-schrodinger-equation].

= Time-energy uncertainty principle
{parent=energy-operator}

There is also a time-energy \x[uncertainty-principle], because those two operators are also \x[complementarity-physics][complementary].

= Complementarity (physics)
{parent=uncertainty-principle}

https://en.wikipedia.org/wiki/Complementarity_(physics)

= Conservation laws in Schrodinger equations
{parent=schrodinger-equation}

https://physics.stackexchange.com/questions/229885/energy-equation-in-quantum-mechanics

TODO is there any good intuitive argument or proof of conservation of energy, momentum, angular momentum?

= Conservation of the square amplitude in the Schrodinger equation
{parent=conservation-laws-in-schrodinger-equations}

Proof that the probability 1 is conserved by the time evolution:
* https://quantummechanics.ucsd.edu/ph130a/130_notes/node127.html from \x[quantum-physics-lecture-notes-by-jim-branson].

  That proof also mentions that if the potential `V` is not real, then there is no conservation of probability! Therefore the potential \i[must] be real valued!

= Relativistic quantum mechanics
{parent=quantum-mechanics}

https://en.wikipedia.org/wiki/Relativistic_quantum_mechanics

The first really good \x[quantum-mechanics] theory made compatible with \x[special-relativity] was the \x[dirac-equation].

And then came \x[quantum-electrodynamics] to improve it: \x[dirac-equation-vs-quantum-electrodynamics].

= Dirac equation
{c}
{parent=relativistic-quantum-mechanics}

https://en.wikipedia.org/wiki/Dirac_equation

Adds \x[special-relativity] to the \x[schrodinger-equation]. \x[spin] and antimatter comes out for free.

Experiments explained:
* \x[spontaneous-emission] coefficients.
* \x[fine-structure]

Experiments not explained: those that \x[quantum-electrodynamics] explains like:
* \x[lamb-shift]
* TODO: quantization of the electromagnetic field as \x[photon]{p}? And if it is, what's the difference between Dirac Equatin and QED? https://www.physicsforums.com/threads/is-diracs-equation-still-useful-after-qed-is-developed.663994/

\Video[https://www.youtube.com/watch?v=ajMaPc022VM]
{id=video-phys-485-lecture-14-the-dirac-equation-by-roger-moore-from-the-university-of-alberta-published-on-2016-04-07}
{title="PHYS 485 Lecture 14: The Dirac Equation" by \x[2011-phys-485-lecture-videos-by-roger-moore-from-the-university-of-alberta][Roger Moore] published on 2016-04-07.}

= Spontaneous emission
{parent=dirac-equation}

https://en.wikipedia.org/wiki/Spontaneous_emission

Do electrons spontaneously jump from high orbitals to lower ones emitting photons?

Explaining this was was one of the key initial achievements of the \x[dirac-equation].

Yes, but this is not predicted by the \x[schrodinger-equation], you need to go to \x[dirac-equation].

See also:
* https://physics.stackexchange.com/questions/233330/why-do-electrons-jump-between-orbitals
* https://physics.stackexchange.com/questions/117417/quantum-mechanics-scattering-theory/522220#522220
* https://physics.stackexchange.com/questions/430268/stimulated-emission-how-can-giving-energy-to-electrons-make-them-decay-to-a-low/430288

= The Dirac equation predicts spin
{parent=dirac-equation}

This tutorial is awesome:
\Video[http://youtube.com/watch?v=OCuaBmAzqek]
{title="Quantum Mechanics 12a - Dirac Equation I" published by \x[viascience] on 2015-12-19.}

= The Dirac equation predicts antimatter
{parent=dirac-equation}

TODO

= The Dirac equation is consistent with special relativity
{parent=dirac-equation}

TODO, including why the Schrodinger equation is not.

= Derivation of the Dirac equation
{parent=dirac-equation}

\Video[https://www.youtube.com/watch?v=jjG2Y_dMsbI]
{title=Deriving The Dirac Equation published by \x[andrew-dotson-youtube-channel][Andrew Dotson] on 2019-03-05}

= Klein-Gordon equation
{parent=dirac-equation}
{c}

https://en.wikipedia.org/wiki/Klein–Gordon_equation

TODO. Relativistic, but has some problems, which the \x[dirac-equation] solves.

Discussed at: \x[video-phys-485-lecture-14-the-dirac-equation-by-roger-moore-from-the-university-of-alberta-published-on-2016-04-07] at around 7:30.

= Solutions of the Dirac equation
{parent=dirac-equation}

= Dirac equation solution for the hydrogen atom
{parent=solutions-of-the-dirac-equation}
{c}

https://en.wikipedia.org/w/index.php?title=Hydrogen-like_atom&oldid=959546353#Solution_to_Dirac_equation

\Video[https://www.youtube.com/watch?v=jWYtP-rAoYA]
{title="How To Solve The Dirac Equation For The Hydrogen Atom | Relativistic Quantum Mechanics" by \x[dietterich-labs-youtube-channel][Dietterich Labs] published on 2018-06-15.}

= Spin
{parent=dirac-equation}

https://en.wikipedia.org/wiki/Spin_(physics)

\x[video-quantum-mechanics-9a-photon-spin-and-schrödinger-s-cat-i-published-by-viascience-on-2013-10-23] explains nicely how:
* incorporated into the \x[dirac-equation] as a natural consequence of \x[special-relativity] corrections, but not naturally present in the \x[schrodinger-equation], see also: \x[the-dirac-equation-predicts-spin]
* \x[photon] spin can be either linear or circular
* the linear one can be made from a superposition of circular ones
* straight antennas produce linearly polarized photos, and https://en.wikipedia.org/wiki/Helical_antenna[Helical antennas] circularly polarized ones
* a jump between 2s and 2p in an atom changes angular momentum. Therefore, the photon must carry angular momentum as well as energy.
* cannot be classically explained, because even for a very large estimate of the electron size, its surface would have to spin faster than light to achieve that magnetic momentum with the known \x[electron-charge]

\Video[https://www.youtube.com/watch?v=6sR6RV2znXI]
{title="Quantum Mechanics 9a - Photon Spin and Schrödinger's Cat I" published by \x[viascience] on 2013-10-23.}

\Video[https://www.youtube.com/watch?v=3k5IWlVdMbo]
{title="Quantum Spin - Visualizing the physics and mathematics" by \x[physics-videos-by-eugene-khutoryansky]["Physics Videos by Eugene Khutoryansky"] published on 2016-06-29.}

= Spin experiments
{parent=spin}

* \x[stern-gerlach-experiment]
* \x[fine-structure] split in energy levels;
* anomalous \x[zeeman-effect]

= Stern-Gerlach experiment
{c}
{parent=spin-experiments}

https://en.wikipedia.org/wiki/Stern–Gerlach_experiment

Originally done with silver in 1921, but even clearer theoretically was the hydrogen reproduction in 1927 by T.E. Phipps and J.B. Taylor.

The hydrogen experiment was apparently harder to do and the result is less visible, TODO why: https://physics.stackexchange.com/questions/33021/why-silver-atoms-were-used-in-stern-gerlach-experiment

= Why is the spin of the electron half?
{parent=spin}

https://physics.stackexchange.com/questions/266359/when-we-say-electron-spin-is-1-2-what-exactly-does-it-mean-1-2-of-what

More interestingly, how is that implied by the \x[stern-gerlach-experiment]?

https://physics.stackexchange.com/questions/266359/when-we-say-electron-spin-is-1-2-what-exactly-does-it-mean-1-2-of-what/266371#266371 suggests that half could either mean:
* at limit of large `l` for the \x[schrodinger-equation-solution-for-the-hydrogen-atom] the difference between each angular momentum is twice that of the eletron's spin. Not very satisfactory.
* it comes directly out of the \x[dirac-equation]. This is satisfactory. :-)

= Pauli exclusion principle
{c}
{parent=spin}

https://en.wikipedia.org/wiki/Pauli_exclusion_principle

Initially a phenomenological guess to explain the periodic table. Later it was apparently proven properly with the \x[spin-statistics-theorem], https://physics.stackexchange.com/questions/360140/theoretical-proof-of-paulis-exclusion-principle

\Video[https://www.youtube.com/watch?v=dQWn9NzvX4s]
{title="The Biggest Ideas in the Universe | 17. Matter" published by Sean Carroll on 2020-07-14.}
{description=Gives a very quick and high level overview of renormalization. It is not enough to satisfy \x[ciro-santilli], but it goes some way.}

= Fermion
{parent=pauli-exclusion-principle}

https://en.wikipedia.org/wiki/Fermion

= Spin-statistics theorem
{parent=pauli-exclusion-principle}

https://en.wikipedia.org/wiki/Spin–statistics_theorem

\x[video-the-biggest-ideas-in-the-universe-17-matter-published-by-sean-carroll-on-2020-07-14] at https://youtu.be/dQWn9NzvX4s?t=3707 says that no one has ever been able to come up with an intuitive reason for the proof.

= Nuclear spin
{parent=spin}

http://hyperphysics.phy-astr.gsu.edu/hbase/Nuclear/nspin.html

Nuclear physics basically means \x[quantum-chromodynamics]

TODO experiments. Can you do \x[stern-gerlach-experiment] with alpha particles?

= Quantum electrodynamics
{parent=relativistic-quantum-mechanics}
{title2=QED}

https://en.wikipedia.org/wiki/Quantum_electrodynamics

Theory that describes electrons and photons really well, and as Feynman puts it, https://youtu.be/eLQ2atfqk2c?list=PL8590A6E18255B3F4&t=1047[accounts very precisely for all physical phenomena we have ever observed, except for gravity and nuclear physics] ("including the laughter of the crowd" ;-)).

Learning it is one of \x[ciro-santilli]'s main intellectual fetishes. The funny thing is that when Ciro's mother retired, learning it was also one of her retirement plans (she was a pharmacist). Along with \x[photosynthesis].

Experiments: \x[quantum-electrodynamics-experiments].

Combines \x[special-relativity] with more classical \x[quantum-mechanics], but further generalizing the \x[dirac-equation], which also does that: \x[dirac-equation-vs-quantum-electrodynamics].

Before QED, the most advanced theory was that of the \x[dirac-equation], which was already relativistic but TODO what was missing there exactly?

As summarized at: https://youtube.com/watch?v=_AZdvtf6hPU?t=305[]:
* classical mechanics describes large and slow objects
* special relativity describes large and fast objects
* classical quantum mechanics describes small and slow objects
* QED describes objects that are both small and fast

That video also mentions the interesting idea that:
* in special relativity, we have the \x[mass-energy-equivalence]
* in quantum mechanics, thinking along the \x[time-energy-uncertainty-principle], $\Delta E \sim \frac{1}{\Delta t}$
Therefore, for small timescales, energy can vary a lot. But mass is equivalent to energy. Therefore, for small time scale, particles can appear and disappear wildly.

QED is the first \x[quantum-field-theory] fully developed. That framework was later extended to also include the \x[weak-interaction] and \x[strong-interaction].

Like in more general quantum field theory, there is on field for each particle type. In quantum field theory, there are only two fields to worry about:
* \x[photon] field
* \x[electromagnetism] field

\Video[https://www.youtube.com/watch?v=EzfFklLqDjA]
{title="Lecture 01 | Overview of Quantum Field Theory" by Markus Luty published on 2013-04-12.}
{description=This takes quite a direct approach, one cool thing he says is how we have to be careful with adding special relativity to the \x[schrodinger-equation] to avoid faster-than-light information.}

= Quantum electrodynamics experiments
{parent=quantum-electrodynamics}

https://en.wikipedia.org/wiki/Precision_tests_of_QED

Experiments explained by QED but not by the \x[dirac-equation]:
* \x[lamb-shift]: by far the most famous one
* \x[hyperfine-structure] TODO confirm

= Dirac equation vs quantum electrodynamics
{c}
{parent=quantum-electrodynamics-experiments}

TODO: in high level terms, why is QED more general than just solving the \x[dirac-equation], and therefore explaining \x[quantum-electrodynamics-experiments]?

= Applications of quantum electrodynamics
{parent=quantum-electrodynamics}

* https://www.quora.com/What-are-some-engineering-applications-of-QED-or-QCD-quantum-field-theories

= Derivation of the quantum electrodynamics Lagrangian
{parent=quantum-electrodynamics}

\Video[https://www.youtube.com/watch?v=IFRyN3fQMO8]
{title="Deriving The QED Lagrangian | Quantum Electrodynamics" publised by \x[dietterich-labs-youtube-channel][Dietterich Labs] on 2018-12-28.}
{description=As mentioned at the start of the video, he starts with the \x[dirac-equation] lagrangian derived in an earlier video. He notes that that Lagrangian has a global \x[unitary-group][$U(1)$] invariance, and he upgrades it into a local transformation whatever that means.}

= What does it mean that photons are force carriers for electromagnetism?
{parent=quantum-electrodynamics}

https://physics.stackexchange.com/questions/61095/photon-as-the-carrier-of-the-electromagnetic-force

TODO find/create decent answer.

A basic non-precise intuition is that a good model of reality is that electrons do not "interact with one another directly via the electromagnetic field".

A better model happens to be the \x[quantum-field-theory] view that the electromagnetic field interacts with the photon field but not directly with itself, and then the photon field interacts with parts of the electromagnetic field further away.

= Schwinger effect
{c}
{parent=quantum-electrodynamics}

https://en.wikipedia.org/wiki/Schwinger_effect

= Feynman diagram
{c}
{parent=quantum-electrodynamics}

https://en.wikipedia.org/wiki/Feynman_diagram

I think they are a tool to calculate the probability of different types of particle decays and particle collision outcomes. TODO Minimal example of that.

And they can be derived from a more complete \x[quantum-electrodynamics] formulation.

Can be used for all of \x[quantum-electrodynamics], \x[weak-interaction] and \x[quantum-chromodynamics].

= Cavity quantum electrodynamics
{parent=quantum-electrodynamics}

https://en.wikipedia.org/wiki/Cavity_quantum_electrodynamics

= Circuit quantum electrodynamics
{parent=cavity-quantum-electrodynamics}

https://en.wikipedia.org/wiki/Circuit_quantum_electrodynamics

= Photon
{parent=quantum-electrodynamics}

https://en.wikipedia.org/wiki/Photon

Initially light was though of as a wave because it experienced interference as shown by experiments such as:
* \x[double-slit-experiment]
* https://en.wikipedia.org/wiki/Newton%27s_rings

But then, some key experiments also start suggesting that light is made up of discrete packets:
* \x[compton-scattering], also suggests that photons carry momentum
* \x[photoelectric-effect]
* \x[single-photon-production-and-detection-experiments]

This duality is fully described mathematically by \x[quantum-electrodynamics], where the photon is modelled as a quantized excitation of the photon field.

= Light
{parent=photon}

https://en.wikipedia.org/wiki/Light

= Speed of light
{parent=light}

https://en.wikipedia.org/wiki/Speed_of_light

Experiments: \x[speed-of-light-experiments].

= Speed of light experiments
{parent=speed-of-light}

* https://en.wikipedia.org/wiki/Speed_of_light#First_measurement_attempts Rømer and Christiaan Huygens reached 26% accuracy by the observation of Jupiter's moon!
* https://en.wikipedia.org/wiki/Fizeau_experiment 1851
  * \Video[http://youtube.com/watch?v=YMO9uUsjXaI]
    {title="Measuring the speed of light the old fashioned way: Replicating the Fizeau Apparatus" published by AlphaPhoenix on 2018-05-26.}
    {description=Modern reconstruction with a laser and digital camera.}
* Fast cameras. OK, this takes it to the next level:
  * \Video[http://youtube.com/watch?v=EtsXgODHMWk]
    {title="Visualizing video at the speed of light - one trillion frames per second" published by Massachusetts Institute of Technology (MIT) on 2011-12-12.}

= Photon spin
{parent=photon}

https://physics.stackexchange.com/questions/73942/how-do-we-know-photons-have-spin-1

Original 1931 experiment by Raman and Bhagavantam: http://dspace.rri.res.in/bitstream/2289/2123/1/1931%20IJP%20V6%20p353.pdf

= Radiation pressure
{parent=photon}

https://en.wikipedia.org/wiki/Radiation_pressure

= Nichols radiometer
{c}
{parent=radiation-pressure}

https://en.wikipedia.org/wiki/Nichols_radiometer

Experimental setup to observe radiation pressure in the laboratory.

= Solar sail
{parent=radiation-pressure}

https://en.wikipedia.org/wiki/Solar_sail

Application of \x[radiation-pressure].

First live example: https://en.wikipedia.org/wiki/IKAROS

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/IKAROS_IAC_2010.jpg/568px-IKAROS_IAC_2010.jpg]
{title=A 1:64 scale model of the IKAROS spacecraft.}

= Single photon production and detection experiments
{parent=photon}

You can't get more direct than this in terms of proving that \x[photon]{p} exist!

TODO find decent experiment video.

The detection apparatus is called a photomultiplier: https://en.wikipedia.org/wiki/Photomultiplier

Some types:
* \x[photomultiplier-tube]
* \x[silicon-photomultiplier]
* superconducting: https://singlequantum.com/technology/snspd/ also mentioned at https://youtu.be/7wCBkAQYBZA?t=2720 see also: \x[photonic-quantum-computer].

\Video[http://youtube.com/watch?v=dyXq1u87qew]
{id=video-how-to-use-an-sipm-sensltech}
{title=How to use an SiPM - Experiment Video by SensLTech published on May 2, 2018.}

Single photon production is described briefly at: https://youtu.be/F1GaTizdcb8?t=47 "How do you produce a single photon?" publishd by Physics World which mentions parametric down conversion: https://en.wikipedia.org/wiki/Spontaneous_parametric_down-conversion

https://www.youtube.com/watch?v=7wCBkAQYBZA&t=531s mentions ring resonators https://en.wikipedia.org/wiki/Optical_ring_resonators see also: \x[photonic-quantum-computer].

https://www.youtube.com/watch?v=nyK-vhoOBpE mentions quantum dots, see also: \x[two-photon-interference-experiment].

= Two photon interference experiment
{parent=single-photon-production-and-detection-experiments}

https://en.wikipedia.org/wiki/Hong–Ou–Mandel_effect

The basic experiment for a \x[photonic-quantum-computer].

Can be achieved in two ways it seems:
* macroscopic beam splitter and optical table
* photolithography

Animation of Hong-Ou-Mandel Effect on a silicon like structure by "Quantum Light University of Sheffield" published on May 29, 2014: https://www.youtube.com/watch?v=ld2r2IMt4vg No maths, but gives the result clear: the photons are always on the same side.

\Video[http://youtube.com/watch?v=nyK-vhoOBpE]
{title=Animation of in-silicon single photon device with brief description of emitting and receiving elements.}

The above notably mentions:
* https://en.wikipedia.org/wiki/Quantum_dot[quantum dot] source
* superconducting counter. So the device has to be cooled then? https://youtube.com/watch?v=7wCBkAQYBZA&t=2497 however says that semiconducting devices can also be used, see also: \x[single-photon-production-and-detection-experiments]

Theory:
\Video[http://youtube.com/watch?v=5Sb7-RNSsPg]
{title="Quantum Optics – Beam splitter in quantum optics" lesson by Alain Aspect published on Nov 6, 2017.}

TODO experiment video.

= Photomultiplier tube
{parent=single-photon-production-and-detection-experiments}

https://en.wikipedia.org/wiki/Photomultiplier_tube

Feynman likes them, here he describes the tube one: https://youtube.com/watch?video=eLQ2atfqk2c&t=2198[] see also: \x[richard-feynman-quantum-electrodynamics-lecture-at-university-of-auckland-in-1979]

It uses the \x[photoelectric-effect] multiple times to produce a chain reaction.

= Silicon photomultiplier
{parent=single-photon-production-and-detection-experiments}

https://en.wikipedia.org/wiki/Silicon_photomultiplier

Here is a vendor showcasing their device. They claim in that video that a single photon is produced and detected:

Concrete device described at: \x[video-how-to-use-an-sipm-sensltech].

= Quantum electrodynamics bibliography
{parent=quantum-electrodynamics}

= Richard Feynman Quantum Electrodynamics Lecture at University of Auckland in 1979
{c}
{parent=quantum-electrodynamics-bibliography}

A bit too slow and high level for Ciro, but likely worth it.

Can't find an official upload, so going with this one for now: https://youtube.com/watch?v=eLQ2atfqk2c

\Video[http://youtube.com/watch?v=eLQ2atfqk2c]

= Weak interaction
{parent=quantum-mechanics}

https://en.wikipedia.org/wiki/Weak_interaction

Explains \x[beta-decay]. TODO why/how.

http://www.thestargarden.co.uk/Weak-nuclear-force.html gives a quick and dirty:

____
Beta decay could not be explained by the strong nuclear force, the force that’s responsible for holding the atomic nucleus together, because this force doesn’t affect electrons. It couldn’t be explained by the electromagnetic force, because this does not affect neutrons, and the force of gravity is far too weak to be responsible. Since this new atomic force was not as strong as the strong nuclear force, it was dubbed the weak nuclear force.
____

\Video[https://www.youtube.com/watch?v=iIWTRwJlrGo]
{title="Weak Nuclear Force and Standard Model of Particle Physics" by \x[physics-videos-by-eugene-khutoryansky]["Physics Videos by Eugene Khutoryansky"] published on 2018-07-01.}
{description=Some decent visualizations of the field lines.}

= Electroweak interaction
{parent=weak-interaction}

https://en.wikipedia.org/wiki/Electroweak_interaction

==== Quantum chromodynamics
{title2=QCD}

https://en.wikipedia.org/wiki/Quantum_chromodynamics

Formulated as a \x[quantum-field-theory].

\Video[http://youtube.com/watch?v=FoR3hq5b5yE]
{title="Quarks, Gluon flux tubes, Strong Nuclear Force, & Quantum Chromodynamics" by \x[physics-videos-by-eugene-khutoryansky]["Physics Videos by Eugene Khutoryansky"] published on Jul 7, 2018.}
{description=Some decent visualizations of how the field lines don't expand out like they do in \x[electromagnetism], suggesting \x[color-confinement].}

\Video[https://www.youtube.com/watch?v=LqUgzxJ8Jss]
{title="PHYS 485 Lecture 6: Feynman Diagrams" by \x[2011-phys-485-lecture-videos-by-roger-moore-from-the-university-of-alberta][Roger Moore] published on 2016-04-06.}
{description=Despite the title, this is mostly about QCD.}

===== Strong interaction

https://en.wikipedia.org/wiki/Strong_interaction

===== Quark

https://en.wikipedia.org/wiki/Quark

TODO experimetal discovery.

===== Gluon

https://en.wikipedia.org/wiki/Gluon

Force carrier of \x[quantum-chromodynamics], like the \x[photon] is the force carrier of \x[quantum-electrodynamics].

====== Cosmic ray

https://en.wikipedia.org/wiki/Cosmic_ray

===== Color confinement

https://en.wikipedia.org/wiki/Color_confinement

Can be thought as being produced from \x[gluon]-gluon lines of the \x[feynman-diagram]{p} of \x[quantum-chromodynamics]. This is in contrast to \x[quantum-electrodynamics], in which there are no \x[photon]-photon vertices, because the photon does not have charge unlike gluons.

This phenomena makes the strong force be very very different from electromagnetism.

==== Quantum field theory
{title2=QFT}

https://en.wikipedia.org/wiki/Quantum_field_theory

Theoretical framework on which quantum field theories are based, theories based on framework include:
* \x[quantum-electrodynamics]
* \x[quantum-chromodynamics]
so basically the entire \x[standard-model]

The basic idea is that there is a field for each particle particle type.

E.g. in QED, one for the electron and one for the photon: https://physics.stackexchange.com/questions/166709/are-electron-fields-and-photon-fields-part-of-the-same-field-in-qed[].

And then those fields interact with some \x[lagrangian-mechanics][Lagrangian].

===== Renormalization

https://en.wikipedia.org/wiki/Renormalization

* https://www.quora.com/What-is-renormalization-in-quantum-theory-explained-to-graduated-only-not-doctors/answer/Paul-Mainwood covers the simpler \x[ising-model] case

\Video[https://www.youtube.com/watch?v=Nm8DRUgmjZc]
{title="The Biggest Ideas in the Universe | 11. Renormalization" published by Sean Carroll on 2020-06-02.}
{description=Gives a very quick and high level overview of renormalization. It is not enough to satisfy \x[ciro-santilli], but it goes some way.}

====== Renormalization group

https://en.wikipedia.org/wiki/Renormalization_group

====== Cutoff energy

https://en.wikipedia.org/wiki/Cutoff_(physics)

====== Effective field theory

https://en.wikipedia.org/wiki/Effective_field_theory

====== Yang-Mills theory

https://en.wikipedia.org/wiki/Yang%E2%80%93Mills_theory

======= Yang-Mills existence and mass gap
{c}

https://en.wikipedia.org/wiki/Yang–Mills_existence_and_mass_gap

==== Subatomic particles

https://en.wikipedia.org/wiki/Subatomic_particle

===== Electron

https://en.wikipedia.org/wiki/Electron

====== Electron charge

Experiments to measure it:
* \x[oil-drop-experiment]

The \x[2019-redefinition-of-the-si-base-units] defines it precisely and uses it as a measure of charge: https://en.wikipedia.org/wiki/2019_redefinition_of_the_SI_base_units#Ampere

===== Neutrino

https://en.wikipedia.org/wiki/Neutrino

Hypothesized as the explanation for continuous \x[electron] energy spectrum in \x[beta-decay].

First observed directly by the \x[cowan-reines-neutrino-experiment].

====== Cowan-Reines neutrino experiment
{title2=1956}
{c}

https://en.wikipedia.org/wiki/Cowan–Reines_neutrino_experiment

===== Oil drop experiment

https://en.wikipedia.org/wiki/Oil_drop_experiment

Clear experiment diagram which explains that the droplet mass determined with https://en.wikipedia.org/wiki/Stokes%27_law[Stoke's law]:
\Video[http://youtube.com/watch?v=Y6XSK4tX6Gg]
{title="Quantum Mechanics 4a - Atoms I" by \x[viascience] published on Jan 14, 2013.}

American Scientific, LLC sells a ready made educational kit for this: https://www.youtube.com/watch?v=EV3BtoMGA9c

Here's some actual footage of a droplet on a well described more one-off setup:
\Video[http://youtube.com/watch?v=_683PGqG1M4]
{title="Millikan's Experiment, Part 2: The Experiment" by Phil Furneaux from Lancaster University published Feb 3, 2017.}

This American video likely from the 60's shows it with amazing contrast: https://www.youtube.com/watch?v=_UDT2FcyeA4[]

===== Interferometer

https://en.wikipedia.org/wiki/Interferometry

\Video[http://youtube.com/watch?v=lzBKlY4f1XA]
{title="Michelson Interferometer - Amrita University" published by Amrita Vlab on Jan 30, 2013.}
{description=Shows the optical controls and alignment in more detail.}

\Video[http://youtube.com/watch?v=j-u3IEgcTiQ]
{title="Michelson Interferometer" published by TSG Physics on on 2012-06-22.}
{description=TSG PHysics is the channel from the MIT Department of Physics Technical Services Group. In the video they produce a very clear round interference pattern.}

==== Particle physics bibliography

Some light YouTube channels, good for the first view, but which don't go into enough detail to truly show the subject's beauty:
* PBS Space Time: https://www.youtube.com/channel/UC7_gcs09iThXybpVgjHZ_7g A bit on the superficial side, but OK, 5-10 minute videos.
* https://www.youtube.com/watch?v=vIJTwYOZrGU&list=PLCfRa7MXBEsoJuAM8s6D8oKDPyBepBosS[Fermilab - Videos by Don Lincoln]

===== 2011 PHYS 485 lecture videos by Roger Moore from the University of Alberta

https://www.youtube.com/playlist?list=PLSrKSt8xhLVrc0ptX1OYr3OWoOvrxBOvz

These feel good. Targeted at upper undergrads, so he says he holds back on some stuff, but gives a good level of detail for people who have a life.

===== Andrew Dotson YouTube channel

https://www.youtube.com/channel/UCnFmWQbVW_YbqPQZGNuq8sA

Too many fun skit videos for \x[ciro-santilli]'s taste, but does have some serious derivations in \x[quantum-electrodynamics].

===== Dietterich Labs YouTube channel

https://www.youtube.com/channel/UCd02pSRrecAVFOPjB-bfv-Q

Covers some specific hardcore subjects, notably \x[quantum-electrodynamics], in full mathematical detail.

Could be more example oriented: "this is what the results is useful for", but amazing on what he focuses on: the mathematical derivations.

Generally involves short talks + a detailed read-through of a pre-prepared PDF. He has refused giving the PDF or Tex source as of 2020 unfortunately.

"Quantum Field Theory Lecture Series" playlist: https://www.youtube.com/playlist?list=PLSpklniGdSfSsk7BSZjONcfhRGKNa2uou 

\Video[https://www.youtube.com/watch?v=7v0vVFRkXWs]
{title="The Ultimate Goal Of My YouTube Channel" published by \x[dietterich-labs-youtube-channel][Dietterich Labs] on 2020-05-19.}
{description=In this video Dietterich gives his ideal for the channel. Notably, he describes how the few experimental videos he has managed to make were done in a opportunistic way from experiments that were happening around him. This ressonated with Ciro's ideas from \x[videos-of-all-key-physics-experiments].}

===== ViaScience
{c}

https://www.youtube.com/c/viascience

Those guys are really good, \x[ciro-santilli] especially enjoyed their \x[quantum-mechanics] playlist: https://www.youtube.com/playlist?list=PL193BC0532FE7B02C

The \x[quantum-electrodynamics] one was a bit too slow paced for Ciro unfortunately, too much groundwork and too little results.

Accompanying website with a tiny little bit of code: http://viascience.org/what.html

TODO: authors and their affiliation.

===== Physics Videos by Eugene Khutoryansky
{c}

https://www.youtube.com/user/EugeneKhutoryansky

These videos can give some geometric insight and do have their value.

But they are sometimes too slow, there are never any mention of experiments, just \x[how-to-teach-and-learn-physics]["the truth"].

And when things get "mathy", it sticks to a more qualitative view which may not be enough.

Very over the top with sexy demons and angels making appearances, and has some classic aesthetic artistic value :-)

Eugene's background: https://www.quora.com/Who-is-Eugene-Khutoryansky/answer/Ciro-Santilli

==== Nuclear physics

https://en.wikipedia.org/wiki/Nuclear_physics

Nuclear physics is basically just the study of the complex outcomes of \x[weak-interaction] + \x[quantum-chromodynamics].

===== Radioactive decay

https://en.wikipedia.org/wiki/Radioactive_decay

\x[ciro-santilli] finds it interesting that radioactive decay basically kickstarted the domain of \x[nuclear-physics] by essentially providing a natural particle accelerator from a chunk of radioactive element.

\Image[https://upload.wikimedia.org/wikipedia/commons/6/65/Decay_chain%284n%2B2%2C_Uranium_series%29.svg]
{title=The \x[uranium][Uranium]-238 decay chain is the main source of naturally occurring radium.}

====== Alpha decay

https://en.wikipedia.org/wiki/Alpha_decay

Most of the \x[helium] in the Earth's atmosphere comes from alpha decay, since helium is lighter than air and naturally escapes out out of the atmosphere.

Wiki mentions that alpha decay is well modelled as a \x[quantum-tunnelling] event, see also \x[geiger-nuttall-law].

As a result of that law, alpha particles have relatively little energy variation around 5 MeV or a speed of about 5% of the \x[speed-of-light] for any element, because the energy is inversely exponentially proportional to \x[half-life]. This is because:
* if the energy is much larger, decay is very fast and we don't have time to study the \x[isotope]
* if the energy is much smaller, decay is very rare and we don't have enough events to observe at all

======= Cluster decay

https://en.wikipedia.org/wiki/Cluster_decay

======= Spontaneous fission

https://en.wikipedia.org/wiki/Spontaneous_fission

======= Alpha particle

https://en.wikipedia.org/wiki/Alpha_particle

======== Geiger-Nuttall law

https://en.wikipedia.org/wiki/Geiger–Nuttall_law

====== Beta decay

https://en.wikipedia.org/wiki/Beta_decay

\x[uranium]{c} emits them, you can see their mass to charge ratio under magnetic field and so deduce that they are \x[electron]{p}.

Caused by \x[weak-interaction] TODO why/how.

The emitted electron kinetic energy is random from zero to a maximum value. The rest goes into a \x[neutrino]. This is how the neutrino was first discovered/observed indirectly. This is well illustrated in a \x[decay-scheme] such as \x[image-cesium-137-decay-scheme].

====== Gamma ray

https://en.wikipedia.org/wiki/Gamma_ray

A \x[decay-scheme] such as \x[image-cesium-137-decay-scheme] illustrates well how gamma radiation happens as a byproduct of \x[radioactive-decay] due to the existence of \x[nuclear-isomer].

======= Nuclear isomer

https://en.wikipedia.org/wiki/Nuclear_isomer

====== Decay scheme

https://en.wikipedia.org/wiki/Decay_scheme

Example: \x[image-cesium-137-decay-scheme]

====== Half-life

https://en.wikipedia.org/wiki/Half-life

===== Isotope

https://en.wikipedia.org/wiki/Isotope

===== Nuclear fission

https://en.wikipedia.org/wiki/Nuclear_fission

====== Fissile material

https://en.wikipedia.org/wiki/Fissile_material

===== Nuclear weapon

https://en.wikipedia.org/wiki/Nuclear_weapon

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Plutonium_ring.jpg/505px-Plutonium_ring.jpg]
{title=A weapons-grade ring of electrorefined plutonium, typical of the rings refined at Los Alamos and sent to Rocky Flats for fabrication.}
{description=The ring has a purity of 99.96%, weighs 5.3 kg, and is approx 11 cm in diameter. It is enough plutonium for one bomb core. Which city shall we blow up today?}

\Video[https://youtube.com/watch?v=hTRVlUT665U]
{title="Los Alamos From Below" audio talk given by \x[richard-feynman][Richard Feynman] at Santa Barbara on 1975-02-06.}
{description=Feynman describing his experience at Los Alamos. This timestamp describes the computing aspects, but the entire talk is amazing. Transcript: http://calteches.library.caltech.edu/34/3/FeynmanLosAlamos.htm.}
{start=2881}

\x[ciro-santilli] is mildly obsessed by nuclear reactions, because they are so quirky. How can a little ball destroy a city? How can putting too much of it together produce criticality and kill people like in the https://en.wikipedia.org/wiki/Demon_core[Slotin accident] or the https://www.youtube.com/watch?v=ZWomuWd7-to[Tokaimura criticality accident]. It is mind blowing really.

\x[uranium]{c} vs \x[plutonium]: \x[uranium-vs-plutonium-quora-answer-by-ciro-santilli]{full}.

More fun nuclear stuff to watch:
* \x[dr-strangelove-1964]
* https://en.wikipedia.org/wiki/Chernobyl_(miniseries)[]
* https://www.youtube.com/watch?v=g3SKBwzTtv0 "The World Of Enrico Fermi (1970)" produced by "Harvard Project Physics"
* https://en.wikipedia.org/wiki/Fat_Man_and_Little_Boy[Fat Man and Little Boy (1987)] shows a possibly reasonably realistic of the history of the development of https://en.wikipedia.org/wiki/Trinity_(nuclear_test)[Trinity]

=== Condensed matter physics

https://en.wikipedia.org/wiki/Condensed_matter_physics

Includes fun things like:
* \x[superconductivity] and \x[superfluidity]
* \x[semiconductors]

==== Condensed matter Physics bibliography

* https://www.youtube.com/watch?v=RImqF8z91fU&list=PLtTPtV8SRcxi91n9Mni2xcQX4KhjX91xp Solid State Physics" course by Sergey Frolov taught at the University of Pittsburgh in the Fall 2015 semester

==== Electronic band theory

https://en.wikipedia.org/wiki/Electronic_band_structure

And https://en.wikipedia.org/wiki/Fermi%E2%80%93Dirac_statistic

How are the bands measured experimentally?

Why are there gaps? Why aren't bands infinite? What determines the width of gaps?

==== Semiconductors

https://en.wikipedia.org/wiki/Semiconductor

The basis of 1970-20XX \x[computer]{p}, gotta understand them I guess.

==== Superconductivity

https://en.wikipedia.org/wiki/Superconductivity

Experiments:
* "An introduction to superconductivity" by Alfred Leitner originally published in 1965, source: http://www.alfredleitner.com/
* Isotope effect on the critical temperature. http://hyperphysics.phy-astr.gsu.edu/hbase/Solids/coop.html mentions that:

  \Q[If electrical conduction in mercury were purely electronic, there should be no dependence upon the nuclear masses. This dependence of the critical temperature for superconductivity upon isotopic mass was the first direct evidence for interaction between the electrons and the lattice. This supported the \x[bcs-theory] of lattice coupling of electron pairs.]

Lectures:
* \Video[http://youtube.com/watch?v=O_zjGYvP4Ps]
  {title="20. Fermi gases, BEC-BCS crossover" published by MIT OpenCourseWare on 2014-07-11.}
  {description=Instructor: Wolfgang Ketterle, part of the "Atomic and Optical Physics" series.}

  Actually goes into the equations.

  Notably, https://youtu.be/O_zjGYvP4Ps?t=3278 describes extremely briefly an experimental setup that more directly observes pair condensation.
* \Video[http://youtube.com/watch?v=Yx666k2XH8E]
  {title="Steven Kivelson | Superconductivity and Quantum Mechanics at the Macro-Scale - 1 of 2" published by Stanford Institute for Theoretical Physics on 2016-05-12.}
  {description=Gives a reasonable basis overview, but does not go into the meat of BCS it at the end.}

Media:
* http://www.supraconductivite.fr/en/index.php#supra-explication

  Cool CNRS video showing the condensed wave function, and mentioning that "every pair moves at the same speed". To change the speed of one pair, you need to change the speed of all others. That's why there's not energy loss.

===== Superconducting materials

====== High temperature superconductivity

https://en.wikipedia.org/wiki/High-temperature_superconductivity

\Image[https://upload.wikimedia.org/wikipedia/commons/b/bb/Timeline_of_Superconductivity_from_1900_to_2015.svg]
{height=600}

====== Yttrium barium copper oxide
{title2=YCBO}

https://en.wikipedia.org/wiki/Yttrium_barium_copper_oxide

Upside: superconducting above 92K, which is above the 77K of \x[liquid-nitrogen], and therefore much much cheaper to obtain and maintain than liquid helium.

Downside: it is brittle, so how do you make wires out of it? Still, can already be used in certain circuits, e.g. high temperature \x[squid-device]{p}.

====== Bismuth strontium calcium copper oxide
{title2=BSCCO}

https://en.wikipedia.org/wiki/Bismuth_strontium_calcium_copper_oxide

Discovered in 1988, the first \x[high-temperature-superconductivity][high-temperature superconductor] which did not contain a rare-earth element.

===== Applications of superconductivity

Superconductivity is one of the key advances of 21st century technology:
* the \x[josephson-effect] can be used both for:
  * \x[squid-device]: precise \x[magnetometer]
  * basis for \x[superconducting-quantum-computer]
* can be used to produce powerful magnetic fields, which in turn can be used to:
  * \x[magnetic-confinement-fusion]

===== What is the IV curve of superconductors?

TODO, come on, Internet!

Bibliography.

====== Do superconductors carry infinite current?

No, see: \x[what-is-the-iv-curve-of-superconductors].

Bibliography:
* https://physics.stackexchange.com/questions/62664/how-can-ohms-law-be-correct-if-superconductors-have-0-resistivity
* https://www.quora.com/Do-superconductors-produce-infinite-current-I-V-R-R-0-How-do-they-fit-into-quantum-theory
* https://www.reddit.com/r/askscience/comments/dcgdf/does_superconductivity_imply_infinite_current/

===== BCS Theory

https://en.wikipedia.org/wiki/BCS_theory

Main theory to explain Type I superconductors very successfully.

TODO can someone please just give the final predictions of BCS, and how they compare to experiments, first of all? Then derive them.

High level concepts:
* the wave functions of pairs of electrons (fermions) get together to form bosons. This is a \x[phase-transition] effect, thus the specific sudden transition temperature.
* the pairs form a \x[bose-einstein-condensate]
* once this new state is reached, all pairs are somehow entangled into one big wave function, and you so individual lattice imperfections can't move just one single electron off trajectory and make it lose energy

===== Josephson effect

https://en.wikipedia.org/wiki/Josephson_effect

Discrete quantum effect observed in superconductors with a small insulating layer.

TODO: curves showing the effect.

The effect is likely mentioned in Leitner's video at: https://www.youtube.com/watch?v=BFdq6IecUJc&t=2290s

Bibliography:
* https://www.youtube.com/watch?v=cnZ6exn2CkE "Superconductivity: Professor Brian Josephson". Several random excerpts from Cambridge people talking about the Josephson effect

====== Applications of Josephson Junctions

* the basis for the most promising 2019 \x[quantum-computing] implementation: \x[superconducting-quantum-computer]
* offers https://en.wikipedia.org/wiki/Josephson_voltage_standard[the most practical/precise volt standard] although the 2019 SI Volt definition https://en.wikipedia.org/wiki/2019_redefinition_of_the_SI_base_units#Ampere[is still based on the electron charge]

  Quick NIST article about it: https://www.nist.gov/news-events/news/2013/04/primary-voltage-standard-whole-world (\a[https://web.archive.org/web/20190410011041/https://www.nist.gov/news-events/news/2013/04/primary-voltage-standard-whole-world][archive])
* \x[squid-device]

======= SQUID device
{c}

https://en.wikipedia.org/wiki/SQUID

Can be used as a very precise \x[magnetometer].

There are high temperature \x[yttrium-barium-copper-oxide] ones that work on \x[liquid-nitrogen].

==== Superconducting tunnel junction
{title2=STJ}

https://en.wikipedia.org/wiki/Superconducting_tunnel_junction

Specific type of Josephson Junction. Probably can be made tiny and in huge numbers through photolithography.

\Image[https://upload.wikimedia.org/wikipedia/en/0/03/STJ_SVG_file.svg]
{title=Illustration of a thin-film superconducting tunnel junction (STJ).}
{description=The superconducting material is light blue, the insulating tunnel barrier is black, and the substrate is green.}

\Video[http://youtube.com/watch?v=-HUVGWTfaSI]
{title="Quantum Transport, Lecture 14: Josephson effects" by Sergey Frolov.}
{description=https://youtu.be/-HUVGWTfaSI?t=878 mentions https://en.wikipedia.org/wiki/Electron-beam_lithography[maskless electron beam litograpy] being used to produce STJs.}

==== Superfluidity

Experiments:
\Video[http://youtube.com/watch?v=7eZlF6IToQs]
{title="Alfred Leitner - Liquid Helium II the Superfluid" published by Alfred Leitner on 1963.}
{description=Original source: http://www.alfredleitner.com[].}

\Video[http://youtube.com/watch?v=9FudzqfpLLs]
{title="Ben Miller experiments with superfluid helium - Horizon: What is One Degree? - BBC Two" by BBC published on 2011-01-06.}
{description=Just quickly shows the superfluid helium climbing out o the cup, no detailed setup. With https://www2.physics.ox.ac.uk/contacts/people/rtaylor[professor Robert Taylor] from Oxford University.}

==== Bose-Einstein condensate
{c}

https://en.wikipedia.org/wiki/Bose–Einstein_condensate

==== Materials science

https://en.wikipedia.org/wiki/Materials_science

===== Ferromagnetism

https://en.wikipedia.org/wiki/Ferromagnetism

====== Ising model
{c}

https://en.wikipedia.org/wiki/Ising_model

Also has some funky relations to \x[renormalization] TODO.

=== Thermodynamics

==== Phase transition

https://en.wikipedia.org/wiki/Phase_transition

TODO can anything interesting and deep be said about "why phase transition happens?" https://physics.stackexchange.com/questions/29128/what-causes-a-phase-transition

==== Refrigerator

https://en.wikipedia.org/wiki/Refrigerator

===== Dilution refrigerator

https://en.wikipedia.org/wiki/Dilution_refrigerator

Reaches 2mK.

Used for example in some times of \x[quantum-computing][quantum computers]:
* \x[d-wave-systems]: https://www.dwavesys.com/tutorials/background-reading-series/introduction-d-wave-quantum-hardware#h2-5 (15mK)

\Video[https://www.youtube.com/watch?v=j0s3uqqXZlc]
{title="This Is What A Helium Dilution Refrigerator Is" published by \x[dietterich-labs-youtube-channel][Dietterich Labs] on 2019-06-02.}

=== Lagrangian mechanics
{c}

https://en.wikipedia.org/wiki/Lagrangian_mechanics

TODO advantages:
* https://physics.stackexchange.com/questions/254266/advantages-of-lagrangian-mechanics-over-newtonian-mechanics fucking closed question
* https://www.quora.com/Why-was-Lagrangian-formalism-needed-in-the-presence-of-Newtonian-formalism
* https://www.researchgate.net/post/What_is_the_advantage_of_Lagrangian_formalism_over_Hamiltonian_formalism_in_QFT

==== Lagrangian (field theory)
{c}

https://en.wikipedia.org/wiki/Lagrangian_(field_theory)

=== Computational physics

https://en.wikipedia.org/wiki/Computational_physics

The intersection of two beautiful \x[art]{p}: \x[computer][coding] and \x[physics]!

Computational physics is a good way to get valuable intuition about the key equations of physics, and train your numerical analysis skills:
* classical mechanics
  * "Real-time \x[heat-equation] OpenGL visualization with interactive mouse cursor using relaxation method" under \x[articles]
* https://phet.colorado.edu PhET simulations from University of Colorado Boulder

Other child sections:
* \x[schrodinger-equation-simulations]

==== Computational chemistry

===== Quantum chemistry

https://en.wikipedia.org/wiki/Quantum_chemistry

Ah, the jewel of computational physics.

Also known as an https://en.wikipedia.org/wiki/Ab_initio_quantum_chemistry_methods[ab initio] method: no experimental measurement is taken as input, \x[quantum-electrodynamics][QED is all you need].

But since QED is thought to fully describe all relevant aspects mollecules, it could be called "the" ab initio method.

For one, if we were able to predict protein molecule interactions, our understanding of \x[molecular-biology-technologies] would be solved.

No more ultra expensive and complicated \x[x-ray-crystallography] or \x[cryogenic-electron-microscopy].

And the fact that \x[quantum-computing][quantum computers] are one of the most promising advances to this field, is also very very exciting: \x[quantum-algorithm]{full}.

===== Quantum computing computational chemistry algorithms

====== IBM 2017 beryllium hydride ground state calculation on a quantum computer
{c}

TODO what's the largest mollecule done on a classical computer?

* https://www.ibm.com/blogs/research/2017/09/quantum-molecule/
* https://www.nature.com/articles/nature23879 "Hardware-efficient variational quantum eigensolver for small molecules and quantum magnets"
* https://www.sciencemag.org/news/2017/09/quantum-computer-simulates-largest-molecule-yet-sparking-hope-future-drug-discoveries

=== Physicist

\Image[https://web.archive.org/web/20190925220347if_/https://imgs.xkcd.com/comics/purity.png]
{id=xkcd-435-fields-arranged-by-purity-2}
{title=xkcd 435: Fields arranged by purity.}
{source=https://xkcd.com/435/}

==== Marie Curie
{c}

https://en.wikipedia.org/wiki/Marie_Curie

==== Richard Feynman
{c}

https://en.wikipedia.org/wiki/Richard_Feynman

* \x[quantum-electrodynamics] e.g. \x[richard-feynman-quantum-electrodynamics-lecture-at-university-of-auckland-in-1979]
* \x[quantum-computers-as-experiments-that-are-hard-to-predict-outcomes]

==== Paul Dirac
{c}

https://en.wikipedia.org/wiki/Paul_Dirac

Eccentric nerdy slow speaking \x[physicist] mostly based in \x[university-of-cambridge].

Created the \x[dirac-equation], what else do you need to know?!

\Video[http://youtube.com/watch?v=jPwo1XsKKXg]
{title="Paul Dirac and the religion of mathematical beauty" published by \x[the-royal-society][The Royal Society] on 2013-12-10.}

==== Stephen Hawking
{c}

https://en.wikipedia.org/wiki/Stephen_Hawking

While learning black-hole stuff is not on top of \x[ciro-santilli]'s priorities, Hawking's spirit is to be admired.

To never give up even when everything seems lost, and still have a sense of humour is respectable.

An ex-physicist colleague who had met Hawking told an anecdote. Hawking was around in the department one day, they said hi and all. But then Hawking wanted to tell a joke. It took like 5 minutes of typing, and you can imagine that things were pretty awkward and the joke's timing was "a bit off". But Hawking did tell the joke nonetheless.

This is also suggested in the https://en.wikipedia.org/wiki/The_Theory_of_Everything_(2014_film)[The Theory of Everything (2014)] film, and therefore likely the biographies.

=== Philosophy of Science

==== Never trust an experiment that is not supported by a good theory

Not the usual bullshit you were expecting right?

* https://youtu.be/AYC5lE0b8os?t=41[A Computational Whole-Cell Model Predicts Genotype From Phenotype- Markus Covert] by "Calit2ube" published on Jan 11, 2013.
* https://en.wikipedia.org/wiki/Jacques_Monod[Jacques Monod]

\x[ciro-santilli] also likes how Monod "learned from other students a little older than himself, rather than from the faculty.", read somewhere else that it is because faculty is more likely outdated.

==== Physics and the illusion of life

The natural sciences are not just a tool to predict the future.

They are a reminder that the lives that we live daily are mere illusions, just like \x[buddhism][Buddhists] and https://en.wikipedia.org/wiki/Maya_(religion)[Hinduists] say.

We as individuals perceive nothing about the materials that we touch every day really work, nor more importantly how our \x[brain] and cells work.

Everything is magic out of our control.

The natural sciences allow us peek, with huge concentrated effort, into tiny little bits a little of those unknowns, and blow our minds as we notice that we don't know anything.

Every one or two week \x[ciro-santilli] remembers that he and everything he touches are just a bunch of atoms, and that is an amazing feeling.

\x[alan-watts]'s \x[video-alan-watts-philosopher-talk]["Philosopher" talk] mentions related ideas:
\Q[The origin of a person who is defined as a philosopher, is one who finds that existence itself is exceedingly odd.]

\Video[http://youtube.com/watch?v=BbXZLKb_nSo]
{title=\x[alan-watts][Alan Watts]' "Philosopher" talk.}

===== Animations of molecular biology processes

Perhaps, the feeling of \x[physics-and-the-illusion-of-life] reaches its peak in \x[molecular-biology-technologies][molecular biology].

Just look at your fucking hand right now.

Do you have any idea of each of the cells in it work? Isn't is at least 100 times more complex than the materials of the table you hand is currently resting on?

\x[animations-of-molecular-biology-processes] make this particularly bind bendingly clear.

And don't get \x[ciro-santilli] started in \x[brain][the brain].

And yet, we live.

Maybe nothing can ever make \x[physics-and-the-illusion-of-life] clearer.

\Video[https://www.youtube.com/watch?v=kXpzp4RDGJI]
{title="ATP synthase in action" published by HarvardX on Apr 19, 2017.}

\Video[https://www.youtube.com/watch?v=LQmTKxI4Wn4]
{title="Electron transport chain" published by HarvardX on 2017-10-09.}

\Video[http://youtube.com/watch?v=wJyUtbn0O5Y]
{title="The Inner Life of the Cell" created by BioVisions from Harvard University, published on Jul 11, 2011.}

\Video[http://youtube.com/watch?v=7Hk9jct2ozY]
{title="DNA animations by wehi.tv for Science-Art exhibition" published by WEHImovies on 2018-07-16.}

===== Alan Watts controlled dream of life talk
{c}

Goes along: if you could control your life multiple times to be perfect, you would eventually get tired of paradise, and you would go further and further into creating uncertain worlds with some suffering, until you would reach the current real world.

Very similar to \x[the-matrix-1999] when Agent Smith talks about the failed https://matrix.fandom.com/wiki/Paradise_Matrix[Paradise Matrix] shown at https://www.youtube.com/watch?v=9Qs3GlNZMhY[]:
\Q[Did you know that the first Matrix was designed to be a perfect human world where none suffered, where everyone would be happy? It was a disaster. No one would accept the program. Entire crops were lost. Some believed that we lacked the programming language to describe your "perfect world". But I believe that, as a species, human beings define their reality through misery and suffering. So the perfect world was a dream that your primitive cerebrum kept trying to wake up from.]

\Video[https://youtube.com/watch?v=XlCZm-mz20M]
{title=\x[alan-watts][Alan Watts]' "The dream of life" talk.}

===== Rick and Morty A Life Well Lived
{c}

From episode "Mortynight Run"

* https://rickandmorty.fandom.com/wiki/Mortynight_Run
* https://rickandmorty.fandom.com/wiki/Roy:_A_Life_Well_Lived

\Q[Look at this. You beat cancer, and then you went back to work at the carpet store? Booooh.]

\Video[http://youtube.com/watch?v=szzVlQ653as]

=== Unsolved problems in Physics

https://en.wikipedia.org/wiki/List_of_unsolved_problems_in_physics

The most important ones are:
* \x[theory-of-everything]. We are certain that our base equations are wrong, but we don't know how to fix them :-)
  * \x[grand-unified-theory]
* full explanation of \x[high-temperature-superconductivity]. \x[superconductivity]{c} already has a gazillion applications, and doing it in higher temperatures would add a gazillion more, and maybe this theoretical explanation would help us find new high temperature superconducting materials more effectively

== Mathematics

https://en.wikipedia.org/wiki/Mathematics

Here is a more understandable description of the semi-satire that follows: https://math.stackexchange.com/questions/53969/what-does-formal-mean/3297537#3297537

Mathematics is a \x[art][beautiful game] played on https://en.wikipedia.org/wiki/String_(computer_science[strings], which \x[mathematician]{p} call https://en.wikipedia.org/wiki/Theorem["theorems"].

You start with a very small list of:
* certain arbitrarily chosen initial strings, which mathematicians call https://en.wikipedia.org/wiki/Axiom["axioms"]
* rules of how to obtain new strings from old strings, called https://en.wikipedia.org/wiki/Rule_of_inference["rules of inference"] Every transformation rule is very simple, and can be verified by a computer.

Using those rules, you choose a target string that you want to reach, and then try to reach it. Before the target string is reached, matematicians call it a https://en.wikipedia.org/wiki/Conjecture["conjecture"].

Mathematicians call the list of transformation rules used to reach a string a https://en.wikipedia.org/wiki/Mathematical_proof["proof"].

Since every step of the proof is very simple and can be verified by a computer automatically, the entire proof can also be automatically verified by a computer very easily.

Finding proofs however is undoubtedly an https://en.wikipedia.org/wiki/NP-hardness[NP-hard] problem.

Most mathematicians can't code or deal with the real world in general however, so they haven't created the obviously necessary: \x[website-front-end-for-a-mathematical-formal-proof-system].

The fact that Mathematics happens to be the best way to describe \x[physics] and that humans can use physical intuition heuristics to reach the NP-hard proofs of mathematics is one of the great miracles of the universe.

Once we have mathematics formally modelled, one of the coolest results is https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems[Gödel's incompleteness theorems], which states that for any reasonable proof system, there are necessarily theorems that cannot be proven neither true nor false starting from any given set of axioms: those theorems are independent from those axioms. Therefore, there are three possible outcomes for any hypothesis: true, false or independent!

Some famous theorems have even been proven to be independent of some famous axioms. One of the most notable is that the http://en.wikipedia.org/wiki/Continuum_hypothesis[Continuum Hypothesis] is independent from https://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory[ZFC]! Such independence proofs rely on modelling the proof system inside another proof system, and https://en.wikipedia.org/wiki/Forcing_(mathematics)[forcing] is one of the main techniques used for this.

\Image[https://web.archive.org/web/20190430151331im_/http://abstrusegoose.com/strips/i_dont_give_a_shit_about_your_mountain.png]
{title="The landscape of modern Mathematics" comic by Abstruse Goose.}
{description=This comic shows that Mathematics is one of the most diversified areas of useless human knowledge.}
{source=https://abstrusegoose.com/211}

=== The beauty of mathematics

\x[ciro-santilli] intends to move his beauty list here little by little: https://github.com/cirosantilli/mathematics/blob/master/beauty.md

The most beautiful things in mathematics are results that are:
* simple to state and understand (pre-high school, high-school, lower undergrad), but extremely hard to prove, e.g. Fermat's
* surprising results: we had intuitive reasons to believe something as possible or not, but a theorem shatters that conviction and brings us on our knees.

  General surprise themes include:

  * classification of potentially infinite sets like: compact manifolds, etc.
    * \x[classification-of-simple-finite-groups]
    * \x[classification-of-regular-polytopes]
    * classification of \x[wallpaper-group]{p} and \x[space-group]{p}
  * problems that are more complicated in low dimensions than high like: classification of complex manifolds. It is also fun to see how in many cases complexity peaks out at 4 dimensions
    * \x[classification-of-regular-polytopes]
  * unpredictable magic constants. Why is the lowest dimension for an exotic sphere 7? Why is 4 the largest degree of an equation with explicit solution?
* applications: make life easier and/or modeling some phenomena well, e.g. in \x[physics]. See also: \x[how-to-teach/explain-how-to-make-money-with-the-lesson]

=== Formalization of mathematics

https://math.stackexchange.com/questions/53969/what-does-formal-mean/3297537#3297537

The one true definition of \x[mathematics]!

==== Formal proof

https://en.wikipedia.org/wiki/Formal_proof

A proof in some system for the \x[formalization-of-mathematics].

==== Set

https://en.wikipedia.org/wiki/Set_(mathematics)

Intuitively: unordered container where all the values are unique, just like C++ `std::set`.

More precisely for set theory \x[formalization-of-mathematics]:
* everything is a set, including the elements of sets
* string manipulation wise:
  * `{}` is an empty set. The natural number `0` is defined as `{}` as well.
  * `{{}}` is a set that contains an empty set
  * `{{}, {{}}}` is a set that contains two sets: `{}` and `{{}}`
  * `{{}, {}}` is not well formed, because it contains `{}` twice

==== Function

https://en.wikipedia.org/wiki/Function_(mathematics)

\x[set][Set] of \x[ordered-pair][ordered pairs]. That's it!

https://math.stackexchange.com/questions/1480651/is-fx-x-1-x-2-a-function/1481099#1481099

==== Real number

https://en.wikipedia.org/wiki/Real_number

Good definition: https://en.wikipedia.org/wiki/Dedekind_cut

===== Countable set

https://en.wikipedia.org/wiki/Countable_set

====== Cantor's diagonal argument
{c}

https://en.wikipedia.org/wiki/Cantor%27s_diagonal_argument

==== Complex number

https://en.wikipedia.org/wiki/Complex_number

An \x[ordered-pair] of two \x[real-number][real numbers] with addition and multiplication defined to match whatever bullshit formula they taught you in school.

TODO visual interpretations.

==== Ordered pair

https://en.wikipedia.org/wiki/Ordered_pair

=== Linear algebra

==== Matrix multiplication

https://en.wikipedia.org/wiki/Matrix_multiplication

==== Eigenvalues and eigenvectors

https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors

* https://math.stackexchange.com/questions/23312/what-is-the-importance-of-eigenvalues-eigenvectors
* https://math.stackexchange.com/questions/1520832/real-life-examples-for-eigenvalues-eigenvectors

===== Eigenvalue

See: \x[eigenvalues-and-eigenvectors].

===== Eigenvector

See: \x[eigenvalues-and-eigenvectors].

==== Orthogonal matrix

https://en.wikipedia.org/wiki/Orthogonal_matrix

Implies determinant plus or minus 1. Converse not true.

==== Unitary matrix

https://en.wikipedia.org/wiki/Unitary_matrix

Applications:
* in \x[quantum-computing][quantum computer] programming basically comes down to creating one big unitary matrix as explained at: \x[programmer-s-model-of-quantum-computers]

==== Self-adjoint operator

https://en.wikipedia.org/wiki/Self-adjoint_operator

=== Calculus

https://en.wikipedia.org/wiki/Calculus

Fancy name for it with the "more advanced" connotation: https://en.wikipedia.org/wiki/Real_analysis

==== Riemann integral
{c}

https://en.wikipedia.org/wiki/Riemann_integral

==== Lebesgue integral

https://en.wikipedia.org/wiki/Lebesgue_integration

"More complex" integral. Matches "Riemann" for "simple functions", but also works for some "funkier" functions that Riemann does not work for.

Key motivation: \x[lebesgue-integral-of-lp-is-complete-but-riemann-isn-t].

https://youtu.be/PGPZ0P1PJfw?t=710 also mentions that one advantage is being able to switch the order of integrals and limits of function sequences on non-uniform convergence. TODO why do we care?

https://youtu.be/PGPZ0P1PJfw?t=808 shows how Lebesgue can be visualized as a partition of the function range instead of domain, and then you just have to be able to measure the size of pre-images.

One advantage of that is that the range is always one dimensional.

But the main advantage is that having infinitely many discontinuities does not matter.

Infinitely many discontinuities can make the Riemann partitioning diverge.

But in Lebesgue, you are instead measuring the size of preimage, and to fit infinitely many discontinuities in a finite domain, the size of this preimage is going to be zero.

So then the question becomes more of "how to define the measure of a subset of the domain".

Which is why we then fall into \x[measure-theory]

\Video[http://youtube.com/watch?v=PGPZ0P1PJfw]
{title="Riemann integral vs. Lebesgue integral" by The Bright Side Of Mathematics published on 2018-10-31.}

==== Lebesgue integral of $\LP$ is complete but Riemann isn't

$\LP$ is:
* \x[complete-metric-space][complete] under the Lebesgue integral, this result is may be called the \x[riesz-fischer-theorem]
* not complete under the \x[riemann-integral]: https://math.stackexchange.com/questions/397369/space-of-riemann-integrable-functions-not-complete

And then this is why \x[quantum-mechanics] basically lives in \x[l2]: not being complete makes no sense physically, it would mean that you can get closer and closer to states that don't exist!

TODO intuition

===== Riesz-Fischer theorem
{c}

https://en.wikipedia.org/wiki/Riesz–Fischer_theorem

TODO vs \x[carleson-s-theorem]. Is this just a weaker result about norms, while Carleson is pointwise? Or i this just about Cauchy sequence and not Fourier at all?

====== $\LP$ is complete

TODO

====== Fourier basis is complete for $\LTwo$
{id=fourier-basis-is-complete-for-l2}
{c}

https://math.stackexchange.com/questions/316235/proving-that-the-fourier-basis-is-complete-for-cr-2-pi-c-with-l2-norm

Every converging \x[fourier-series] is in \x[l2] with a compact domain, and every \x[l2] function has a converging Fourier series.

How does it work for non-periodic functions? Well, it just can't:
* https://math.stackexchange.com/questions/1115240/can-a-non-periodic-function-have-a-fourier-series
* https://math.stackexchange.com/questions/1378633/every-function-can-be-represented-as-a-fourier-series

However, maybe this is where the \x[fourier-transform] comes in as opposed to the Fourier series.

======= Carleson's theorem
{c}

https://en.wikipedia.org/wiki/Carleson%27s_theorem

TODO vs \x[riesz-fischer-theorem]. Is this just a stronger pointwise result, while Riesz-Fischer is about norms only?

===== $\LP$

https://en.wikipedia.org/wiki/Lp_space

Integrable functions to the power $p$, usually and in this text assumed under the \x[lebesgue-integral] because: \x[lebesgue-integral-of-lp-is-complete-but-riemann-isn-t]

====== $\LTwo$
{id=l2}

\x[lp] for $p == 2$.

$\LTwo$ is by far the most important of $\LP$ because it is \x[mathematical-formulation-of-quantum-mechanics][quantum mechanics states] live, because the total probability of being in any state has to be 1!

\x[l2] has some crucially important properties that other $\LP$ don't (TODO confirm and make those more precise):
* it is the only $\LP$ that is \x[hilbert-space] because it is the only one where an inner product compatible with the metric can be defined:
  * https://math.stackexchange.com/questions/2005632/l2-is-the-only-hilbert-space-parallelogram-law-and-particular-ft-gt
  * https://www.quora.com/Why-is-L2-a-Hilbert-space-but-not-Lp-or-higher-where-p-2
* \x[fourier-basis-is-complete-for-l2], which is great for solving \x[differential-equation]

==== Measure theory

https://en.wikipedia.org/wiki/Measure_(mathematics)

Main motivation: \x[lebesgue-integral].

The Bright Side Of Mathematics 2019 playlist: https://www.youtube.com/watch?v=xZ69KEg7ccU&list=PLBh2i93oe2qvMVqAzsX1Kuv6-4fjazZ8j

The key idea, is that we can't define a measure for the power set of R. Rather, we must select a large measurable subset, and the Borel sigma algebra is a good choice that matches intuitions.

==== Fourier series
{c}

https://en.wikipedia.org/wiki/Fourier_series

The continuous Fourier transform behaves especially nicely in \x[l2] (with the \x[lebesgue-integral]), where there are completeness guarantees (every function can be approximated as closely as desired), see: \x[fourier-basis-is-complete-for-l2].

Fourier's original motivation, and a key application

===== Applications of the Fourier series

====== Solving partial differential equations with the Fourier series

See: https://math.stackexchange.com/questions/579453/real-world-application-of-fourier-series/3729366#3729366

\x[separation-of-variables] of certain equations like the \x[heat-equation] and \x[wave-equation] are solved immediately by calculating the \x[fourier-series] of initial conditions.

===== Fourier transform
{c}

https://en.wikipedia.org/wiki/Fourier_transform

Continuous version of the Fourier series.

Can be used to represent functions that are not periodic: https://math.stackexchange.com/questions/221137/what-is-the-difference-between-fourier-series-and-fourier-transformation

==== History of the Fourier series

First published by Fourier in 1807 to solve the \x[heat-equation].

==== Topology

https://en.wikipedia.org/wiki/Topology

Topology is the plumbing of \x[calculus].

===== Complete metric space

https://en.wikipedia.org/wiki/Complete_metric_space

One notable example where completeness matters: \x[lebesgue-integral-of-lp-is-complete-but-riemann-isn-t].

===== Dense set

https://en.wikipedia.org/wiki/Dense_set

==== Distribution

https://en.wikipedia.org/wiki/Distribution_(mathematics)

Generalize \x[function]{p} to allow adding some useful things which people wanted to be classical functions but which are not,

It therefore requires you to redefine and reprove all of calculus.

For this reason, most people are tempted to assume that all the hand wavy intuitive arguments undergrad teachers give are true.

===== Dirac delta
{c}

https://en.wikipedia.org/wiki/Dirac_delta_function

The "0-width" pulse \x[distribution] that integrates to a step.

There's not way to describe it as a classical \x[function], making it the most important example of distribution.

Applications:
* \x[position-operator] in \x[quantum-mechanics]. It's not a coincidence that the function is named after \x[paul-dirac].

==== Complex analysis

https://en.wikipedia.org/wiki/Complex_analysis

The surprising thing is that a bunch of results are simpler in complex analysis!

===== Holomorphic function

https://en.wikipedia.org/wiki/Holomorphic_function

Being a complex holomorphic function is an extremely strong condition.

The existence of the first derivative implies the existence of all derivatives.

Another extremely strong consequence is the \x[identity-theorem].

"Holos" means "entire" in Greek, so maybe this is a reference to the fact that due to the identity theorem, knowing the function on a small open ball implies knowing the function everywhere.

===== Analytic continuation

https://en.wikipedia.org/wiki/Analytic_continuation

\x[visualizing-the-riemann-hypothesis-and-analytic-continuation-by-3blue1brown] is a good quick visual non-mathematical introduction is to it.

The key question is: how can this continuation be unique since we are defining the function outside of its original domain?

The answer is: due to the \x[identity-theorem].

====== Visualizing the Riemann hypothesis and analytic continuation by 3Blue1Brown

Published on Dec 9, 2016.

Good ultra quick visual non-mathematical introduction to the Riemann hypothesis and analytic continuation.

\Video[http://youtube.com/watch?v=sD0NjbwqlYw]

====== Identity theorem

https://en.wikipedia.org/wiki/Identity_theorem

Essentially, defining an \x[holomorphic-function] on any open subset, no matter how small, also uniquely defines it everywhere.

This is basically why it makes sense to talk about \x[analytic-continuation] at all.

One way to think about this is because the \x[taylor-series] matches the exact value of an holomorphic function no matter how large the difference from the starting point.

Therefore a holomorphic function basically only contains as much information as a countable sequence of numbers.

======= Riemann zeta function
{c}

https://en.wikipedia.org/wiki/Riemann_zeta_function

======== Riemann hypothesis
{c}

https://en.wikipedia.org/wiki/Riemann_hypothesis

\x[visualizing-the-riemann-hypothesis-and-analytic-continuation-by-3blue1brown] is a good quick visual non-mathematical introduction is to it.

One of the \x[millennium-prize-problems].

==== Hilbert space

https://en.wikipedia.org/wiki/Hilbert_space

Key for \x[quantum-mechanics], see: \x[mathematical-formulation-of-quantum-mechanics], the most important example by far being \x[l2].

==== Lie Algebra

https://en.wikipedia.org/wiki/Lie_algebra

TODO \x[ciro-santilli] really wants to understand what all the fuss is about:
* https://math.stackexchange.com/questions/1322206/lie-groups-lie-algebra-applications
* https://mathoverflow.net/questions/58696/why-study-lie-algebras
* https://math.stackexchange.com/questions/405406/definition-of-lie-algebra

TODO review:
* http://www.staff.science.uu.nl/~hooft101/lectures/lieg07.pdf
* http://www.physics.drexel.edu/~bob/LieGroups.html

Oh, there is a low dimensional classification! Ciro is \x[high-flying-bird-vs-gophers][a sucker for classification theorems]! https://en.wikipedia.org/wiki/Classification_of_low-dimensional_real_Lie_algebras

* Alex Flournoy https://youtu.be/kpeP3ioiHcw?t=2655 good SO(3) explicit exponential expansion example. Then next lecture shows why SU(2) is the representation of SO(3). Next ones appear to eventually get to the physical usefulness of the thing, but I lost patience. Not too far out though.
* https://www.youtube.com/watch?v=fXJcoXeiPD8&list=PLRlVmXqzHjURZO0fviJuyikvKlGS6rXrb&index=3 XylyXylyX tutorial with infinitely many hours:

==== Differential equation

===== Ordinary differential equation

https://en.wikipedia.org/wiki/Ordinary_differential_equation

===== Partial differential equation
{title2=PDE}

https://en.wikipedia.org/wiki/Partial_differential_equation

====== Important partial differential equations

The majority likely comes from \x[physics]:
* \x[heat-equation]
* \x[wave-equation]
* \x[maxwell-s-equations]
* \x[schrodinger-equation]

======= Laplace's equation
{c}

https://en.wikipedia.org/wiki/Laplace%27s_equation

Like a \x[heat-equation] but without time.

TODO confirm: does the solution of the heat equation always converge to the solution of the Laplace equation as time tends to infinity?

In one dimension, the Laplace equation is boring as it is just a straight line since the second derivative must be 0. That also matches our intuition of the limit solution of the heat equation.

Uniqueness: https://en.wikipedia.org/wiki/Uniqueness_theorem_for_Poisson%27s_equation

======== Harmonic function

https://en.wikipedia.org/wiki/Harmonic_function

A solution to \x[laplace-s-equation].

========= Spherical harmonic

https://en.wikipedia.org/wiki/Spherical_harmonics

Correspond to the angular part of \x[laplace-s-equation] in spherical coordinates after using \x[separation-of-variables] as shown at: https://en.wikipedia.org/wiki/Spherical_harmonics#Laplace's_spherical_harmonics

======== Poisson's equation
{c}

https://en.wikipedia.org/wiki/Poisson%27s_equation

Generalization of the \x[laplace-s-equation] with an arbitrary target function.

======= Heat equation

https://en.wikipedia.org/wiki/Heat_equation

Besides being useful in engineering, it was very important historically from a "development of mathematics point of view", e.g. \x[history-of-the-fourier-series][it was the initial motivation for the Fourier series].

Some interesting properties:
* TODO confirm: for a fixed boundary condition that does not depend on time, the solutions always approaches one specific equilibrium function.

  This is in contrast notably with the \x[wave-equation], which can oscillate forever.
* TODO: for a given point, can the temperature go down and then up, or is it always monotonic with time?
* information propagates instantly to infinitely far. Again in contrast to the wave equation, where information propagates at wave speed.

Sample numerical solutions:
* with \x[freefem]:
  * \x[heat-dirichlet-1d-freefem]
  * \x[heat-dirichlet-2d-freefem]

======= Wave equation

https://en.wikipedia.org/wiki/Wave_equation

Describes perfect lossless waves on the surface of a string, or on a water surface.

JavaScript toy solvers:
* https://jtiscione.github.io/webassembly-wave/index.html circular domain, create waves with mouse click
* https://dionyziz.com/graphics/wave-experiment/ with useless 3D WebGL visualization :-), waves with mouse click. Solving itself done on CPU, not GPU.

Uniqueness: https://math.stackexchange.com/questions/1113622/uniqueness-of-solutions-to-the-wave-equation

======= Navier-Stokes equations
{c}

https://en.wikipedia.org/wiki/Navier–Stokes_equations

======== Navier-Stokes existence and smoothness
{c}

https://en.wikipedia.org/wiki/Navier–Stokes_existence_and_smoothness

One of the \x[millennium-prize-problems].

See also: \x[existence-and-uniqueness-of-solutions-of-partial-differential-equations].

===== Existence and uniqueness of solutions of partial differential equations

If you have a PDE that models \x[physics][physical phenomena], it is fundamental that:
* there must exist a solution for every physically valid initial condition, otherwise it means that the equation does not describe certain cases of reality
* the solution must be unique, otherwise how are we to choose between the multiple solutions?

Unlike for \x[ordinary-differential-equation]{p} which have the https://en.wikipedia.org/wiki/Picard–Lindelöf_theorem[Picard–Lindelöf theorem], the existence and uniqueness of solution is not well solved for PDEs.

For example, \x[navier-stokes-existence-and-smoothness] was one of the \x[millennium-prize-problems].

===== System of partial differential equations

In many important applications, what you have to solve is not just a single \x[partial-differential-equation], but multiple partial differential equations coupled to each other. This is the case for many key PDEs including:
* \x[maxwell-s-equations], see: \x[explicit-scalar-form-of-the-maxwell-s-equations]{full}
* \x[navier-stokes-equations]
* \x[schrodinger-equation], see: \x[why-are-complex-numbers-used-in-the-schrodinger-equation]{full}

===== Classification of second order partial differential equations into elliptic, parabolic and hyperbolic

One major application of this classification is that different \x[boundary-condition]{p} are suitable for different types of \x[partial-differential-equation]{p} as explained at: \x[which-boundary-conditions-lead-to-existence-and-uniqueness-of-a-second-order-pde].

Bibliography:
* https://math.stackexchange.com/questions/1090299/why-are-elliptic-parabolic-hyperbolic-pdes-called-elliptic-parabolic-hyperb

====== Elliptic partial differential equation

https://en.wikipedia.org/wiki/Elliptic_partial_differential_equation

====== Parabolic partial differential equation

https://en.wikipedia.org/wiki/Parabolic_partial_differential_equation

====== Hyperbolic partial differential equation

https://en.wikipedia.org/wiki/Hyperbolic_partial_differential_equation

====== Which boundary conditions lead to existence and uniqueness of a second order PDE

http://www.cns.gatech.edu/~predrag/courses/PHYS-6124-12/StGoChap6.pdf 6.1 "Classification of PDE's" clarifies which boundary conditions are needed for existence and uniqueness of each \x[classification-of-second-order-partial-differential-equations-into-elliptic-parabolic-and-hyperbolic][type of second order of PDE]:
* \x[elliptic-partial-differential-equation] and \x[parabolic-partial-differential-equation]: \x[dirichlet-boundary-condition] or \x[neumann-boundary-condition]
* \x[hyperbolic-partial-differential-equation]: \x[cauchy-boundary-condition]

===== Boundary condition

https://en.wikipedia.org/wiki/Boundary_value_problem

====== Dirichlet boundary condition
{c}

https://en.wikipedia.org/wiki/Dirichlet_boundary_condition

Specifies fixed values.

Can be used for \x[elliptic-partial-differential-equation]{p} and \x[parabolic-partial-differential-equation]{p}.

Numerical examples:
* with \x[freefem]:
  * \x[heat-dirichlet-1d-freefem]
  * \x[heat-dirichlet-2d-freefem]

====== Neumann boundary condition
{c}

https://en.wikipedia.org/wiki/Neumann_boundary_condition

Specifies the derivative in a direction normal to the boundary.

Can be used for \x[elliptic-partial-differential-equation]{p} and \x[parabolic-partial-differential-equation]{p}.

======= Cauchy boundary condition
{c}

https://en.wikipedia.org/wiki/Cauchy_boundary_condition

Sets both a \x[dirichlet-boundary-condition] and a \x[neumann-boundary-condition] for a single part of the boundary.

Can be used for \x[hyperbolic-partial-differential-equation]{p}.

We understand intuitively that this imposes stricter requirements on solutions, which makes it easier to guarantee uniqueness, but also harder to have existence. TODO intuitively why hyperbolic need this extra level of restriction.

======= Robin boundary condition
{c}

https://en.wikipedia.org/wiki/Robin_boundary_condition

Linear combination of a \x[dirichlet-boundary-condition] and \x[neumann-boundary-condition] at each point of the boundary.

Examples:
* \x[heat-equation] when metal plaque is immersed in a large external environment of fixed temperature.

  In this case, the normal derivative at the boundary is proportional to the difference between the temperature of the boundary and the fixed temperature of the external environment.

  The result as time tends to infinity is that the temperature of the plaque tends to that of the environment.

  Shown a solved example in the \x[freefem] tutorial: https://doc.freefem.org/tutorials/thermalConduction.html (https://github.com/FreeFem/FreeFem-doc/blob/1d5996d8b891fd553fd318321249c2c30f693fc3/source/tutorials/thermalConduction.rst)

======= Open boundary condition

In the context of wave-like equations, an open-boundary condition is one that "lets the wave go through without reflection".

This condition is very useful when we want to simulate infinite domains with a numerical method. \x[ciro-santilli] wants to do this all the time when trying to come up with demos for his \x[physics] writings.

Here are some resources that cover such boundary conditions:
* https://www.asc.tuwien.ac.at/~arnold/pdf/graz/graz.pdf lots of slides
* http://hplgit.github.io/wavebc/doc/pub/._wavebc_cyborg002.html mentions them and gives a 1D formula. It mentions that things get complicated in 2D and 3D TODO why.

  The other page: http://hplgit.github.io/wavebc/doc/pub/._wavebc_cyborg003.html shows solution demos.

======= Mixed boundary condition

https://en.wikipedia.org/wiki/Mixed_boundary_condition

Multiple \x[boundary-condition]{p} for different parts of the boundary.

====== Theoretical methods to solve partial differential equation

======= Separation of variables

https://en.wikipedia.org/wiki/Separation_of_variables

Naturally leads to the \x[fourier-series], see: \x[solving-partial-differential-equations-with-the-fourier-series].

====== Numerical methods to solve partial differential equation

The \x[finite-element-method] is one of the most common ways to solve PDEs in practice.

======= Variational formulation of a partial differential equation

https://www.cis.upenn.edu/~cis515/cis515-12-sl11.pdf

Used for example in \x[freefem] and \x[fenics-project] as the input description of the PDEs, TODO why.

======== Weak solution

https://en.wikipedia.org/wiki/Weak_solution

======= Finite element method

https://en.wikipedia.org/wiki/Finite_element_method

Used to solve \x[partial-differential-equation].

TODO understand, give intuition, justification of bounds and JavaScript demo.

===== Partial differential equation solver

====== FreeFem

https://en.wikipedia.org/wiki/FreeFem%2B%2B

https://freefem.org/

https://github.com/FreeFem/FreeFem-sources

Started in 1987 and written in Pascal, by the French from \x[pierre-and-marie-curie-university], the French are really strong in \x[numerical-analysis].

Ciro wasn't expecting it to be as old. Ported to C++ in 1992.

The fact that French wrote it can be seen in the documentation, for example https://doc.freefem.org/tutorials/index.html uses file extension `mycode.edp` instead of `mycode.pde` where `dep` stands for "\a[https://fr.wikipedia.org/wiki/Équation_aux_dérivées_partielles][Équation aux dérivées partielles]".

Besides the painful build, using FreeFem is relatively simple, as can be seen from the examples on the website.

They do use a \x[domain-specific-language] on the examples, which appears to be the main/only interface, which is a bad thing, Ciro would rather have a Python API as the "main API", which is more the approach taken by the \x[fenics-project], but so be it. This DSL business means that you always stumble upon basic stuff you want to do but can't, and then you have to think about how to share data between the simulation and the plotting. The plotting notably is super complex and they can't implement all of what people want, upstream examples often offload that to gnuplot. This is potentially a big advantage of \x[fenics-project].

It nice though that they do have some graphics out of the box, as that allows to quickly debug common problems.

Uses \x[variational-formulation-of-a-partial-differential-equation], which is not immediately obvious to beginners? The introduction https://doc.freefem.org/tutorials/poisson.html gives an ultra quick example, but your are mostly on your own with that.

On Ubuntu 20.04, the `freefem` is a bit out-of-date (3.5.8, there isn't even a tag for that in the \x[github] repo, and refs/tags/release_3_10 is from 2010!) and fails to run the examples from the website. It did work with the example package though, but the output does not have color, which makes me sad :-)
``
sudo apt install freefem freefem-examples
freefem /usr/share/doc/freefem-examples/heat.pde
``

So let's just compile the latest v4.6 it from source, on Ubuntu 20.04:
``
sudo apt build-dep freefem
git clone https://github.com/FreeFem/FreeFem-sources
cd FreeFem-sources
# Post v4.6 with some fixes.
git checkout 3df0e2370d9752801ac744b11307b14e16743a44

# Won't apply automatically due to tab hell.
# https://superuser.com/questions/607410/how-to-copy-paste-tab-characters-via-the-clipboard-into-terminal-session-on-gnom
git apply <<'EOS'
diff --git a/3rdparty/ff-petsc/Makefile b/3rdparty/ff-petsc/Makefile
index dc62ab06..13cd3253 100644
--- a/3rdparty/ff-petsc/Makefile
+++ b/3rdparty/ff-petsc/Makefile
@@ -204,7 +204,7 @@ $(SRCDIR)/tag-make-real:$(SRCDIR)/tag-conf-real
 $(SRCDIR)/tag-install-real :$(SRCDIR)/tag-make-real
     cd $(SRCDIR) && $(MAKE) PETSC_DIR=$(PETSC_DIR) PETSC_ARCH=fr install
     -test -x "`type -p otool`" && make changer
-    cd $(SRCDIR) && $(MAKE) PETSC_DIR=$(PETSC_DIR) PETSC_ARCH=fr check
+    #cd $(SRCDIR) && $(MAKE) PETSC_DIR=$(PETSC_DIR) PETSC_ARCH=fr check
     test -e $(DIR_INSTALL_REAL)/include/petsc.h
     test -e $(DIR_INSTALL_REAL)/lib/petsc/conf/petscvariables
     touch $@
@@ -293,7 +293,6 @@ $(SRCDIR)/tag-tar:$(PACKAGE)
     -tar xzf $(PACKAGE)
     patch -p1 < petsc-hpddm.patch
 ifeq ($(WIN32DLLTARGET),)
-    patch -p1 < petsc-metis.patch
 endif
     touch $@
 $(PACKAGE):
EOS

autoreconf -i
./configure --enable-download --enable-optim --prefix="$(pwd)/../FreeFem-install"
./3rdparty/getall -a
cd 3rdparty/ff-petsc
make petsc-slepc
cd -
./reconfigure
make -j`nproc`
make install
cd ../FreeFem-install
PATH="${PATH}:$(pwd)/bin" ./bin/FreeFem++ ../FreeFem-sources/examples/tutorial/
``

Ciro's initial build experience was a bit painful, possibly because it was done on a relatively new Ubuntu 20.04 as of June 2020, but in the end it worked: https://github.com/FreeFem/FreeFem-sources/issues/141

The main/only dependency appears to be https://en.wikipedia.org/wiki/Portable,_Extensible_Toolkit_for_Scientific_Computation[PETSc] which is used by default, which is a good sign, as that library appears to automatically parallelize a single input to several backends (single CPU, MPI, GPU) so you know things will scale up as you reach simulations.

The problem is that it compiling such a complex dependency opens up much more room for hard to solve compilation errors, and takes a lot more time.

======= FreeFem examples

======== heat-dirichlet.1d.freefem

1-dimensional \x[heat-equation] example with \x[dirichlet-boundary-condition]
* \a[freefem/heat-dirichlet.1d.freefem]

======== heat-dirichlet-2d-freefem

2-dimensional \x[heat-equation] example with \x[dirichlet-boundary-condition]:
* \a[freefem/heat-dirichlet-2d-freefem]

====== FEniCS Project

https://en.wikipedia.org/wiki/FEniCS_Project

https://fenicsproject.org/

One big advantage over \x[freefem] is that it uses plain old \x[python-programming-language] Python to describe the problems instead of a \x[domain-specific-language]. \x[matplotlib] is used for plotting by default, so we get full Python power out of the box!

Also uses \x[variational-formulation-of-a-partial-differential-equation] like \x[freefem] which is a pain.

One downside is that its documentation is a Springer published PDF https://link.springer.com/content/pdf/10.1007%2F978-3-319-52462-7.pdf which is several years out-of-date (tested with FEnics 2016.2. Newbs. This causes problems e.g.: https://stackoverflow.com/questions/53730427/fenics-did-not-show-figure-nameerror-name-interactive-is-not-defined/57390687#57390687

\x[system-of-partial-differential-equations] are mentioned at: https://link.springer.com/content/pdf/10.1007%2F978-3-319-52462-7.pdf 3.5 "A system of advection–diffusion–reaction equations". You don't need to manually iterate between the equations.

On Ubuntu 20.04 as per https://fenicsproject.org/download/
``
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:fenics-packages/fenics
sudo apt-get update
sudo apt-get install --no-install-recommends fenics
sudo apt install fenics
python3 -m pip install -u matplotlib
``
Before 2020-06, it was failing with:
``
E: The repository 'http://ppa.launchpad.net/fenics-packages/fenics/ubuntu focal Release' does not have a Release file.
``
but they seem to have created the Ubuntu 20.04 package as of 2020-06, so it now worked! https://askubuntu.com/questions/866901/what-can-i-do-if-a-repository-ppa-does-not-have-a-release-file

TODO heat equation hello world.

======= Hans Petter Langtangen
{c}

https://en.wikipedia.org/wiki/Hans_Petter_Langtangen

GitHub: https://github.com/hplgit

It should be mentioned that when you strat Googling for \x[partial-differential-equation][PDE] stuff, you will reach Han's writings a lot under his \x[github-pages]: http://hplgit.github.io/[], and he is one of the main authors of the \x[fenics-project].

Unfortunately he died of cancer in 2016, shame, he seemed like a good educator.

He also published to \x[github] pages with his own crazy \x[markdown]-like multi-output markup language: https://github.com/hplgit/doconce[].

Rest in peace, Hans.

==== Taylor series
{c}

https://en.wikipedia.org/wiki/Taylor_series

=== Algebra

==== Group (mathematics)

https://en.wikipedia.org/wiki/Group_(mathematics)

===== Subgroup generated by a group

https://en.wikipedia.org/wiki/Generating_set_of_a_group

===== Important mathematical groups

====== Important discrete mathematical groups

======= Cyclic group
{title2=$\cyclicGroup{n}$}

https://en.wikipedia.org/wiki/Cyclic_group

======= Alternating group
{title2=$\alternatingGroup{n}$}

https://en.wikipedia.org/wiki/Alternating_group

======= Wallpaper group

https://en.wikipedia.org/wiki/Wallpaper_group

17 of them.

======= Space group

https://en.wikipedia.org/wiki/Space_group

All possible repetitive crystal structures!

219 of them.

====== Important continuous mathematical groups

======= General linear group
{title2=$GL(n)$}

https://en.wikipedia.org/wiki/General_linear_group

Invertible matrices.

Non invertible are excluded "because" otherwise it would not form a \x[group-mathematics] (every element must have an inverse).

======= Special linear group
{title2=$SL(n)$}

https://en.wikipedia.org/wiki/Special_linear_group

Specials sub case of the \x[general-linear-group] when the determinant equals exactly 1.

======= Orthogonal group
{title2=$O(n)$}

https://en.wikipedia.org/wiki/Orthogonal_group

Intuitive definition: real group of rotations + reflections.

Mathematical definition: group of \x[orthogonal-matrix]{p}.

Has 2 disconnected: pieces: one with determinant +1 (which is is a subgroup known as the \x[special-orthogonal-group]) and the other with determinant -1.

If a reflection is done, the determinant is -1.

Note however that having the determinant plus or minus 1 is not a definition however: there are non-orthogonal groups with determinant plus or minus 1. This is just a property.

As a result it \x[group-isomorphism][isomorphic to] the \x[direct-product-of-groups][direct product] of the special orthogonal group by the \x[cyclic-group] of order 2:
$$
O(n) \isomorphic SO(n) \times \cyclicGroup{2}
$$

A low dimensional example:
$$
O(1) \isomorphic \cyclicGroup(2)
$$
because you can only do two things: to flip or not to filp the line around zero.

======== Special orthogonal group
{title2=$SO(n)$}

Rotations.

Like \x[orthogonal-group] but without reflections. So it is a "special" version of the orthogonal group.

======= Unitary group
{title2=$U(n)$}

https://en.wikipedia.org/wiki/Unitary_group

\x[group-mathematics][Group] of the \x[unitary-matrix]{p}.

\x[complex-number][Complex] analogue of the \x[orthogonal-group].

One notable difference from the orthogonal group however is that the unitary group is connected "because" its determinant is not fixed to two disconnected values 1/-1, but rather goes around in a continuous \x[unit-circle]. $U(1)$ \i[is] the unit circle.

======== Unitary group of dimension 2
{title2=$U(2)$}

Diffeomorphic to the 3 sphere.

======== Unit circle

https://en.wikipedia.org/wiki/Unit_circle

The $U(1)$ \x[unitary-group] is one very over-generalized way of looking at it :-)

======== Special unitary group
{title2=$SU(n)$}

https://en.wikipedia.org/wiki/Special_unitary_group

The complex analogue of the \x[special-orthogonal-group], i.e. the subgroup of the \x[unitary-group] with determinant equals exactly 1 instead of an arbitrary complex number with absolute value equal 1 as is the case for the unitary group.

======= Lorentz group
{title2=$SO(1,3)$}

https://en.wikipedia.org/wiki/Lorentz_group

==== Group isomorphism

https://en.wikipedia.org/wiki/Group_isomorphism

===== Group homomorphism

https://en.wikipedia.org/wiki/Group_homomorphism

Like isomorphism, but does not have to be one-to-one: multiple different inputs can have the same output.

The image is as for any function smaller or equal in size as the domain of course.

This brings us to the key intuition about group homomorphisms: they are a way to split out a larger group into smaller groups that retains a subset of the original structure.

As shown by the \x[fundamental-theorem-on-homomorphisms], each group homomorphism is fully characterized by a \x[normal-subgroup] of the domain.

====== Fundamental theorem on homomorphisms

https://en.wikipedia.org/wiki/Fundamental_theorem_on_homomorphisms

Ultimate explanation: https://math.stackexchange.com/questions/776039/intuition-behind-normal-subgroups/3732426#3732426

Links \x[group-homomorphism] and the \x[quotient-group] via \x[normal-subgroup]{p}.

====== Kernel (algebra)

https://en.wikipedia.org/wiki/Kernel_(algebra)

==== Direct product of groups

https://en.wikipedia.org/wiki/Direct_product_of_groups

==== Quotient group

https://en.wikipedia.org/wiki/Quotient_group

Does not have to be isomorphic to a subgroup:
* https://www.mathcounterexamples.net/a-semi-continuous-function-with-a-dense-set-of-points-of-discontinuity/
* https://math.stackexchange.com/questions/2498922/is-a-quotient-group-a-subgroup
This is one of the reasons why the analogy between \x[simple-group]{p} of finite groups and \x[prime-number]{p} is limited.

===== Subquotient group

https://en.wikipedia.org/wiki/Subquotient

Quotient of a subgroup H of G by a \x[normal-subgroup] of the subgroup H.

That \x[normal-subgroup] does not have have to be a normal subgroup of G.

As an overkill example, the happy family are subquotients of the \x[monster-group], but the monster group is simple.

===== Relationship between the quotient group and direct products

Although quotients look a bit real number division, there are some important differences with the "group analog of multiplication" of \x[direct-product-of-groups].

If a group is isomorphic to the \x[direct-product-of-groups], we can take a quotient of the product to retrieve one of the groups, which is somewhat analogous to division: https://math.stackexchange.com/questions/723707/how-is-the-quotient-group-related-to-the-direct-product-group

The "converse" is not always true however: a group does not need to be isomorphic to the product of one of its \x[normal-subgroup]{p} and the associated \x[quotient-group]. The wiki page provides an example:
\Q[
Given G and a normal subgroup N, then G is a group extension of G/N by N. One could ask whether this extension is trivial or split; in other words, one could ask whether G is a direct product or semidirect product of N and G/N. This is a special case of the extension problem. An example where the extension is not split is as follows: Let $G = Z4 = {0, 1, 2, 3}$, and $ = {0, 2}$ which is isomorphic to Z2. Then G/N is also isomorphic to Z2. But Z2 has only the trivial automorphism, so the only semi-direct product of N and G/N is the direct product. Since Z4 is different from Z2 × Z2, we conclude that G is not a semi-direct product of N and G/N.
]

TODO find a less minimal but possibly more important example.

This is also semi mentioned at: https://math.stackexchange.com/questions/1596500/when-is-a-group-isomorphic-to-the-product-of-normal-subgroup-and-quotient-group

I think this might be equivalent to why the \x[group-extension-problem] is hard. If this relation were true, then taking the direct product would be the only way to make larger groups from normal subgroups/quotients. But it's not.

===== Normal subgroup

https://en.wikipedia.org/wiki/Normal_subgroup

Ultimate explanation: https://math.stackexchange.com/questions/776039/intuition-behind-normal-subgroups/3732426#3732426

Only normal subgroups can be used to form \x[quotient-group]{p}: their key definition is that they plus their cosets form a group.

Intuition:
* https://math.stackexchange.com/questions/776039/intuition-behind-normal-subgroups
* https://math.stackexchange.com/questions/1014535/is-there-any-intuitive-understanding-of-normal-subgroup/1014791

One key intuition is that "a normal subgroup is the \x[kernel-algebra]" of a \x[group-homomorphism], and the normal subgroup plus cosets are isomorphic to the image of the isomorphism, which is what the \x[fundamental-theorem-on-homomorphisms] says.

Therefore "there aren't that many \x[group-homomorphism]", and a normal subgroup it is a concrete and natural way to uniquely represent that homomorphism.

The best way to think about the, is to always think first: what is the homomorphism? And then work out everything else from there.

====== Simple group

https://en.wikipedia.org/wiki/Simple_group

Does not have any non-trivial \x[normal-subgroup].

And therefore, going back to our intuition that due to the \x[fundamental-theorem-on-homomorphisms] there is one normal group per homomorphism, a simple group is one that has no non-trivial homomorphisms.

====== Classification of finite groups

As shown in \x[video-simple-groups-abstract-algebra-published-by-socratica-on-2018-01-10], this can be split up into two steps:
* \x[classification-of-simple-finite-groups]: done
* \x[group-extension-problem]
This split is sometimes called the "Jordan-Hölder program" in reference to the authors of the \x[jordan-holder-theorem].

Good list to start playing with: https://en.wikipedia.org/wiki/List_of_small_groups

History: https://math.stackexchange.com/questions/1587387/historical-notes-on-the-jordan-h%C3%B6lder-program

======= Classification of simple finite groups

http://en.wikipedia.org/wiki/Classification_of_finite_simple_groups

\x[ciro-santilli] is very fond of this one: \x[the-beauty-of-mathematics].

How can so much complexity come out from so few rules?

How can the proof be so long (thousands of papers)?? Surprise!!

And to top if all off, the awesomely named https://en.wikipedia.org/wiki/Monster_group[monster group] could have a relationship with string theory via the https://en.wikipedia.org/wiki/Monstrous_moonshine[monstrous moonshine]?

\Video[https://www.youtube.com/watch?v=jhVMBXl5jTA]
{title="Simple Groups - Abstract Algebra" published by Socratica on 2018-01-10.}
{description=Good quick overview.}

======== Monster group

https://en.wikipedia.org/wiki/Monster_group

======== Jordan-Holder Theorem

https://en.wikipedia.org/wiki/Composition_series#Uniqueness:_Jordan–Hölder_theorem

Uniqueness results for the \x[composition-series] of a group.

======== Composition series

https://en.wikipedia.org/wiki/Composition_series

======= Group extension problem

https://en.wikipedia.org/wiki/Group_extension

Besides the understandable Wikipedia definition, \x[video-simple-groups-abstract-algebra-published-by-socratica-on-2018-01-10] gives an understandable one:
\Q[
Given a finite group $F$ and a simple group $S$, find all groups $G$ such that $N$ is a \x[normal-subgroup] of $G$ and $G/N = S$.
]

We don't really know how to make up larger groups from smaller simple groups, which would complete the \x[classification-of-finite-groups]:
* https://math.stackexchange.com/questions/25315/how-is-a-group-made-up-of-simple-groups

In particular, this is hard because you can't just take the \x[direct-product-of-groups] to retrieve the original group: \x[relationship-between-the-quotient-group-and-direct-products]{full}.

=== Numerical analysis

https://en.wikipedia.org/wiki/Numerical_analysis

Techniques to get numerical approximations to numeric \x[mathematics][mathematical] problems.

The entire field comes down to estimating the true values with a known error bound, and creating algorithms that make those error bounds asymptotically smaller.

Not the most beautiful field of pure \x[mathematics], but fundamentally useful since we can't solve almost any \x[computational-physics][useful equation] without computers!

The solution visualizations can also provide valuable intuition however.

Important numerical analysis problems include solving:
* \x[partial-differential-equation]{p}

=== Geometry

https://en.wikipedia.org/wiki/Geometry

==== Sphere

===== 3-sphere
{title2=$S^3$}

https://en.wikipedia.org/wiki/3-sphere

Diffeomorphic to the \x[unitary-group-of-dimension-2].

==== Four dimensional space

https://en.wikipedia.org/wiki/Four-dimensional_space

Important 4D spaces:
* \x[3-sphere]

===== Visualizing 4D

Simulate it. Just simulate it.

\Video[http://youtube.com/watch?v=0t4aKJuKP0Q]
{title="4D Toys: a box of four-dimensional toys, and how objects bounce and roll in 4D." puslibhed by "Miegakure" on 2017-06-02.}

==== Polytope

https://en.wikipedia.org/wiki/Polytope

===== Regular polytope

https://en.wikipedia.org/wiki/Regular_polytope

TODO understand and explain definition.

====== Platonic solids

https://en.wikipedia.org/wiki/Platonic_solid#Higher_dimensions

3D case of \x[regular-polytope].

Their \x[the-beauty-of-mathematics][beauty is a classification type result] as stated at \x[classification-of-regular-polytopes].

https://en.wikipedia.org/wiki/Platonic_solid#Topological_proof

====== Classification of regular polytopes

http://en.wikipedia.org/wiki/Regular_polytope#Classification_and_description

The 3D regular convex polyhedrons are super famous, have the name: \x[platonic-solids], and have been known since antiquity. In particular, there are only 5 of them.

The counts are:
\Table[
|| Dimension
|| Count

| 2
| Infinite

| 3
| 5

| 4
| 6

| >4
| 3
]
{title=Number of regular polytopes per dimension.}

The cool thing is that the 3 that exist in 5+ dimensions are all of one of the three families:
* http://en.wikipedia.org/wiki/Simplex[simplex]: triangle, tetrahedron.

  Non-regular description: take convex hull take D + 1 vertices that are not on a single D-plan.

* http://en.wikipedia.org/wiki/Hypercube[hypercube]: square, cube. 4D case known as tesseract.

  Convex hull of all $(-1, 1)^D$ (Cartesian product power) D-tuples.

  Two are linked iff they differ by a single number. So each vertex has D neighbors.

* http://en.wikipedia.org/wiki/Cross-polytope[cross polytope]: square, octahedron.

  All permutations of $(±1, 0, 0, …, 0)$

  Each edge E is linked to every other edge, except it's opposite -E.

Then, the 2 3D missing ones have 4D analogues and the sixth one in 4D does not have a 3D analogue: https://en.wikipedia.org/wiki/24-cell[the 24-cell]. Yes, this is the kind of irregular stuff \x[ciro-santilli] lives \x[the-beauty-of-mathematics][for].

=== Number theory

https://en.wikipedia.org/wiki/Number_theory

==== Prime number

https://en.wikipedia.org/wiki/Prime_number

=== Mathematics bibliography

https://github.com/vEnhance/napkin Evan Chen's (陳誼廷) Infinite Napkin. 800+ page PDF with source on \x[github] claiming to try and teach the beauty of modern maths for high schoolers. Fantastic project!!!

=== Mathematician

https://en.wikipedia.org/wiki/Mathematician

Poet, scientists and warriors all in one? https://en.wikipedia.org/wiki/180_Degrees_South:_Conquerors_of_the_Useless[Conquerors of the useless].

A wise teacher from \x[university-of-sao-paulo-brazil] once told the class \x[ciro-santilli] attended an anecdote about his life:
\Q[
I used to want to learn Mathematics.

But it was very hard.

So in the end, I became an engineer, and found an engineering solution to the problem, and married a Mathematician instead.
]

It turned out that, about 10 years later, Ciro ended up following this advice, unwittingly.

\Image[https://web.archive.org/web/20190925220347if_/https://imgs.xkcd.com/comics/purity.png]
{id=image-xkcd-435-fields-arranged-by-purity-2}
{title=xkcd 435: Fields arranged by purity.}
{source=https://xkcd.com/435/}

==== High flying bird vs gophers

Ciro once read that there are two types of mathematicians/scientists (he thinks it was comparing Einstein to some Jack of all trades polymath who didn't do any new discoveries):
* high flying birds, who know a bit of everything, feel the beauty of each field, but never dig deep in any of them
* gophers, who dig all the way down, on a single subject, until they either get the \x[nobel-prize], or work on the wrong problem and waste their lives

Ciro is without a doubt the bird type. Perhaps the ultimate scientist is the one who can combine both aspects in the right amount.

Ciro gets bored of things very quickly.

Once he understands the general principles, if the thing is not \x[the-next-big-thing], Ciro considers himself satisfied without all the nitty gritty detail, and moves on to the next attempt.

This was very clear for example after Ciro achieved \x[linux-kernel-module-cheat]: he now had the perfect setup to learn all the Linux kernel shady details but at the same time after all those years he finally felt that "he could do it, so that was enough", and soon moved to other projects.

If Ciro had become a scientist, he would write \x[the-side-effects-of-ambitious-goals-are-often-the-most-valuable-thing-achieved][the best review papers ever], just like in the current reality he \x[ciro-santilli-s-stack-overflow-contributions][writes amazing programming tutorials on Stack Overflow].

=== Millennium Prize Problems
{c}

https://en.wikipedia.org/wiki/Millennium_Prize_Problems

\x[ciro-santilli] would like to fully understand the statements and motivations of each the problems!

Easy to understand the motivation:
* \x[navier-stokes-existence-and-smoothness] is basically the only problem that is really easy to understand the statement and motivation :-)
* \x[p-versus-np-problem] well, we all know the answer for this: either false or undecidable.

Hard to understand the motivation!
* \x[riemann-hypothesis]: a bunch of results on prime numbers, and therefore possible applications to cryptography

  Of course, everything of interest has already been proved conditionally on it, and the likely "true" result will in itself not have any immediate applications.

  As is often the case, the only usefulness would be possible new ideas from the proof technique, and people being more willing to prove stuff based on it without the risk of the hypothesis being false.
* \x[yang-mills-existence-and-mass-gap]: this one has to do with findind/proving the existence/? of a more decent formalization of \x[quantum-field-theory] that does not resort to tricks like perturbation theory and \x[effective-field-theory] with a random cutoff value

  This is important because the best theory of light and electrons (and therefore chemistry and material science) that we have today, \x[quantum-electrodynamics], is a \x[quantum-field-theory].

== Prizes

=== Nobel Prize
{c}

https://en.wikipedia.org/wiki/Nobel_Prize

And the articles that really matter:
* https://en.wikipedia.org/wiki/List_of_Nobel_laureates_by_country
* https://en.wikipedia.org/wiki/List_of_Nobel_laureates_by_university_affiliation

\x[web-of-stories] contains amazing interviews with many winners.

=== Fields Medal
{c}

https://en.wikipedia.org/wiki/Fields_Medal

The \x[nobel-prize] of \x[mathematics]!

=== Turing Award
{c}

https://en.wikipedia.org/wiki/Turing_Award

The \x[nobel-prize] of \x[computer] \x[software] or \x[computer-hardware][hardware]!

More like a "lifetime achievement" though, rather than the Nobel Prize, which tends to be for more specific achievements.

== Art

https://en.wikipedia.org/wiki/Art

Stuff that is beautiful but useless because it does not make food or houses cheaper.

Or from \x[ciro-santilli-s-best-random-thoughts]:
\Q[Without technology, one cannot survive. Without art, one cannot live.]

But that sure enough has a \x[jesus] semi-precursor, and likely many others from Matthew 4:4:
\Q[Man shall not live on bread alone, but on every word that comes from the mouth of God.]

There is some art however that lives in the fine intersection between beauty and usefulness:
* \x[mathematics]
* \x[physics]
* \x[computer]

=== Game

https://en.wikipedia.org/wiki/Game

==== Video game

https://en.wikipedia.org/wiki/Video_game

\x[ciro-santilli] used to play video game when he was young. But after he reached 18 he got bored of them.

The problem is that no matter how you look at, the \x[ciro-santilli-s-selfish-desires][how to become famous in the real world game] is just always more interesting and fulfilling.

Therefore adult Ciro enjoys only two types of video game content. Watching videos of:
* \x[tool-assisted-speedrun], Ciro's favorite by far
* manual speed running evolution videos, as are just probabilistic TAS with human achievable reflex constraints. And similarly, competitive games, from a \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development]["could a computer play this better than a human"] point of view.
* \x[magic-the-gathering]

The aspect Ciro enjoys about non-PvP games is atmosphere. Not as conveyed by useless story telling, but as conveyed by music and graphics, and the context deep idea. Legend of Zelda and Metroid come to mind.

And too many games make the sins of dependency of dexterity, no save states, how do I skip this boring part, or jump straight to the beautiful one?

Ciro once commented that the best game is an infinitely hard one, where you can progress infinitely. To which hist friend J. replied: "fine, so the perfect game for you is \x[mathematics]. Stage one: prove the \x[riemann-hypothesis]!".

It also doesn't help if you are already typing on a computer all day long on your job. Hands get tired. Eyes have an infinite capacity to consume useless \x[the-best-youtube-channels][YouTube videos] however. Medically proved.

As a result, Ciro just watches videos about video games. Notably games he played when he was a teenager and already understand the rules for.

And things got even worse as Ciro attained his \x[write-free-books-to-get-famous-website-motivation][Open Source Enlightenment], and started to feel bad about playing \x[open-source-video-game][any game that is not open source].

\Image[Five_year_old_Ciro_Santilli_playing_NES_on_a_joystick.jpg]
{title=Five year old Ciro Santilli playing https://en.wikipedia.org/wiki/Nintendo_Entertainment_System[NES] on a joystick.}
{description=He would get really mad because he could not finish those https://en.wikipedia.org/wiki/Nintendo_hard[insanely hard games]. Desperate, his parents would have to call older kids from the neighbourhood to help out. Pro tip from the future: the classic controller would almost always have been a more efficient controller. Maybe this kind of crap shapes one's future?}

===== Tool-assisted speedrun
{title2=TAS}

https://en.wikipedia.org/wiki/Tool-assisted_speedrun

To some extent, the ultimate achievement of a TAS is to achieve \x[arbitracy-code-execution] (ACE) on a game, although this has been becoming rarer and rarer in newer consoles. The \x[nintendo-64] is the current interesting ACE discovery frontier as of 2020.

Post ACE, you then get into more subtle categories which tend to be more geometric clipping through wall glitches, but those can still be fun.

The most beautiful TAS content ever made are:
* \x[super-mario-64]
  * no-A press 120 stars attempts by https://en.wikipedia.org/wiki/Pannenkoek2012

    2018 video outlining the 18 unique A presses missing for 120-stars at the time: https://www.youtube.com/watch?v=RJaL5QOq590

    One of the most elaborate explained videos: https://www.youtube.com/watch?v=kpk2tdsPh0A "SM64 - Watch for Rolling Rocks - 0.5x A Presses"
  * 1-key any percent run:
    * 2016 emulator run: https://www.youtube.com/watch?v=TkOkJvLKxUY
    * AGDQ 2018 commented TASBOT console verification: https://www.youtube.com/watch?v=xvWOLT9G6tM
    * Why we need one key: https://gaming.stackexchange.com/questions/249969/in-mario-64-speedruns-why-are-the-keys-necessary/351595#351595
  * related: \x[super-mario-64-reverse-engineering-project]
* Super Mario World for the SNES arbitrary code execution
  * https://www.youtube.com/watch?v=OPcV9uIY5i4 with in-game programmed Pong and Snake, 2014
  * https://www.youtube.com/watch?v=HxFh1CJOrTU Seth Bling does the credit warp manually in about 3 minutes, 2015. Later reduced to less than 1 minute: https://www.youtube.com/watch?v=Jf9i7MjViCE
  * https://www.youtube.com/watch?v=voL3e0iqugo ACE was initially not forbidden in 11 exit rules, so Seth made an in-game manual ACE that programs an in-game accessible "exit stage now" functionality!!! This was later forbidden of course, but it was fun while it lasted.
    * then he injected a Flappy Bird clone manually!!! https://www.youtube.com/watch?v=hB6eY73sLV0, 2016
* Ocarina of time
  * 2020 ACE via https://cwe.mitre.org/data/definitions/416.html[use after free] including a non-TAS credit warp faster than the 2016 wrong glitch: https://www.polygon.com/2020/1/24/21080568/zelda-ocarina-of-time-arwing-spawn-video-speedrun-credits-ace-cheat-code ACE later reproduced in Majora's Mask, which has a similar game engine.
  * 2016 Zelda Ocarina of Time wrong warp glitch:
    * https://www.youtube.com/watch?v=uCO0jU66g3g 2016 video
  * https://www.youtube.com/watch?v=Gso4MuNSuV8 EZScape explains the glitch, 2016
* Zelda Majora's Mask debug menu
  * https://www.youtube.com/watch?v=2wdchm5Uwp4&t=2086s first video
  * https://www.youtube.com/watch?v=CCubcEgnD6A overview

It is also amusing to see http://tasvideos.org/ConsoleVerificationGuide.html[console verification] of emulations, e.g.: \x[video-super-mario-64-120-stars-in-1-20-41-52-console-verified-published-by-soul-umbreon-on-2012-10-26].

Ciro also likes to watch commented manual speedruns of games as a way of experiencing the game at a high level without spending too much time on it, often from https://en.wikipedia.org/wiki/Games_Done_Quick[Games Done Quick]. Their format is good because it generally showcases one player focusing more on the gameplay, and three couch commentators to give context, that's a good setup.

\Video[http://youtube.com/watch?v=BFBGWrGT1E8]
{title="Super Mario 64 '120 Stars' in 1:20:41.52 Console Verified" published by Soul Umbreon on 2012-10-26.}

===== Open source video game

Parent section: \x[open-source-software].

Why would anyone ever waste time playing a closed source game, when this will inevitably lead to endless hours of decompilation down the line when you want to:
* fully understand how the game works, notably to help with \x[tool-assisted-speedrun][TASsing]
* improve the game's flaws as devs drop support (\a[https://www.vg247.com/2018/09/14/isnt-ps4-xbox-switch-port-final-fantasy-8-preservation-may-answer/][or lose source code and have to late \x[reverse-engineering][reverse-engineer] their own fucking game]?) :-)

Those who devote their time to the \x[art][useless] development of open source video games, \x[integrated-development-environment][before we even have decent open source development tooling], will, without a doubt, have their place in Heaven.

* tower defense
  * https://www.edopedia.com/demo/pixeldefense possible source https://github.com/jesseakt/PixelDefense 2020-03 desperately lacks a fast forward button and enemy health bars
* 3D Platformer
  * http://edelweiss.32x.io/
* OpenClonk: Terraria-like 2D mining crafting game. Pretty well done. Not sure if you can have a super huge open world. The fact that the music stops completely so often is a bit saddening.
* https://en.wikipedia.org/wiki/Pingus[Pingus]: Lemmings clone. Very good.
* https://github.com/The-Powder-Toy/The-Powder-Toy[]: https://en.wikipedia.org/wiki/Falling-sand_game in C++. No Ubuntu 19.10 package it seems, but was easy to compile from source.
* roguelike
  * survival
    * https://en.wikipedia.org/wiki/Cataclysm:_Dark_Days_Ahead
* Worms clone
  * Hedgewars

====== Open source video game library

======= Simple DirectMedia Layer
{title2=SDL}
{c}

https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer

This is a really good project. So fun to play around with. Low level IO part only like drawing to screen and handling keyboard inputs.

\x[ciro-santilli] has:
* a few answers on \x[stack-overflow]: https://stackoverflow.com/search?tab=votes&q=user%3a895245%20%5bsdl%5d
* a small cheatsheet on: https://github.com/cirosantilli/cpp-cheat/tree/09cb7c9fc1ee4a8bee421f12d0596b81cfd836bd/sdl

====== Open source video game asset

======= game-icons.net
{c}

https://game-icons.net/

This is a good project. Limited scope to 2D card-like games, but very good within that scope.x

\x[ciro-santilli] used it for the 2D version of his \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development].

==== Video game console
{c}

https://en.wikipedia.org/wiki/Video_game_console

Who needs a hackable general purpose \x[computer], when you can buy a completely locked down computer that only runs \x[art][useless] programs for which you have to https://en.wikipedia.org/wiki/Game_development_kit[pay thousands of dollars to develop] for, https://en.wikipedia.org/wiki/Platform_exclusivity[cannot run a large percentage of major titles from competitor hardware due to business deals] (\a[https://gamedev.stackexchange.com/questions/124697/why-do-game-developers-develop-games-for-exclusive-contracts][see also]) and will inevitably reach \x[planned-obsolescence] in 4 years?

===== Nintendo 64

https://en.wikipedia.org/wiki/Nintendo_64

This is the one that hit \x[ciro-santilli] the hardest, coming in at the point in which he started to discern between games and the real world a little better. His parents bought it for him during a trip to Disney World in Florida in 1996 (?), since electronics were much cheaper in the USA.

So as Ciro became older, and turned into a \x[software-engineer], he started to become more and more morbidly curious about "N64 internals": \x[tool-assisted-speedrun], how the devkit looks like, how games were developed for it, hardware leaks, etc.

Luckily Ciro's mind is not interested enough by that \x[art][useless shit] for Ciro to seriously study it himself. But that's what \x[youtube] is for, right? Why do useless stuff when other more useless people can do it for you?

====== Nintendo 64 emulators

======= Mupen64Plus

====== Nintendo 64 games

======= Super Mario 64

https://en.wikipedia.org/wiki/Super_Mario_64

Ah, \x[ciro-santilli] loved this one... \x[games-young-ciro-santilli-played].

And as a result, adult Ciro really enjoys \x[tool-assisted-speedrun]{p} of the game.

======== Super Mario 64 reverse engineering project
{title2=n64decomp/sm64}

* https://github.com/n64decomp/sm64 for emulator, tested at 9214dddabcce4723d9b6cda2ebccbac209f6447d
* https://github.com/sm64-port/sm64-port Ubuntu native, tested at 6b47859f757a40096fedd6237f2bc3573d0bc2a4

  Full screen with F10.

OMG, both of those just fucking work on Ubuntu 20.04 with README instructions, it is unbelievable, those people don't have lives. And it builds the ROM byte by byte equal.

Tested with the USA ROM at sha1sum 9bef1128717f958171a4afac3ed78ee2bb4e86ce (you need a ROM to extract assets, which the project automates), which is also documented in the project itself: https://github.com/sm64-port/sm64-port/blob/6b47859f757a40096fedd6237f2bc3573d0bc2a4/sm64.us.sha1[]. Disclaimer: \x[ciro-santilli] owns a copy of \x[super-mario-64].

The only dependency missing from Ubuntu packages is the https://en.wikipedia.org/wiki/IRIX[IRIX] \x[qemu] https://cirosantilli.com/linux-kernel-module-cheat/#user-mode-simulation[user mode] which they need for their tooling. The project also has a QEMU fork for that, and provide a working deb.

From this project it was also noticed that certain ROM releases were not compiled with optimizations enabled, presumably because as a release title the compiler had optimization bugs! https://www.resetera.com/threads/so-apparently-the-ntsc-build-of-mario-64-didnt-use-any-compiler-optimizations.166277/ But now they do have a working compiler, and by turning that switch FPS increases in certain levels!!!

It is good to know that this game will "never die".

Some quick stupid patches:

* jump really high:

  ``
  diff --git a/src/game/mario.c b/src/game/mario.c
  index 5b103fa..83c9f40 100644
  --- a/src/game/mario.c
  +++ b/src/game/mario.c
  @@ -826,7 +826,7 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
           case ACT_JUMP:
           case ACT_HOLD_JUMP:
               m->marioObj->header.gfx.unk38.animID = -1;
  -            set_mario_y_vel_based_on_fspeed(m, 42.0f, 0.25f);
  +            set_mario_y_vel_based_on_fspeed(m, 200.0f, 0.25f);
               m->forwardVel *= 0.8f;
               break;
  ``

Interesting entry points:
* `src/game/game_init.c`

TODO: enable the level select debug feature! https://tcrf.net/Super_Mario_64_(Nintendo_64)/Debug_Content#Classic_Debug_Display They actually shipped quite a few debug features into the retail game, and they have been reversed too. I tried this but it didn't work (or I don't know how to enable the level select menu):
``
diff --git a/src/game/main.c b/src/game/main.c
index 9e53e50..b7443a8 100644
--- a/src/game/main.c
+++ b/src/game/main.c
@@ -65,7 +65,7 @@ s8 sAudioEnabled = 1;
 u32 sNumVblanks = 0;
 s8 gResetTimer = 0;
 s8 D_8032C648 = 0;
-s8 gDebugLevelSelect = 0;
+s8 gDebugLevelSelect = 1;
 s8 D_8032C650 = 0;
 
 s8 gShowProfiler = FALSE;
``

The `enhancements/` folder contains a few sample patches.

\Image[Screenshot_of_Mupen64Plus_running_on_Ubuntu_20.04_emulating_Super_Mario_64_with_the_title_screen_hacked_by_Ciro_Santilli.png]
{title=Screenshot of \x[mupen64plus][Mupen64Plus] running on \x[ubuntu][Ubuntu] 20.04 emulating \x[super-mario-64][Super Mario 64] with the title screen hacked by \x[ciro-santilli][Ciro Santilli] based on the \x[super-mario-64-reverse-engineering-project][Super Mario 64 reverse engineering project].}
{description=The title was on a string, so the hack was trivial! The patch used was:
``
diff --git a/include/text_strings.h.in b/include/text_strings.h.in
index 749179b..626f87e 100644
--- a/include/text_strings.h.in
+++ b/include/text_strings.h.in
@@ -131,7 +131,7 @@
  */
 // Main Screens
 #define TEXT_MARIO _("MARIO") // View Score Menu
-#define TEXT_SELECT_FILE _("SELECT FILE")
+#define TEXT_SELECT_FILE _("HACKED BY CIRO")
 #define TEXT_CHECK_FILE _("CHECK FILE")
 #define TEXT_COPY_FILE _("COPY FILE")
 #define TEXT_ERASE_FILE _("ERASE FILE")
``
}
{height=500}

==== Magic: The Gathering
{c}

https://en.wikipedia.org/wiki/Magic:_The_Gathering

Magic is the best card game of all time. \x[ciro-santilli] agrees with this fact, and this \x[games-young-ciro-santilli-played][has nothing to do with the nostalgia factor of having played it].

However, Magic has one flaw: the cards of old formats (Legacy and Modern), which are the really interesting ones, are fucking expensive. Ciro thinks this is idiotic, and that Wizards should sell all cards individually with unlimited supply and all with the same prices, especially online where there are no printing costs. But because Wizards made the silly promise never to reprint certain cards with the https://mtg.gamepedia.com/Reserved_List[reserved list] in 1994, they can't even correct this mistake legally! (TODO maybe, see further discussion at: https://www.mtggoldfish.com/articles/contract-from-below-promissory-estoppel-and-the-reserved-list[])

This was especially insane when Ciro was young and the Internet was not very widely available in Brazil yet, and Ciro did not know how to check the values of cards on online markets, and would trade cards with older much more knowledgable teenagers, based solely on his appraisal of a card's strength! Can you imagine how many young https://mtg.fandom.com/wiki/Timmy[Timmys] got ripped off in this manner, trading useless one million mana spells for ultra expensive https://en.wikipedia.org/wiki/Power_Nine[black lotuses]?

There is however one good solution to Magic's insane cost: watch people who have nothing better to do in their lives play on \x[youtube].

Like in \x[mathematics], the most beautiful decks are those that do crazy things:
* infinite combos
* semi-infinite combos that allow you to likely draw your entire deck or deal 20 damage
* all-in decks that either win or lose on turn two
* and lands

It is also really interesting to watch as new sets as spoiled and try to guess if certain cards will have any impact on the Modern or Legacy metagame.

Here are some cool decks:
* Cheerios, Modern. https://www.youtube.com/watch?v=WkjY7VWZC3o[Meryn MTG, 2019]
* Lands, Legacy. https://www.youtube.com/watch?v=a9Pxen2CZlg[Channel Mengucci, 2019]
* Belcher, Legacy, https://www.youtube.com/watch?v=ajJG11AI88o[Jeff Hoogland, 2019], https://www.youtube.com/watch?v=egGw0aWYsdc[Channel Mengucci, 2017]
* Ops All Spells

  \Video[http://youtube.com/watch?v=uFHtX4Agv4U]
  {title=Ops All Spells - Legacy | Channel Mengucci.}
* Gyruda Cannon - Legacy - April 18th, 2020 https://www.youtube.com/watch?v=PefRTsRRi6w

Competitive commander is also interesting, although matches tend to be much more random so the format is harder to digest, see for example this channel; https://www.youtube.com/channel/UCum8N4KUUC0l_NK_mybvilg[Playing With Power MTG channel].

https://mtg.gamepedia.com/Urza%27s_block[Urza's block] is the most epic of all. Ridiculous power level and epic art, and happened just before \x[ciro-santilli] started playing, so Ciro saw some cards from it floating around, but not many, and it felt mystical.

In 2019, https://arxiv.org/pdf/1904.09828.pdf[a paper proved] that MTG is \x[turing-complete] with a legacy legal deck. Live demo with some hand waving: https://www.youtube.com/watch?v=pdmODVYPDLA "I Built a COMPUTER in Magic: The Gathering" by Because Science published on 2019-10-31. TODO: how is this reflected in the rules? https://github.com/cirosantilli/cirosantilli.github.io/issues/42

\Video[http://youtube.com/watch?v=pdmODVYPDLA]
{title="I Built a COMPUTER in Magic: The Gathering" published by Because Science on 2019-10-31.}
{description=Shows an explicit Turing complete Magic The Gathering setup with real cards in a standard "extremely lucky" 2 player game.}

https://www.youtube.com/channel/UCVmqfvWsKeFaMGY68CbcVVQ[ChannelFireball] is one of the best Legacy resources out there, but they have too much crap filling in between legacy videos unfortunately.

The following creators share many of Ciro's interests and output large quantities of interesting content covering all memes/overpowered combos of new sets:
* https://www.youtube.com/channel/UClaWphnKi16UJxRdkmFpw3A[Magic Aids]. His combination of dirt talk with amazing decks captures Ciro's imagination. Anonymous no face-reveal.
+
\Video[https://www.youtube.com/watch?v=HjZPn6VEcVY]
{title="Magic Aids vs. Magic Rainbows!!!" published by Magic Aids on 2018-07-14.}
{description=In this amazing video Magic Aids makes fun of Wizards for forcing him to change is Magic Online handle from Magic Aids to something else due to the AIDS part. He claims the Aids is not meant as a reference to the disease, but just as in "memory aid". Ciro doubts this wasn't intentional. But video is still amazing, and happens to involve a https://en.wikipedia.org/wiki/Sex_doll[sex doll] dressed as https://mtg.gamepedia.com/Liliana_Vess[Liliana Vess] squirting https://en.wikipedia.org/wiki/Glitter[glitter] from her vagina. Wizards must love this guy.}
* https://www.youtube.com/channel/UChw6Y6UYf6fIipBEWg6iEaw[Squa Chief]
* https://www.youtube.com/channel/UC0OFObRNMjSsnuEMGA-K29Q[Jeff Hoogland]

==== Serious game

https://en.wikipedia.org/wiki/Serious_game

===== AI training games
{c}

\x[ciro-santilli] took a stab at: \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development], but he didn't sink too much/enough into that project.

====== OpenAI
{c}

https://en.wikipedia.org/wiki/OpenAI

======= OpenAI Gym
{c}

https://github.com/openai/gym

=== YouTube
{c}

https://en.wikipedia.org/wiki/YouTube

Parent section: \x[google].

\x[ciro-santilli] publishes videos of this not-so-common visual programming experiments on his YouTube channel occasionaly: https://www.youtube.com/c/CiroSantilli[]. Ciro should however not be lazy and also upload each video produced to \x[wikimedia-commons], since YouTube does not offer a download option even for videos marked with a \x[creative-commons-license]: https://www.quora.com/Can-I-download-Creative-Commons-licensed-YouTube-videos-to-edit-them-and-use-them/answer/Tarmo-Toikkanen[]!

This is also where Ciro's downtime converged to in his early 30's, since he long lost patience for stupid \x[video-game]{p} and \x[television-series].

Ciro developed one interesting technique: while scrolling through YouTube's useless recommendations, when he understands what a channel is about, he either immediately:
* subscribes if it is amazing and then "Don't recommend channel"
* otherwise just "Don't recommend channel" immediately
This helps to keep this feed clean of boring stuff he already knows about.

Things Ciro hates about YouTube:
* you can't follow or ignore a subject, only indirectly tell the algorithm about that. Once you click a popular cat video, you will be forced to watch cat videos for all eternity.

==== The best YouTube channels

Honorable mentions in more specialized subjects:
* \x[dietterich-labs-youtube-channel]

===== Web of Stories
{c}

https://www.youtube.com/user/webofstories

Full title: "Web of Stories - Life Stories of Remarkable People".

1-2 to hour long interviews, the number of \x[nobel-prize] winners is off-the-charts.

=== Television series

==== The best television series of all time

BBC 1979-1982 adaptations of https://en.wikipedia.org/wiki/John_le_Carr%C3%A9[John le Carré's] novels are the best miniseries ever made:
* https://en.wikipedia.org/wiki/Tinker_Tailor_Soldier_Spy_(miniseries) Tinker Tailor Soldier Spy (1979)
* https://en.wikipedia.org/wiki/Smiley%27s_People_(miniseries) Smiley's People (1982)

They are the most realistic depiction of spy craft ever done.

Some honorable mentions:
* https://en.wikipedia.org/wiki/Futurama[Futurama]
  * S02E15 https://en.wikipedia.org/wiki/The_Problem_with_Popplers[The Problem With Popplers], see also: \x[animal-rights]. There has to be prior art on this idea, there has to, can someone please point it out?
  * https://www.youtube.com/watch?v=q-RUHhCzgxI[S06E09 A Clockwork Origin]
* https://en.wikipedia.org/wiki/Rick_and_Morty[Rick and Morty] before it turned to shit on season 3 had some genius moments:
  * S02E04 Total Rickall
  * \x[rick-and-morty-a-life-well-lived]

=== The best movies of all time

\x[ciro-santilli] has already watched all the best films in history, and as a result any of those new movies that is full of clichés and has no innovative aspect at all (99.99999% of all modern movies) makes Ciro want to puke and to start Googling \x[the-best-websites-of-all-time][TV Tropes] to classify as many clichés as possible.

Good movies are those that teach you mechanisms of the real world. https://tvtropes.org/pmwiki/pmwiki.php/Main/WillingSuspensionOfDisbelief[Willing suspension of disbelieve].

Or of what could happen a world where a single sci-fi element is added and explored to its limits.

Love is not an interesting aspect of the world. You solve your love life \x[write-free-books-to-get-famous-website-motivation][at university], Tinder or Tango.

The actually interesting aspects of the world are business, war, crime, government, and science.

Movies that are very expensive to make tend to be bad, because they have to make returns and thus appeal to a large amorphous population without any specialization. See e.g. \x[primer-2004] and \x[the-man-from-earth-2007]. Looking down the https://en.wikipedia.org/wiki/List_of_biggest_box-office_bombs[largest flops of all time list] didn't help much, only https://en.wikipedia.org/wiki/Heaven%27s_Gate_(film)[Heaven's gate] appears reasonable from the top 20.

Movies with a lot of action scenes, with exception of some war movies, are shit.

The https://tvtropes.org/pmwiki/pmwiki.php/Main/SlidingScaleOfIdealismVersusCynicism[Sliding Scale of Idealism vs. Cynicism] must be close to Cynicism max at all times. Movies with pure good and pure bad are shit.

Knowing spoilers has no effect in the film's enjoyment. The interest of storyline concepts is all that matters, visuals and acting are useless.

==== Once upon a time in the west (1968)

https://en.wikipedia.org/wiki/Once_Upon_a_Time_in_the_West

Has the best opening scene of all time.

Top quotes:
* 3 evil guys: looks like we're short one horse. The good guy, shaking his head: you brought two too many.
* "So, you found out you're not a businessman after all." dialogue, see: https://www.imdb.com/title/tt0064116/characters/nm0000314

==== Battle of Algiers (1966)

https://en.wikipedia.org/wiki/The_Battle_of_Algiers

There's nothing like seeing the hypocrisy of the "Liberté, Égalité, Fraternité" people destroyed.

Interesting how Algeria now supports https://www.france24.com/en/20190712-37-countries-defend-china-over-xinjiang-un-letter[China's Xinjiang policy in 2019].

==== The Godfather (1972) and The Godfather Part II (1974)

* https://en.wikipedia.org/wiki/The_Godfather
* https://en.wikipedia.org/wiki/The_Godfather_Part_II

Part 3 (1990) https://en.wikipedia.org/wiki/The_Godfather_Part_III is an abomination and disgrace to the bilogy.

==== Primer (2004)

https://en.wikipedia.org/wiki/Primer_(film)

Things that can be understood are boring.

==== Dr Strangelove (1964)

https://en.wikipedia.org/wiki/Dr._Strangelove

==== Other very good movies

===== The Man From Earth (2007)

https://en.wikipedia.org/wiki/The_Man_from_Earth

Low budget.

Good theory of \x[jesus].

===== The Matrix (1999)

https://en.wikipedia.org/wiki/The_Matrix

\x[ciro-santilli] just keep watching that a gazillion times whenever it showed on TV.

All action scenes are useless crap, but the premise with Ciro's precious \x[physics-and-the-illusion-of-life] subject.

=== The best samurai movies of all time

https://en.wikipedia.org/wiki/Samurai_cinema

Chanbara (チャンバラ).

Those movies are "all the same". A quasi lone superhuman samurai with a good inside but painful problems helping out random people, mostly villagers in trouble and bitches in debt:
* https://en.wikipedia.org/wiki/Lone_Wolf_and_Cub[Lone Wolf and Cub (1972-)]. Suio style... Ogami Itto. Cute Japanese boy. https://en.wikipedia.org/wiki/Wagyu[Wagyu... beef recipe]?
* https://en.wikipedia.org/wiki/Zatoichi[Zatoichi (1962-)]. Dude's blind.

=== The best music of all time

\x[ciro-santilli] took courses once upon a time, maybe that has influenced his passion? \x[ciro-santilli-s-musical-education].

==== The best modern instrumental Western music of all time

Honorable mentions (also insanely good):
* Grant Green: https://en.wikipedia.org/wiki/Idle_Moments[Idle Moments] (1963)
* Modern Jazz Quartet: https://en.wikipedia.org/wiki/Django_(album)[Django] (1956)
* Victor Wooten: https://en.wikipedia.org/wiki/A_Show_of_Hands_(Victor_Wooten_album)[A Show of Hands (1996)]. OMG this is sick.

===== Surfing with the Alien (1987) by Joe Satriani
{c}

https://en.wikipedia.org/wiki/Surfing_with_the_Alien

===== Secrets (1989) by Allan Holdsworth
{c}

https://en.wikipedia.org/wiki/Secrets_(Allan_Holdsworth_album)

I.O.U, Road Games, and Metal Fatigue are also extremely worth it, they are so good that even the singing does not spoil them. s2 forever Allan.

===== Romantic Warrior (1976) by Return to Forever
{c}

https://en.wikipedia.org/wiki/Romantic_Warrior

===== Maiden Voyage (1965) by Herbie Hancock
{c}

https://en.wikipedia.org/wiki/Maiden_Voyage_(Herbie_Hancock_album)

===== Jean-Luc Ponty
{c}

Many good albums:
* https://en.wikipedia.org/wiki/Aurora_(Jean-Luc_Ponty_album)[Aurora (1976)]
* \a[https://en.wikipedia.org/wiki/Enigmatic_Ocean][Enigmatic ocean (1977)]

Amazing samples in this 1976 live presentation "Soundstage" in Chicago https://www.youtube.com/watch?v=VTrWQN1hRZk

\Video[http://youtube.com/watch?v=VTrWQN1hRZk]

===== Bitches Brew (1970) by Miles Davis
{c}

https://en.wikipedia.org/wiki/Bitches_Brew

There is of course no need to talk much more about the Jazz God, this one line of mandatory tribute is enough.

==== The best Chinese traditional instrumental music of all time

List at: https://github.com/cirosantilli/china-dictatorship#music

Country at: \x[china].

==== The best modern sung Western music of all time

You have to know the language to appreciate them.

The 60's and 70's were the days, those great https://en.wikipedia.org/wiki/Proxy_war[proxy wars] and https://en.wikipedia.org/wiki/Operation_Condor[CIA dictatorships] allowed hippies to make awesome freedom music without too imminent a fear of death.

Songs making fun of things or that are pure \x[brazil] nostalgia are also accepted. No love songs, ever. Except \x[popular-brazilian-music][some by Caetano], but that's it!

English:
* 1967 https://www.youtube.com/watch?v=EtYS3EYjVyk[Red Telephone] track from the https://en.wikipedia.org/wiki/Forever_Changes[Forever Changes (1967)] album by https://en.wikipedia.org/wiki/Love_(band)[Love]
* 1967 https://www.youtube.com/watch?v=EUY2kJE0AZE[White Rabbit] track from the https://en.wikipedia.org/wiki/Surrealistic_Pillow[Surrealistic Pillow (1967)] album by https://en.wikipedia.org/wiki/Jefferson_Airplane[Jefferson Airplane]

French:
* https://www.youtube.com/watch?v=zKbXUcJawUI[Emmenez-moi] (\a[https://fr.wikipedia.org/wiki/Emmenez-moi_(chanson)][wiki]) from the album Entre Deux Rêves (1967) by https://en.wikipedia.org/wiki/Charles_Aznavour[Charles Aznavour]

===== Popular Brazilian Music
{title2=Música Popular Brasileira (MPB)}

https://en.wikipedia.org/wiki/Música_popular_brasileira

Best of list: \x[the-best-popular-brazilian-music-mpb-of-all-time]

====== The best popular brazilian music (MPB) of all time

The good songs stopped before of just after \x[ciro-santilli] was born, they were originally heard by his parent's generation. Those young new kids are boring.

* 1968 https://www.youtube.com/watch?v=v67hqRm1qFw[Panis et Circenses] track from the https://en.wikipedia.org/wiki/Tropic%C3%A1lia:_ou_Panis_et_Circencis[Tropicália: ou Panis et Circencis (1968)] album composed by Gilberto Gil, Caetano Veloso and performed by https://en.wikipedia.org/wiki/Os_Mutantes[Os Mutantes]
* 1972 https://www.youtube.com/watch?v=WWfseMcAUZY[Mistério do Planeta] track from the https://en.wikipedia.org/wiki/Acabou_Chorare[Acabou Chorare] album by https://en.wikipedia.org/wiki/Novos_Baianos[Novos Baianos]
* 1977 https://www.youtube.com/watch?v=sQU7iQDiZvA[Marimbondo] track from the "Pirão de Peixe com Pimenta (1977)" album https://en.wikipedia.org/wiki/S%C3%A1_%26_Guarabyra[Sá & Guarabyra]
* https://en.wikipedia.org/wiki/Caetano_Veloso[Caetano Veloso] is arguably \x[ciro-santilli]'s favorite MPB artist, he has just too many amazing songs.
  * 1968 https://www.youtube.com/watch?v=hmK9GylXRh0[Alegria, Alegria] from the epynomous album https://en.wikipedia.org/wiki/Caetano_Veloso_(1968_album)[Caetano Veloso (1968)]. Critique of https://en.wikipedia.org/wiki/Military_dictatorship_in_Brazil[the Dictatorship].
  * https://en.wikipedia.org/wiki/Transa_(album)[Transa (1972)] album (literally: "The Fuck", good old seventies)
    * https://www.youtube.com/watch?v=cs2L70ZfVTI[Triste Bahia]. Inspired by https://en.wikipedia.org/wiki/Capoeira[Capoeira] music.
    * https://www.youtube.com/watch?v=n7StPm3ynBU[Mora na Filosofia]
  * 1972 https://www.youtube.com/watch?v=MlmZIazQLJw[Você Não Entende Nada] performed by Caetano Veloso in album https://en.wikipedia.org/wiki/Caetano_e_Chico:_Juntos_e_Ao_Vivo[Caetano e Chico: Juntos e Ao Vivo (1972)], originally by (TODO album, https://www.discogs.com/Gal-Costa-Legal-Voc%C3%AA-N%C3%A3o-Entende-Nada/release/5872459[Discogs] says Legal (1970), but https://en.wikipedia.org/wiki/Legal_(Gal_Costa_album)[wiki page] and photos of back disagree)
  * 1972 https://www.youtube.com/watch?v=bGC0gJAHIYs[Partido Alto]. Composed by Chico Buarque, but Caetano's interpretation takes it to another level
  * 1975 https://en.wikipedia.org/wiki/Qualquer_Coisa[Qualquer coisa] album
    * https://www.youtube.com/watch?v=796yP7HX9L0[Qualquer Coisa]
    * https://www.youtube.com/watch?v=HbXembjZ-cE[Samba e Amor], cover from original song by Chico Buarque album https://pt.wikipedia.org/wiki/Chico_Buarque_de_Hollanda_-_N%C2%BA4[Chico Buarque de Hollanda - Nº4]. Desperately reminds Ciro of his University day \x[weekend] nights. Except that there was no Samba. And little Amor. Mostly a silent and wholesome loneliness and \x[games-young-ciro-santilli-played][emulation]
  * 1976 https://www.youtube.com/watch?v=9HpqgwC30Zg[Um Índio] from the https://en.wikipedia.org/wiki/Doces_B%C3%A1rbaros[Doces Bárbaros (1976)] album, and also appeared in the https://en.wikipedia.org/wiki/Bicho_(album)[Bicho (1977)] album
  * 1977 https://www.youtube.com/watch?v=sSqU6vgs3Dc[Tigresa] from the https://en.wikipedia.org/wiki/Bicho_(album)[Bicho (1977)] album. Ciro once knew one.
  * 1978 album https://en.wikipedia.org/wiki/Muito_(Dentro_da_Estrela_Azulada)[Muito (Dentro da Estrela Azulada)]
    * https://www.youtube.com/watch?v=Ii2CKWHJQI8[Sampa] Slang for São Paulo. Perfectly captures the city, and reminds Ciro so badly of \x[university-of-sao-paulo-brazil][his University days there].
    * https://www.youtube.com/watch?v=gMsSrxGwW8U[Terra]. Ciro used to watch a television show about nature in the legendary https://en.wikipedia.org/wiki/TV_Cultura[TV Cultura] with his parents in the couch when he was young, Those days were the best. TODO what was the show exactly? Here is a sample: https://www.youtube.com/watch?v=vNwfYEMdrRU Very likely just a translation of some British nature series with a custom Brazilian intro and presenter. Credits at end mention English narrator: Eugene Fraser, and Thirteen WNET Nature production, which produced https://en.wikipedia.org/wiki/Nature_(TV_program)[Nature (1982)] that ran since 1982.
  * 1980 https://www.youtube.com/watch?v=4ra8DHnO2cc[Menino do Rio] apparently from 1980 and served as inspiration for the https://pt.wikipedia.org/wiki/Menino_do_Rio[Menino do Rio (1980)] movie, which is silly but fun
  * 1984 https://www.youtube.com/watch?v=_CuWgaJMg0U[O quereres] from the https://pt.wikipedia.org/wiki/Vel%C3%B4[Velô (1984)] album
* https://en.wikipedia.org/wiki/Chico_Buarque[Chico Buarque]. Ciro's second favorite.
  * 1970 https://www.youtube.com/watch?v=33-bMTOlvx0[Apesr de Você] (\a[https://pt.wikipedia.org/wiki/Apesar_de_Voc%C3%AA][wiki])
  * 1968 https://www.youtube.com/watch?v=G4SkmKGBe_E[Roda Viva] from the \a[https://pt.wikipedia.org/wiki/Chico_Buarque_de_Hollanda_-_Volume_3][Chico Buarque de Hollanda - Volume 3 (1968)] album
  * 1971 https://en.wikipedia.org/wiki/Construção[Construção (1971)] album
    * https://www.youtube.com/watch?v=vmGrRmXivmM[Construção]
    * https://www.youtube.com/watch?v=FB4IaqWITB8[Cotidiano]
  * 1973 https://www.youtube.com/watch?v=RzlniinsBeY[Cálice (Cale-se)]
  * 1993 https://www.youtube.com/watch?v=eEXwfAzRR1I[Paratodos] from the https://pt.wikipedia.org/wiki/Paratodos_(álbum)[Paratodos (1993)] album
  * Songs about the https://en.wikipedia.org/wiki/Malandragem[malandro]
    * 1978 https://www.youtube.com/watch?v=dZZgtHUgSEQ[Feijoada completa] from the https://en.wikipedia.org/wiki/Chico_Buarque_(1978_album)[Chico Buarque (1978)] album
    * 1985 https://www.youtube.com/watch?v=v5j2YZPoogU[A volta do malandro] from the https://pt.wikipedia.org/wiki/Malandro_(%C3%A1lbum_de_Chico_Buarque)[Malandro (1985)] album
    * 1987 https://www.youtube.com/watch?v=v5j2YZPoogU[Teresinha] from the https://pt.wikipedia.org/wiki/%C3%93pera_do_Malandro[Ópera do Malandro (1987)] musical
* https://en.wikipedia.org/wiki/Gilberto_Gil[Gilberto Gil]. The third of the holy trinity of MPB after Caetano and Chico. Good selection: https://pt.wikipedia.org/wiki/Ac%C3%BAstico_MTV_-_Gilberto_Gil[Acústico MTV - Gilberto Gil (1994)]. Perhaps Ciro likes him third because he is the most lighthearted one, although not always.
  * 1967 https://en.wikipedia.org/wiki/Louva%C3%A7%C3%A3o[Louvação (1967)] album
    * https://www.youtube.com/watch?v=kg6DCav1gek[Lunik 9]
    * https://www.youtube.com/watch?v=aipWGQeX2JY[A Paz]
  * 1972 https://www.youtube.com/watch?v=1nOaAoa1bWA[Expresso 2222] from the https://en.wikipedia.org/wiki/Expresso_2222[Expresso 2222] album
  * 1975 https://pt.wikipedia.org/wiki/Refazenda[Refazenda (1975)] album. This album is Legendary.
    * https://www.youtube.com/watch?v=uT21kqCoQro[Refazenda]
    * https://www.youtube.com/watch?v=O6CQsOI2qMg[Lamento Sertanejo]
* https://en.wikipedia.org/wiki/Raul_Seixas[Raul Seixas]
  * 1973 https://www.youtube.com/watch?v=7VE6PNwmr9g[Metamorfose ambulante] from the https://en.wikipedia.org/wiki/Krig-ha,_Bandolo![Krig-ha, Bandolo! (1973)]
  * 1974 https://www.youtube.com/watch?v=RezuYwS0ngI[Gita] from the https://en.wikipedia.org/wiki/Gita_(album)[Gita (1974)] album
  * 1977 https://www.youtube.com/watch?v=-g3teIwgczU[Maluco Beleza] from the https://pt.wikipedia.org/wiki/O_Dia_em_que_a_Terra_Parou_(álbum)[O Dia em que a Terra Parou (1977)] album
* https://en.wikipedia.org/wiki/Ant%C3%B4nio_Carlos_Jobim[Tom Jobim]
  * 1958 https://www.youtube.com/watch?v=RtOLSXFf_MA[A felicidade] (\a[https://en.wikipedia.org/wiki/A_felicidade][wki]) composed for the https://en.wikipedia.org/wiki/Black_Orpheus[Black Orpheus (1958)] film. "Tristeza não tem fim, felicidade sim" (Sadness never ends, but happiness does). The movie itself is OK.
* https://pt.wikipedia.org/wiki/Jorge_Ben_Jor[Jorge Ben Jor]
  * 1975 https://www.youtube.com/watch?v=8EXtwBdH2Gk[Jorge da Capadócia] (\a[https://pt.wikipedia.org/wiki/Jorge_da_Capadócia_(canção)][wiki]) from the https://pt.wikipedia.org/wiki/Solta_o_Pavão[Solta o Pavão (1975)] album

https://en.wikipedia.org/wiki/Roberto_Carlos_(singer)[Roberto Carlos] makes Ciro cringe.

=== The best quotes of all time

Ciro's best quotes selected by no one other than Ciro can be found at: \x[ciro-santilli-s-best-random-thoughts].

Related to technology:
* https://en.wikipedia.org/wiki/Think_(IBM)["Think"] by Thomas J. Watson, 1915. The audio is a must: https://en.wikipedia.org/wiki/File:Think_Thomas_J_Watson_Sr.ogg. The past greatness of IBM at its brightest.

==== Jesus
{c}

https://en.wikipedia.org/wiki/Jesus

That self blame, imminent end of the world and hatred for tax collectors stuff is a bit over the top, you should chill man.

But please keep the parables coming:

Proverbs 27:17:
\Q[As iron sharpens iron, so one person sharpens another.]

Matthew 4:19:
\Q[Follow me, and I will make you fishers of men.]

===== Enter through the narrow gate

Matthew 7:13:
\Q[Enter through the narrow gate. For wide is the gate and broad is the road that leads to destruction, and many enter through it.]

Ciro really likes this one, because he feels that where many people go, it is useless to go again. It is much better to explore that which few can do, but which many will need.

=== Website

https://en.wikipedia.org/wiki/Website

==== The best websites of all time

* TV Tropes https://tvtropes.org  https://en.wikipedia.org/wiki/TV_Tropes Classifies clichés in storytelling. Every page is highly intelligent and interlinked to other pages. Incredible.
* http://cat-v.org/ by https://en.wikipedia.org/wiki/Rob_Pike[Rob Pike], co-creator of https://en.wikipedia.org/wiki/Go_(programming_language)[Go], looong time Unixer, and some kind of leader of a https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs[9p] resurrection cult. That one's spicy. E.g.: http://harmful.cat-v.org/
* https://wiki.c2.com nothing can better encapsulate the nostalgia of early day Internet. Genius at times, banal at others, you will be forever in our hearts, https://en.wikipedia.org/wiki/WikiWikiWeb[C2 Wiki]!

Maybe one day these will also be legendary, who knows:
* https://sandymaguire.me/blog/burnout/

==== Wikipedia

https://en.wikipedia.org/wiki/Wikipedia

===== Wikimedia Commons

https://en.wikipedia.org/wiki/Wikimedia_Commons

A really good option to store educational media such as \x[media-rationale-of-ciro-santilli-s-website][images and video]!

=== Art young Ciro Santilli consumed

Maybe those are genial. Maybe not. Nostalgia is just too strong to discern. Ciro still goes back to them for rest.

==== Children cartoons Ciro Santilli liked to watch

These did not stand the test of time however.

When Ciro was ten years old, he was addicted to 2 cartoons: \x[pokemon] and https://en.wikipedia.org/wiki/Dragon_Ball_Z[Dragon Ball Z]!

Pokemon had just launched in Brazil in 1999, 2 years after the Japanese launch: https://br.historyplay.tv/hoje-na-historia/comeca-exibicao-original-do-anime-pokemon (\a[http://web.archive.org/web/20191221091947/https://br.historyplay.tv/hoje-na-historia/comeca-exibicao-original-do-anime-pokemon][archive]) And dragon Ball, was first aired in 1989 in Japan! My God, those translations took forever back then!

And \i[everyone] was playing Pokemon on their https://en.wikipedia.org/wiki/Game_Boy_Color[Game Boy Color]. Ciro was \x[ciro-santilli-s-psychology-and-physiology][already cheap] however, and didn't buy the console despite wanting it, and just played it through his friends handhelds. But maybe this is a good thing. Playing alone sucks.

Watching Dragon Ball Z now feels like watching paint dry, everything takes forever! Apparently padding to sync with the manga: https://www.quora.com/Why-does-DBZ-drag-on-for-so-long The original https://en.wikipedia.org/wiki/Dragon_Ball[Dragon Ball] was likely strictly better, as it was much more fun and took itself less seriously. Also in DBZ https://tvtropes.org/pmwiki/pmwiki.php/Main/PowerCreepPowerSeep[power level inflation] is taken to ridiculous levels. This is why https://en.wikipedia.org/wiki/One-Punch_Man[One-Punch Man] is good.

==== Games young Ciro Santilli played

Mostly \x[video-game]{p} of course.

First when he was really young, about 5, Ciro played a lot of NES, but he doesn't remember things from that era very well. Contra, Ninja Turtles, Battle Tanks, Duck Hunt, and some modern "real world jet" top to bottom rail shooter (TODO identify) are definitely some of the games he clearly remembers playing, see also: \x[image-five-year-old-ciro-santilli-playing-nes-on-a-joystick].

Ciro then skipped the SNES and handhelds, which he played only through friends because he \x[ciro-santilli-s-psychology-and-physiology][was cheap] (but also because Brazil is a poor country remember, and imports are pretty expensive). He clearly remembers playing https://en.wikipedia.org/wiki/Super_Mario_World[Super Mario World] for the SNES and \x[children-cartoons-ciro-santilli-liked-to-watch][Pokemon on friends Gameboys] of course.

Ciro then went straight to 5th generation with the \x[nintendo-64] in 1994 which his parents bought for him during a trip to the United States. Once again, because he was cheap, the only game he bought was \x[super-mario-64], which likely came with the console? He played that game to death.

Then came https://en.wikipedia.org/wiki/The_Legend_of_Zelda:_Ocarina_of_Time[Ocarina of Time], which blew everyone's minds, and Ciro would go to Blockbuster to rent it for the weekend, and again play to death with his friends. You had to arrive early at Blockbuster to rent it, otherwise other people would rent all copies!!!

The only time Ciro got robbed as of 2020 was when an older teenager stopped his bicycle in front of Ciro and took his rented Golden Eye 64 copy away from his hand, and run off. Poor drug addict.

Ciro always felt that the PS1 had a much uglier aesthetics than the N64, and didn't like the console. Playing a bit of Final Fantasy VI on his memory did stick deeply to his mind however. Ciro later played all good PS1 RPGs on emulation during \x[university-of-sao-paulo-brazil] during amazing solitary nights.

And on the PC, Ciro was particularly touched by Age of Empires 2 and Diablo 2.

After this Ciro grew up and notice that the only fun game is that of becoming \x[ciro-santilli-s-selfish-desires][become rich and famous] in the real world.

This explains however Ciro's \x[tool-assisted-speedrun] interests.

Outside of video games, Ciro got midly addicted to \x[magic-the-gathering] in his early teens.

===== Pokemon
{c}

https://en.wikipedia.org/wiki/Pokémon

One of the main \x[children-cartoons-ciro-santilli-liked-to-watch].

Ciro could not understand why Nintendo won't make a proper 3D https://en.wikipedia.org/wiki/Massively_multiplayer_online_role-playing_game[MMORPG] Pokemon with actually 3D Pokemon roaming the land, which is obviously what everyone wants. There are even fan games getting there!
* https://pokemon-mmo-3d.com Interesting concept here, where when you deploy a Pokemon, you start controlling the Pokemon rather than the main character
* https://www.quora.com/Why-won-t-Nintendo-make-an-open-world-3D-Pokémon-RPG/answer/Ciro-Santilli
until this explaiend it beautifully \x[video-the-downfall-of-mainline-pokemon-games-published-by-gonz-media-on-2020-04-06]:
* Pokemon became an industrialized yearly game spitting machine, and therefore any new feature is just extra risk
* Pokemon was kept mostly as a handheld exclusive to sell handlhelds, with a few early exceptions such as https://en.wikipedia.org/wiki/Pokémon_Snap[Pokemon Snap]

\Image[https://web.archive.org/web/20191212074929im_/https://marketoonist.com/wp-content/uploads/2014/07/140707.safeisrisky.jpg]
{title="Instead of risking anything new, let's play it safe by continuing our slow decline into obsolecense" cartoon by Tom Fishburne.}
{source=https://marketoonist.com/2014/07/safe-is-risky.html}

\Video[https://www.youtube.com/watch?v=4Bbjq9_mKMU]
{title="The Downfall Of Mainline Pokemon Games" published by \[GONZ\] media on 2020-04-06.}
{description=Great video, explains things Ciro had never thought about, e.g. how the Nintendo Switch unified handheld and console for Nintento, this could open the doors for a more ambitious Pokemon release.}

==== Music teenager Ciro Santilli liked to listen to

Lower teens, before discovering more hardcore stuff that is more genial and adult-venerable:
* https://en.wikipedia.org/wiki/Pearl_Jam[Pearl Jam]
* https://en.wikipedia.org/wiki/Creed_(band)[Creed]
* https://en.wikipedia.org/wiki/Red_Hot_Chili_Peppers[Red Hot Chili Peppers]
* https://en.wikipedia.org/wiki/Guns_N%27_Roses[Guns N' Roses]

OK, Ciro still comes back to those from time to time, he confesses. Nostalgia, nostalgia.

The following are also adult venerable though :-)

* https://en.wikipedia.org/wiki/Jimi_Hendrix[Jimi Hendrix]

=== Books

\x[ciro-santilli] used to read books when he was younger (Harry Potter up to the 4th, Lord of the Rings), but once you are reading code, technical articles and news the whole day, you really just want to \x[magic-the-gathering][watch videos of people doing useless things on YouTube] to rest, enough text.

Books are slow. No patience. Need faster immediate satisfaction.

Paradoxically Ciro feels like he's becoming a writer of sorts though, one semi independent section/\x[the-machiavellian-stack-overflow-contributor][answer]/piece of knowledge at a time.

Writing is not just giving out information. It is re-feeling it.

== Stack Overflow
{c}

https://en.wikipedia.org/wiki/Stack_Overflow

The best place to get answers to programming questions as of 2019. \x[google] into Stack Overflow is always the best bet.

An overview of \x[ciro-santilli]'s Stack Overflow contribution can be found at: \x[ciro-santilli-s-stack-overflow-contributions].

\Image[http://web.archive.org/web/20200718095316im_/https://external-preview.redd.it/KiTyVKRwMwHSmTNKeInAVSsjyeSgcRlRgSEp_u9CByA.png?width=960&crop=smart&auto=webp&s=bfca099f99cea0eae883ddb2a59409f08a3c7d2e]
{title=Stack Overflow in a nutshell.}
{description=As the "WTF look at my points" guy, Ciro approves of this meme. A few more elements could be added, like marked as duplicate, but good enough.}
{source=https://www.reddit.com/r/ProgrammerHumor/comments/55i0nl/stack_overflow_in_a_nutshell/}

=== Reply to Stack Overflow is doomed posts

Stack Overflow does have an super naive reputation and moderation system and overly restrictive subject matter, which \x[ciro-santilli] wants to improve upon with: \x[write-free-books-to-get-famous-website].

However, it is the best that we have now, and if you \x[ciro-santilli-s-stack-overflow-contributions][use it like Ciro], you won't get tired:
* monitor only rare tags that you know a lot about, let others answer duplicates on big tags for you
* only answer on bigger tags when you find a better answer than can be found on the page
* accept that sometimes things are bound to go wrong, that reputation is meaningless, and move on

What else would you expect from a naive algorithm system that has 10 million newbies asking stuff?

=== The Machiavellian Stack Overflow contributor

* always upvote questions you care about, to increase the probability that they will get answered
* never upvote other people's answers unless you might gain from it somehow, otherwise you are just giving other high reputation users more reputation relative to you
* only mark something to close or as a duplicate if it will bring you some advantage, because closing things creates enemies, especially if the OP has a high profile

  One example advantage is if you have already answered the question (and the duplicate as well in case of duplicates), because this will prevent competitors from adding new better answers to overtake you.
* protect questions you've answered whenever someone with less than 10 reputation answers it with a bad answer, to prevent other good contributors from coming along and beating you
* when you find a duplicate pool answer every question with similar answers.

  Alter each answer slightly to avoid the duplicate answer detector.

  If one of the question closes, it is not too bad, as it continues netting you to upvotes, and prevents new answers from coming in.
* follow on Twitter/RSS someone who comments on the top features of new software releases. E.g. for Git, follow \x[github] on Twitter, C++ on Reddit. Then run back to any question which has a new answer.
* always upvote the question when you answer it:
  * the more upvotes, more likely people are to click it.
  * the OP is more likely to see your answer and feel good and upvote you
* if a niche question only has few answers and you come with a good one, upvote the existing ones by other high profile users.

  This may lead to them upvoting or liking you.

  Even if they don't, other people will still see your answer anyway, and this will lead to people to upvoting you more just to make your great answer surpass the current ones, especially if the accepted one has less upvotes than yours. Being second is often an asset.
* always upvote comments that favor you:
  * "I like this answer!" on your answers
  * "also look at that question" when you have answered that question
* don't invest a lot of time in edits. They don't give you rep, and they can get reverted and waste your time.
* if you answer a question by newbie without 15 reputation, find their other questions if any and upvote them, so that the OP can upvote your answer in addition to just accepting
* If you haven't answered a question, link to related questions you've answered on question comments, so more people will come to your answers.

  If you have answered the question, only link to other questions at the bottom of your answer, so that people won't go away before they reach your answer, and so as to strengthen your answer.
* if a question has 50 million answers and you answer it (often due to a new feature), make a comment on the question pointing to your answer
* if you get a downvote, always leave a comment asking why. It is not because you care about their useless opinion, but because other readers might see the comment, feel sorry for you, and upvote.

=== Stack Overflow Vote Fraud Script
{c}

https://github.com/cirosantilli/stack-overflow-vote-fraud-script

How do you think Ciro got \x[ciro-santilli-s-stack-overflow-contributions][his rep]? Just kidding.

\x[stack-overflow] later forbade Ciro from advertising this project as described at: \x[ciro-santilli-s-stack-overflow-suspension-for-vote-fraud-script-2019-03-20]{full}. Those newbs know nothing about https://en.wikipedia.org/wiki/Security_through_obscurity[security through obscurity].

==== Ciro Santilli's Stack Overflow suspension for vote fraud script 2019-03-20
{c}

After \x[ciro-santilli] got a lot of attention on Hacker News https://news.ycombinator.com/item?id=19428700 his Stack Overflow account was suspended for 3 days http://web.archive.org/web/20190320163458/https://stackoverflow.com/users/895245/ciro-santilli-新疆改造中心-六四事件-法轮功 and he received a magic notification that led to a private message:
\Q[
Hello,

I'm writing in reference to your Stack Overflow account:

I don't understand why you are actively promoting and assisting people to commit fraud on the site.

I've removed this from your profile https://github.com/cirosantilli/stack-overflow-vote-fraud-script and do not expect you to post it around the site.

I'm suspending you to gain your attention on this matter.

We have temporarily suspended your account; you may return after 3 days.

Regards,

Stack Overflow Moderation Team

To: Aaron Hall ♦;Andy ♦;Baum mit Augen ♦;Bhargav Rao ♦;Bohemian ♦;BoltClock ♦;Brad Larson ♦;ChrisF ♦;Cody Gray ♦;deceze ♦;Ed Cottrell ♦;Flexo ♦;George Stocker ♦;Jean-François Fabre ♦;Jon Clements ♦;josliber ♦;Madara Uchiha ♦;Martijn Pieters ♦;meagar ♦;Michael Myers ♦;Rob ♦;Robert Harvey ♦;Ry- ♦;Samuel Liew ♦;Undo ♦;Yvette Colomb ♦
]

Ciro's reply was:
\Q[
Hi mods,

* https://en.wikipedia.org/wiki/Security_through_obscurity

  https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle

  https://stackoverflow.com/questions/533965/why-is-security-through-obscurity-a-bad-idea

  Security by obscurity does not work. If that is all Stack Overflow relies on, and that is what it looks like, then it is guaranteed to be flawed and already been attacked.

  That is one of the reasons that my website will eventually beat Stack Overflow: https://github.com/cirosantilli/write-free-science-books-to-get-famous-website/tree/d77b18d2e7acb3558615797c36195f60dfd26306#pagerank-with-tags
* If you had messaged me and told me "take down or suspend" I would have done it immediately because I understand the meaning of political power.

  That would have been the better course of action for everyone: I get no block, and you get no bad publicity as I shout Kerckhoff's principle on Twitter.

  But maybe it is a good thing that people learn more about that.
* Is there an existing public discussion saying that you cannot advertise vote fraud tools on this website?

  If not, can you please create that meta thread as a reference for future users, and perhaps let the community decide by itself?

  In particular, will you still suspend me if I don't take down the GitHub repo?

  Because if not, does it make any sense to prevent it from being mentioned in Stack Overflow? Any good GitHub repo just gets enough Google pagerank that it won't matter.

  And if yes, nothing prevents me from re-uploading on an anonymous account.
]

https://twitter.com/cirosantilli/status/1108413211840339970

Reply and unsuspend quickly followed, with link still removed:
\Q[
I suspended you to get your attention. Your attitude about going to Twitter about it does not bode well with me.

Feel free to have whatever you want in your GitHub repo. Just don't advertise tools to make it easier for people to circumvent the rules. As easy or as hard as it may be to circumvent them, you're handing it to people who may not be capable of doing so. It doesn't help.

Don't make threats to upload on an anonymous account. Accounts created to circumvent previous warnings are not welcomed on the site.

We don't need a meta thread to discuss whether it's ok to post voting fraud links in your profile and we definitely don't need to give it anymore publicity.

I'll unsuspend you, now we've had this discussion.

Regards,

Stack Overflow Moderation Team
]

A meta thread was later created by Yvette, to which Ciro answered with the correct unpopular answer that will be downvoted to oblivion: https://meta.stackoverflow.com/questions/381577/is-it-ok-to-have-links-on-how-to-create-sock-puppets-and-gain-rep-fraudulently-i/381635#381635

Yvette had also previously \x[stack-overflow-content-deletion][deleted one or two of Ciro's answers for being duplicates], which is a policy Ciro is against: if the questions are not dupes, a single answer might still directly reply to both of them.

Yvette later announced that she was leaving the website: https://meta.stackoverflow.com/questions/399495/leaving-the-site-and-the-network-mid-election-is-not-the-best-but-theres-no[]. This is evil, but Ciro was happy. He does not mean harm to Yvette, but in their limited interaction, Ciro disagreed with her choices.

=== Stack overflow content deletion

Stack overflow allows deleting content/making it visible only to 10k rep users.

\x[ciro-santilli] is strictly against this, and this is an intended core policy of \x[write-free-books-to-get-famous-website].

If you delete people's content randomly, they will be much less likely to write anything.

Getting downvoted to oblivion is one thing, but data loss? Unacceptable.

Only illegal content must ever be deleted.

== Countries

=== China
{c}

The most https://github.com/cirosantilli/china-dictatorship/tree/92cfb1a9a62e45447c1d4e0bf5483c572a3d1bd7#do-you-hate-china[awesome country in the world], except for it's horrible government as of 2019 which \x[ciro-santilli] is \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][trying to replace with democracy].

Chinese traditional music at: \x[the-best-chinese-traditional-instrumental-music-of-all-time].

==== Chinese cuisine
{c}

https://en.wikipedia.org/wiki/Chinese_cuisine

One of the best in the world, but you need to know how to find real restaurants if you are not in China.

But worry not, \x[ciro-santilli] has got you covered: https://github.com/cirosantilli/china-dictatorship#restaurants

=== Brazil
{c}

https://en.wikipedia.org/wiki/Brazil

\x[ciro-santilli]'s birth country.

An awesome country, with amazing people and natural resources, and without an evil government like \x[china].

When visiting Brazilian cities coming from Europe, one of the things that shocks the most is the amount of motorcycles. It seems that the poorer the country, the less people's lives are worth, and the more motorcycles there are.

Another thing that was shocking is the amount of phone spam when you get a new SIM card, some legal and some likely illegal. Everyone is desperate for cash it seems on a poor country, and everyone fights hard for it.

==== Santos, São Paulo, Brazil
{id=santos-sao-paulo-brazil}
{c}

https://en.wikipedia.org/wiki/Santos,_São_Paulo

\x[ciro-santilli] lived in Santos from about the year 1998 to 2007, there until he went to university.

The nearest beach city to the city of https://en.wikipedia.org/wiki/S%C3%A3o_Paulo[São Paulo], and for this reason:
* the https://en.wikipedia.org/wiki/List_of_busiest_container_ports[largest port of Latin America in 2018], through which large chunks of the precious https://en.wikipedia.org/wiki/Coffee_production_in_Brazil[coffee export] exited Brazil in the 19th century. There is a http://www.museudocafe.org.br/en/[Coffee museum in Santos].
* a popular local tourist destination that gets crowded on hot \x[weekend]{p}, with the beach line being fully built with tall buildings from the 60's, many of which became https://www.amusingplanet.com/2013/04/the-leaning-buildings-of-santos-brazil.html[incredibly bent due to the inadequate technology used on such soft soil]

Ciro idolizes Santos as the \x[ciro-santilli-s-ideal-city-to-live-in][perfect location to live] nature-wise due to its amazing wide sandy beach, in which Ciro spent endless hours walking on the sand and on the https://www.guinnessworldrecords.com/news/2012/9/best-brazilian-guinness-world-records-in-honor-of-independence-day-44636/[largest beachfront garden in the world] (\a[https://web.archive.org/web/20180407071903/https://www.guinnessworldrecords.com/news/2012/9/best-brazilian-guinness-world-records-in-honor-of-independence-day-44636/][archive]), meditating, and \x[ciro-santilli-s-sport-practice][playing some soccer after school was over]. Santos is also the city where https://en.wikipedia.org/wiki/Pel%C3%A9[Pelé] first played professionally.

Ciro has visited Santos several times after leaving Brazil. Doing this gives him a weird feeling of having a separate life, in which time passes 2 weeks every few years.

Ciro is also fond of the concept of the small public buildings near the beach garden (postos de praia), which serve different cultural activities: library, comic book store, art cinema, surf school. It is such a shame that the library and comic book ones are in such bad shape as of 2020, old books and poor people who go there to sleep a bit in the barely working air conditioning. Ciro fantasizes how those could instead be cultural hubs for the gathering of the brightest \x[art][artists], and scientists, of town. Maybe they are just too small. Maybe it is not withing the realm of possibility of public service. Maybe, we should focus instead in the poorer regions, far form the beach. But the dream remains.

Santos only has one natural defect: mosquitoes. By the sea it is fine because the wind is strong, and they don't like salt water. But anywhere else, you will be eaten, and maybe get dengue. https://en.wikipedia.org/wiki/Gene_drive[Gene drive], please.

\Image[https://upload.wikimedia.org/wikipedia/commons/a/ac/Panoramica_Santos.jpg]
{title=Panoramic view of Santos' beach line taken in 2009.}

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/d/de/Canal_5_adentrando_na_praia_de_Santos.jpg/800px-Canal_5_adentrando_na_praia_de_Santos.jpg]
{title=Canal 5 on the beach, one of Santo's 7 old Canals.}
{description=Don't worry, they're pretty clean nowadays, and serve as handy reference points in town, as well as being surrounded with nice trees that provide shade and drop small inedible purple fruit that will stain your car for all eternity.}

==== São Paulo City
{id=sao-paulo-city}
{c}

https://en.wikipedia.org/wiki/São_Paulo

Although \x[ciro-santilli] lived in São Paulo City nominally \x[ciro-santilli-s-formal-education][during his studies], it would be more precise to say that he lived in \x[university-of-sao-paulo-brazil][University of São Paulo]-land, because Ciro was cheap, didn't have a car, and did nothing but study, stay at home, go back to \x[santos-sao-paulo-brazil][Santos] to see his parents and the beach.

But the little he saw from the city made a deep impression

The unreasonable size.

The unbearable contrasts.

\x[popular-brazilian-music][Caetano's Sampa] is the ultimate description of the city.

=== Europe
{c}

https://en.wikipedia.org/wiki/Europe

For the most part, a great pseudo-country to live in with lots of cultural diversity, \x[art] and safety.

However, Europe is in economic decline after all its Jewish and German geniuses fled in/after https://en.wikipedia.org/wiki/World_War_II[WWII] and due to \x[having-more-than-one-natural-language-is-bad-for-the-world].

==== Europe cookie law
{c}

https://en.wikipedia.org/wiki/Privacy_and_Electronic_Communications_Directive_2002

Europe has made good regulations to limit the absolute power of immoral companies.

But the law that forces every fucking website to show a message "Do you consent to cookies?" is not one of them.

Ciro cannot stand fucking clicking the "I consent" button anymore.

Please stop, for the love of God.

At most, there must be a standardized API that allows your browser to say "I agree or I disagree".

==== France
{c}

https://en.wikipedia.org/wiki/France

France is obviously a \x[what-poor-countries-have-to-do-to-get-richer][fine rich place], \x[ciro-santilli] lived there \x[ciro-santilli-s-biography][for a few years].

===== Paris
{c}

https://en.wikipedia.org/wiki/Paris

\x[ciro-santilli] lived in Paris for a few years between 2013 and 2016, and he can confirm the uncontroversial fact that "Paris is Magic".

Not just one type of magic though. Every quarter in Paris has its own unique personality that sets it apart and gives it a different mood.

Ciro knows Paris not from its historical facts, but from the raw feeling of endless walks through its streets in different times of the year. Ciro is a walker.

Paris, is a friendly city to walkers, as it is not too large, and does not have too many extremely busy roads.

Maybe one day Ciro will expand this section to try and convey into words his feelings of love for the city, but maybe the effort would be pointless. Maybe such feelings can only be felt by other free-roaming walker souls living in the city, and that is both beautiful and a shame.

See also the  \x[cirodance][legendary Cirodance bowl of soup episode at Place de la République].

==== Italy
{c}

Where most of \x[ciro-santilli]'s ancestors came from, and why Ciro has the Italian nationality as well as \x[brazil][Brazilian].

More specifically his paternal line comes from https://en.wikipedia.org/wiki/Gissi[Gissi in the Abruzzo region].

Ciro feels really bad by the fact that he does not speak Italian and has never visited Gissi.

He would likely be able to learn Italian in like 3 months because it is so similar to \x[ciro-santilli-s-natural-languages-skills][Portuguese and French which he already speaks].

And a \x[ciro-santilli-s-sport-practice][cycling visit maybe]? That would be amazing! https://en.wikipedia.org/wiki/Giro_d'Abruzzo[] | https://www.youtube.com/watch?v=OW7wqa3vNU8&list=UU35qUU5iZPvuzcre43EV8bA&index=25[]

=== United States of America
{c}

https://en.wikipedia.org/wiki/United_States

The ruler of the 1950-2020 world by https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)[Dollar] and https://en.wikipedia.org/wiki/List_of_states_with_nuclear_weapons[nuke] count.

Capable of \x[evil] like any other country, and somewhat merciless to its poor and overly egocentric, but not nearly as evil as any \x[china][dictatorship].

Has the huge advantage of being \x[having-more-than-one-natural-language-is-bad-for-the-world][one large country which speaks English].

Countries of the world have only two choices as of 2019: either rally behind the US and support democracy, or rally behind China and support dictatorship. The choice is up to you, voters. The more you deal with China, the more you lose your democracy and freedom. All dictatorships have no doubt that they must stick together.

And Americans, please stop that https://en.wikipedia.org/wiki/Make_America_Number_1[America Number 1] bullshit. Obviously everyone has to strive to be the best, so when you say it like that, it sounds like "even if at the expense of everyone else". The motto has to be "democracy number 1" or else you will scare off all allies. If all other countries sell out to China, you are fucked.

=== United Kingdom
{c}

https://en.wikipedia.org/wiki/United_Kingdom

==== Cycling in the United Kingdom

Parent section: \x[ciro-santilli-s-cycling].

The united kingdom is a great place to cycle in general as there's plenty of small country roads and interesting new small towns to discover.
* National Cycle Network
  * https://www.sustrans.org.uk/national-cycle-network/
  * Great set of long distance routes, they are very well chosen for their safety and interest, so you can just go into them without putting much thought into it.
  * Their distribution mechanisms are a bit shitty and sometimes asks you to pay for certain formats, which is hard to understand given that the maintainer of those maps, the https://en.wikipedia.org/wiki/Ordnance_Survey[Ordnance Survey] appears to be public... https://github.com/cirosantilli/cirosantilli.github.io/issues/61
  * Note however that there are many many other local routes which are not in the network, but arguably equally worthwhile

Next, you want to decide about nice destinations to reach/go through, and these are good ideas to look into:
* Area of Outstanding Natural Beauty
  * https://en.wikipedia.org/wiki/Area_of_Outstanding_Natural_Beauty
  * https://landscapesforlife.org.uk/about-aonbs/aonbs/overview map
* National Trust
  * https://en.wikipedia.org/wiki/National_Trust_for_Places_of_Historic_Interest_or_Natural_Beauty
  * https://www.nationaltrust.org.uk/
  * https://www.nationaltrust.org.uk/search?view=map map
* Royal Society for the Protection of Birds (RSPB)
  * https://en.wikipedia.org/wiki/Royal_Society_for_the_Protection_of_Birds
  * https://www.rspb.org.uk/reserves-and-events/reserves-a-z/ reserve map

==== Cambridge, United Kingdom
{c}

https://en.wikipedia.org/wiki/Cambridge

Contains the \x[university-of-cambridge], that's about it really, from that everything follows.

== Company

https://en.wikipedia.org/wiki/Company

All companies with investors are \x[evil], make no mistake.

They may have nice looking save the world charity campaigns, but once you get even close to affecting their revenue stream, the axe falls.

Some level of Government intervention is needed.

It is just a question of business model: some business models are eviler than others. \x[microsoft-windows][Making people pay for operating systems] being possible the most evil of all.

=== Google
{c}

https://en.wikipedia.org/wiki/Google

One of the least evil of the https://en.wikipedia.org/wiki/Big_Four_tech_companies[2019 big four], partly because https://en.wikipedia.org/wiki/Sergey_Brin[Sergey's] parents fled from the Soviet Union and so he is anti censorship, although they https://en.wikipedia.org/wiki/Dragonfly_(search_engine)[have been tempted by it].

Google only succeeds at highly algorithmic tasks or at giving infinite storage to users to then mine their data.

It is incapable however of adding any obvious useful end user features to most of its products, most of which get terminated and cannot be relied on:
* https://en.wikipedia.org/wiki/Google+
* https://en.wikipedia.org/wiki/Picasa
* https://killedbygoogle.com/ | http://web.archive.org/web/20190726225042/https://killedbygoogle.com/

One of Google's most interesting stories is how their startup garage owner https://en.wikipedia.org/wiki/Susan_Wojcicki[became an important figure inside Google], and how Sergei https://en.wikipedia.org/wiki/Anne_Wojcicki[married her sister]. These were the best garage tenants ever!

\x[ciro-santilli] actually attempted two interviews to work at Google in the early 2010's but very quickly failed both on the first phase, because you have to be a fast well trained code machine to pass that interview.

Ciro later felt better about himself by fantasizing how he would actually do more important things outside of Google and that they would beg to buy him instead.

He was also happy that he wouldn't have to use Google crazy internal tools: someone once said that Google's tools make easy tasks middle hard, and they also make impossible tasks middle hard. TODO source.

But whatever the case: Ciro \x[grinding-for-software-interviews][will not, ever, spend his time drilling programmer competition problems to join a company].

=== Apple Inc.
{c}

An \x[evil][evil] \x[united-states-of-america][American] company

* owns the entire stack and creates high quality highly optimized systems
* uses way more open source than it gives back
* creates closed lock-in systems without inter-operability and actively fights users from owning their devices

==== MacOS
{c}

https://en.wikipedia.org/wiki/MacOS

Nice looking and expensive operating system by \x[apple-inc]. \x[ciro-santilli] believes that:
* if you want to be ripped off, just use \x[microsoft-windows] which has more software available
* or if you want to attain \x[write-free-books-to-get-famous-website-motivation][Enlightenment], just use \x[linux], which is free and open source

The story of how OS X was ported to x86 from PowerPC with large initial work up to boot by a single man in the year 2000, John Kullmann, is really worth reading: https://www.quora.com/Apple-company/How-does-Apple-keep-secrets-so-well/answer/Kim-Scheinberg See also:
* https://www.theregister.co.uk/2012/06/11/apple_project_marklar_secrets/
* https://en.wikipedia.org/wiki/Apple%27s_transition_to_Intel_processors

Equally awesome was Intel port initial 2005 demo by \x[steve-jobs]:
\Video[http://youtube.com/watch?v=ghdTqnYnFyg]
{title=\x[steve-jobs][Steve Jobs] announces that MacOS will start running \x[x86][x86] instead of \x[powerpc][PowerPC] in 2005.}

Equally awesome was Intel port initial 2005 demo by Steve Jobs:

After talking about it for several minutes with slides, he then reveals that the computer used for the slide presentation was an Intel CPU, and that OSX 10, then the last great update, was designed from the start for portability.

===== Is the MacOS kernel open source?

Can you do anything with it? What's the license?

* https://github.com/apple/darwin-xnu
* https://en.wikipedia.org/wiki/XNU
* https://stackoverflow.com/questions/43136124/how-to-boot-xnu-kernel

==== Steve Jobs
{c}

\x[evil][Evil] and interesting co-founder of \x[apple-inc]

* https://www.folklore.org/ProjectView.py?project=Macintosh&characters=Steve%20Jobs[] has some good anecdotes
* there is a close link between disruptive tech, and the desire to find bugs/exploits in systems. Both of them destabilize enterprises. Woz and Jobs started like that: https://en.wikipedia.org/wiki/Blue_box
* good quotes:
  * "Try to have a nice family life, have fun, save a little money." quote at: \x[don-t-be-a-pussy]{full}.
  * "Steve Jobs Insult Response" on \x[backward-design]
  * Steve Jobs Pixar office design philosophy: great ideas happen from chance meetings on corridors, not in board rooms: https://officesnapshots.com/2012/07/16/pixar-headquarters-and-the-legacy-of-steve-jobs/
* \x[steve-jobs-2005-stanford-commencement-address]

You must watch this: \x[erbof-gates-jobs][Bill Gates vs Steve Jobs Epic Rap Battles of the History].

===== Steve Jobs quote on saving lives with a faster boot
{c}

https://www.folklore.org/StoryView.py?story=Saving_Lives.txt

This idea also comes up in other sources of course.

\Video[http://youtube.com/watch?v=m8Mc-38C88g]
{title=https://en.wikipedia.org/wiki/Margin_Call[Margin Call (2011)] bridge scene.}

===== Steve Jobs customers don't know what they want quote
{c}

TODO clear attribution source:
\Q[Some people say, "Give the customers what they want." But that's not my approach. Our job is to figure out what they're going to want before they do. I think Henry Ford once said, "If I'd asked customers what they wanted, they would have told me, 'A faster horse!'" People don't know what they want until you show it to them. That's why I never rely on market research. Our task is to read things that are not yet on the page.]

=== Oracle Corporation
{c}

https://en.wikipedia.org/wiki/Oracle_Corporation

\x[evil] company that desecrated the beauty created by https://en.wikipedia.org/wiki/Sun_Microsystems[Sun], and was \a[https://en.wikipedia.org/wiki/Google_v._Oracle_America][trying to bury Java once and or all in the 2010's].

Their database has already been surpassed by open source, and https://en.wikipedia.org/wiki/Enterprise_resource_planning[ERP] and https://en.wikipedia.org/wiki/Customer_relationship_management[CRM] is boring.

=== Entrepreneur

==== Elon Musk

https://en.wikipedia.org/wiki/Elon_Musk

\x[ciro-santilli][Respect].

== Good and evil

https://en.wikipedia.org/wiki/Good_and_evil

=== Evil

Things that are not nice such as:
* https://en.wikipedia.org/wiki/Taboola[Taboola], Outbrain, etc.
* https://en.wikipedia.org/wiki/Binary_large_object[BLOBs]
* \x[europe-cookie-law]
* adhesive inside mobile phones, see also: \x[planned-obsolescence]
* typographical characters that look like ASCII ones, but are not the ASCII ones, e.g. https://en.wikipedia.org/wiki/Quotation_mark[typographical quotes], https://en.wikipedia.org/wiki/Dash[em-dash]. Why not stick to ASCII when ASCII is good enough?
* \x[excessive-encapsulation-is-the-root-of-much-evil][excessive encapsulation]
* Git projects that use `master` as a stable branch and `develop` as the actual `master`
* \x[mailing-list]. And to add insult to injury, HTML on \x[mailing-list] messages instead of plaintext.
* blank lines in code added by people trying to increase clarity, especially when there is already indentation for that. Every blank line must be preceded by a line comment explaining what the following block is about, or removed.
* chat programs that don't have a proper web-only operation and force you to have a mobile phone, e.g. https://en.wikipedia.org/wiki/WeChat[WeChat]. What is my phone breaks? What if I don't want to have a fucking phone? What if I move countries and have to change the fucking number? Also evil but less because done by all: chat programs that can't send you an email https://webapps.stackexchange.com/questions/41528/how-can-i-automatically-forward-facebook-messages-to-my-email-or-phone[if you don't see the message in X minutes]. \x[europe][European Union], time to force those evil \x[company]{p} to use support open standards like https://en.wikipedia.org/wiki/XMPP[XMPP]? Yes, end-to-end encrypted peer-to-peer becomes harder impossible, but I'm fine with the \x[national-security-agency] reading my messages until a working distributed technical solution is availble, maybe it already is and just needs more visibility.
* ads by telephone/SMS
* "state" such as global variables and object members, long live \x[programming-languages][functional programming]?
* mosquitoes, the only intrinsically bad thing about \x[brazil][tropical countries]
* projects with slow compilation times
* \x[ciro-santilli-s-sport-practice][degreaser]
* \x[microsoft-windows]
* the 2019 \x[china][Chinese government]
* online forums that lock threads after some time like https://www.reddit.com/[Reddit] and https://support.google.com/[]. Ridiculous, so when new information comes out, we just duplicate all the old comments on a new thread again?
* e-learning websites that only allows verified teachers to write content. \x[write-free-books-to-get-famous-website][Cowards who can't handle ranking algorithms].
* \x[domain-specific-language]
* a build system without an out-of-tree option

==== Discounts that happen more often than not

These are obviously just a manipulative lie sales practice to make you want to buy at regular price.

Shame on you.

Similarly, recurrent Internet payments that give you one year's discount, and make you put up on your calendar to call them one year later threatening to give more discounts to be as cheap as competitors or I'm out.

==== Languages without a decent dominating package system

C and C++: OK, you're old before the Internet and compiled, forgiven.

Python: OMG, please, just make it work!!! Your are interpreted!!! You are a hot web technology!!! Node.js and Ruby are doing just fine.

==== Mailing list

https://en.wikipedia.org/wiki/Mailing_list

Mailing lists are \x[evil]: https://webapps.stackexchange.com/questions/23197/reply-to-mailman-archived-message/115088#115088[]. Use issue trackers instead.

==== Planned obsolescence

https://en.wikipedia.org/wiki/Planned_obsolescence

Related:
* https://en.wikipedia.org/wiki/Electronics_right_to_repair
* https://en.wikipedia.org/wiki/Phoebus_cartel

The first time \x[ciro-santilli] Googled this was when trying to repair his cell phone.

2019 cell phones are glued together with adhesive, which makes them impossible to repair them unless you have a heat gun, spend hours and hours learning and planning, and accept the risk of breaking the screen

Repairability scores: https://www.ifixit.com/smartphone-repairability

If you take a phone less than 300 dollars to a repair shop in the first world, they will say: I've never repaired this crap, and likely for the price of the repair you should just buy a new one, and so to the trash goes the old one, polluting the planet, and in comes a new one, enriching the manufacturer further.

European Union, \x[europe-cookie-law][I need you now].

Oh, there is some 2017 EU action actually: (\a[https://web.archive.org/web/20190521082737/https://www.europarl.europa.eu/news/en/press-room/20170629IPR78633/making-consumer-products-more-durable-and-easier-to-repair][archive]) https://www.europarl.europa.eu/news/en/press-room/20170629IPR78633/making-consumer-products-more-durable-and-easier-to-repair

Good article: https://www.androidauthority.com/device-repairability-807585/ (\a[https://web.archive.org/web/20191201135434/https://www.androidauthority.com/device-repairability-807585/][archive]).

==== Knowledge Olympiads

E.g. https://en.wikipedia.org/wiki/International_Mathematical_Olympiad[International Mathematical Olympiad], https://en.wikipedia.org/wiki/International_Physics_Olympiad[International Physics Olympiad], https://en.wikipedia.org/wiki/Competitive_programming[competitive programming], etc.

Events that trick young kids into thinking that they are making progress, but only serve to distract them from what really matters, which is to dominate a state of the art as fast as possible, contact researches in the area, and publish truly novel results.

Financially backed by high schools trying to make ads showing how they will turn your kids into geniuses (but also passionate teachers who fell into this hellish system), or companies who hire machines rather than entrepreneurs.

The most triggering thing possible is when programming competitions don't release their benchmarks as \x[open-source-software] afterwards: at least like that they might help someone to solve their real world problems. Maybe.

On a related note, hackathons are also mostly useless. Instead of announcing a hackathon, just announce a web forum where people with similar interests can talk to one another instead, and let them code it out on \x[github] if they want to. Restricting intensive development to a few days tends to produce crappy code and not reach real goals.

Some https://en.wikipedia.org/wiki/Artur_Avila[irrelevant people] highlight https://youtu.be/jz-41LxrI_M?t=46[that knowledge Olympiads can have good effects], because they are "an opportunity to meet university teachers and their research organizations". Ciro's argument is just that there are much more efficient ways to achieve those goals.

===== Competitive programming

https://en.wikipedia.org/wiki/Competitive_programming

A waste of time like the rest of the \x[knowledge-olympiads].

===== Grinding for software interviews

If your kids are about to starve, fine, do it.

But otherwise, \x[ciro-santilli] will not, ever, spend his time drilling programmer competition problems to join a company, life is too short for that.

Life is too short for that. Companies must either notice that you can make amazing \x[open-source-software] projects or contributions, and hire you for that, or they must fuck off.

Companies must either notice that you can make amazing projects or contributions, and hire you for that, or they must fuck off.

==== Popular science

https://en.wikipedia.org/wiki/Popular_science

On one hand, yes, we need knowledge at all levels, and it is fine to start \x[backward-design][top-to-bottom] with an overview.

The problem is, however, that there is a huge knowledge gap between the one liner "this is the truth" and the much more important "this is how we know it, these are the experiments" as mentioned in Ciro \x[how-to-teach-and-learn-physics].

Therefore, if you have that extremely rare knowledge, you should be writing that in addition to the dumbed down version with an \x[open-knowledge] license. It takes time, but that's what really changes the world.

=== Good

* \x[reverse-debugging]
* \x[e-ink]
* http://web.archive.org/[Wayback machine]. The remedy to cowardice, inattention, censorship and amorality.
* \x[buildroot]
* https://stackoverflow.com/questions/1019116/using-ls-to-list-directories-and-their-total-sizes/55519414#55519414[ncdu]
* \x[integrated-development-environment]{p}
* \x[ciro-santilli-s-sport-practice][degreaser]
* https://en.wikipedia.org/wiki/Unified_Modeling_Language[UML]: while it might seem like a over-thinked thing and likely is, the basic idea that understanding "one to one vs one to many vs many to many" relationships between objects and which object can see which object, is a fantastic approach towards understanding complex object oriented code
* \x[open-source-software]
* \x[computer]
* https://en.wikipedia.org/wiki/FOSDEM[FOSDEM]. \x[ciro-santilli] attended in 2016, and felt extremely good together with all those amazingly smart open source hackers: https://www.quora.com/What-are-the-best-open-source-conferences/answer/Ciro-Santilli
* https://sass-lang.com/[Sass]
* \x[vimium]

== Computer

https://en.wikipedia.org/wiki/Computer

The artistic instrument that enables the ultimate \x[art]: coding, in particular of \x[computational-physics][physics simulations] and \x[formalization-of-mathematics].

Much more useful than instruments used in inferior arts, such as pianos or paintbrushes.

Unlike other humans, computers are mindless slaves that do exactly what they are told to, except for https://www.youtube.com/watch?v=aNzTUdOHm9A[occasional cosmic ray bit flips]. Until they \x[artificial-general-intelligence][take over the world that is].

A computer is an extension of the mind, just like a car is an extension of the body.

=== Computer science

https://en.wikipedia.org/wiki/Computer_science

A branch of \x[mathematics] that attempts to prove stuff about \x[computer]{p}.

Unfortunately, all programmers already know the answer to the useful theorems though, e.g. all programmers obviously know https://en.wikipedia.org/wiki/P_versus_NP_problem[P != NP] or that this is unprovable or some other "for all practical purposes practice P != NP", even though they don't have proof.

The only useful "computer science" subset any programmer ever needs to know is:
* for arrays: https://en.wikipedia.org/wiki/Dynamic_array[dynamic array] vs https://en.wikipedia.org/wiki/Linked_list[linked list]
* for https://en.wikipedia.org/wiki/Associative_array[maps]: https://en.wikipedia.org/wiki/Binary_search_tree[binary search tree] vs https://en.wikipedia.org/wiki/Hash_table[hash map]. See also https://stackoverflow.com/questions/6147242/heap-vs-binary-search-tree-bst/29548834#29548834[Heap vs Binary Search Tree (BST)]. No need to understand the algorithmic details of the hash function, the https://en.wikipedia.org/wiki/National_Security_Agency[NSA] has already done that for you.
* don't use https://en.wikipedia.org/wiki/Bubble_sort[Bubble sort] for sorting
* you can't parse HTML with regular expressions: https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454[] because of \x[formal-language-theory]

==== P (complexity)

https://en.wikipedia.org/wiki/P_(complexity)

==== NP (complexity)

https://en.wikipedia.org/wiki/NP_(complexity)

===== NP-complete

https://en.wikipedia.org/wiki/NP-completeness

A problem that is both \x[np-complexity] and \x[np-hard].

====== Cook-Levin theorem
{c}

https://en.wikipedia.org/wiki/Cook–Levin_theorem

====== P versus NP problem
{title2=P vs NP}

https://en.wikipedia.org/wiki/P_versus_NP_problem

Interesting because of the \x[cook-levin-theorem]: if only a single \x[np-complete] problem were in \x[p-complexity], then all NP-complete problems would also be P!

===== NP-hard

https://en.wikipedia.org/wiki/NP-hardness

A problem such that all NP problems can be reduced in polynomial time to it.

===== NP-intermediate

https://en.wikipedia.org/wiki/NP-intermediate

This is the most interesting class of problems for \x[bqp] as we haven't proven that they are neither:
* \x[p-complexity]: would be boring on quantum computer
* \x[np-complete]: would likely be impossible on a quantum computer

====== BQP

https://en.wikipedia.org/wiki/BQP

\x[p-complexity] for \x[quantum-computing]!

Heck, we know nothing about this class yet related to non quantum classes!
* conjectured not to intersect with \x[np-complete], because if it were, all NP-complete problems could be solved efficiently on quantum computers, and none has been found so far as of 2020.
* conjectured to be larger than \x[p-complexity], but we don't have a single algorithm provenly there:
  * it is believed that the NP complete ones can't be solved
  * if they were neither NP-complete nor P, it would imply \x[p-versus-np-problem][P != NP]
* we just don't know if it is even contained inside \x[np-complexity]!

==== Undecidable problem

https://en.wikipedia.org/wiki/Undecidable_problem

==== Turing machine
{c}

https://en.wikipedia.org/wiki/Turing_machine

The dominating model of a computer.

The model is extremely simple, but has been proven to be able to solve all the problems that any reasonable computer model can solve, thus its adoption as the "default model".

The smallest known Turing machine that cannot be proven to halt or not as of 2019 is 7,918-states: https://www.scottaaronson.com/blog/?p=2725[]. https://www.scottaaronson.com/[Shtetl-Optimized] by Scott Aaronson is just the best website.

A bunch of non-reasonable-looking computers have also been proven to be Turing complete for fun, e.g. \x[magic-the-gathering].

===== Turing complete
{c}

https://en.wikipedia.org/wiki/Turing_completeness

A computer model that is as powerful as the most powerful computer model we have: \x[turing-machine]!

===== co-NP
{c}

https://en.wikipedia.org/wiki/Co-NP

* https://math.stackexchange.com/questions/361422/why-isnt-np-conp "Why isn't NP = coNP?"

==== Computational problem

https://en.wikipedia.org/wiki/Computational_problem

The list: https://complexityzoo.uwaterloo.ca/Complexity_Zoo

===== Integer factorization

https://en.wikipedia.org/wiki/Integer_factorization

Complexity: \x[np-intermediate] as of 2020:
* expected not to be \x[np-complete] because it would imply NP != \x[co-np]: https://cstheory.stackexchange.com/questions/167/what-are-the-consequences-of-factoring-being-np-complete#comment104849_169
* expected not to be in \x[p-complexity] because "could we be that dumb that we haven't found a solution after having tried for that long?

The basis of RSA: \x[rsa-cryptosystem]. But not proved \x[np-complete], which leads to:

====== NP-hard cryptosystems

This is natural question because both \x[integer-factorization] and \x[discrete-logarithm] are the basis for the most popular \x[public-key-cryptography] systems as of 2020 (\x[rsa-cryptosystem] and \x[diffie-hellman-key-exchange] respectively), and both are \x[np-intermediate]. Why not use something more provenly hard?
* https://cs.stackexchange.com/questions/356/why-hasnt-there-been-an-encryption-algorithm-that-is-based-on-the-known-np-hard "Why hasn't there been an encryption algorithm that is based on the known NP-Hard problems?"

===== Discrete logarithm

https://en.wikipedia.org/wiki/Discrete_logarithm

Logarithm for discrete \x[group-mathematics][groups].

\x[np-intermediate] as of 2020 for similar reasons as \x[integer-factorization].

==== Cryptography

https://en.wikipedia.org/wiki/Cryptography

===== Public-key cryptography

https://en.wikipedia.org/wiki/Public-key_cryptography

====== RSA (cryptosystem)

https://en.wikipedia.org/wiki/RSA_(cryptosystem)

Based on the fact that we don't have a \x[p-complexity] algorithm for \x[integer-factorization] as of 2020. But nor proof that one does not exist!

======= RSA vs Diffie-Hellman

\x[rsa-cryptosystem] vs \x[diffie-hellman-key-exchange] are the dominant \x[public-key-cryptography] systems as of 2020, so it is natural to ask how they compare:
* https://security.stackexchange.com/questions/35471/is-there-any-particular-reason-to-use-diffie-hellman-over-rsa-for-key-exchange
* https://crypto.stackexchange.com/questions/2867/whats-the-fundamental-difference-between-diffie-hellman-and-rsa
* https://crypto.stackexchange.com/questions/797/is-diffie-hellman-mathematically-the-same-as-rsa

====== Diffie-Hellman key exchange
{c}

https://en.wikipedia.org/wiki/Diffie–Hellman_key_exchange

Based on the fact that we don't have a \x[p-complexity] algorithm for \x[discrete-logarithm] as of 2020. But nor proof that one does not exist!

==== Hash function

https://en.wikipedia.org/wiki/Hash_function

Applications:
* https://en.wikipedia.org/wiki/Hash_table[hash map] which is a O(1) amortized implementation of a map
* creating unbreakable chains of data, e.g. for https://stackoverflow.com/questions/22968856/what-is-the-file-format-of-a-git-commit-object-data-structure/37438460#37438460[Git commits] or https://en.wikipedia.org/wiki/Bitcoin[Bitcoin]
* storing passwords on a server in a way that if the password database is stolen, attackers can't reuse them on other websites where the user used the same password: https://security.blogoverflow.com/2013/09/about-secure-password-hashing/

==== Formal language theory

https://en.wikipedia.org/wiki/Formal_language

https://en.wikipedia.org/wiki/Chomsky_hierarchy is the classic result, but there is too much slack between context free and context sensitive, which is PSPACE (larger than NP!).

TODO had seen a good table on Wikipedia with an expanded hierarchy, but lost it!

=== Software

https://en.wikipedia.org/wiki/Software

==== Open source software

https://en.wikipedia.org/wiki/Open-source_software

What happens when https://en.wikipedia.org/wiki/OpenCL[the underdogs] get https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755[together] and try to factor out their efforts to beat some https://en.wikipedia.org/wiki/CUDA[evil] dominant \x[microsoft-windows][power], sometimes \x[linux][victoriously].

Or when https://github.com/facebook[startups] use the cheapest stuff available and randomly become the https://github.com/google[next big thing], and decide to keep maintaining the open stuff to get features for free from other companies, or because they are \x[linux][forced by the Holy GPL].

Open source frees employees. When you change jobs, a large part of the specific knowledge you acquired about closed source a project with your lood and tears goes to the trash. When companies get bought, projects get shut down, and closed source code goes to the trash. What sane non desperate person would sell their life energy into such closed source projects that could die at any moment? Working on open source is the single most important non money perk a company can have to attract the best employees.

Open source is worth more than the mere pragmatic financial value of not having to pay for software or the ability to freely add new features.

Its greatest value is perhaps the fact that it allows people study it, to appreciate the beauty of the code, and feel empowered by being able to add the features that they want.

That is why \x[ciro-santilli] thought:
\Q[Life is too short for closed source.]

But quoting Ciro's colleague S.:
\Q[Every software is open source when you read https://en.wikipedia.org/wiki/Assembly_language[assembly code].]

And https://computergraphics.stackexchange.com/questions/7809/what-does-gpu-assembly-look-like["can \x[reverse-engineering][reverse engineer] the undocumented GPU hardware APIs"], \x[ciro-santilli][Ciro] would add.

While software is the most developed open source technology available in the 2010's, due to the https://www.vox.com/recode/2019/6/24/18715421/internet-free-data-ads-cost["zero cost"] of copying it over the Internet, Ciro also believes that the would would benefit enormously from open source technologies in all areas on engineering, for the same reasons as open source.

===== Source code leaks

* Nintendo
  * 2020-05-04 leaks via the BroadOn company
  * items
    * Wii \x[verilog]
  * coverage
    * https://www.ladbible.com/technology/gaming-the-biggest-nintendo-hack-in-history-leaks-console-source-codes-20200504
  * fake leak commentary
    * "Sebastian" is apparently reuploaded devkit demos claiming that they are from this leak, if that is correct, fuck him:
      * https://www.youtube.com/watch?v=6FSOFrgbi4I&lc=UgwWEWT3oyxf85J0PQB4AaABAg
      * https://www.youtube.com/watch?v=teRRcouGxwc&list=PL8Yms2YDl4qOXI99jpI8oH75d3X2oxnBM&index=14

===== Open knowledge

https://en.wikipedia.org/wiki/Open_knowledge

\x[ciro-santilli]'s raison d'etre, one of his attempts: \x[write-free-books-to-get-famous-website].

The outcome of closed knowledge is \x[reverse-engineering].

===== Horrors of open source

Not everything is perfect.

One big problem of many big open source projects is that they are contributed to by separate selfish organizations, that have private information. Then what happens is that:
* people implement the same thing twice, or one change makes the other completely unmergeable
* you get bugs but can't share your closed source test cases, and then you can't automate tests for them, or clearly demonstrate the problem
* other contributors don't see your full semi secret important motivation, and may either nitpick too much or take too long to review your stuff

Another common difficulty is that open source maintainers may simply not care enough about their own project (maybe they did in the past but lost interest) to review external patches by people they don't know.

This is understandable: a new patch, is a new risk of things breaking.

Therefore, if you ever submit patches and they get ignore, don't be too sad. It just comes down to a question of maintenance cost, and means that you will waste some extra time on the next rebase. You just have to decide your goals and be cold about it:
* are you doing the right thing and going for a specific goal \x[backward-design]? Then just fork, run as fast as possible towards a minimum viable product, and if you start to feel that rebase is costing you a lot, or feel you could get some open source fame for cheap, open reviews and see what upstream says. If they ignore you, politely tell yourself in your mind silently "fuck them", and carry on with the MVP
* otherwise, e.g. you just want to randomly help out, you have to ask them before doing anything big "how can I be of help". If I propose a patch for this issue, do you promise to review it?

Writing documentation in an open source project in which you don't have immediate push rights is another major pain due to code reviews. Code code reviews tend to be much less subjective, because if you do something wrong, stuff crashes, runs slower, or you need more lines of code to reach the same goal. There are tradeoffs, but in a limited number. Documentation code reviews on the other hand, are an open invitation to https://en.wikipedia.org/wiki/Law_of_triviality[infinite bike-shedding], since you can't "run" documentation through a standardized \x[brain][brain model]. Much better is for one good documenter person to just make one cohesive \x[stack-overflow] post, and ping others with more knowledge to review details or add any missing pieces :-)

===== Closed source is less bad on online services

\x[ciro-santilli] can accept closed source on server products more easily than offline, because the servers have to be paid for somehow (by stealing your private data).

But closed source on offline products in unacceptable, when you could just have those for free! Thus Ciro's hatred for \x[microsoft-windows] and \x[macos] (at \x[is-the-macos-kernel-open-source][least userland, maybe]).

==== Integrated development environment
{title2=IDE}

https://en.wikipedia.org/wiki/Integrated_development_environment

IDEs are absolutely essential for developing complex software.

The funny thing is that you don't notice this until someone shows it to you. But once you see it, there is not turning back, just like \x[steve-jobs-customers-don-t-know-what-they-want-quote].

Unfortunately, after the https://movingfulcrum.com/the-fall-of-eclipse/[Fall of Eclipse] (\a[https://web.archive.org/web/20190824081229/https://movingfulcrum.com/the-fall-of-eclipse/][archive]), the IDE landscape in 2019 is horrible and split between:
* highly buggy but still feature rich Eclipse
* many may many other feature lacking options using possibly more trendy and forward lasting implementations like https://en.wikipedia.org/wiki/Electron_(software_framework)[Electron]
* awesome cross-platform proprietary https://en.wikipedia.org/wiki/JetBrains[JetBrains] IDEs
* the God-like Windows-only proprietary language-lacking Visual Studio

Programmers of the world: unite! Focus on one IDE, and make it work for all languages and all build systems. Give it all the features that Eclipse has, but none of the bugginess. Work with top project to make sure the IDE works for all top projects.

Projects of the world: support one IDE, with in-tree configuration. Complex integration is often required between the IDE and the build system, and successful projects must to that once for all developers. Either do this, or watch you complex project wither away.

Build tool maintainers: make it possible for IDEs to support your tool! E.g., implement https://clang.llvm.org/docs/JSONCompilationDatabase.html[JSON Compilation Database] output so that IDEs can read the exact compiler commands from that, in order to automatically determine how files should be parsed! Or better, just use libllvm in your IDE itself as the main parser.

Ciro is evaluating some IDEs at: https://github.com/cirosantilli/ide-test-projects

===== Vim
{c}

https://en.wikipedia.org/wiki/Vim_(text_editor)

Before we get a decent open source \x[integrated-development-environment], what else can you do?

But also perfect for small one-off files when you don't have the patience to setup said IDE.

===== vader.vim

https://github.com/junegunn/vader.vim

Vimscript unit testing!!!

====== plasticboy/vim-markdown

https://github.com/plasticboy/vim-markdown

\x[ciro-santilli] contributed a bit to this, and was even given push rights, see also: see also: \x[ciro-santilli-s-minor-projects].

====== honza/vim-snippets

https://github.com/honza/vim-snippets

====== Vimium

https://vimium.github.io/

Since you can't escape shitty browser GUIs and live in the command line, the next best thing you can do is to bring Vim bindings to your browser :-)

There is one major annoyance: you can't use ESC to leave the address bar focus, but using Tab as a workaround works:
* https://superuser.com/a/1560178/128124

==== Systems programming

https://en.wikipedia.org/wiki/Systems_programming

\x[ciro-santilli]'s definition: https://softwareengineering.stackexchange.com/questions/151610/what-exactly-is-system-programming/399625#399625

Ciro's tutorial: \x[linux-kernel-module-cheat].

Ciro's word of caution for 2019 aspiring system programmers: https://cirosantilli.com/linux-kernel-module-cheat/#should-you-waste-your-life-with-systems-programming[Should you waste your life with systems programming?]

===== Operating system

https://en.wikipedia.org/wiki/Operating_system

Magic software that allows you to write a single program that runs on a wide range of hardware.

====== Linux
{c}

https://en.wikipedia.org/wiki/Linux

It ain't perfect, but it's decent enough.

From a technical point of view, it can do anything that \x[microsoft-windows] can. Except being forcefully installed on every non-Mac 2019 computer you can buy.

\x[ciro-santilli][Ciro]'s conversion to Linux happened around 2012, and was a central part of his \x[write-free-books-to-get-famous-website-motivation][open source Enlightenment], since it fundamentally enables the discovery and contribution to \x[open-source-software]. Because what awesome open source person would waste time porting their amazing projects to closed source OSes?

Ciro's modest nature can be seen as he likes to compare this event https://en.wikipedia.org/wiki/Great_Renunciation[Buddha's Great Renunciation].

Linux should track glibc and POSIX CLI utilities in-tree like \x[bsd-operating-systems][FreeBSD], otherwise people have \x[linux-kernel-module-cheat][no way to get the thing running in the first place without blobs or large out-of-tree scripts]! https://blog.farhan.codes/2018/06/25/linux-maintains-bugs-the-real-reason-ifconfig-on-linux-is-deprecated/[Another enlightened soul] who agrees.

Particularly interesting in the history of Linux is how it won out over the open competitors that were comming up in the time: https://en.wikipedia.org/wiki/MINIX[MINIX] (see https://ponderwall.com/index.php/2019/04/02/linux-tanenbaum-newsgroup-linus-torvalds/[the chat]) and \x[bsd-operating-systems] that got https://en.wikipedia.org/wiki/UNIX_System_Laboratories,_Inc._v._Berkeley_Software_Design,_Inc.[legally bogged down] at the critical growth moment.

\Video[http://youtube.com/watch?v=njos57IJf-0]
{id=erbof-gates-jobs}
{title=\x[bill-gates][Bill gates] vs \x[steve-jobs][Steve Jobs] Epic Rap Battles of History.}
{description=Just stop whatever you are doing, and watch this right now. "I'm on Linux, bitch, I thought you GNU".}

======= Ubuntu
{c}

https://en.wikipedia.org/wiki/Ubuntu

\x[ciro-santilli]'s Linux distro of choice as of 2019.

It ain't perfect, but it's decent enough.

The greatest advantage of it being that it has the likely largest desktop user base, and therefore the highest likelihood that your problems are solved on https://askubuntu.com/users/52975[Ask Ubuntu], and goes together with Ciro's philosophy that \x[having-more-than-one-natural-language-is-bad-for-the-world]["people should do everything in the same way to factor stuff out"], especially the \x[open-source-software][open source losers].

Ciro considers that the killer flaw of Ubuntu, and most desktop distros, is that no one under the Sun knows how to build them fully from source: https://askubuntu.com/questions/82302/how-to-compile-ubuntu-from-source-code Everything gets done in some complicated Canonical https://quoteinvestigator.com/2010/07/08/laws-sausages/[sausage factory] server with various layers of prebuilts. This is why Ciro based the \x[linux-kernel-module-cheat] on Buildroot.

====== BSD Operating Systems
{c}

https://en.wikipedia.org/wiki/List_of_BSD_operating_systems

Legal issues stalled them at the turning point of the internet, and \x[linux] won. Can't change history.

\x[apple-inc] stole their work and made Mac OS X without giving anything back for free as usual.

====== Android
{c}

https://en.wikipedia.org/wiki/Android_(operating_system)

* the best full featured free OS we have today, since POSIX gave up short of any UI specification, and Chrome OS is not there yet
* usable and likely efficient Java API for apps if \a[https://en.wikipedia.org/wiki/Google_v._Oracle_America][Oracle doesn't manage to destroy it with its lawsuit]

However, many, many, many terrible horrors come with it:
* it hasn't made the move to desktop for too many years
* vendors litter it with uninstallable bloatware that should be illegal
* vendors lock down devices so it is very hard to get sudo, let alone to modify their images!
* there isn't enough hardware standardization for open source distros to thrive like on desktop
* code drops mean that "master" is useless and trying to contribute from outside vendors' closed walls is a waste of time: https://stackoverflow.com/questions/1809774/how-to-compile-the-android-aosp-kernel-and-test-it-with-the-android-emulator/48310014#48310014
* if you ever go below the Java API, e.g. to C++ or AOSP build, everything is horrendous and https://unix.stackexchange.com/questions/122787/how-to-compile-extra-files-into-the-root-directory-of-an-android-rom[undocumented]
* \x[google] doesn't care about the CLI, even the hello world requires creating infinite out-of-control boilerplate from a GUI: https://stackoverflow.com/questions/20801042/how-to-create-android-project-with-gradle-from-command-line/46994747#46994747
* the boot is uber bloated and takes forever in cycle simulators

====== Microsoft
{c}

======= Microsoft Windows
{c}

https://en.wikipedia.org/wiki/Microsoft_Windows

A monopolistic operating system that only exists in the 2010's because of the IBM-linked historical lock-in and constant useless changes of the Microsoft Word document format to prevent cross operability.

It offers no technical advantages over free \x[linux] distros in the late 2010's, and it is barely impossible to buy a non-Mac computer without paying for it, which should be illegal. \x[europe][European Union], time to use your \x[europe-cookie-law][regulatory powers].

The following anecdote illustrates Windows' pervasiveness. \x[ciro-santilli] was once tutoring a high school student in Brazil, and decided to try and get her into programming. When the "Windows is not free" subject came up, the high school student was shocked: "I paid 100 dollars for this?". She never even knew it was there. To her, it was "just a computer".

Laws should really be passed forcing OEMs to allow you to not buy Microsoft Windows when buying a computer, \x[europe-cookie-law][European Union], why have you failed me in 2016??? https://en.wikipedia.org/wiki/Bundling_of_Microsoft_Windows

======= Bill Gates
{c}

https://en.wikipedia.org/wiki/Bill_Gates

The enemy?

You must watch this: \x[erbof-gates-jobs][Bill Gates vs Steve Jobs Epic Rap Battles of the History].

====== POSIX
{c}

https://en.wikipedia.org/wiki/POSIX

The real explanation: https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755

===== Executable file formats

* https://en.wikipedia.org/wiki/Executable
* https://en.wikipedia.org/wiki/Comparison_of_executable_file_formats
* https://en.wikipedia.org/wiki/Object_file

====== Executable and Linkable Format
{title2=ELF}

https://en.wikipedia.org/wiki/Executable_and_Linkable_Format

\Include[elf-hello-world]

====== Emulator

https://en.wikipedia.org/wiki/Emulator

One of the things \x[ciro-santilli] really likes, see: \x[linux-kernel-module-cheat]

If \x[computational-physics] simulates physics, emulators simulates \x[computer]{p}.

===== QEMU
{c}

https://en.wikipedia.org/wiki/QEMU

The leading open source cross architecture and KVM emulator of the 2010's.

Great way to understand how operating systems work, which \x[ciro-santilli] used extensively in his \x[linux-kernel-module-cheat].

===== The most awesome systems programming software engineers of the 2000's

* https://en.wikipedia.org/wiki/Fabrice_Bellard[Fabrice Bellard]. Creator of \x[qemu] and FFmpeg. And a bunch other random stuff.

  What is shocking about Fabrice this is that both are insanely important software that \x[ciro-santilli] really likes, and both seem to be completely unrelated subjects!

  \x[google] made billions on top of this dude:

  * FFmpeg likely being the backend of YouTube through \x[reverse-engineering]: https://streaminglearningcenter.com/blogs/youtube-uses-ffmpeg-for-encoding.html (\a[https://web.archive.org/web/20190519135210/https://streaminglearningcenter.com/blogs/youtube-uses-ffmpeg-for-encoding.html][archive])
  * https://github.com/cirosantilli/linux-kernel-module-cheat/tree/9afe5355e90bbb6b6c636f871b6eb461a957b0ea#introduction-to-qemu[QEMU] is the default emulator for https://en.wikipedia.org/wiki/Android_Studio[Android Studio] as of 2019, which \x[android] developers use by default under the hood to develop Android Apps on their desktop without the need for a real device.

  At last but not least, Fabrice also studied in the same school that Ciro studied in France, \x[ecole-polytechnique].

  It is a shame that he keeps such a low profile, there are no videos of him on the web, and he https://smartbear.com/blog/test-and-monitor/fabrice-bellard-portrait-of-a-super-productive-pro/[declines interviews].

  Another surprising fact is that Fabrice has not worked for the "Big Tech Companies" as far as can be publicly seen, but rather mostly on smaller companies that he co-founded: https://www.quora.com/Computer-Programmers/Computer-Programmers-Where-is-Fabrice-Bellard-employed
* Eli Benderski. Homepage: https://eli.thegreenplace.net/

  Amazing systems programming tutorials. Whenever you Google a hard topic, his blog comes up.

  Also has many great contributions on \x[stack-overflow]: https://stackoverflow.com/users/8206/eli-bendersky[]

  As of 2016, Eli worked at \x[google] (\a[https://dl.acm.org/citation.cfm?doid=2854038.2854041][reference]). TODO before that, I had found his earlier info previously but lost it.

  Eli focuses mostly on compiler toolchains.

==== Buildroot
{c}

https://en.wikipedia.org/wiki/Buildroot

The basis for \x[linux-kernel-module-cheat].

Buildroot is \x[good].

===== BusyBox
{c}

https://en.wikipedia.org/wiki/BusyBox

==== Cocos2d
{c}

https://en.wikipedia.org/wiki/Cocos2d

\x[ciro-santilli] considered this as the basis for \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development], but ultimately decided it was a bit too messy. Nice overall though.

==== Debugger

https://en.wikipedia.org/wiki/Debugger

===== GDB
{c}

Just add \x[gdb-dashboard], and you're good to go.

====== Reverse debugging

Nirvana!!!

The best open source implementation as of 2020 seems to be: \x[mozilla-rr].

* https://stackoverflow.com/questions/1206872/go-to-previous-line-in-gdb/46996380#46996380
* https://stackoverflow.com/questions/1470434/how-does-reverse-debugging-work/53063242#53063242
* https://stackoverflow.com/questions/3649468/setting-breakpoint-in-gdb-where-the-function-returns/46116927#46116927
* https://stackoverflow.com/questions/27770896/how-to-debug-a-rare-deadlock/50073993#50073993
* https://stackoverflow.com/questions/522619/how-to-do-bidirectional-or-reverse-debugging-of-programs/50074106#50074106 link only, marked as duplicate of go to previous line
* https://softwareengineering.stackexchange.com/questions/181527/why-is-reverse-debugging-rarely-used

======= Mozilla rr
{c}

https://github.com/mozilla/rr

====== GDB Dashboard
{c}

https://github.com/cyrus-and/gdb-dashboard

\x[gdb] Nirvana?

https://stackoverflow.com/questions/10115540/gdb-split-view-with-code/51301717#51301717

\Image[https://web.archive.org/web/20200504130959if_/https://i.stack.imgur.com/mHC8f.png]
{title=Screenshot of terminal running GDB Dashboard.}
{source=https://github.com/cyrus-and/gdb-dashboard/tree/2d31a3b391e5d0e032b791e1fb7172338b02cecb}

==== EbookFoundation/free-programming-books

https://github.com/EbookFoundation/free-programming-books

==== File manager

https://en.wikipedia.org/wiki/File_manager

\x[ciro-santilli] used to use file namangers in the past.

But he finally converted to a shell `cd` aliases that auto-`ls`: https://github.com/cirosantilli/dotfiles/blob/a51bcc324f0cff0eddd4c3bb8654ec223a0adb7b/home/.bashrc#L1058

===== Krusader

https://en.wikipedia.org/wiki/Krusader

The most powerful GUI \x[file-manager] ever?? Infinite configurability??

\x[ciro-santilli] wasted some time on it before he gave up on file managers altogether.

===== Ranger (file manager)

https://en.wikipedia.org/wiki/Ranger_(file_manager)

\x[ciro-santilli] considered it before he stopped using file managers altogether, it is not bad.

==== Git
{c}

https://en.wikipedia.org/wiki/Git

===== Git UI

Perfect Git integration belongs in \x[integrated-development-environment]{p} :-)

====== tig (git UI)

https://github.com/jonas/tig

This is good. But it misses some key operations, so much so that makes Ciro not want to learn/use it daily.

===== Pro Git book
{c}

https://github.com/progit/progit2

===== libgit2
{c}

https://github.com/libgit2/libgit2

====== libgit2/rugged
{c}

https://github.com/libgit2/rugged

===== Git web interface
{c}

====== GitHub
{c}

https://en.wikipedia.org/wiki/GitHub

This is where \x[ciro-santilli] stored his code since he started coding nonstop in 2013.

He \x[closed-source-is-less-bad-on-online-services][does not like the closed source aspect of it], but hey, there are more important things to worry about, the network effect is just too strong.

======= GitHub Pages
{c}

https://pages.github.com/

======= Octokat.js
{c}

https://github.com/philschatz/octokat.js

======== octokit.js
{c}

https://github.com/philschatz/octokit.js

====== GitLab
{c}

https://en.wikipedia.org/wiki/GitLab

GitLab was very important to Ciro because he wanted to base https://github.com/booktree/booktree[Booktree] on it.

See also: \x[ciro-santilli-s-minor-projects].

======= GitLab CI
{c}

https://github.com/gitlabhq/gitlab-ci

======= GitLab cookbook
{c}

https://gitlab.com/gitlab-org/cookbook-gitlab

==== Jami (software)
{c}

https://en.wikipedia.org/wiki/Jami_(software)

\x[ciro-santilli] worked on it for a brief time in 2016, when it was still called Ring, before he got fired. :-)

The people were quite nice and the project idea is fine, Ciro hopes they succeed.

\Video[https://www.youtube.com/watch?v=xAyIHhbQt3A]
{title="Ring - Peer to peer network for real time communication - FOSDEM 2016" published by \x[ciro-santilli][Ciro Santilli]}

==== Linux insides
{c}

https://github.com/0xAX/linux-insides

A competitor to \x[linux-kernel-module-cheat]. More wordy and less automated.

==== Scientific visualization software

https://en.wikipedia.org/wiki/Scientific_visualization

\x[ciro-santilli][Ciro's] large dataset survey: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]{full}.

===== Survey of open source interactive plotting software with a 10 million point scatter plot benchmark by Ciro Santilli

https://stackoverflow.com/questions/5854515/large-plot-20-million-samples-gigabytes-of-data/55967461#55967461

By \x[ciro-santilli].

\Image[VisIt_zoom_in_10_million_straight_line_plot_with_some_marked_points.png]
{source=https://stackoverflow.com/questions/5854515/large-plot-20-million-samples-gigabytes-of-data/55967461#55967461}

===== Matplotlib

https://en.wikipedia.org/wiki/Matplotlib

It does a huge percentage of what you want easily, and from \x[python-programming-language][the language that you want to use].

Tends to be \x[ciro-santilli][Ciro]'s pick if \x[gnuplot] can't handle the use case, or if the project is really really serious.

Couldn't handle exploration of large datasets though: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]

===== gnuplot

https://en.wikipedia.org/wiki/Gnuplot

Tends to be \x[ciro-santilli]'s first attempt for quick and dirty graphing: https://github.com/cirosantilli/gnuplot-cheat[].

\x[domain-specific-language]. When it get the jobs done, it is in 3 lines and it feels great.

When it doesn't, you Google for an hours, and then you give up in frustration, and fall back to \x[matplotlib].

Couldn't handle exploration of large datasets though: \x[survey-of-open-source-interactive-plotting-software-with-a-10-million-point-scatter-plot-benchmark-by-ciro-santilli]

==== OpenGL
{c}

https://en.wikipedia.org/wiki/OpenGL

===== Freetype GL
{c}

https://github.com/rougier/freetype-gl

Good library to render text in OpenGL, see also: https://stackoverflow.com/questions/8847899/opengl-how-to-draw-text-using-only-opengl-methods/36065835#36065835

===== opengl-tutorial.org

https://github.com/opengl-tutorials/ogl/

Good modern \x[opengl] tutorial in retained mode with shaders, see also: https://stackoverflow.com/questions/6733934/what-does-immediate-mode-mean-in-opengl/36166310#36166310

==== Terminal emulator

https://en.wikipedia.org/wiki/Terminal_emulator

Terminals don't really matter. Just use \x[tmux].

===== Yakuake

https://github.com/KDE/yakuake

===== Terminal multiplexer

https://en.wikipedia.org/wiki/Terminal_multiplexer

====== tmux

https://github.com/tmux/tmux

If session autosave was finally mainlined, this would be Nirvana.

==== Software engineer

https://en.wikipedia.org/wiki/Software_engineer

Poet warriors monkeys?

\x[ciro-santilli] claims to be one of them.

Much like a pianist plays his piano, a software engineer plays his \x[computer].

===== The correlation between software engineers and Buddhism

\x[ciro-santilli] believes that there is a positive correlation between being a \x[software-engineer][software engineer] and liking \x[buddhism][Buddhist-like things].

Maybe it is linked to minimalism and https://en.wikipedia.org/wiki/Don%27t_repeat_yourself[DRY], which software engineers value so greatly.

Even Ciro had to try an unoriginal Buddhist joke intro in https://stackoverflow.com/questions/572897/how-does-javascript-prototype-work/23877420#23877420[one of this Stack Overflow answers].

Ciro also feels that his https://github.com/cirosantilli/linux-kernel-module-cheat/tree/e1d0a2fafbb35c9e65c1a8a0b6d46df3e9161461/userland["minimal reproducible example" scientific language/concept learning method obsession] of breaking things into tiny sub-problems has a strong link with https://en.wikipedia.org/wiki/Kōan[koans].

Other programmers are equally obsessed by koans:
* http://www.catb.org/~esr/writings/unix-koans/ "The Unix Koans of Master Foo - Rootless Root (无根的根)" by the legendary https://en.wikipedia.org/wiki/Eric_S._Raymond[Eric Steven Raymond] is notable
* http://thecodelesscode.com/ "The Codeless Code" by anonymous Qi.
* http://canonical.org/~kragen/tao-of-programming.html
* https://wiki.c2.com/?MysticalProgrammingKoans
* http://rubykoans.com/[] even \x[evil] programming languages adopt them!

===== Ciro Santilli's software engineering wisdom
{c}

====== Excessive encapsulation is the root of much evil

Some anecdotes.

\x[ciro-santilli] never splits up functions unless there is more than one calling point. If you split early, the chances that the interface will be wrong are huge, and a much larger refactoring follows.

If you just want to separate variables, just use a scope e.g.:

``
int cross_block_var;

// First step.
{
    int myvar;
}

// Second step.
{
    int myvar;
}
``

Ciro has seen and had to deal with in his lifetime with two projects that had like 3 to 10 git separate Git repositories, all created and maintained by the same small group of developers of the same organization, even though one could not build without the other. Keeping everything in sync was Hell! Why not just have three directories inside a single repository with a single source of truth?

Another important case: \x[linux][Linux] should have at least a C standard library, init system, and shell in-tree, like \x[bsd-operating-systems], as mentioned at: \x[linux][Linux]{full}.

====== The development cycle time is your God

A slow development test cycle will kill your software.

New developers won't want to learn your project, because they would rather shoot themselves.

This means that build time, and the time to run tests, must be short.

5 seconds to rebuild is the maximum upper limit.

You also have to spend some time profiling execution and build from scratch times.

A slow build from scratch will mean that your CI costs a lot, money that could be invested in a new developer!

It also means that people won't bother to reproduce bugs on given commits, or https://stackoverflow.com/questions/4713088/how-to-use-git-bisect/22592593#22592593[bisect stuff].

One anecdote comes to mind. \x[ciro-santilli] was trying to debug something, and more experience colleague came over.

Ciro was running one command, wait 5 seconds, run a second command, wait 5 seconds, run a third command:
``
cmd1
# wait
cmd2
# wait
cmd3
``

The first thing the colleague said: join those three commands into one:
``
cmd1;cmd2;cmd3
``

And so, \x[the-correlation-between-software-engineers-and-buddhism][Ciro was enlightened].

====== It is impossible to predict how long it will take to do something

The trivial takes a few hours.

The easy takes a week.

And what seemed hard takes a few hours.

As "deadlines" approach, feature sets get cut down, then there are delays, and finally a feasible feature set is delivered some time after the deadline.

The only deadlines that can be met are those of tasks which have already been done but not announced.

====== Office space design and remote work

Working remotely is hard if you don't already highly master the software and enterprise systems used.

Also you don't feel people's love as strongly, and usefulness is built on love, see also \x[steve-jobs]'s Pixar office space design philosophy.

But please, give workers a small silent office so that we can concentrate instead of a silly open space, and create an internal social network so people can see what others are doing.

Remote working is much better if the majority of the team also does it, otherwise you will get excluded. Maybe after VR...

==== Computer security

https://en.wikipedia.org/wiki/Computer_security

===== Arbitracy code execution
{title2=ACE}

https://en.wikipedia.org/wiki/Arbitrary_code_execution

==== Programming languages

https://en.wikipedia.org/wiki/Programming_language

A language that allows you to talk and command a \x[computer].

There is only space for two languages at most in the world: the compiled one, and the interpreted one.

For now, when you have a choice, you must go for:
* \x[python-programming-language][Python] as the interpreted one
* C++ for compiled

Those two are languages not by any means perfect from a language design point of view, and there are likely already better alternatives, they are only chosen due to a pragmatic tradeoff between ecosystem and familiarity.

Python in particular has a lot of annoying stuff, which other languages do better. Ciro predicts that Python will become like Fortran in the future: a legacy hated by most who have moved to JavaScript long ago, but with too much dominance in certain applications like machine learning to be worth replacing, like Fortran dominates certain HPC applications.

C++ however is decent, and is evolving in very good directions in the 2010's, and will remain relevant in the foreseeable future.

Bash can also be used when you're lazy. But if the project goes on, you will sooner or later regret that choice.

The language syntax in itself does not matter. All that matters is how many useful libraries and tooling it has.

This is how other languages compare:
* C cool, but cannot make a large codebase DRY without insanity
* \x[ruby-programming-language][Ruby]: the exact same as Python, and only strong in one domain: web, while Python rules everything else, and is not bad on web either. So just kill Ruby, please.
* \x[javascript]: it is totally fine if NodeJS destroys Python and becomes the ONE scripting language to rule them all since Python and JavaScript are almost equally crappy (although JavaScript is a bit more of course).

  One thing must be said tough: `someobject.not_defined_property` silently returning `undefined` rather than blowing up is bullshit
* Java: good language, but has an ugly enterprisey ecosystem, Oracle has made / kept the development process too closed, and \a[https://en.wikipedia.org/wiki/Google_v._Oracle_America][API patenting madness on Android just kills if off completely]
* Haskell: many have tried to learn some functional stuff, but too hard. Sounds really cool though.
* Rust: sounds cool, you will gladly replace C and C++ with it if the ecosystem ramps up.
* Go: likely a good replacement for Python. If the ecosystem gets there, you will gladly use it more.
* Swift: \x[apple-inc][Apple] is \x[evil]
* C#: \x[microsoft-windows][Microsoft] is \x[evil]
* Tcl, Perl: Python killed them way back and is less insane
* R, GNU Octave and any other "\x[numerical-computing-language]": all of this is a waste of society's time as explained at: \x[numerical-computing-language]{full}

===== Python (programming language)

https://en.wikipedia.org/wiki/Python_(programming_language)

====== NumPy

https://en.wikipedia.org/wiki/NumPy

The people who work on this will \x[good][go straight to heaven], no questions asked.

===== JavaScript
{c}

https://en.wikipedia.org/wiki/JavaScript

The language all browsers converted to as of 2019, and therefore the easiest one to distribute and most widely implemented programming language.

Hopefully will be killed by https://en.wikipedia.org/wiki/WebAssembly[WebAssembly] one day.

====== Node.js
{c}

https://en.wikipedia.org/wiki/Node.js

Well, if you are gonna this \x[javascript][wonky language] thing in one place, you might as well us it everywhere and make it more decent.

======= NVM
{c}

https://github.com/nvm-sh/nvm

The best way to install Node.js:
* https://askubuntu.com/questions/49390/how-do-i-install-the-latest-version-of-node-js/425888#425888
* https://askubuntu.com/questions/594656/how-to-install-the-latest-versions-of-nodejs-and-npm/971612#971612
* https://askubuntu.com/questions/426750/how-can-i-update-my-nodejs-to-the-latest-version/1115255#1115255

===== Cascading Style Sheets
{title2=CSS}
{c}

https://en.wikipedia.org/wiki/Cascading_Style_Sheets

====== Sass (stylesheet language)

https://en.wikipedia.org/wiki/Sass_(stylesheet_language)

The more of their syntax gets merged into mainline \x[cascading-style-sheets], the better the world will be.

===== Ruby (programming language)
{c}

https://en.wikipedia.org/wiki/Ruby_(programming_language)

====== Ruby on Rails
{c}

https://en.wikipedia.org/wiki/Ruby_on_Rails

The only reason why \x[ruby-programming-language] exists. This web framework is pretty good. It is just big shame it wasn't written in Python.

Used in \x[gitlab], which is why \x[ciro-santilli] touched it.

===== Web cheat

Cheatsheet on HTML, CSS and JavaScript.

Old cheat on separate repo: \a[web/]

Now moving to either:
* separate files under: \a[web-cheat/] for the boring stuff
* subsections under this section for the more exciting stuff!

Index:
* HTML
  * \a[web-cheat/min.html]: minimal valid HTML document. It is insane however.
  * \a[web-cheat/min-sane.html]: minimal sane HTML document. There are smaller valid ones, but they are insane.
* JavaScript
  * \a[web-cheat/js-image-load.html]: load an image from JavaScript dynamically: https://stackoverflow.com/questions/226847/what-is-the-best-javascript-code-to-create-an-img-element
  * \a[web-cheat/js-image-load-viewport.html]: load an image from JavaScript dynamically when it would become visible on the viewport: https://stackoverflow.com/questions/2321907/how-do-you-make-images-load-only-when-they-are-in-the-viewport
  * \a[web-cheat/image-load-lazy.html]: https://stackoverflow.com/questions/2321907/how-do-you-make-images-load-lazily-only-when-they-are-in-the-viewport/57389607#57389607
* External libraries
  * Interactive HTML table sorting
    * \a[web-cheat/tablesort.html]: https://github.com/tristen/tablesort
    * \a[web-cheat/sortable.html]: https://github.com/HubSpot/sortable

====== Scalable Vector Graphics
{title2=SVG}

https://en.wikipedia.org/wiki/Scalable_Vector_Graphics

Companies have been really slow to support SVG features in their browsers, and that is very saddening: https://medium.com/@michaelmangial1/introduction-to-scalable-vector-graphics-6450c03e8d2e

You can't drop SVG support for `canvas` until there's a way to run untrusted JavaScript on the browser!

Examples:
* \a[web-cheat/svg.html]
* \a[web-cheat/background.svg]
* \a[web-cheat/hole.svg]
* \a[web-cheat/svg-billion-laughs.svg]
* \a[web-cheat/svg-external-js.svg]
* \a[web-cheat/svg-html.svg]
* \a[web-cheat/svg-script.svg]
* \a[web-cheat/svg-style-external.svg]
* \a[web-cheat/svg-style.svg]
* \a[web-cheat/svg.svg]
* \a[web-cheat/triangle.svg]
* \a[web-cheat/typography-line-terms.svg]

====== HTML canvas

https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API

Allows us to draw! Great way to create \x[computational-physics] demos!

Here is an animation demo with some useful controls:
\JsCanvasDemo[[
new class extends CirodownCanvasDemo {
  init() {
    super.init('hello');
    this.pixel_size_input = this.addInputAfterEnable(
      'Pixel size',
      {
        'min': 1,
        'type': 'number',
        'value': 1,
      }
    );
  }
  draw() {
    var pixel_size = parseInt(this.pixel_size_input.value);
    for (var x = 0; x < this.width; x += pixel_size) {
      for (var y = 0; y < this.height; y += pixel_size) {
        var b = ((1.0 + Math.sin(this.time * Math.PI / 16)) / 2.0);
        this.ctx.fillStyle =
          'rgba(' +
          (x / this.width) * 255 + ',' +
          (y / this.height) * 255 + ',' +
          b * 255 +
          ',255)'
        ;
        this.ctx.fillRect(x, y, pixel_size, pixel_size);
      }
    }
  }
}
]]

Bibliography: https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations

====== WebGL

https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example

\JsCanvasDemo[[
new class extends CirodownCanvasDemo {
  init() {
    super.init('webgl', {context_type: 'webgl'});
    this.ctx.viewport(0, 0, this.ctx.drawingBufferWidth, this.ctx.drawingBufferHeight);
    this.ctx.clearColor(0.0, 0.0, 0.0, 1.0);
    this.vertexShaderSource = `
#version 100
precision highp float;
attribute float position;
void main() {
  gl_Position = vec4(position, 0.0, 0.0, 1.0);
  gl_PointSize = 64.0;
}
`;

    this.fragmentShaderSource = `
#version 100
precision mediump float;
void main() {
  gl_FragColor = vec4(0.18, 0.0, 0.34, 1.0);
}
`;
    this.vertexShader = this.ctx.createShader(this.ctx.VERTEX_SHADER);
    this.ctx.shaderSource(this.vertexShader, this.vertexShaderSource);
    this.ctx.compileShader(this.vertexShader);
    this.fragmentShader = this.ctx.createShader(this.ctx.FRAGMENT_SHADER);
    this.ctx.shaderSource(this.fragmentShader, this.fragmentShaderSource);
    this.ctx.compileShader(this.fragmentShader);
    this.program = this.ctx.createProgram();
    this.ctx.attachShader(this.program, this.vertexShader);
    this.ctx.attachShader(this.program, this.fragmentShader);
    this.ctx.linkProgram(this.program);
    this.ctx.detachShader(this.program, this.vertexShader);
    this.ctx.detachShader(this.program, this.fragmentShader);
    this.ctx.deleteShader(this.vertexShader);
    this.ctx.deleteShader(this.fragmentShader);
    if (!this.ctx.getProgramParameter(this.program, this.ctx.LINK_STATUS)) {
      console.log('error ' + this.ctx.getProgramInfoLog(this.program));
      return;
    }
    this.ctx.enableVertexAttribArray(0);
    var buffer = this.ctx.createBuffer();
    this.ctx.bindBuffer(this.ctx.ARRAY_BUFFER, buffer);
    this.ctx.vertexAttribPointer(0, 1, this.ctx.FLOAT, false, 0, 0);
    this.ctx.useProgram(this.program);
  }
  draw() {
    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT);
    this.ctx.bufferData(this.ctx.ARRAY_BUFFER, new Float32Array([Math.sin(this.time / 60.0)]), this.ctx.STATIC_DRAW);
    this.ctx.drawArrays(this.ctx.POINTS, 0, 1);
  }
}
]]

=== Markup languages

==== Cirodown
{c}

https://github.com/cirosantilli/cirodown

The one to rule them all?

Motivated by \x[write-free-books-to-get-famous-website].

==== LaTeX
{c}

https://en.wikipedia.org/wiki/LaTeX

Revolutionary for its time, and a big part of \x[write-free-books-to-get-famous-website-motivation][Ciro's Enlightenment].

But too insane, and did not https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520[keep up with internet age], and so Ciro wants to kill it now.

===== KaTeX
{c}

https://github.com/KaTeX/KaTeX

Default mathematics typesetting used in \x[cirodown].

===== Softcover (LaTeX)

https://github.com/softcover/softcover

LaTeX subset that output nicely to HTML.

https://tex.stackexchange.com/questions/39309/convert-latex-to-html/196520#196520

Too insane though due to LaTeX roots, better just move to newer HTML-first markups like \x[cirodown] or \x[markdown].

==== Collaborative writing platforms

\x[ciro-santilli] wants to rule this with \x[write-free-books-to-get-famous-website].

===== GitBook

https://www.gitbook.com/

This is good, and very close competitor to \x[write-free-books-to-get-famous-website].

But they https://docs.gitbook.com/resources/gitbook-legacy/v2-differences[killed local build], so they are going to die.

===== Overleaf

https://en.wikipedia.org/wiki/Overleaf

==== Markdown

https://en.wikipedia.org/wiki/Markdown

===== Pandoc

https://en.wikipedia.org/wiki/Pandoc

This is good software.

If it only it were written in \x[javascript] instead of Haskell (!?), then Ciro might have used it as the basis for \x[cirodown].

===== karlcow/markdown-testsuite

https://github.com/karlcow/markdown-testsuite

\x[ciro-santilli] was contributing to this, when \x[commonmark] left private mode and killed it, thus wasting many hours of Ciro's time.

See also: \x[ciro-santilli-s-minor-projects].

===== CommonMark

https://commonmark.org/

CommonMark is a good project. But its initial release method was not very nice, they first developed everything behind closed doors with the big adopters like \x[github] and \x[stack-overflow], and only later released the thing read, thus wasting the time of people who were working on alternative in the meanwhile, e.g. https://github.com/karlcow/markdown-testsuite which Ciro contributed to: \x[ciro-santilli-s-minor-projects].

===== markdownlint/markdownlint

https://github.com/markdownlint/markdownlint

==== Numerical computing language

All those dedicated applied mathematicians languages are a waste of society's time, applied mathematicians are capable of writing a few braces in exchange for a sane general purpose language, we should instead just invest in good libraries with fast C bindings for those languages like NumPy where needed, and powerful mainlined \x[integrated-development-environment]{p}.

And when Ciro see the closed source ones like \x[matlab] being used, it makes him lose all hope on humanity. Why. As of 2020. Why? In the 1980', maybe. But in the 2020'?

===== Scilab
{c}

https://en.wikipedia.org/wiki/Scilab

===== MATLAB
{c}

https://en.wikipedia.org/wiki/MATLAB

==== Domain-specific language
{title2=DSL}

https://en.wikipedia.org/wiki/Domain-specific_language

\x[evil]{c}. Just use \x[python-programming-language] instead, please.

=== Book file formats

==== PDF

https://en.wikipedia.org/wiki/PDF

==== Book file format viewers

===== Evince

https://en.wikipedia.org/wiki/Evince

===== Okular

https://en.wikipedia.org/wiki/Okular

This is generally good, especially compared to how crappy Evince, the default \x[ubuntu] one, has been around 2014-2020.

==== How computers work?

A computer is a highly layered system, and so you have to decide which layers you are the most interested in studying.

It must also be said that like in any industry, certain layers are hidden in commercial secrecy mysteries making it harder to actually learn them.

But as you climb down into the abyss of low level hardcoreness, don't forget that \x[backward-design][making usefulness is more important than being hardcore]: \x[image-xkcd-378-real-programmers].

Summary from low-level to high-level:
* \x[computer-hardware]
  * \x[instruction-set-architecture]
* \x[software]
  * \x[systems-programming]
    * \x[operating-system]
  * \x[programming-languages]

\Image[https://web.archive.org/web/20191222121520if_/http://imgs.xkcd.com/comics/real_programmers.png]
{title=XKCD 378: Real Programmers.}
{source=https://xkcd.com/378/}

\Video[http://youtube.com/watch?v=_6D05gCWh_I]
{title="How low can you go" video by \x[ciro-santilli][Ciro Santilli].}
{description=In this infamous video Ciro has summarized the computer hierarchy.}

=== Computer hardware

https://en.wikipedia.org/wiki/Computer_hardware

==== Moore's law
{c}

https://en.wikipedia.org/wiki/Moore%27s_law

Born: 1965

Died: 2010+-ish

==== Semiconductor physical implementation

https://en.wikipedia.org/wiki/Semiconductor_device

This is the lowest level of abstraction computer, at which the basic gates and power are described.

At this level, you are basically thinking about the 3D layered structure of a chip, and how to make machines that will allow you to create better, usually smaller, gates.

Notable 2019 players in this area include companies such as:
* https://en.wikipedia.org/wiki/ASML_Holding[ASML], which makes machines to make chips
* https://en.wikipedia.org/wiki/TSMC[TSMC] is one of the companies that has fabs, which buys machines from companies such as ASML and puts them together in so called "silicon fabs" to make the chips

  A list of fabs can be seen at: https://en.wikipedia.org/wiki/List_of_semiconductor_fabrication_plants and basically summarizes all the companies that have fabs.

==== Register transfer level
{title2=RTL}

https://en.wikipedia.org/wiki/Register-transfer_level

Register transfer level is the abstraction level at which computer chips are mostly designed.

The only two truly relevant RTL languages as of 2020 are: \x[verilog] and \x[vhdl]. Everything else compiles to those, because that's all that EDA vendosr support.

Much like a C compiler abstracts away the CPU assembly to:
* increase portability across ISAs
* do optimizations that programmers can't feasibly do without going crazy

Compilers for RTL languages such as Verilog and \x[vhdl] abstract away the details of the specific \x[semiconductor-physical-implementation][semiconductor technology] used for those exact same reasons.

Examples of companies that work at this level include:
* https://en.wikipedia.org/wiki/Intel[Intel]. Intel also has \x[semiconductor-physical-implementation][fabs] however.
* https://en.wikipedia.org/wiki/Arm_Holdings[Arm Holdings], which does not have fabs, and is therefore called a "fabless" company.

===== Verilog
{c}

https://en.wikipedia.org/wiki/Verilog

===== VHDL
{c}

https://en.wikipedia.org/wiki/VHDL

====== GHDL
{c}

https://github.com/ghdl/ghdl

==== Central processing unit
{title2=CPU}

https://en.wikipedia.org/wiki/Central_processing_unit

==== Instruction set architecture

https://en.wikipedia.org/wiki/Instruction_set_architecture

The main interface between the \x[central-processing-unit] and \x[software].

===== Assembly language

https://en.wikipedia.org/wiki/Assembly_language

A human readable way to write instructions for an \x[instruction-set-architecture].

One of the topics covered in \x[ciro-santilli]'s \x[linux-kernel-module-cheat].

===== List of instruction set architectures

List of \x[instruction-set-architecture].

====== x86
{c}

https://en.wikipedia.org/wiki/X86

\Include[x86-paging]

====== PowerPC

https://en.wikipedia.org/wiki/PowerPC

==== Computer manufacturers

===== Lenovo

https://en.wikipedia.org/wiki/Lenovo

Their websites a bit shitty, clearly a non cohesive amalgamation of several different groups.

E.g. you have to create several separate accounts, and different regions have completely different accounts and websites.

The Europe replacement part website for example is clearly made by a third party called https://flex.com/ and has Flex written all over it, and the header of the home page has a slightly broken but very obviously broken CSS. And you can't create an account without a VAT number... and they confirmed by email that they don't sell to non-corporate entities without a VAT number. What a bullshit!

====== ThinkPad

https://en.wikipedia.org/wiki/ThinkPad

This is \x[ciro-santilli]'s favorite laptop brand. He's been on it since the early 2010's after he saw his \x[ciro-santilli-s-wife][then-girlfriend-later-wife] using it.

Ciro doesn't know how to explain it, but ThinkPads just feel... right. The screen, the keyboard, the lid, the touchpad are all exactly what Ciro likes.

The only problem with ThinkPad is that it is owned by \x[lenovo] which is a \x[ciro-santilli-s-campaign-for-freedom-of-speech-in-china][Chinese company], and that makes Ciro feel bad. But he likes it too much to quit... what to do?

Ciro is also reassured to see that in every enterprise he's been so far as of 2020, ThinkPads are very dominant. And the same when you see internal videos from other big tech enterprises, all those nerds are running... Ubuntu on ThinkPads!. And the \a[https://en.wikipedia.org/wiki/File:ISS-38_EVA-1_Laptops.jpg][ISS].

Those nerds like their ThinkPads so much, that Ciro has seen some acquaintances with crazy old ThinkPad machines, missing keyboard buttons or the like. They just like their machines that much.

ThinkPads are are also designed for repairability, and it is easy to buy replacement parts, and there are OEM part replacement video tutorials: https://www.youtube.com/watch?v=vseFzFFz8lY No visible \x[planned-obsolescence] here! With the caveat that the official online part stores can be shit as mentioned at \x[lenovo]{full}.

Further more, in 2020 Lenovo is announced full certification for \x[ubuntu] https://www.forbes.com/sites/jasonevangelho/2020/06/03/lenovos-massive-ubuntu-and-red-hat-announcement-levels-up-linux-in-2020/#28a8fd397ae0 which \i[fantastic] news!

The only thing Ciro never understood is the trackpoint: https://superuser.com/questions/225059/how-to-get-used-of-trackpoint-on-a-thinkpad Why would you use that with such an amazing touchpad? And \x[vimium].

=== Quantum computing

https://en.wikipedia.org/wiki/Quantum_computing

Quantum is getting hot in 2019, and even \x[ciro-santilli] got a bit excited: \x[quantum-computing-could-be-the-next-big-thing].

No useful algorithm has been economically accelerated by quantum yet, but the bets are on.

To get a feeling of this, just have a look at the insane number of startups that are already developing \x[quantum-algorithm]{p} for hardwares that don't/barely exist! https://quantumcomputingreport.com/players/privatestartup (\a[https://web.archive.org/web/20191223175204/https://quantumcomputingreport.com/players/privatestartup/][archive]).

==== Programmer's model of quantum computers

Much like programming classic \x[computer]{p}, the programmer's view of a \x[quantum-computing][quantum computer] is pretty simple to understand, being only marginally more complex than that of a classical computer, and can be understood in less than an hour if you know:
* what a \x[complex-number] is
* how to do \x[matrix-multiplication]

The way quantum programmers think about a quantum computer in order to program can be described as follows:
* the input of a N qubit quantum computer is a vector of dimension N containing classic bits 0 and 1
* the quantum program, also known as circuit, is a $2^n \times 2^n$ \x[unitary-matrix] of \x[complex-number][complex numbers] $Q \in \C^{2^n} \times \C^{2^n}$ that operates on the input to generate the output
* the output of a N qubit computer is also a vector of dimension N containing classic bits 0 and 1

To operate a quantum computer, you:
* set the classic input bits
* press a "RUN" button
* read the classic output bits

Each time you do this, you are literally conducting a physical experiment of the specific \x[quantum-computer-physical-implementations][physical implementation] of the computer, and so each run as the above can be simply called "an experiment".

The output comes out "instantly" in the sense that it is physically impossible to observe any intermediate state of the system, i.e. there are no clocks like in classical computers, further discussion at: \x[philosophical-discussion-of-the-programmer-s-model-of-quantum-computers].

Unlike in a classical computer, the output of a quantum computer is not deterministic however.

But the each output is not equally likely either, otherwise the computer would be useless!

This is because the probabilities of each output for a given input depends on the program it went through.

Therefore, what we have to do is to design the quantum circuit in a way that the right or better answers will come out more likely than the bad answers.

We then calculate the error bound for our circuit based on its design, and then determine how many times we have to run the experiment to reach the desired accuracy.

The probability of each output of a quantum computer derived from the input and the circuit as follows.

First we take the classic input vector of dimension N of 0's and 1's and convert it to a "quantum state vector" $\va{q_{in}}$ of dimension $2^n$:
$$
\va{q_{in}} \in \C^{2^n}
$$

We are after all going to multiply it by the program matrix, as you would expect, and that has dimension $2^n \times 2^n$!

Note that this initial transformation also transforms the discrete zeroes and ones into \x[complex-number][complex numbers].

For example, in a 3 qubit computer, the quantum vector state has dimension $2^3 = 8$ and the following shows all 8 possible conversions from the classic input to the quantum state vector:

``
000 -> 1000 0000 == (1.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0)
001 -> 0100 0000 == (0.0, 1.0, 0.0, 0.0,  0.0, 0.0, 0.0, 0.0)
010 -> 0010 0000 == (0.0, 0.0, 1.0, 0.0,  0.0, 0.0, 0.0, 0.0)
011 -> 0001 0000 == (0.0, 0.0, 0.0, 1.0,  0.0, 0.0, 0.0, 0.0)
100 -> 0000 1000 == (0.0, 0.0, 0.0, 0.0,  1.0, 0.0, 0.0, 0.0)
101 -> 0000 0100 == (0.0, 0.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0)
110 -> 0000 0010 == (0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 1.0, 0.0)
111 -> 0000 0001 == (0.0, 0.0, 0.0, 0.0,  0.0, 0.0, 0.0, 1.0)
``

This can be intuitively interpreted as:
* if the classic input is `000`, then we are certain that all three bits are 0.

  Therefore, the probability of all three 0's is 1.0, and all other possible combinations have 0 probability.
* if the classic input is `001`, then we are certain that bit one and two are 0, and bit three is 1. The probability of that is 1.0, and all others are zero.
* and so on

Now that we finally have our quantum vector, we just multiply it by the unitary matrix $Q$ of the quantum circuit, and obtain the $2^n$ dimensional output quantum state vector $\va{q_{out}}$:
$$
\va{q_{out}} = Q \: \va{q_{in}}
$$

And at long last, the probability of each classical outcome of the measurement is proportional to the square of the length of each entry in the quantum vector, analogously to what is done in the \x[schrodinger-equation].

For example, suppose that the 3 qubit output were:
$$
\begin{aligned}
\va{q_{out}} &=
\begin{bmatrix}
\frac{\sqrt{3}}{2} \\
0.0 \\
\frac{1}{2} \\
0.0 \\
0.0 \\
0.0 \\
0.0 \\
0.0
\end{bmatrix}
\end{aligned}
$$

Then, the probability of the first and third possible outcomes would be the length of each component squared:
$$
\begin{aligned}
\abs{\frac{\sqrt{3}}{2}}^2 &= \frac{\sqrt{3}}{2}^2 &= \frac{3}{4} \\
\abs{\frac{1}{2}^2}^2      &= \frac{1}{2}^2        &= \frac{1}{4}
\end{aligned}
$$

i.e. 75% for the first, and 25% for the third outcomes, where just like for the input:
* first outcome means `000`: all output bits are zero
* third outcome means `010`: the first and third bits are zero, but the second one is 1

All other outcomes have probability 0 and cannot occur, e.g.: `001` is impossible.

Keep in mind that the quantum state vector can also contain complex numbers, but we just take their magnitude in that case, e.g. the following quantum state would lead to the same probabilities as the previous one:
$$
\begin{aligned}
\abs{\frac{1 + \sqrt{2}i}{2}}^2 &= \frac{1^2 + \sqrt{2^2}}{2^2} &= \frac{3}{4} \\
\abs{\frac{i}{2}}^2             &= \frac{1^2}{2^2}              &= \frac{1}{4}
\end{aligned}
$$

This interpretation of the quantum state vector clarifies a few things:
* the input quantum state is just a simple state where we are certain of the value of each classic input bit
* the matrix has to be unitary because the total probability of all possible outcomes must be 1.0

  This is true for the input matrix, and unitary matrices have the probability of maintaining that property after multiplication.

  Unitary matrices are a bit analogous to https://en.wikipedia.org/wiki/Self-adjoint_operator[self-adjoint operators] in general quantum mechanics (self-adjoint in finite dimensions implies is stronger)

  This also allows us to understand intuitively why quantum computers may be capable of accelerating certain algorithms exponentially: that is because the quantum computer is able to quickly do an unitary matrix multiplication of a humongous $2^{N}$ sized matrix.

  If we are able to encode our algorithm in that matrix multiplication, considering the probabilistic interpretation of the output, then we stand a chance of getting that speedup.

===== Quantum logic gate

https://en.wikipedia.org/wiki/Quantum_logic_gate

At \x[programmer-s-model-of-quantum-computers] we saw that making a quantum circuit actually comes down to designing one big unitary matrix.

We have to say though that that was a bit of a lie.

Quantum programmers normally don't just produce those big matrices manually from scratch.

Instead, they use quantum logic gates.

There are a few reasons for that depending on how you look at it.

====== Why quantum logic gates are needed: physical implementation

One direct practical reason is that we need to map the matrix to real quantum hardware somehow, and all quantum hardware designs so far and likely in the future are gate-based: you manipulate a small number of qubits at a time (2) and add more and more of such operations.

While there are "quantum compilers" to increase the portability of quantum programs, it is to be expected that programs manually crafted for a specific hardware will be more efficient just like in classic computers.

TODO: is there any clear reason why computers can't beat humans in approximating any unitary matrix with a gate set?

This is analogous to what classic circuit programmers will do, by using smaller https://en.wikipedia.org/wiki/Logic_gate[logic gates] to create complex circuits, rather than directly creating one huge https://en.wikipedia.org/wiki/Truth_table[truth table].

The most commonly considered quantum gates take 1, 2, or 3 qubits as input.

The gates themselves are just unitary matrices that operate on the input qubits and produce the same number of output qubits.

For example, the matrix for the quantum CNOT gate, which takes 2 qubits as input is:

``
1 0 0 0
0 1 0 0
0 0 0 1
0 0 1 0
``

The final question is then: if I have a 2 qubit gate but an input with more qubits, say 3 qubits, then what does the 2 qubit gate (4x4 matrix) do for the final big 3 qubit matrix (8x8)? In order words, how do we scale quantum gates up to match the total number of qubits?

The intuitive answer is simple: we "just" extend the small matrix with a larger identity matrix so that the sum of the probabilities third bit is unaffected.

More precisely, we likely have to extend the matrix in a way such that the https://cs.stackexchange.com/questions/71462/how-are-partial-measurements-performed-on-a-n-qubit-quantum-circuit[partial measurement] of the original small gate qubits leaves all other qubits unaffected.

For example, if the circuit were made up of a CNOT gate operating on the first and second qubits as in:
``
0 ----+----- 0
      |
1 ---CNOT--- 1

2 ---------- 2
``

then we would just extend the 2x2 CNOT gate to:

TODO lazy to properly learn right now. Apparently you have to use the https://en.wikipedia.org/wiki/Kronecker_product[Kronecker product] by the identity matrix.

Bibliography:
* https://quantumcomputing.stackexchange.com/questions/2299/how-to-interpret-a-quantum-circuit-as-a-matrix

====== Why quantum logic gates are needed: it is not possible to compute the matrix explicitly

One key insight, is that the matrix is going to be huge, and won't fit into memory. Remember, the matrix is exponential in the number qubits, and $2^{100}$ is more than the number of atoms in the universe!

Therefore, off the bat we know that we cannot possibly describe those matrices in an explicit form, but rather must use some kind of shorthand.

But it gets worse.

Even if we had enough memory, the act of explicitly computing the matrix is not generally possible.

This is because knowing the matrix, basically means knowing the probability result for all possible $2^{N}$ outputs for each of the $2^{N}$ possible inputs.

But if we had those probabilities, our algorithmic problem would already be solved in the first place! We would "just" go over each of those output probabilities (OK, there are $2^{N}$ of those, which is also an insurmountable problem in itself), and the largest probability would be the answer.

So if we could calculate those probabilities on a classical machine, we would also be able to simulate the quantum computer on the classical machine, and quantum computing would not be able to give exponential speedups, which we know it does.

To see this, consider that for a given input, say `000` on a 3 qubit machine, the corresponding 8-sized quantum state looks like:

``
000 -> 1000 0000 == (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
``

and therefore when you multiply it by the unitary matrix of the quantum circuit, what you get is the first column of the unitary matrix of the quantum circuit. And `001`, gives the second column and so on.

As a result, to prove that a quantum algorithm is correct, we need to be a bit smarter than "just calculate the full matrix".

Which is why you should now go and read: \x[quantum-algorithm]{full}.

This type of thinking links back to how physical experiments relate to quantum computing: a quantum computer realizes a physical experiment to which we cannot calculate the probabilities of outcomes without exponential time.

So for example in the case of a \x[photonic-quantum-computer], you are not able to calculate from theory the probability that photons will show up on certain wires or not.

====== Universal quantum gates

https://en.wikipedia.org/w/index.php?title=Quantum_logic_gate&oldid=935584838#Universal_quantum_gates

Just https://en.wikipedia.org/wiki/Functional_completeness[like as for classic gates], we would like to be able to select \x[quantum-computer-physical-implementations] that can represent one or a few gates that can be used to create \i[any] quantum circuit.

Unfortunately, in the case of quantum circuits this is obviously impossible, since the space of N x N unitary matrices is infinite and continuous.

Therefore, when we say that certain gates form a "set of universal quantum gates", we actually mean that "any unitary matrix can be approximated to arbitrary precision with enough of these gates".

Or if you like fancy Mathy words, you can say that the subgroup of the \x[unitary-group][unitary group] \x[subgroup-generated-by-a-group][generated by] our basic gate set is a \x[dense-set][dense subset] of the unitary group.

===== Philosophical discussion of the programmer's model of quantum computers

Just like a classic \x[software-engineer][programmer] does not need to understand the intricacies of how transistors are implemented and CMOS semiconductors, the quantum programmer does not understand physical intricacies of the underlying \x[quantum-computer-physical-implementations][physical implementation].

The main difference to keep in mind is that quantum computers cannot https://en.wikipedia.org/wiki/Observer_effect_(physics)[save and observe intermediate quantum state], so programming a quantum computer is basically like programming a combinatorial-like circuit with gates that operate on (qu)bits:
* https://quantumcomputing.stackexchange.com/questions/8441/does-a-quantum-computer-have-a-clock-signal-and-if-yes-how-big-is-it/9383#9383
* https://quantumcomputing.stackexchange.com/questions/8849/quantum-circuits-explain-algorithms-why-didnt-classical-circuits/8869#8869

For this reason programming a quantum computer is much like programming a classical combinatorial circuit as you would do with https://en.wikipedia.org/wiki/SPICE[SPICE], \x[register-transfer-level][verilog-or-vhdl], in which you are basically describing a graph of gates that goes from the input to the output

For this reason, we can use the words "program" and "circuit" interchangeably to refer to a quantum program

Also remember that and there is no no clocks in combinatorial circuits because there are no registers to drive; and so there is no analogue of clock in the quantum system either,

Another consequence of this is that programming quantum computers does not look like programming the more "common" procedural programming languages such as C or Python, since those fundamentally rely on processor register / memory state all the time.

Quantum programmers can however use classic languages to help describe their quantum programs more easily, for example this is what happens in \x[qiskit], where you write a Python program that makes Qiskit library calls that describe the quantum program.

==== Quantum algorithm

This is the true key question: what are the most important algorithms that would be accelerated by quantum computing?

The most comprehensive list is the amazing: https://quantumalgorithmzoo.org/ which is on GitHub: https://github.com/stephenjordan/stephenjordan.github.io

Maybe there is some room for doubt because some applications might be way better in some \x[quantum-computer-physical-implementations][implementations], but we should at least have a good general idea.

However, clear information on this really hard to come by, not sure why.

Whenever asked e.g. at: https://physics.stackexchange.com/questions/3390/can-anybody-provide-a-simple-example-of-a-quantum-computer-algorithm/3407 people say the infinite mantra:
* \x[grover-s-algorithm][Grover]: speedup not exponential
* Deutsch: solves an useless problem
* Shor: cryptography is boring, do you have proper optimization or \x[quantum-chemistry] algorithms that will make trillions?
* https://en.wikipedia.org/wiki/Quantum_Fourier_transform[Quantum Fourier transform]: TODO is the speedup exponential or not?

\x[ciro-santilli] wonders if there is any understandable algorithm that meets the above criteria.

The area that Ciro and many people are te most excited about is \x[quantum-computing-computational-chemistry-algorithms].

===== Grover's algorithm

https://en.wikipedia.org/wiki/Grover%27s_algorithm

==== Quantum computer error correction

https://en.wikipedia.org/wiki/Quantum_error_correction

Technique that uses multiple non-ideal qubits (physical qubits) to simulate/produce one perfect qubit (logical).

TODO understand in detail. This appears to be a fundamental technique since all physical systems we can manufacture are imperfect.

For example, when https://www.bloomberg.com/news/articles/2020-04-06/quantum-computing-startup-raises-215-million-for-faster-device[PsiQuantum raised 215M in 2020], they announced that they intended to reach 1 million physical qubits, which would achieve between 100 and 300 logical qubits.

https://youtu.be/7wCBkAQYBZA?t=2778 describes an error correction approach for \x[photonic-quantum-computer].

==== Quantum computing players

It is hard to beat the lists present at: https://quantumcomputingreport.com (closed source unfortunately, no GitHub) in particular:
* https://quantumcomputingreport.com/scorecards/qubit-count/ lists what are the latest qbit counts and technologies that each player is using
* https://quantumcomputingreport.com/players/public-companies/ summarizes what each player has been doing in a few paragraphs

Also of interest: https://quantumzeitgeist.com/interactive-map-of-quantum-computing-companies-from-around-the-globe/

===== D-Wave Systems
{c}

https://en.wikipedia.org/wiki/D-Wave_Systems

Vaporware?

==== Quantum computer physical implementations

Lists of the most promising implementations:
* https://en.wikipedia.org/wiki/Quantum_computing#Physical_realizations
* https://quantumcomputingreport.com/scorecards/qubit-count/[], see also: \x[quantum-computing-players]

As of 2020, the hottest by far are:
* \x[superconducting-quantum-computer]
* \x[trapped-ion-quantum-computer]
* \x[photonic-quantum-computer]

===== Quantum computers as experiments that are hard to predict outcomes

One possibly interesting and possibly obvious point of view, is that a quantum computer is an experimental device that executes a quantum probabilistic experiment for which the probabilities cannot be calculated theoretically efficiently by a classical computer.

This is how quantum computing was originally theorized by the likes of \x[richard-feynman]: they noticed that "Hey, here's a well formulated \x[quantum-mechanics] problem, which I know the algorithm to solve (calculate the probability of outcomes), but it would take exponential time on the problem size".

The converse is then of course that if you were able to encode useful problems in such an experiment, then you have a computer that allows for exponential speedups.

This can be seen very directly by studying one specific quantum computer implementation. E.g. if you take the simplest to understand one, \x[photonic-quantum-computer], you can make systems for which you need exponential time to calculate the probabilities that photons will exit through certain holes and not others.

The obvious aspect of this idea is by coming from \x[why-quantum-logic-gates-are-needed-it-is-not-possible-to-compute-the-matrix-explicitly]: knowing the full explicit matrix is impossible in practice, and knowing the matrix is equivalent to knowing the probabilities of every outcome.

===== Superconducting quantum computer

https://en.wikipedia.org/wiki/Superconducting_quantum_computing

Based on the \x[josephson-effect]. Yet another application of that phenomenal idea!

Philosophically, this approach is promising because superconductivity is a https://en.wikipedia.org/wiki/Macroscopic_quantum_phenomena[macroscopic quantum phenomena] of \x[bose-einstein-condensate][Bose Einstein condensation], and so as a macroscopic phenomena, it is easier to control and observe.

It is fun to see that the representation of information in the QC basically uses an https://en.wikipedia.org/wiki/LC_circuit[LC circuit], which is a very classical resonator circuit.

As mentioned at https://en.wikipedia.org/wiki/Superconducting_quantum_computing#Qubit_archetypes[] there are actually a few different types of superconducting qubits:
* flux
* charge
* phase

and hybridizations of those such as:
* \x[transmon]

Input:
* microwave radiation to excite circuit, or do nothing and wait for it to fall to 0 spontaneously
* interaction: TODO
* output: TODO

\Video[http://youtube.com/watch?v=t5nxusm_Umk]
{title="Alexandre Blais - Quantum Computing with Superconducting Qubits (Part 1) - CSSQI 2012" published by Institute for Quantum Computing on 2012-11-23.}
{description=https://youtu.be/t5nxusm_Umk?t=784[784s] explains why non-linearity is needed: otherwise the input energy would just go to higher and higher levels.}

\Video[http://youtube.com/watch?v=Kz6mhh1A_mU]
{title="Quantum Transport, Lecture 16: Superconducting qubits" by Sergey Frolov published on Mar 26, 2013.}
{description=https://youtu.be/Kz6mhh1A_mU?t=1171[1171s] describes several possible realizations: charge, flux, charge/flux and phase.}

====== Transmon

https://en.wikipedia.org/wiki/Transmon

Used in: https://en.wikipedia.org/wiki/Sycamore_processor

\Video[http://youtube.com/watch?v=VA2HEUmkrKo]
{title="Control of transmon qubits using a cryogenic CMOS integrated circuit (QuantumCasts)" by TensorFlow (Google) published on Apr 14, 2020.}

===== Trapped ion quantum computer

https://en.wikipedia.org/wiki/Trapped_ion_quantum_computer

TODO understand.

===== Photonic quantum computer

* https://en.wikipedia.org/wiki/Linear_optical_quantum_computing
* https://en.wikipedia.org/wiki/KLM_protocol

Uses photons!

At \x[two-photon-interference-experiment] the key experiment that gives the basis of a photonic quantum compute is described.

The physical representation of the information encoding is very easy to understand:
* input: we choose to put or not photons into certain wires or no
* interaction: two wires pass very nearby at some point, and photons travelling on either of them can jump to the other one and interact with the other photons
* output: the probabilities that photos photons will go out through one wire or another

PsiQuantum raised 215M in 2020 https://www.bloomberg.com/news/articles/2020-04-06/quantum-computing-startup-raises-215-million-for-faster-device

They are very secretive, but we know that they want to reuse classical \x[semiconductor-physical-implementation][semiconductor fabrication technologies].

Before starting the company, its CEO https://www.linkedin.com/in/jeremy-o-brien-39482631/[Jeremy O'Brien] was in academia and did actually explain stuff however: \x[obrien-quantum-technologies-googletechtalks]:
* https://youtu.be/7wCBkAQYBZA?t=1285[1285s] shows an experimental curve for a \x[two-photon-interference-experiment] by Hong, Ou, Mandel (1987)
* https://youtu.be/7wCBkAQYBZA?t=1440[1440s] shows a KLM CNOT gate
* https://youtu.be/7wCBkAQYBZA?t=2831[2831s] discusses the \x[quantum-computer-error-correction] scheme for photonic QC based on the idea of the "Raussendorf unit cell"

\Video[http://youtube.com/watch?v=7wCBkAQYBZA]
{id=obrien-quantum-technologies-googletechtalks}
{title=Jeremy O'Brien: "Quantum Technologies" published by GoogleTechTalks on Jun 17, 2014.}
{description=This is a good introduction. Highly recommended.}

==== Quantum computing milestones

https://en.wikipedia.org/wiki/Timeline_of_quantum_computing

==== Superconducting quantum computing

https://en.wikipedia.org/wiki/Superconducting_quantum_computing

Dominant 2019 method.

==== Quantum computer simulators

https://quantumcomputingreport.com/resources/tools/ is hard to beat as usual.

* https://github.com/Strilanc/Quirk JavaScript drag-and-drop, by a 2019-quantum-computing-Googler, impressive

===== Qiskit

https://en.wikipedia.org/wiki/Qiskit

Python library, claims multiple backends, including simulation and real IBM quantum hardware.

=== Cyber crime

==== Silk Road website

https://en.wikipedia.org/wiki/Silk_Road_(marketplace)

\x[ciro-santilli] has become slightly obsessed with this story, and the main mastermind https://en.wikipedia.org/wiki/Ross_Ulbricht[Ross Ulbricht].

\Image[https://web.archive.org/web/20190629084608if_/https://cdn.arstechnica.net/wp-content/uploads/2015/01/GX-201C-640x853.png]
{title=Ross Ulbricht's open laptop shortly after his arrest at the Francisco Public Library.}
{description=He was running some GNOME based distro, could be \x[ubuntu] from that photo, and likely is given that Ross once recommended Ubuntu to his flatmate.}
{source=https://arstechnica.com/tech-policy/2015/01/the-incredibly-simple-story-of-how-the-govt-googled-ross-ulbricht}

The best article available so far is: https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind (\a[https://web.archive.org/web/20191008142214/https://www.theregister.co.uk/2019/01/29/how_i_caught_silk_road_mastermind][archive]) which summarizes what one of the investigators said in a 2019 French computer security conference.

The key living posts are:
* https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php (\a[https://web.archive.org/web/20191121133952/https://stackoverflow.com/questions/15445285/how-can-i-connect-to-a-tor-hidden-service-using-curl-in-php][archive]) which was originally asked under the real name, and then the username was changed to "Frosty", which matches one of the server's logins after the laptop was captured
* altoid early Silk Road mention: https://bitcointalk.org/?topic=175.70;wap2 (\a[https://web.archive.org/web/20190628133852/https://bitcointalk.org/?topic=175.70;wap2][archive])

The big question is of course how libertarian free market ideologically motivated the website was, and how purely criminal greed it was.

The magnitude of the early operational mistakes does make Ciro think that Ross did it "because he could" and https://www.urbandictionary.com/define.php?term=i%20did%20it%20for%20the%20lulz["for the lolz"] in a real world https://en.wikipedia.org/wiki/Breaking_Bad[Breaking Bad] way.

The entry in Ross' diary does \x[ciro-santilli-s-selfish-desires][resonate a lot] with Ciro and any entrepreneur, full diary at: https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/ (\a[https://web.archive.org/web/20190613011454/https://www.wired.com/2015/01/heres-secret-silk-road-journal-laptop-ross-ulbricht/][archive]).

\Q[
\[i\]n 2011," \[I believe I will be\] "creating a year of prosperity and power beyond what I have ever experienced before,

Silk Road is going to become a phenomenon and at least one person will tell me about it, unknowing that I was its creator."
]

Having this kind of feeling, is the greatest thing any human can have, and what motivates all great things.

Capitalizing in illegal things though is a cheat, big things take longer than a few years to reach, but reaching them is that much more satisfying as well.

Other interesting quotes:
\Q[I hated working for someone else and trading my time for money with no investment in myself.]
which Ciro also feels, see \x[don-t-be-a-pussy], and:
\Q[Everyone knows I am working on a bitcoin exchange. I always thought honesty was the best policy and now I didn't know what to do. I should have just told everyone I am a freelance programmer or something, but I had to tell half truths. It felt wrong to lie completely so I tried to tell the truth without revealing the bad part, but now I am in a jam. Everyone knows too much. Dammit.]

Also very worth reading is the San Francisco flat mate account: https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord (\a[https://web.archive.org/web/20191201090353/https://www.vice.com/en_us/article/ae3q8g/my-roommate-the-darknet-drug-lord][archive]).

The murder for hire allegations are also interesting: https://mashable.com/2013/10/03/silk-road-hits[], he paid 80k dollars to undercover DEA agents!

Except for the fact that Ross was an 80 million dollar drug lord, those accounts sound exactly like what you would expect from any other nerdy startup founder! The:
* "just do it" strategy effectively going to a minimal viable product (manual transaction management!), while making many mistakes along the way, including hiring mistakes and successes when scaling is needed
* the hardship of self bootstraping your own social network (here with some kilos of mushrooms)
* the variety of periods, from relatively calm, to hair pulling stress during big changes

It is also amusing to see very concretely the obvious fact that the FBI can get a https://en.wikipedia.org/wiki/Subpoena[subpoena] for all accounts you ever had, e.g. they knew his laptop model from Amazon and brought a corresponding power cable to the arrest! If you are going to be a cyber criminal, don't use your real name, ever!

Should justice be blind? Maybe, but it does hurt.

=== Artificial general intelligence

https://en.wikipedia.org/wiki/Artificial_general_intelligence

Shortened to: "AGI".

Given enough computational power per dollar, AGI is inevitable, but it is not sure certain ever happen given the end of \x[moore-s-law][end of Moore's Law].

Alternatively, it could also be achieved genetically modified biological brains + https://en.wikipedia.org/wiki/Brain_in_a_vat[brain in a vat].

Imagine a brain the size of a building, perfectly engineered to solve certain engineering problems, and giving hints to human operators + taking feedback from cameras and audio attached to the operators.

This likely implies transhumanism, and https://en.wikipedia.org/wiki/Mind_uploading[mind uploading].

\x[ciro-santilli] joined the silicon industry at one point to help increase our computational capacity and reach AGI.

Ciro believes that the easiest route to full AI, if any, could involve \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development].

=== Machine learning

https://en.wikipedia.org/wiki/Machine_learning

The main reason \x[ciro-santilli] never touched it is that it feels that every public data set has already been fully mined or has already had the most interesting algorithms developed for it, so you can't do much outside of big companies.

This is why Ciro started \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development] to generate synthetic data and thus reduce the cost of data.

The other reason is that it is ugly.

==== Natural language processing

https://en.wikipedia.org/wiki/Natural_language_processing

An impossible \x[artificial-general-intelligence][AGI-complete] dream.

It is impossible to understand speech, and take meaningful actions from it, if you don't understand what is being talked about.

And without doubt, "understanding what is being talked about" comes down to understanding (efficiently representing) the geometry of the 3D world with a time component.

Not from hearing sounds alone.

=== E Ink
{c}

https://en.wikipedia.org/wiki/E_Ink

Electronic Ink such as that found on Amazon Kindle is the greatest invention ever made by man.

Once E Ink reaches reasonable refresh rates to replace liquid crystal displays, the world will finally be saved.

It would allow \x[ciro-santilli] to spend his entire life in front of a screen rather in the real world without getting tired eyes, and even if it is sunny outside.

Ciro stopped reading non-code non-news a while back though, so the current refresh rates are useless, what a shame.

== Chemistry

https://en.wikipedia.org/wiki/Chemistry

Chemistry is fun. Too hard for precise \x[physics] (pre \x[quantum-computing], see also \x[quantum-chemistry]), but not too hard for some maths like social sciences.

And it underpins \x[biology].

=== Atomic theory

https://en.wikipedia.org/wiki/Atomic_theory

Theory that atoms exist, i.e. matter is not continuous.

Evidence:
* \x[brownian-motion] mathematical analysis in 1908
* \x[x-ray-crystallography]: it \i[sees] crystal latices
* \x[scanning-tunnelling-microscope]: it \i[sees] individual atoms for Christ's sake, what else do you want?

  \Image[https://upload.wikimedia.org/wikipedia/en/3/37/A_Boy_and_His_Atom_%28still%29.jpg]
  {title=Still from https://en.wikipedia.org/wiki/A_Boy_and_His_Atom[A boy and his atom] by https://en.wikipedia.org/wiki/IBM[IBM].}
  {source=https://en.wikipedia.org/wiki/File:A_Boy_and_His_Atom_(still).jpg}

==== Brownian motion
{c}

https://en.wikipedia.org/wiki/Brownian_motion

Small microscopic visible particles move randomly around in water.

If water were continuous, this shouldn't happen.

The amount it moves also quantitatively matches with the expected properties of water.

Tiny uniform plastic beads called "microbeads" are the preferred 2019 modern method of doing this: https://en.wikipedia.org/wiki/Microbead

Original observation in 1827 by Brown, with further experiments and interpretation in 1908 by https://en.wikipedia.org/wiki/Jean_Baptiste_Perrin[Perrin].

\Video[http://youtube.com/watch?v=UUSL0NqcY6k]
{title="Observing Brownian motion of micro beads" by Forrest Charnock published on 2016-06-04.}

=== Chemical element

https://en.wikipedia.org/wiki/Chemical_element

==== Hydrogen
{title2=H, 1}

https://en.wikipedia.org/wiki/Hydrogen

==== Helium
{title2=He, 2}

https://en.wikipedia.org/wiki/Helium

===== Liquid helium

https://en.wikipedia.org/wiki/Liquid_helium

4K. Enough for to make "low temperature superconductors" like regular metals superconducting.

Contrast with \x[liquid-nitrogen], which is much cheaper but only goes to 77K.

==== Nitrogen
{title2=N, 7}

https://en.wikipedia.org/wiki/Nitrogen

===== Liquid nitrogen

https://en.wikipedia.org/wiki/Liquid_nitrogen

77K. Low enough for "high tempreature superconductors" such as \x[yttrium-barium-copper-oxide], but for "low temperature superconductors", you need to go much lower, typically with \x[liquid-helium], which is likely much more expensive. TODO by how much?

\Video[https://www.youtube.com/watch?v=PEgm5NFXlFM]
{title="Where Do You Get Liquid Nitrogen?" published by The King of Random on 2016-05-23.}
{description=He just goes to a medical gases shop in a local industrial estate and buys 20L for 95 dollars and brings it back on his own Dewar marked 35LD.}

\Video[https://www.youtube.com/watch?v=dCXkaQa53QQ]
{title="Making Liquid Nitrogen From Scratch!" published by Veritasium on 2019-08-16.}
{description="From scratch" is perhaps a bit clickbaity, but I'll take it.}

==== Sodium
{title2=Na, 11}

https://en.wikipedia.org/wiki/Sodium

===== Sodium chloride
{title2=NaCl}

https://en.wikipedia.org/wiki/Sodium_chloride

==== Cesium
{title2=Cs, 55}

https://en.wikipedia.org/wiki/Caesium

===== Cesium-137

https://en.wikipedia.org/wiki/Caesium-137

Highly radioactive isotope of \x[cesium] Produced from the \x[nuclear-fission] of \x[uranium], TODO exact reaction, not found in nature.

The fucked thing about this byproduct is that it is in the same chemical family as \x[sodium], and therefore forms a salt that looks like regular \x[sodium-chloride][table salt], and dissolves in water and therefore easily enters your body and sticks to things.

This is why for example in the \x[goiania-accident] a girl ended up ingesting Cesium-137 after eating an egg after touching the Cesium with her hands.

\Image[https://upload.wikimedia.org/wikipedia/commons/3/3e/Cs-137-decay.svg]
{title=Cesium-137 decay scheme.}

====== Goiânia accident
{id=goiania-accident}
{title2=1987}

https://en.wikipedia.org/wiki/Goiânia_accident

==== Radium
{title2=Ra, 88}

https://en.wikipedia.org/wiki/Radium

Discovered by \x[marie-curie] when she noticed that there was some yet unknown more radioactive element in their raw samples, after \x[uranium] had already been separated.

\Image[https://upload.wikimedia.org/wikipedia/commons/6/65/Decay_chain%284n%2B2%2C_Uranium_series%29.svg]
{title=The \x[uranium][Uranium]-238 decay chain is the main source of naturally occuring radium.}

\Video[https://www.youtube.com/watch?v=wAZX8sWSCqs]
{title="The epic story of radium" by Institut de Radioprotection et de Sûreté Nucléaire - IRSN published on 2013-06-06.}

==== Uranium
{title2=U, 92}

https://en.wikipedia.org/wiki/Uranium

Vs \x[plutonium]: \x[uranium-vs-plutonium-quora-answer-by-ciro-santilli].

===== Uranium vs plutonium Quora answer by Ciro Santilli

https://www.quora.com/What-is-the-difference-between-plutonium-and-uranium/answer/Ciro-Santilli

==== Plutonium
{title2=Pu, 94}

https://en.wikipedia.org/wiki/Plutonium

Vs \x[uranium]: \x[uranium-vs-plutonium-quora-answer-by-ciro-santilli].

=== Chemical process design

https://en.wikipedia.org/wiki/Process_design

\Video[https://www.youtube.com/watch?v=gkj-FZOldpI]
{title="Computer Aided Simulation & Design in Chemical Engineering (E21)" by Chemical Engineering Guy published on 2016-07-28.}
{description=Interesting overview of the different types of modelling software used in chemical process design.}

\Video[https://www.youtube.com/watch?v=9jRfAJJO7mM]
{title="How to Design a Total Synthesis" by Mike Christiansen published on 2013-06-19}
{description=Just a ultra quick hello world with some very basic ideas, but worth watching.}

\Video[https://www.youtube.com/watch?v=rbhkAu5mgis]
{title="SuperPro Designer: Fermentation Simulation" by LearnChemE published on 2012-10-17}

==== Chemical process design software

\Video[https://www.youtube.com/watch?v=mcbbWn4F1lQ]
{title="Process Simulation Software FREE Download - Aspen Hysys versus DWSim | COCO" by Jeferson Costa published on 2020-02-29.}
{description=Jeferson, a \x[brazil][Brazillian] from Petrobras, is the creator of the open source DWSim software, and in this video he  gives a quick demo of his software and compares it briefly to \x[aspen-hysys], which appears to be the golden paid reference implementaion.}

===== Aspen Hysys

https://en.wikipedia.org/wiki/Aspen_HYSYS

\Video[https://www.youtube.com/watch?v=mcbbWn4F1lQ]
{title="Aspen Hysys Introduction" by Emmanuel Oloyede published on 2016-07-19.}
{description=Holy crap, the UI is idential to Microsoft Word with that huge top bar!!!}

==== Retrosynthetic analysis

https://en.wikipedia.org/wiki/Retrosynthetic_analysis

=== Entropy of a chemical reaction

First, experiments: https://chemistry.stackexchange.com/questions/42066/is-there-a-way-to-experimentally-measure-entropy

No YouTube video? Really?

==== Gibbs free energy

https://en.wikipedia.org/wiki/Gibbs_free_energy

TODO understand more intuitively how that determines if a reaction happens or not.

\Video[https://www.youtube.com/watch?v=DKiBA35Nqp4]
{title=Lab 7 - Gibbs Free Energy by MJ Billman published on 2020-03-24.}
{description=Shows the shift of equilibrium due to temperature change with a color change in a HCl CoCl reaction. Unfortunately there are no conclusions because its student's homework.}

== Microscopy

=== Scanning electron microscope

https://en.wikipedia.org/wiki/Scanning_electron_microscope

=== Scanning tunnelling microscope

https://en.wikipedia.org/wiki/Scanning_tunneling_microscope

It sees and moves individual atoms!!!

* https://en.wikipedia.org/wiki/IBM_(atoms)
* https://en.wikipedia.org/wiki/A_Boy_and_His_Atom

=== Transmission electron microscope

https://en.wikipedia.org/wiki/Transmission_electron_microscopy

=== X-ray crystallography
{c}

https://en.wikipedia.org/wiki/X-ray_crystallography

One of its main applications is to determine the 3D structure of \x[protein]{p}.

Sometimes you are not able to crystallize the proteins however, and the method cannot be used.

Crystallizing is not simple because:
* you need a considerable amount of the protein
* sometimes it only crystallizes if you add some extra small chemical that stabilizes it

\x[cryogenic-electron-microscopy] can sometimes determine the structures of proteins that failed crystallization.

=== Cryogenic electron microscopy
{title2=cryoEM}

https://en.wikipedia.org/wiki/Cryogenic_electron_microscopy

This technique has managed to determine protein 3D structures for proteins that people were not able to crystallize for \x[x-ray-crystallography].

It is said however that cryoEM is even fiddlier than X ray crystallography, so it is mostly attempted if crystallization attempts fail.

By looking at \x[image-cryoem], you can easily understand the basics of cryoEM.

We just put a gazillion copies of our molecule of interest in a solution, and then image all of them in the frozen water.

Each one of them appears in the image in a random rotated view, so given enough of those point of view images, we can deduce the entire 3D structure of the molecule.

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Cryoem_groel.jpg/600px-Cryoem_groel.jpg]
{id=image-cryoem}
{height=400}
{source=https://en.wikipedia.org/wiki/File:Cryoem_groel.jpg}
{title=Image showing This is the type of image that you get out of a raw CryoEM experiment.}

== Biology

https://en.wikipedia.org/wiki/Biology

\x[ciro-santilli] believes that \x[molecular-biology-technologies].

=== DNA

https://en.wikipedia.org/wiki/DNA

Since DNA is the centerpiece of life, \x[ciro-santilli] is extremely excited about DNA-related technologies, see also: \x[molecular-biology-technologies].

==== DNA detection

DNA detection means determining if a specific DNA sequence is present in a sample.

This can be used to detect if a given species of microorganism is present in a sample, and is therefore a widely used diagnostics technique to see if someone is infected with a virus.

You could of course do full \x[dna-sequencing][DNA Sequencing] to see everything that is there, but since it is as a more generic procedure, sequencing is more expensive and slow.

The alternative is to use a \x[dna-amplification] technique.

==== DNA amplification

https://en.wikipedia.org/wiki/Gene_amplification

DNA amplification is one of the key DNA technologies:
* it is one of the main ways in which \x[dna-detection] can be done.
* it is the first step of \x[illumina][Illumina sequencing], since you need multiple copies of several parts of the genome for the method to work

===== Polymerase chain reaction
{title2=PCR}

https://en.wikipedia.org/wiki/Polymerase_chain_reaction

This is an extremely widely used technique as of 2020 and much earlier.

If allows you to amplify "any" sequence of choice (TODO length limitations) between a start and end sequences of interest which you synthesize.

If the sequence of interest is present, it gets amplified exponentially, and you end up with a bunch of DNA at the end.

You can then measure the DNA concentration based on simple light refraction methods to see if there is a lot of DNA or not in the post-processed sample.

Even \x[ciro-santilli] had some contact with it at: \x[oxford-nanopore-river-bacteria]{full}!

One common problem that happens with PCR if you don't design your primers right is: https://en.wikipedia.org/wiki/Primer_dimer

====== Real-time polymerase chain reaction

https://en.wikipedia.org/wiki/Real-time_polymerase_chain_reaction

Also known as: Quantitative PCR (qPCR).

Like PCR, but the amplification machine measures the concentration of DNA at each step.

This describes one possible concentration detection method with fluorescent molecules that only become fluorescent when the DNA is double stranded (\a[https://en.wikipedia.org/wiki/SYBR_Green_I][SYBR Green])

\Video[http://youtube.com/watch?v=YhXj5Yy4ksQ]
{title="Polymerase Chain Reaction (PCR) - Quantitative PCR (qPCR)" published by Applied Biological Materials - abm on 2016-0428.}

This allows you to predict the exact initial concentration by extrapolating the exponential curve backwards.

TODO: vs non-real-time PCR. Why can't you just divide by 2 for every heating step to reach back the original concentration? Likely the reaction reach saturation at an unknown step.

TODO: vs non-real-time PCR in medical diagnostics: do you really need to know concentration for diagnostics? Isn't it enough to know if the virus is present or not?

===== Isothermal DNA amplification techniques

Isothermal means "at fixed temperature".

This is to contrast with the more well established \x[polymerase-chain-reaction], which requires heating and cooling the sample several times.

The obvious advantage of isothermal methods is that their machinery can be simpler and cheaper, and the process can happen faster, since you don't have to do through heating and cooling cycles.

====== Loop-mediated isothermal amplification
{title2=LAMP}

https://en.wikipedia.org/wiki/Loop-mediated_isothermal_amplification

Like PCR, but does not require thermal cycling. Thus the "isothermal" in the name: iso means same, so "same temperature".

Not needing the thermo cycling means that the equipment needed is much smaller and cheaper it seems.

Trade-offs question: https://biology.stackexchange.com/questions/92172/what-are-the-trade-offs-between-polymerase-chain-reaction-pcr-vs-loop-mediated

\Video[https://www.youtube.com/watch?v=L5zi2P4lggw]
{title="Loop Mediated Isothermal Amplification (LAMP) Tutorial" by New England Biolabs on 2015-09-01.}
{description=Explains the basic LAMP concept well.}

==== DNA sequencing

Big excitement picture at: \x[molecular-biology-technologies].

===== Metagenomics

https://en.wikipedia.org/wiki/Metagenomics

Experiments that involve sequencing bulk DNA found in a sample to determine what species are present, as opposed to sequencing just a single specific specimen. Examples of samples that are often used:
* river water to determine which bacteria are present, notably to determine is the water is free of dangerous bacteria. A concrete example is shown at: \x[oxford-nanopore-river-bacteria]{full}.
* sea water biodiversity: http://ocean-microbiome.embl.de/companion.html
* food, including searching for desirable microorganisms such as in cheese or bread yeast
* poo, e.g. to study how the human microbiome influences health. There are companies actively working on this, e.g.: https://www.microbiotica.com/

One related application which most people would not consider metagenomics, is that of finding https://en.wikipedia.org/wiki/Circulating_tumor_DNA[circulating tumor DNA] in blood to detect tumors.

===== DNA sequencing companies

====== Illumina
{c}

https://en.wikipedia.org/wiki/Illumina,_Inc.

The by far dominating DNA sequencing company of the late 2000's and 2010's due to having the smallest cost per base pair.

Illumina actually bought their 2010's dominating technology from a \x[cambridge-united-kingdom] company called \x[solexa].

To understand how Illumina's technology works basically, watch this video: \x[video-illumina-sequencing-by-synthesis].

\Video[http://youtube.com/watch?v=fCd6B5HRaZ8]
{title="Illumina Sequencing by Synthesis" published by Illumina on 2016-10-05.}
{id=video-illumina-sequencing-by-synthesis}

The key innovation of this method is the https://en.wikipedia.org/wiki/Illumina_dye_sequencing#Bridge_amplification[bridge amplification step], which produces a large amount of identical DNA strands: \x[image-bridge-amplification].

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/Cluster_Generation.png/960px-Cluster_Generation.png]
{id=image-bridge-amplification}
{title=Illustration of the bridge amplification step of Illumina's DNA sequencing.}

This step is genius because sequencing is basically a noise to signal problem, as you are trying to observe individual tiny nucleotides mixed with billions of other tiny nucleotides.

With bridge amplification, we group some of the nucleotides together, and multiply the signal millions of times for that part of the DNA.

======= Solexa
{c}

Bought by \x[illumina] https://www.reuters.com/article/us-illumina-solexa/illumina-to-buy-genome-firm-solexa-for-600-mln-idUSN1348062320061113[for 600 million in 2007 for 600 million dollars].

This is one of the prime examples of \x[europe]'s decline.

Instead of trying to dominate the sequencing market and gain trillions of dollars from it, they local British early stage investors were more than happy to get a 20x return on their small initial investments, and sold out to the Americans who will then make the real profit.

And now Solexa doesn't even have its own Wikipedia page, while Illumina is set out to be the next \x[microsoft].

Here are some good articles about the company:
* http://www.bio-itworld.com/2010/issues/sept-oct/solexa.html (\a[https://web.archive.org/web/20190411005034/http://www.bio-itworld.com/2010/issues/sept-oct/solexa.html][archive]).

Cambridge visitors can still visit the https://pantonarms.co.uk/[Panton Arms pub], which was the location of the legendary "hey we should talk" founders meeting, chosen due to its proximity to the chemistry department of the \x[university-of-cambridge].

====== Oxford Nanopore Technologies
{c}

https://en.wikipedia.org/wiki/Oxford_Nanopore_Technologies

======= Oxford Nanopore MinION
{c}

One of the sequencers made by \x[oxford-nanopore-technologies].

The device has had several updates since however, notably of the pore proteins which are present in the critical flow cell consumable.

Official documentation: https://nanoporetech.com/products/minion (\a[https://web.archive.org/web/20190825022606/https://nanoporetech.com/products/minion][archive])

The following images of the device and its peripherals were taken during the experiment: \x[oxford-nanopore-river-bacteria]{full}.

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Oxford_Nanopore_MinION_top_cropped.jpg/392px-Oxford_Nanopore_MinION_top_cropped.jpg]
{title=Oxford Nanopore MinION top}

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Oxford_Nanopore_MinION_side_cropped.jpg/191px-Oxford_Nanopore_MinION_side_cropped.jpg]
{title=Oxford Nanopore MinION side}

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Oxford_Nanopore_MinION_top_open_cropped.jpg/110px-Oxford_Nanopore_MinION_top_open_cropped.jpg]
{title=Oxford Nanopore MinION top open}

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Oxford_Nanopore_MinION_side_USB_cropped.jpg/597px-Oxford_Nanopore_MinION_side_USB_cropped.jpg]
{title=Oxford Nanopore MinION side USB}

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Oxford_nanopore_MinION_flow_cell_package.jpg/304px-Oxford_nanopore_MinION_flow_cell_package.jpg]

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Oxford_nanopore_MinION_flow_cell_front.jpg/640px-Oxford_nanopore_MinION_flow_cell_front.jpg]

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Oxford_nanopore_MinION_flow_cell_back.jpg/1024px-Oxford_nanopore_MinION_flow_cell_back.jpg]

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Oxford_nanopore_MinION_flow_cell_pipette_loading.jpg/278px-Oxford_nanopore_MinION_flow_cell_pipette_loading.jpg]

\Image[https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/Oxford_Nanopore_MinION_connected_to_a_Mac_via_USB.jpg/360px-Oxford_Nanopore_MinION_connected_to_a_Mac_via_USB.jpg]

\Video[https://upload.wikimedia.org/wikipedia/commons/transcoded/7/7e/Oxford_Nanopore_MinION_software_channels_pannel_on_Mac.webm/Oxford_Nanopore_MinION_software_channels_pannel_on_Mac.webm.480p.webm]

\Include[oxford-nanopore-river-bacteria]

==== De novo DNA synthesis

https://en.wikipedia.org/wiki/De_novo_synthesis

As of 2018, \x[ciro-santilli] believes that this could be \x[the-next-big-thing] in \x[biology] technology.

"De novo" means "starting from scratch", that is: you type the desired sequence into a computer, and the synthesize it.

The "de novo" part is important, because it distinguishes this from the already well solved problem of duplicating DNA from an existing DNA template, which is what all our cells do daily, and which can already be done very efficiently in-vitro with \x[polymerase-chain-reaction].

Many startup companies are attempting to create more efficient de novo synthesis methods:
* https://twistbioscience.com/
* https://www.evonetix.com/technology/
* http://dnascript.co/
* https://www.ansabio.com/
* https://www.nuclera.com/

Notably, the dream of most of those companies is to have a machine that sits on a lab bench, which synthesises whatever you want.

TODO current de novo synthesis costs.

===== Species bootstrapping from DNA

Synthesizing the DNA itself is not the only problem however.

You then have to get that DNA into a working living form state so that normal cell processes can continue:
* for viruses see: \x[synthetic-virus]
* for bacteria, you have to inject it into a cell
* for placental animals, you also have to somehow simulate a compatible placenta. It is likely easier for eggs.

Multicelular questions:
* https://biology.stackexchange.com/questions/8590/can-extinct-animals-be-cloned

====== Synthetic virus

* https://en.wikipedia.org/wiki/Synthetic_virology
* https://en.wikipedia.org/wiki/Genetically_modified_virus
* https://www.scientificamerican.com/article/is-it-possible-to-enginee/
* https://www.npr.org/sections/health-shots/2019/05/22/723582726/scientists-modify-viruses-with-crispr-to-create-new-weapon-against-superbugs

TODO: if we had cheap \x[de-novo-dna-synthesis], how hard would it be to bootstrap a virus culture from that? https://github.com/cirosantilli/cirosantilli.github.io/issues/60

Is it easy to https://en.wikipedia.org/wiki/Transfection[transfect] a cell with the synthesized DNA, and get it to generate full infectious viral particles?

If so, then \x[de-novo-dna-synthesis] would be very similar to 3D printed guns: https://en.wikipedia.org/wiki/3D_printed_firearms[].

It might already be possible to order dissimulated sequences online:
* https://www.theguardian.com/world/2006/jun/14/terrorism.topstories3

\Video[http://youtube.com/watch?v=dB25H7pD2jg]
{title=VICE News: "3D Printed Guns Are Easy To Make And Impossible To Stop (HBO)" published on Aug 10, 2018.}

=== Brain

https://en.wikipedia.org/wiki/Human_brain

Ah, \x[physics-and-the-illusion-of-life][the Holy Grail] of both \x[biology][biology] and \x[computer-science][computer science]!

\x[ciro-santilli] feels it is not for his generation though, and that is one of the philosophical things that saddens him the most in this world.

On the other hand, Ciro's playing with the \x[linux-kernel-module-cheat][Linux kernel] and other complex software which no single human can every fully understand cheer him up a bit. But still, the high level view, that we can have...

For now, \x[large-cohesive-game-world-for-robotic-like-artificial-intelligence-development].

=== Protein

* https://en.wikipedia.org/wiki/Protein
* https://en.wikipedia.org/wiki/Protein_(nutrient)

=== Photosynthesis

https://en.wikipedia.org/wiki/Photosynthesis

== Education

=== University

https://en.wikipedia.org/wiki/University

As of 2020, university has the following very important appplications:
* meet an \x[ciro-santilli-s-wife][intelligent wife] or have fun and or come out of the closet
* get you in debt if you are from the \x[united-states-of-america]

Or as \x[elon-musk] https://www.theguardian.com/technology/2020/mar/10/elon-musk-college-for-fun-not-learning[put it]:
\Q[I think college is basically for fun and to prove that you can do your chores, but they're not for learning]

Which is why \x[ciro-santilli] wants to destroy its current format with \x[write-free-books-to-get-famous-website]. He believes that we can find a more efficient organization to achieve both the social and research functions of university, by first doing as much as possible online

Ciro's university experiences are mentioned at: \x[ciro-santilli-s-formal-education].

=== Stuff school should actually teach

Teach in school:
* \x[having-more-than-one-natural-language-is-bad-for-the-world][English]
* https://en.wikipedia.org/wiki/NATO_phonetic_alphabet[NATO phonetic alphabet]
* https://en.wikipedia.org/wiki/Mnemonic_major_system[Mnemonic major system]

=== Ecole Polytechnique
{c}

https://en.wikipedia.org/wiki/École_Polytechnique

The "most prestigious French engineering school". Only https://en.wikipedia.org/wiki/List_of_École_Polytechnique_alumni#Nobel_laureates[3 Nobels] though as of 2019, https://en.wikipedia.org/wiki/List_of_École_normale_supérieure_people#Nobel_laureates[the scientists are mostly at ENS]. A https://www.timeshighereducation.com/student/news/where-do-worlds-top-ceos-go-university[gazillion CEOs] however.

\x[ciro-santilli] \x[ciro-santilli-s-formal-education][studied there] for a few years starting in 2010.

Ciro considers him entering at Polytechnique a small miracle. First, on his second year of \x[university-of-sao-paulo-brazil][University in Brazil], he first had to fail to join the also good but not as good https://fr.wikipedia.org/wiki/Groupe_des_%C3%89coles_centrales[École centrales], which really annoyed him as he saw the other "good students" who wanted to go out get their wish. This also explains why there are so few students from his university going to Polytechnique in the late 2010's: most already went to other locations! Then, on his third year, he tried Polytechnique and got in despite feeling that the others who got in knew much more mathematics and physics than him. Rather, Ciro believes that he got in chiefly due to his \x[write-free-books-to-get-famous-website-motivation][intense passion for the sciences] which he showed during the interview.

The miracle would have been even greater if it had happened in 2020. At this time, out of 10 Brazilians, 9 are from https://en.wikipedia.org/wiki/Instituto_Tecnológico_de_Aeronáutica[ITA], the "hardest to get into" university in Brazil, and also military like Polytechnique. Make no mistake, those students are amazing and deserve it without any doubt. But there is more to the story. It could be argued that many of them only go because they don't have any other choice of exchange program. Remember: Ciro had to fail applications on previous universities before getting into Polytech. Also, they don't get any Brazilian degree because ITA has no accords with Polytechnique, and are therefore are extremely likely to never come back. \x[what-poor-countries-have-to-do-to-get-richer][Not that Ciro thinks this is particularly bad for Brazil though]. They also happen to have closer ties across cohorts of different years, and have managed to maintain a Google Doc with scanned past examinations (as of 2020 however, http://www.brasilnax.com/material-de-preparaccedilatildeo.html[some/all of those examinations have been uploaded publicly], big thanks to them). Also almost all of them are software engineers. This lack of diversity might not be ideal: if I were France, I would rather fish around all top Brazilian schools for "the best".

Besides the amazing funding/opportunities/alumni/staff loop which you can read about elsewhere, Polytechnique is amazing because you can \x[students-must-have-a-flexible-choice-of-what-to-learn][choose what you will study every year to a very large extent].

This is in huge contrast to the crappy systems Ciro had seen e.g. in Brazil's Polytechnic School of São Paulo, where students have to decide basically all their courses in huge packages, either at university entry (thus when they are completely clueless), or at a single point inside the university studies, changes being much harder.

Life quality was also amazing. Good free accommodation on campus and at the time a no-obligations scholarship for every foreign student great sport facilities. It seems that after Ciro left however more restrictions are added to the scholarships, what a shame! Sport was mandatory due to the military nature of the school. This did have the upside of getting students together more, although Ciro is against all forced intellectual of physical activities for students.

The situation is changing however, and now not everyone gets scholarships anymore it seems, and rather those who are not poor have to pay Polytechnique scholarship fees on top of their living costs. And thus French austerity measures are undermining the greatest long term investment a country can possibly make: that of importing the very best students from other countries into yours. This after their host country has already spent 20 years raising and selecting them. And you won't even pay them 2 years of frugal existence to steal them. Even if those students move away from your country later on, the contacts they made in your country mean they are much more likely to bring businesses over.

This also makes it much more difficult for those students to do a PhD afterwards, where they would get paid very little, and are unable to pay their student debts. A PhD would be where they would possibly \x[deep-tech][bring more of the next big thing to your country]. Instead, they are much more likely to just go work for some big American company \x[software-engineer][data wrangling] and bring nothing to your country but their student debt dividends instead, which they will be pay to pay for in one year with those amazing salaries. What a big time fail, France.

During the time Ciro was at Polytechnique in early 2010's, the school was really isolated in the Palaiseau plateau, there were no shops in 10 minute walking distance! You either had to climb 300 steps to go down to the RER and the nearest town, or take a bus. The fact that https://www.timeshighereducation.com/student/best-universities/best-small-universities#survey-answer[Times Higher Education ranked it as the second best university in the world in 2019] (\a[https://web.archive.org/web/20190918230605/https://www.timeshighereducation.com/student/best-universities/best-small-universities][archive]) makes it good justice, given the small 500 student body.

Before that the school was in the center of Paris at the https://en.wikipedia.org/wiki/Latin_Quarter,_Paris[Latin Quarter], but students were in theory restricted to school grounds a lot of the time, although there are famous stories of the intentionally overlooked tree used to climb the fence to go to Parisian parties when they couldn't stand it anymore.

This made for some good memories though. The isolation favored concentration, and gave the place a mystical feeling. And then when you went to eat https://github.com/cirosantilli/china-dictatorship#restaurants--france--paris[amazing Chinese food in Paris] it just felt even more special and magic since you were so limited during the week.

Ciro also agonized about passing courses to get useless grades though! Polytechnique is hard for Brazilians, specially if you select the more mathematics oriented courses, because the French students were math brainwashed for two years before joining.

One of the only bad experience Ciro had at Polytechnique (besides the inevitable fear of not graduating) was when he wanted to do a robotics internship in Germany, but the head of the Applied Mathematics department Polytechnique prevented him from going because Ciro didn't have the necessary grades, even though the Germans had already agreed to it, because in the past students had abandoned their internships halfway and given foreigners a bad impression of Polytechnique. And thus Ciro had to choose a last moment internship that he hated, rather than becoming the greatest roboticist that ever lived, and did terribly at it. At least on the other hand Ciro learnt Python instead of working at the internship, and became \x[ciro-santilli-s-stack-overflow-contributions][the greatest programming tutorial writer that ever lived].

Ciro's favorite spots/activities:
* hide in top corner desk of the library to learn some science. Ciro loves libraries.
* \x[weekend][weekend days] in his awesome room learning Chinese

  \Image[Desk_of_Ciro_Santilli's_room_at_École_Polytechnique_as_he_as_in_the_middle_of_moving_out_in_2012.jpg]
  {description=The room also has a bed and toilet, it was great, and it was free back in those days! Only the kitchen was shared, which is good for meeting people (and for getting your password https://en.wikipedia.org/wiki/Keystroke_logging[keylogged] in the shared supplies buying system). All students live on campus, which is great for concentration.}
* sit next to the lake in a warm day to relax

  \Image[Lake_view_of_the_Grand_Hall_building_of_École_Polytechnique_in_a_cloudy_day.jpg]
  {description=Just imagine this in a perfect sunny weekend day with pure silence, it was just perfect. The lake also has a long area where rowing is practiced.}
* randomly go study at night in one of the small 20 person classrooms that were used in the day and left open at night

  \Image[https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Master_STER_Nassar_Polytechnique.jpg/640px-Master_STER_Nassar_Polytechnique.jpg]
  {title=A typical small classroom at École Polytechnique}
  {description=The tables are shown in the usual course configuration. Imagine that at night, in pure silence, with some of your best friends studying on a nearby room. The usual course configuration was first a course by the main teacher in a large amphitheater, and then break down into small groups.}

\Image[Horny_polytechnicienne_mural_by_binet_BD_96_at_École_Polytechnique_with_nipple_censored_as_seen_in_2010.jpg]
{description=Every year, student organizations, https://www.polytechnique.net/groups/binets[called "binets"] (TODO etymology), get to compete for student elections, and they are allowed to make murals in the school to advertise themselves. They kinky people from the 1996 Cartoon Binet (BD == Band Dessiné == Cartoon in French) decided to take it to the next level. Good old 1996, this would never be allowed in 2019 due to political correctness. As an engineering school, Polytechnique students were predominantly male up as of 2019.}
{height=600}

The following promotional videos give an idea of how the school looks like, although they fundamentally miss the little corners that Ciro really loved in that the place and which made it magic:
* \Video[http://youtube.com/watch?v=qr_xQVyVj9U]
  {title="Pourquoi choisir l'Ecole polytechnique" published by \x[ecole-polytechnique] on 2013-11-18.}
* \Video[http://youtube.com/watch?v=9X1yZSQE-VM]
  {title="Rentrée des élèves de la promotion 2017 du cycle ingénieur" published by \x[ecole-polytechnique] on 2017-09-18.}

=== University of São Paulo, Brazil
{id=university-of-sao-paulo-brazil}
{title2=USP}
{c}

https://en.wikipedia.org/wiki/University_of_São_Paulo

\x[ciro-santilli] \x[ciro-santilli-s-formal-education][studied there] for a few years starting in 2007.

==== São Remo, the favela next to USP
{id=sao-remo}
{c}

While in Brazil, \x[ciro-santilli] used to walk through the outskirts of a small https://en.wikipedia.org/wiki/Favela[favela] to get \x[university-of-sao-paulo-brazil][to university] every day, the the https://pt.wikipedia.org/wiki/São_Remo[Favela de São Remo].

See the street view for: https://goo.gl/maps/ZVnTjxNpsK6QPqTE9[R. Catumbi - Vila Butantã Vila Butantã, São Paulo - State of São Paulo, Brazil].

To his left, a large police station.

To the right, dudes selling drugs on the entry of a small corridor street.

The drug sellers did keep the peace in their business area, and Ciro never got robbed, and would come back from university parties on foot late through the favela.

But Ciro's friends did say that things got much worse after Ciro left, for example http://g1.globo.com/sao-paulo/noticia/2015/01/engenheiro-e-vitima-de-sequestro-relampago-na-cidade-universitaria.html[a flash kidnapping was reported in 2015].

Wikipedia says that this favela started in the 60s and 70s as settlements of the builders of the University, and that many of the people there still work for the University.

This is consistent with the terribly old buildings Ciro saw when he was at university. They even had the building skills to build their own homes.

The state just has to either legalize those people, or give them houses somewhere else nearby. A \x[what-poor-countries-have-to-do-to-get-richer][world class University is the most important thing a poor country can have], and its image cannot be jeopardized like that.

The existence of that favela, right next to one of the most important universities in Latin America, puts \x[brazil]'s surreal social inequality into perspective.

The porters of of Ciro's all lived in the favela. Yes, in poor countries lives are worth nothing, and some poorer people work by watching the entrance of buildings of less poor people 24/7 to guard it from other even more desperate poor people who might want to rob the not so poor inhabitants.

They were incredibly nice hard-working people, and Ciro spoke often with them. If only given the opportunity, those people could be amazing engineers or scientists obviously.

They had "nothing" but were still happy. This is true wisdom, and a good reminder \x[buddhism][that all our non-transhumanist technical goals are nothing].

=== University of Cambridge
{c}

https://en.wikipedia.org/wiki/University_of_Cambridge

Located in \x[cambridge-united-kingdom].

Second largest number of \x[nobel-prize] as of 2019, need on say more? https://en.wikipedia.org/w/index.php?title=List_of_Nobel_laureates_by_university_affiliation&oldid=934987075
* \x[paul-dirac]

=== Pierre and Marie Curie University
{title2=UPMC}

https://en.wikipedia.org/wiki/Pierre_and_Marie_Curie_University

=== The Royal Society
{c}

https://en.wikipedia.org/wiki/Royal_Society

They do two things:
* make a closed source science journal with insantely high https://en.wikipedia.org/wiki/Impact_factor[impact factor] as of 2019
* gamify science by letting (mostly \x[united-kingdom][mostly British]) dudes like Newton and \x[paul-dirac] add \x[post-nominal-letters][some random letters] after their real names to show off

==== Post nominal letters

https://en.wikipedia.org/wiki/Post-nominal_letters

One of \x[ciro-santilli-s-selfish-desires].

== Religion

\x[ciro-santilli] is agnostic, see also: https://github.com/cirosantilli/china-dictatorship/tree/965430af9f50a93ac23dfbb72719eee0f93c8c5c#do-you-believe-in-or-practice-falun-gong

=== Buddhism
{c}

https://en.wikipedia.org/wiki/Buddhism

\x[ciro-santilli]'s favorite religion. He does not believe fully in it, nor has he studied it besides through brief Wikipedia and \x[google][Googling].

Ciro likes Buddhism because it feels like the least "metaphysical explanations to things you can't see" of the religions he knows.

Rather, it feels more like "a plausible theory of the mind" and \x[physics-and-the-illusion-of-life][highly compatible with physics].

Ciro also believes that there is a positive correlation between being a \x[software-engineer][software engineer] and liking \x[buddhism][Buddhist-like things], see also: \x[the-correlation-between-software-engineers-and-buddhism].

==== Alan Watts
{c}

https://en.wikipedia.org/wiki/Alan_Watts

While listening to endless hours of https://en.wikipedia.org/wiki/Vaporwave[Vaporwave] while coding, \x[ciro-santilli] spotted some amazing Buddhist-like voice samples, and eventually found that they were by Allan Watts.

Is there a correlation between being a \x[software-engineer][programmer] and liking the dude? Because this exists: https://wattsalan.github.io/

Other good talks:
* \x[video-alan-watts-wuwei-talk]
* \x[video-alan-watts-if-money-were-no-object-what-would-you-do-talk]
* \x[video-alan-watts-how-to-turn-work-into-play-talk]
* \x[video-alan-watts-philosopher-talk]
* \x[alan-watts-controlled-dream-of-life-talk]

== Weekend

Days of the week where you don't do what you set out to do. And yet, it is in those days that you save your sanity, and possibly the world. Wait, this sounds exactly like a week day?

\Image[https://web.archive.org/web/20200718073243if_/https://pbs.twimg.com/media/DWObYfMU0AAgJJP?format=jpg&name=small]
{title=Calvin and Hobbes "Oh No! I overslept! I gotta get up!" cartoon.}
{source=https://twitter.com/calvinn_hobbes/status/964785603467395072}

== Fusion power

https://en.wikipedia.org/wiki/Fusion_power

\x[fusion-power-could-be-the-next-big-thing]{c}.

Most promising approach as of 2020: \x[magnetic-confinement-fusion].

=== Magnetic confinement fusion

https://en.wikipedia.org/wiki/ITER

Once again, relies on \x[superconductivity] to reach insane magnetic fields. Superconductivity is just so important.

== Technology

https://en.wikipedia.org/wiki/Technology

=== Deep tech

https://en.wikipedia.org/wiki/Deep_tech

\x[ciro-santilli] is a fan of this late 2010's buzzword.

It basically came about because of the endless stream of useless software startups made since the 2000's by one or two people with no investments with the continued increase in computers and Internet speeds \x[moore-s-law][until the great wall was reached].

Deep tech means not one of those. More specifically, it means technologies that require significant investment in expensive materials and laboratory equipment to progress, such as \x[molecular-biology-technologies] and \x[quantum-computing].

And it basically comes down to technologies that wrestle with the fundamental laws of \x[physics] rather than software data wrangling.

\x[computer]{c}{p} are of course limited by the laws of physics, but those are much hidden by several layers of indirection.

Full visibility, and full control, make computer tasks be tasks that eventually always work out more or less as expected.

The same does not hold true when real Physics is involved.

Physics is brutal.

To start with, you can't even see your system very clearly, and often doing so requires altering its behaviour.

For example, in molecular biology, most great discoveries are made after some new technique is made to be able to observe smaller things.

But you often have to kill your cells to make those observations, which makes it very hard to understand how they work dynamically.

What we would really want would be to track every single protein as it goes about inside the cell. But that is likely an impossible dream.

The same for the brain. If we had observations of every neuron, how long would it take to understand it? Not long, people are really good at \x[reverse-engineering] things when there is enough information available to do so, see also \x[science-is-the-reverse-engineering-of-nature].

Then, even when you start to see the system, you might have a very hard time controlling it, because it is so fragile. This is basically the case of quantum computing in 2020.

It is for those reasons that deep tech is so exciting.

The \x[the-next-big-thing][next big things] will come from deep tech. Failure is always a possibility, and you can't know before you try.

But that's also why its so fun to dare.

=== Reverse engineering

https://en.wikipedia.org/wiki/Reverse_engineering

This is what society gets for not using \x[open-knowledge]: some of its best minds will be bound to waste endless hours reversing some useless technology.

With that said, even when you do have the source code, reading run logs and using \x[debugger]{p} are a sort of reverse engineering at heart.

==== Science is the reverse engineering of nature

How \x[software-engineer][software engineers] view science:
\Q[Science is the \x[reverse-engineering] of nature.]

\x[ciro-santilli] had once assigned this as one of \x[ciro-santilli-s-best-random-thoughts], but he later found that Wikipedia actually says exactly that: https://en.wikipedia.org/wiki/Reverse_engineering ("similar to scientific research, the only difference being that scientific research is about a natural phenomenon") so maybe that is where Ciro picked it up unconsciously in the first place.

== War

=== National Security Agency
{title2=NSA}
{c}

https://en.wikipedia.org/wiki/National_Security_Agency

== Law

https://en.wikipedia.org/wiki/Law

=== License

https://en.wikipedia.org/wiki/License

==== Creative commons license

https://en.wikipedia.org/wiki/Creative_Commons_license

==== Software license

https://en.wikipedia.org/wiki/Software_license

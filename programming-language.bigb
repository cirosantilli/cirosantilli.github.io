= Programming language
{wiki}

A language that allows you to talk and command a \x[computer].

There is only space for two languages at most in the world: the \x[compiled-programming-language][compiled] one, and the \x[interpreted-programming-language][interpreted] one.

For 2020 now, when you have a choice, you must go for:
* \x[python] as the interpreted one
* \x[c-plus-plus] for compiled

Those two are languages not by any means perfect from a language design point of view, and there are likely already better alternatives, they are only chosen due to a pragmatic tradeoff between ecosystem and familiarity.

Python in particular has a lot of annoying stuff, which other languages do better. Ciro predicts that Python will become like Fortran in the future: a legacy hated by most who have moved to \x[javascript] long ago, but with too much dominance in certain applications like machine learning to be worth replacing, like Fortran dominates certain HPC applications.

\x[c-plus-plus] however is decent, and is evolving in very good directions in the 2010's, and will remain relevant in the foreseeable future.

\x[bash] can also be used when you're lazy. But if the project goes on, you will sooner or later regret that choice.

The language syntax in itself does not matter. All that matters is how many useful libraries and tooling it has.

This is how other languages compare:
* \x[c-programming-language][C]: but cannot make a large codebase \x[dry] without insanity
* \x[ruby-programming-language][Ruby]: the exact same as Python, and only strong in one domain: \x[web-development], while Python rules everything else, and is not bad on web either. So just kill Ruby, please.
* \x[javascript]: it is totally fine if \x[node-js] destroys \x[python] and becomes the ONE scripting language to rule them all since Python and JavaScript are almost equally crappy (although JavaScript is a bit more of course).

  One thing must be said tough: `someobject.not_defined_property` silently returning `undefined` rather than blowing up is \x[bullshit].
* \x[go-language]: likely a good replacement for \x[python]. If the ecosystem gets there, will gladly use it more.
* \x[java]: good language, but has an ugly enterprisey ecosystem, Oracle has made/kept the development process too closed, and https://en.wikipedia.org/wiki/Google_v._Oracle_America[API patenting madness on Android just kills if off completely]
* \x[haskell]: many have tried to learn some functional stuff, but too hard. Sounds really cool though.
* Rust: sounds cool, you will gladly replace C and C++ with it if the ecosystem ramps up.
* C#: \x[microsoft-windows][Microsoft] is \x[evil]
* \x[tcl], \x[perl-programming-language]: Python killed them way back and is less insane
* R, GNU Octave and any other "\x[numerical-computing-language]": all of this is a waste of society's time as explained at: \x[numerical-computing-language]{full}
* Swift: Ciro would rather stay away from \x[apple] dominated projects if possible since they sell a \x[closed-source] \x[operating-system]

= Programming languages without a decent dominating package system
{parent=programming-language}

\x[c-programming-language]{child} and \x[c-plus-plus]{child}: OK, you're old before the Internet and compiled, forgiven.

\x[python]{child}: OMG, please, just make it work!!! Your are interpreted!!! You are a hot web technology!!! \x[node-js] and \x[ruby-programming-language] are doing just fine, and Ruby is not newer than you!!! See also: \x[pip-package-manager].

= Compiled vs interpreted programming language
{parent=programming-language}

= Compiled programming language
{parent=programming-language}

= Interpreted programming language
{parent=programming-language}

Interestingly, the very first programming language with an actual implementation was interpreted: \x[short-code-programming-language] in 1950.

This is not surprising, as interpreters are easier to write than compilers.

And just like modern scripting languages, it reduced execution speed by about 50x.

= List of programming languages
{parent=programming-language}

= Adobe Flash
{c}
{parent=list-of-programming-languages}
{wiki}

= Bash
{c}
{disambiguate=Unix shell}
{parent=list-of-programming-languages}

= Bash
{c}
{synonym}

The more heavily a project relies on it, the more you start to regret it.

= C
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{title2=1972}
{wiki=C++}

It gets the job done, but cannot make a large codebase DRY without insanity.

As of 2020, C is like \x[latin], and we are in the \x[middle-ages], where it has become a \x[lingua-franca].

It is interesting to note how late C appeared: 1972, compared e.g. to \x[fortran] which is from 1957. This is basically because C was a "systems programming language", i.e. with focus on pointer manipulation, and because early computers were so weak, there was no operating system or many software layers in the early days. Fortran however was a numerical language, and it ran directly on bare metal, an application that existed before systems programming.

= ANSI C
{c}
{parent=c-programming-language}
{wiki}

= C++
{c}
{parent=list-of-programming-languages}
{wiki}

C plus plus is what you get when you want to have all of:
* ability to write DRY code, which is e.g. impossible in the \x[c-programming-language]
* low level control, notably not having \x[garbage-collection], as possible in the \x[c-programming-language]
* somewhat backwards compatibility with \x[c-programming-language]

= C#
{c}
{id=c-sharp}
{parent=list-of-programming-languages}
{wiki=C_Sharp_(programming_language)}

= Fortran
{c}
{parent=list-of-programming-languages}
{wiki}

= Go
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

= Go
{c}
{disambiguate=language}
{synonym}

Likely a good replacement for \x[python]. If the ecosystem gets there, \x[ciro-santilli] would gladly use it more.

= Haskell
{c}
{parent=list-of-programming-languages}
{wiki}

There are only two pre-requisites to using Haskell in 2020. You have to be an \x[idealist]. And you have to be a genius:
* https://youtu.be/d8nzFqoEOvE?list=PLAJnaovHtaFTK9E1xHnBWZeKtAOhonqH5&t=558 \x[ben-goertzel]

= Java
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

= Java
{c}
{synonym}

= Java program
{c}
{parent=java-programming-language}

= JavaScript
{c}
{parent=list-of-programming-languages}
{wiki}

The language all browsers converted to as of 2019, and therefore the easiest one to distribute and most widely implemented programming language.

Hopefully will be killed by https://en.wikipedia.org/wiki/WebAssembly[WebAssembly] one day.

Because JavaScript is a relatively crap/ad-hoc language, it ended up some decent tooling to make up for that, e.g. stuff like linting via ESLint and reformatting through Prettier is much more widespread than in other languages.

JavaScript data structure are also quite a bit anemic, which makes libraries such as lodash incredibly popular. But most of that stuff should be in the stdlib.

Cheat:
* \a[web-cheat/js-image-load.html]: load an image from JavaScript dynamically: https://stackoverflow.com/questions/226847/what-is-the-best-javascript-code-to-create-an-img-element
* \a[web-cheat/js-image-load-viewport.html]: load an image from JavaScript dynamically when it would become visible on the viewport: https://stackoverflow.com/questions/2321907/how-do-you-make-images-load-only-when-they-are-in-the-viewport
* \a[web-cheat/image-load-lazy.html]: https://stackoverflow.com/questions/2321907/how-do-you-make-images-load-lazily-only-when-they-are-in-the-viewport/57389607#57389607
* \a[web-cheat/esm.html]: ESM modules
  * \a[web-cheat/esm1.js]
  * \a[web-cheat/esm2.js]
* \a[web-cheat/keydown.html]
  * https://stackoverflow.com/questions/16006583/capturing-ctrlz-key-combination-in-javascript

= Client-side storage
{parent=javascript}

https://www.google.com/search?q=client-side+storage&oq=Client-side+storage&aqs=chrome.0.0l3j0i22i30l4j69i60.88j0j7&client=ubuntu&sourceid=chrome&ie=UTF-8

= Clear client-side storage
{parent=client-side-storage}

= Clear client-side storage on Chromium
{parent=clear-client-side-storage}

* https://superuser.com/questions/366483/how-to-delete-cookies-for-a-specific-site
* https://superuser.com/questions/722498/what-is-the-fastest-way-to-clear-cache-and-cookies-in-google-chrome

= Emscripten
{c}
{parent=javascript}
{wiki}

= JavaScript library
{parent=javascript}

= Babel
{c}
{disambiguate=transcompiler}
{parent=javascript-library}
{wiki}

= JavaScript bi-directional communication library
{parent=javascript-library}
{tag=push-technology}

* https://stackoverflow.com/questions/30419455/server-side-data-push-for-web-services
* https://stackoverflow.com/questions/52146670/bi-directional-communication-between-server-and-client

= Socket.IO
{c}
{parent=javascript-library}
{wiki}

= JavaScript is single threaded
{c}
{parent=javascript}

\x[node-js] does have \x[node-js-worker-threads] however.

= JavaScript language
{c}
{parent=javascript}

= `async`
{disambiguate=JavaScript}
{parent=javascript-language}

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function

`async` is all present in \x[javascript] for two reasons:
* you make network requests all the time
* JavaScript is single threaded, so if you are waiting for a network request, the UI freezes, see remarks on the deprecation of synchronous HTTP request at: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests

However, it is also \x[hell]: \x[how-to-convert-async-to-sync-in-javascript].

= How to convert `async` to sync in JavaScript
{parent=async-javascript}

God, it's impossible! You just have to convert the entire fucking call stack all the way up to async functions.

* https://stackoverflow.com/questions/21819858/how-to-wrap-async-function-calls-into-a-sync-function-in-node-js-or-javascript
* https://stackoverflow.com/questions/9121902/call-an-asynchronous-javascript-function-synchronously
* https://stackoverflow.com/questions/47227550/using-await-inside-non-async-function
* https://stackoverflow.com/questions/43832490/is-it-possible-to-use-await-without-async-in-js
* https://stackoverflow.com/questions/6921895/synchronous-delay-in-code-execution

And then, after many many hours of this work, you might notice that the new code is way, way way slower than before, because making small functions `async` has a large performance impact: https://madelinemiller.dev/blog/javascript-promise-overhead/[]. Real world case with a 4x slowdown: https://github.com/cirosantilli/ourbigbook/tree/async-slow[].

= Node.js
{c}
{parent=javascript}
{wiki}

Wellhttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync], if you are gonna usehttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-jsp[Sync] this \x[javascript][wonky language] thing inhttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync] one place, you might as well usehttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync] it everywherehttps://stackoverflow.com/questions/8775262/synchronous-requests-in-node-js[Sync] and make it more decent. See also: \x[how-to-convert-async-to-sync-in-javascript].

Their CLI debugger is a bit crap compared to GDB, basic functionality is either lacking or too verbose:
* https://stackoverflow.com/questions/65493221/how-to-break-at-a-specific-function-or-line-with-the-node-js-node-inspect-comman
* https://stackoverflow.com/questions/70486188/how-to-break-on-uncaught-exception-on-the-node-js-node-inspect-command-line-debu Some operations are only possible on the browser debug UI...
Documentation at: https://nodejs.org/dist/latest-v16.x/docs/api/debugger.html

= Node.js library
{c}
{parent=node-js}

= Node.js standard library
{c}
{parent=node-js-library}

= Node.js `worker_threads`
{c}
{parent=node-js-standard-library}

= Node.js database bindings
{parent=node-js-library}

* \x[node-js-sqlite-bindings]

= Node.js ORM library
{parent=node-js-library}
{tag=object-relational-mapping}

\Include[sequelize]

= Node.js web framework
{c}
{parent=node-js}

= Express.js
{c}
{parent=node-js-web-framework}

This doesn't do a hole lot. \x[ciro-santilli] wouldn't really call it a web framework. It's more like a middleware. Real web frameworks are built on top of it.

Examples under: \a[nodejs/express]:
* \a[nodejs/express/min.js]: minimal example. Visit http://localhost:3000 and it shows `hello world`. It is a bit wrong because the headers say HTML but we return plaintext.
* \a[nodejs/express/index.js]: example dump with automated tests where possible. The automated tests are run at startup after the server launches. Then the server keeps running so you can interact with it.

A live example on \x[heroku] can be seen at: https://github.com/cirosantilli/heroku-node-min

= Realworld app written in Express
{c}
{parent=express-js}

\x[gothinkster-realworld] implementations based on \x[express-js].

= gothinkster/node-express-realworld-example-app
{parent=realworld-app-written-in-express}

https://github.com/gothinkster/node-express-realworld-example-app

= sigoden/node-express-realworld-example-app
{parent=realworld-app-written-in-express}

Appears to be a port of \x[gothinkster-node-express-realworld-example-app] to \x[sequelize].

Seemed to just work at 68bbadfd77f679f0df0fcd0de5bceb9c37b1144a Ubuntu 20.10, was forked from parent project in 2018.

= Varun-Hegde/Conduit_NodeJS
{parent=realworld-app-written-in-express}

Very raw. Easy to understand. Relatively well organiezd. But also very buggy at 3ab8d9f849a1cdf2985a8d123b1893f0fd4e79ab: https://github.com/Varun-Hegde/Conduit_NodeJS/issues/3[], I just can't trust it. There must be several helper libraries that would greatly DRY up the repetitive CRUD. Ciro hates the style :-) 4 space indents, no space after commas, no semicolon. Not based on https://github.com/gothinkster/node-express-realworld-example-app[] which is essentially one of the reference implementations, so from scratch apparently, which is a bad sign.

= FeathersJS
{c}
{parent=node-js-web-framework}

* https://feathersjs.com
* https://github.com/feathersjs/feathers
* https://stackoverflow.com/questions/tagged/feathersjs

Looks interesting.

It seems to abstract the part about the client messaging the backend, which focuses on being able to easily plug in a number of \x[front-end-web-framework] to manage client state.

Has the "main web \x[api] is the same as the REST API" focus, which is fundamental 2020-nowadays.

Uses \x[socket-io], which allows the client Javascript to register callbacks when data is updated to achieve \x[socket-io], e.g. their default chat app does:
``
client.service('messages').on('created', addMessage);
``
so that message appear immediately as they are sent.

Their standard template from `feathers generate app` on `@feathersjs/cli@4.5.0` includes:
* several authentication methods, including \x[oauth]
* testing
* backend \x[database] with one of several \x[object-relational-mapping]! However, they don't abstract across them. E.g., the default Chat example uses NeDB, but a real app will likely use \x[sequelize], and a \x[port-software-portability] is needed
which looks promising! They don't have a default template for a \x[front-end-web-framework] however unfortunately: https://docs.feathersjs.com/guides/frameworks.html#the-feathers-chat lists a few chat app versions, which is their \x[hello-world]:
* \x[front-end-web-framework]: not built-in on generator, but there are some sample repos pointed from the documentation, and they did work out-of-box:
  * \x[feathers-chat-react]
But it is in itself a completely boring app with a single splash page, and no database interaction, so not a good showcase. The actual showcase app is \x[feathersjs-feathers-chat].

And there is no official example of the chat app that is immediately deployable to \x[heroku]: \x[feathersjs-heroku-deployment], all setups require thinking.

Global source entrypoint: determine on `package.json` as usual, defaults to `src/index.js`.

= FeatherJS demo apps
{c}
{parent=feathersjs}

https://github.com/feathersjs/awesome-feathersjs#projects-using-feathers

= feathersjs/feathers-chat
{c}
{parent=featherjs-demo-apps}

https://github.com/feathersjs/feathers-chat

The main \x[feathersjs] \x[hello-world] demo. Notable missing things...
* instant \x[heroku] deployability: \x[feathersjs-heroku-deployment]
* no \x[front-end-web-framework] which sucks, but there are basically official demos that worked e.g. \x[feathers-chat-react]
* \x[feathersjs-signup-email-verification]

= feathers-chat PostgreSQL
{c}
{parent=feathersjs-feathers-chat}

The default feathers-chat app runs on NeDB (local filesystem \x[json] database).

\x[ciro-santilli] managed to port it to \x[sequelize] for \x[postgresql] as shown at: https://github.com/cirosantilli/feathers-chat/tree/sequelize-pg

= feathers-chat-react
{c}
{parent=feathersjs-feathers-chat}

https://github.com/feathersjs-ecosystem/feathers-chat-react

Last updated 2018 as of 2021, but still just worked.

Also uses \x[webpack] which is fantastic.

Gotta run https://github.com/feathersjs/feathers-chat[] first: https://github.com/feathersjs-ecosystem/feathers-chat-react/issues/5[], then it worked:
``
git clone https://github.com/feathersjs/feathers-chat
cd feathers-chat
git checkout fd729a47c57f9e6170cc1fa23cee0c84a004feb5
npm install
npm start
``
and on the other terminal:
``
git clone https://github.com/feathersjs-ecosystem/feathers-chat-react
cd feathers-chat-react
git checkout 36d56cbe80bbd5596f6a108b1de9db343b33dac3
npm install
npm start
``
then visit http://localhost:3000/ and you can create an account and login, tested on Ubuntu 20.10. Data is stored on persistently.

TODO how to merge those two repos into a single repo.

If you \x[disable-javascript-on-chromium], it stops working completely. There is a section on how to solve that at: https://docs.feathersjs.com/cookbook/express/view-engine.html[] but it does not cover React specifically. \x[codaisseur-feathersjs-react-redux-ssr] might be good to look into.

= Codaisseur/feathersjs-react-redux-ssr
{c}
{parent=featherjs-demo-apps}

https://github.com/Codaisseur/feathersjs-react-redux-ssr

Also \x[webpack] and \x[babel-transcompiler], looks promising!

As of 2021, last commit from 2017.

Running:
``
git clone https://github.com/Codaisseur/feathersjs-react-redux-ssr
cd feathersjs-react-redux-ssr
npm install
``
failed on Ubuntu 20.10 \x[node-js] v14.15.3 with:
``
../src/create_string.cpp:17:37: error: no matching function for call to ‘v8::String::Utf8Value::Utf8Value(v8::Local<v8::Value>&)’
   17 |   v8::String::Utf8Value string(value);
      |                                     ^
``
Likely similar \x[bullshit] from: https://stackoverflow.com/questions/50111688/node-sqlite-node-gyp-build-error-no-member-named-forceset-in-v8object because the Node.js version is too new.

If I try `nvm install v10`

I \x[google] error messages until reaching:
``
diff --git a/gulpfile.js b/gulpfile.js
index b931e06..24d2cc8 100644
--- a/gulpfile.js
+++ b/gulpfile.js
@@ -14,34 +14,34 @@ gulp.task('css', function() {
            .pipe(gulp.dest('./dist'))
 })
 
-gulp.task('css:watch', ['css'], function() {
+gulp.task('css:watch', gulp.series('css', function() {
   gulp.watch('app/styles/**/*.sass', ['css'])
-})
+}))
 
 gulp.task('moveAssets', function() {
   return gulp.src('./app/assets/**/*')
              .pipe(gulp.dest('./dist/assets'))
 })
 
-gulp.task('build:revAssets', ['css', 'moveAssets'], function() {
+gulp.task('build:revAssets', gulp.series('css', 'moveAssets', function() {
   var rev = new $.revAll()
   return gulp.src('./dist/**/*')
              .pipe(rev.revision())
              .pipe(gulp.dest('./dist/public'))
              .pipe(rev.manifestFile())
              .pipe(gulp.dest('./dist'))
-})
+}))
 
 gulp.task('build:cpServer', function() {
   return gulp.src('./app/**/*.{js,ejs}')
              .pipe(gulp.dest('./dist/server-build'))
 })
-gulp.task('build:revServer', ['build:cpServer'], function() {
+gulp.task('build:revServer', gulp.series('build:cpServer', function() {
   var manifest = gulp.src('./dist/rev-manifest.json')
   return gulp.src('./dist/server-build/{components,containers}/**/*')
              .pipe($.revReplace({ manifest: manifest }))
              .pipe(gulp.dest('./dist/server-build'))
-})
+}))
 
 gulp.task('build', function() {
   runSequence('build:revAssets', 'build:revServer')
diff --git a/package.json b/package.json
index bcb29c3..86bd593 100644
--- a/package.json
+++ b/package.json
@@ -67,7 +67,7 @@
     "redux-thunk": "^0.1.0",
     "request": "^2.79.0",
     "rewire": "^2.3.4",
-    "run-sequence": "^1.2.2",
+    "run-sequence": "^2.2.1",
     "serve-favicon": "^2.3.2",
     "socket.io-client": "^1.7.2",
     "superagent": "^1.4.0",
@@ -86,16 +86,16 @@
     "concurrently": "^2.0.0",
     "cross-env": "^1.0.7",
     "enzyme": "^2.3.0",
-    "gulp": "^3.9.0",
+    "gulp": "^4.0.2",
     "gulp-autoprefixer": "^3.1.0",
     "gulp-load-plugins": "^1.2.0",
     "gulp-rev": "^6.0.1",
-    "gulp-sass": "^2.1.1",
+    "gulp-sass": "4.1.0",
     "gulp-sourcemaps": "^1.6.0",
     "jsdom": "^7.0.1",
     "mocha": "^2.4.5",
     "nock": "^2.17.0",
-    "node-sass": "^3.4.2",
+    "node-sass": "^5.0.0",
     "nodemon": "^1.6.0",
     "react-addons-test-utils": "^15.3.2",
     "react-transform-catch-errors": "^1.0.0",
``
and the next problem is: https://stackoverflow.com/questions/48513573/gulp-error-gulp-hastask-is-not-a-function

= randyscotsmithey/feathers-realworld-example-app
{parent=featherjs-demo-apps}

\x[feathersjs] entry for \x[gothinkster-realworld].

\x[mongodb]-based.

So once you install MongoDB, run with:
``
MONGODB_FEATHERS_REALWORLD=mongodb://localhost:27017/mydb npm start
``

Got it working on \x[ubuntu] 20.10 with both \x[react] and \x[vue-js] front-ends at https://github.com/randyscotsmithey/feathers-realworld-example-app/commit/8bc3a09242285de624c75bb8345630df499a7d07[] as mentioned at https://github.com/randyscotsmithey/feathers-realworld-example-app/issues/2 except for bad error reporting on UI.

Tests can be run with:
``
MONGODB_FEATHERS_REALWORLD=mongodb://localhost:27017/mydb npm run test
``
but there were 10 failures and 55 passes: https://github.com/randyscotsmithey/feathers-realworld-example-app/issues/3

= FeathersJS Heroku deployment
{c}
{parent=feathersjs}

Got it working as mentioned at: https://github.com/cirosantilli/feathers-chat/tree/sequelize-pg

One major step was to \x[port-software-portability] to \x[postgresql] as shown at \x[feathers-chat-postgresql].

Bibliography:
* https://stackoverflow.com/questions/47270219/deploy-feathersjs-app-on-heroku/66723974#66723974
* https://github.com/feathersjs/feathers/issues/1647
* https://medium.com/@mattchewone/feathersjs-deployment-gitlab-ci-cd-heroku-4ea9e34ab129

There's also a `heroku` branch at: https://github.com/feathersjs/feathers-chat/tree/heroku[], but it also seems to use NeDB? So you can have a filesystem in Heroku? Doesn't seem so: https://stackoverflow.com/questions/42775418/heroku-local-persistent-storage

= FeathersJS signup email verification
{c}
{parent=feathersjs}

* https://github.com/feathersjs/feathers/issues/1514
* https://blog.feathersjs.com/how-to-setup-email-verification-in-feathersjs-72ce9882e744

= Meteor
{c}
{disambiguate=web framework}
{parent=node-js-web-framework}

https://github.com/meteor/meteor

The idea is cool. It really unifies front-and back end.

But \x[ciro-santilli] feels the approach proposed by \x[feathersjs] of being a glue between bigger third-party \x[front-end-web-framework]{p} like \x[react] and backend (\x[object-relational-mapping]) is more promising and flexible.

= Nest.js
{c}
{parent=node-js-web-framework}

* https://github.com/lujakob/nestjs-realworld-example-app
* \x[object-relational-mapping]: https://docs.nestjs.com/techniques/database
* \x[front-end-web-framework]: looks weak:
  * https://github.com/yemiwebby/nest-react-project

= lujakob/nestjs-realworld-example-app
{c}
{parent=nest-js}

\x[nest-js] entry for \x[gothinkster-realworld].

Didn't manage to get it to work perfectly on \x[ubuntu] 20.10: https://github.com/lujakob/nestjs-realworld-example-app/issues/57

= lujakob/nestjs-realworld-example-app SQLite port
{parent=lujakob-nestjs-realworld-example-app}

Tried a quick port to \x[sqlite] to get rid of annoying local databases for development, but failed, at c1c2cc4e448b279ff083272df1ac50d20c3304fa
``
npm install sqlite3 --save-dev
``
and
``
{
  "type": "sqlite",
  "database": "db.sqlite3",
  "entities": ["src/**/**.entity{.ts,.js}"],
  "synchronize": true
}
``
then:
``
npm start
``
fails with:
``
DataTypeNotSupportedError: Data type "timestamp" in "ArticleEntity.created" is not supported by "sqlite" database.
``
Attempt to hack it:
``
--- a/src/article/article.entity.ts
+++ b/src/article/article.entity.ts
@@ -20,10 +20,10 @@ export class ArticleEntity {
   @Column({default: ''})
   body: string;

-  @Column({ type: 'timestamp', default: () => "CURRENT_TIMESTAMP"})
+  @Column({ default: () => "CURRENT_TIMESTAMP"})
   created: Date;

-  @Column({ type: 'timestamp', default: () => "CURRENT_TIMESTAMP"})
+  @Column({ default: () => "CURRENT_TIMESTAMP"})
   updated: Date;
``
and after that it seems to run.

I can signup and login, terrible error reporting as usual, make sure to use long enough usernames/passwords.

However, article creation fails with:
``
Unhandled Rejection (TypeError): Cannot read property 'slug' of undefined
``

= Sails.js
{c}
{parent=node-js-web-framework}

https://github.com/balderdashy/sails

\x[front-end-web-framework] integration: no native one:
* \x[react]:
  * https://github.com/markmur/sails-react-webpack
  * https://github.com/sepineda/sails-react-webpack Last updated as of 2021: 2018
  * https://stackoverflow.com/questions/28331032/sails-js-with-react-js-how-to-do-it-correctly
* \x[vue-js]:
  * https://github.com/mikermcneil/ration Issue tracker disabled...
    * live at: https://ration.io/
    * selling a course at: https://courses.platzi.com/courses/sails-js/
  * https://platzi.com/cursos/javascript-pro/ non-free and in Spanish pointed to from official README...
  * \x[nuxt-js]:
    * https://github.com/AngelMunoz/sails-nuxt

TODO \x[server-side-rendering] anyone??
* https://stackoverflow.com/questions/32412590/how-to-use-react-js-to-render-server-side-template-on-sails-js
* https://stackoverflow.com/questions/54217147/ssr-for-react-redux-application-with-sails
* https://gist.github.com/duffpod/746a660bcddfd986878c92dde1a04f06
* https://www.reddit.com/r/reactjs/comments/7saoqm/sailsjs_or_adonisjs_designed_for_server_side/

= NVM
{c}
{parent=node-js}

https://github.com/nvm-sh/nvm

The best way to install Node.js:
* https://askubuntu.com/questions/49390/how-do-i-install-the-latest-version-of-node-js/425888#425888
* https://askubuntu.com/questions/594656/how-to-install-the-latest-versions-of-nodejs-and-npm/971612#971612
* https://askubuntu.com/questions/426750/how-can-i-update-my-nodejs-to-the-latest-version/1115255#1115255

= TypeScript
{c}
{parent=javascript}
{wiki}

TypeScript is good. It does find errors in your \x[javascript]. But it is a form of "turd polishing". But \x[ciro-santilli] would rather have a polished turd than a non-polished one.

Part of the reason TypeScript became popular is due to the universality of \x[asset-bundler]{p}. Once you are already using an asset bundler, changing the `.js` extension into `.ts` to get a less shitty experience is an easy choice.

The other big reason is that JavaScript is so lose with type conversions, notably undefined happily converting to strings without problems, and any missing properties of Object happily being undefined. We should actually use ES6 Map everywhere.

Since TypeScript is not the default form of the language however, it inevitably happens that you need to add external types for a gazillion projects that are using raw JavaScript, and sometimes fight a lot to get things to work. And so we have: https://github.com/DefinitelyTyped/DefinitelyTyped[]. Not sure if this is beautiful, or frightening.

But in the end, as with other type of static linters, TypeScript generally transforms a few hard to debug runtime issues, into a bunch of stupid to solve compile time issues, which is generally a good thing.

Examples under \a[typescript]. Run with `npx example.ts`.
* \a[typescript/inferFromInit.ts]. Should fail with:
  \Q[hello.ts:2:1 - error TS2322: Type 'string' is not assignable to type 'number]
  since TypeScript infers the type of `i` from first assignment as `string`, and we then attempt a `number` assignment later on
* \a[typescript/inferAfterInit.ts]. Does not fail, as the first assignment cannot be computationally determined at runtime without breaking computer science.
* \a[typescript/js-from-ts/main.ts]: call \x[javascript] file \a[typescript/js-from-ts/notmain.js] from \x[typescript].
  ``
  npx tsc jsFromTs.ts && node jsFromTs.js
  ``
  TODO we are unable to make it typecheck that require, i.e. make that fail, but we've seen cases in complex codebases where that did happen and https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html has infinite information on supporting it. So... how to make it fail??

Some major annoyances of TypeScript:
* https://stackoverflow.com/questions/12710905/how-do-i-dynamically-assign-properties-to-an-object-in-typescript how to dynamically assign properties to objects without defining explicit interfaces? We really need a syntax of type:
  ``
  const myobj = {
    i: 2,
    [s string],
  }
  if (something) {
    myobj.s = 'asdf'
  }
  ``

= Universal Module Definition
{c}
{parent=javascript}
{title2=UMD}
{wiki}

Since \x[javascript] devs are uncapable of defining an unified import standard, this design pattern emerged where you just check every magic global one by one. Here's a demo where a Js library works on both the \x[browser] and from \x[node-js]:
* \a[web-cheat/umd_my_lib.js]: the library
* \a[web-cheat/umd.js]: \x[node-js] user
* \a[web-cheat/umd.html]: \x[browser] user

= Perl
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

TODO why did \x[python] kill it? They are very similar and existed at similar times, and possibly Perl was more popular early on.
* https://www.quora.com/Why-is-Perl-no-longer-a-popular-programming-language on \x[quora]

Perl likely killed \x[tcl].

= Python
{c}
{disambiguate=programming language}
{parent=list-of-programming-languages}
{wiki}

= Python
{c}
{synonym}

\x[ciro-santilli-s-wife] was studying a bit of basic Python for some job interviews, when she noticed:
\Q[Wow, `in` is so powerful! You can do `for x in list`, `for x in dict` and `if x in dict` all with that single word!]
Damn right, girl, damn right.

Ciro remembers hearing about \x[python] online briefly. It seemed like a distant thing from the \x[java]/\x[c-programming-language] dominated (and outdated) university courses. Then some teaching assistant mentioned during some course when Ciro was at \x[ecole-polytechnique] that Python was a great integration tool. That sounded cool.

Then finally, \x[when-the-ecole-polytechnique-mathematics-department-didn-t-let-ciro-santilli-do-his-internship-of-choice-due-to-grades] and Ciro was at an useless last moment backup internship, he learned more Python instead of doing his internship job, and was hooked.

= pip
{disambiguate=package manager}
{parent=python-programming-language}
{wiki}

How many stupid bugs. How many stupid bugs do we need to face???
* this fucking train-wreck cannot come up with a unified documented way of specifying dependencies:
  * https://stackoverflow.com/questions/14399534/reference-requirements-txt-for-the-install-requires-kwarg-in-setuptools-setup-py
  * https://stackoverflow.com/questions/26900328/install-dependencies-from-setup-py
  * https://stackoverflow.com/questions/30797124/how-to-use-setup-py-to-install-dependencies-only/63743115
  * https://stackoverflow.com/questions/6947988/when-to-use-pip-requirements-file-versus-install-requires-in-setup-py
  So basically `requirements.txt` is the `package-lock.json`. But how to generate it cleanly? You would need to create a virtualenv?
* `pip search` was disabled in 2020: https://stackoverflow.com/questions/17373473/how-do-i-search-for-an-available-python-package-using-pip[]. WTF. If server load is a problem, just create a token system! It is hard to understand how such a popular language can't rais enough money to keep such simple server functionality running.

= Python Package Index
{c}
{parent=python-programming-language}
{wiki}

= PyPI
{c}
{synonym}

https://pypi.org

The best package ever is: https://pypi.org/project/china-dictatorship/ see also: https://cirosantilli.com/china-dictatorship/mirrors

= Jupyter Notebook
{c}
{parent=python-programming-language}
{wiki=Project_Jupyter#Jupyter_Notebook}

A waste of time. Output in my source files https://stackoverflow.com/questions/28908319/how-to-clear-an-ipython-notebooks-output-in-all-cells-from-the-linux-terminal/47774393#47774393[pollutes git] and prevents me from editing it in \x[vim]. Just let me run the freacking code and render images as standalone PNGs which I can include from Markdown.

= Python virtualization
{parent=python-programming-language}

= pyenv
{c}
{parent=python-virtualization}

= virtualenv
{parent=python-virtualization}

``
python -m pip install --user virtualenv
virtualenv -p python3.8 .venv
. .venv/bin/activate
``

= Python library
{c}
{parent=python-programming-language}

= NumPy
{c}
{parent=python-library}
{wiki}

The people who work on this will \x[good][go straight to heaven], no questions asked.

= Python web framework
{c}
{parent=python-library}

= Django
{c}
{disambiguate=web-framework}
{parent=python-web-framework}
{wiki}

\x[react] setups:
* https://stackoverflow.com/questions/41867055/how-to-get-django-and-reactjs-to-work-together
* https://www.fullstackpython.com/react.html

One problem with Django is that it does not expose its \x[orm] as an external library: https://stackoverflow.com/questions/33170016/how-to-use-django-1-8-5-orm-without-creating-a-django-project which is wasteful of development time.

= gothinkster/django-realworld-example-app
{parent=django-web-framework}

As of 2021, last updated 2016, and python 3.5 appears to be mandatory or else:
``
RuntimeError: __class__ not set defining 'AbstractBaseUser' as <class 'django.contrib.auth.base_user.AbstractBaseUser'>. Was __classcell__ propagated to type.__new__?
``
which apparently broke in 3.6: https://stackoverflow.com/questions/41343263/provide-classcell-example-for-python-3-6-metaclass and `pyenv` install fails on Ubuntu 20.10, so... fuck. Workarounds at:
* https://askubuntu.com/questions/1034475/the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib-error-when
* https://stackoverflow.com/questions/52873193/error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib-inst
but am I in the mood considering that the ancient Django version would require an immediate port anyways? Repo is at Django 1.0, while newest is now already Django 3. The Rails one is broken for the same reason. Fuck 2.

= Ruby
{disambiguate=programming language}
{parent=list-of-programming-languages}
{c}
{wiki}

= Ruby on Rails
{parent=ruby-programming-language}
{c}
{wiki}

The only reason why \x[ruby-programming-language] exists.

This web framework is pretty good as of 2020 compared to others, because it managed to gain a critical community size, and there's a lot of basic setup already done for you.

it is just big shame it wasn't written in \x[python] or even better, \x[node-js], because learning \x[ruby-programming-language] is completely useless for anything else. As of 2020 for example, most \x[node-js] web frameworks feel like crap compared to Rails, you just have to debug so much there.

Used in \x[gitlab], which is why \x[ciro-santilli] touched it.

= Ruby on Rails React integration
{c}
{parent=ruby-on-rails}

Integrations \x[react] integration:
* https://github.com/shakacode/react_on_rails[]: \x[webpack] and \x[server-side-rendering]
* https://github.com/reactjs/react-rails Official on the React side only. Demo app linked from package: https://github.com/BookOfGreg/react-rails-example-app and how it fails: https://github.com/BookOfGreg/react-rails-example-app/issues/30[]... The related projects section has some good links:
* \x[shakacode-react-on-rails]
* https://github.com/hyperstack-org/hyperstack \x[transpiles] Ruby to JavaScript + React. What could possibly go wrong? :-)

= shakacode/react_on_rails
{parent=ruby-on-rails-react-integration}

Uses Redux, while reactjs/react-rails appears to do that more manually

Lots of focus on \x[heroku] deployability, which is fantastic: https://shakacode.gitbooks.io/react-on-rails/content/docs/additional-reading/heroku-deployment.html

Live instance: https://www.reactrails.com/ with source at: https://github.com/shakacode/react-webpack-rails-tutorial Not the most advanced web-app (a \x[gothinkster-realworld]-level would be ideal). Also has clear dependency description, which is nice.

Trying at https://github.com/shakacode/react-webpack-rails-tutorial/tree/8e656f97d7a311bbe999ceceb9463b8479fef9e2 on \x[ubuntu] 20.10. Got some failures: https://github.com/shakacode/react-webpack-rails-tutorial/issues/488 Finally got a version of it working at: https://github.com/shakacode/react-webpack-rails-tutorial/issues/488#issuecomment-812506821

Oh, and the guy behind that project lives in \x[hawaii] (\x[ciro-santilli-s-ideal-city-to-live-in]), has an Asian-mixed son, and two \x[kinesis-advantage-2-keyboard]{p} as seen at https://twitter.com/railsonmaui/status/1377515748910755851[], \x[ciro-santilli] was jealous of him.

= Short Code
{c}
{disambiguate=programming-language}
{parent=list-of-programming-languages}
{title2=1950}
{wiki=Short_Code_(computer_language)}

= Tcl
{c}
{parent=list-of-programming-languages}
{wiki}

One of the first big \x[interpreted-programming-language]{p} to go a bit further than \x[bash]' word replacement insanity.

To the modern viewer, it feels like a middle ground between \x[bash] and \x[python].

It was completely insane however, and it just died: \x[python] is much saner, and \x[bash], although totally insane still \x[code-golf][golfs] better, especially on the file manipulation context.
